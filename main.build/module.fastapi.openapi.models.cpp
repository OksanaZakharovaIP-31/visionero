/* Generated code for Python module 'fastapi.openapi.models'
 * created by Nuitka version 1.8.4
 *
 * This code is in part copyright 2023 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_fastapi$openapi$models" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_fastapi$openapi$models;
PyDictObject *moduledict_fastapi$openapi$models;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[248];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[248];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(PyThreadState *tstate) {
    if (constants_created == false) {
        loadConstantsBlob(tstate, &mod_consts[0], UNTRANSLATE("fastapi.openapi.models"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 248; i++) {
            mod_consts_hash[i] = DEEP_HASH(tstate, mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(PyThreadState *tstate) {
    createModuleConstants(tstate);
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_fastapi$openapi$models(PyThreadState *tstate) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 248; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(tstate, mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_06fea91e0e513f4a51ced046994fa1f1;
static PyCodeObject *codeobj_cd8f5a24c7697b1506cb744a260b29e0;
static PyCodeObject *codeobj_e86f088703b54923e512c46648737853;
static PyCodeObject *codeobj_05284d199480ca0080b8ce2833da5f62;
static PyCodeObject *codeobj_43082fa01a7481eddaee874dccc14828;
static PyCodeObject *codeobj_0431819fa67337e38020d738864f15e5;
static PyCodeObject *codeobj_94996a2e8b790b06591b9cbec09e0c39;
static PyCodeObject *codeobj_022a0ebb8ffe16a978c447866871d151;
static PyCodeObject *codeobj_e9eaceb8163131038f5d432c3ea7a288;
static PyCodeObject *codeobj_06eadba4109df7d3a304198003b00a0d;
static PyCodeObject *codeobj_70cf0a1ea985143eba6c85c033939d9b;
static PyCodeObject *codeobj_9d522d71dee56bd424bbdb7f1efece26;
static PyCodeObject *codeobj_66f1e88fbde6db268b6a0d193fb8b6f0;
static PyCodeObject *codeobj_5e3c16519effce84ba03d86b9588bca6;
static PyCodeObject *codeobj_bd3a337f5959c302b618f1a52d7977e4;
static PyCodeObject *codeobj_36d24845ffbb070ee400e99e6440c958;
static PyCodeObject *codeobj_7c0da8d767a751f27842279ef14aeca7;
static PyCodeObject *codeobj_369256e42dfc35a9b57cd00cd0030dc3;
static PyCodeObject *codeobj_295fd3f79bafc9c9498eacbf20742a0e;
static PyCodeObject *codeobj_40c1bbe8ed4ce3289e98e17510f17d65;
static PyCodeObject *codeobj_ebadb7363bdb9a15988de8b91424d005;
static PyCodeObject *codeobj_21a2dc32c6852624402bab4898d21ddf;
static PyCodeObject *codeobj_7036a73a4b1dc9d00155f5ec6292a40a;
static PyCodeObject *codeobj_e49298b42ee48632b79c94cf0b931db0;
static PyCodeObject *codeobj_62b5706d1793d4f1b37c75c20a94c727;
static PyCodeObject *codeobj_ab97e3b19146bc7dc8df1f07630e7e1b;
static PyCodeObject *codeobj_b4b21b132864ee67fe231b7ac3700a34;
static PyCodeObject *codeobj_3c18260b4fc67f6d451803e9ae97a350;
static PyCodeObject *codeobj_649ab6816638af9825ad768a923fcabc;
static PyCodeObject *codeobj_a2d9d220b6cbb1921be2c723996e0bd8;
static PyCodeObject *codeobj_55289a302310e40cd469f1e1fc6a1aa8;
static PyCodeObject *codeobj_a50f604eb61ab730c32e1c2e8b7389ca;
static PyCodeObject *codeobj_a288d43541c2ed432369b0388672c0cc;
static PyCodeObject *codeobj_2f976bc1fc62f51ff41fbd9a05b54602;
static PyCodeObject *codeobj_aebaf65a7e2810e7ac2517dd24379607;
static PyCodeObject *codeobj_80604c164a6135846117777da9201bbb;
static PyCodeObject *codeobj_8a02f9a46e545c2ebd896dc5ee13c293;
static PyCodeObject *codeobj_c86a8edf7093ead3d5ea76e95b2d4d73;
static PyCodeObject *codeobj_f4569b09d1bb7682065b8454b2841222;
static PyCodeObject *codeobj_594e973395c34fbbae2605a54f71f300;
static PyCodeObject *codeobj_3ea942064a9c8d9579a0579f45b3df0a;
static PyCodeObject *codeobj_d96e01bc3a7cfefc742264450f8f10f7;
static PyCodeObject *codeobj_271402221976ae612dfd74b103a9538c;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[242]); CHECK_OBJECT(module_filename_obj);
    codeobj_06fea91e0e513f4a51ced046994fa1f1 = MAKE_CODE_OBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[243], mod_consts[243], NULL, NULL, 0, 0, 0);
    codeobj_cd8f5a24c7697b1506cb744a260b29e0 = MAKE_CODE_OBJECT(module_filename_obj, 300, CO_NOFREE, mod_consts[200], mod_consts[200], mod_consts[244], NULL, 0, 0, 0);
    codeobj_e86f088703b54923e512c46648737853 = MAKE_CODE_OBJECT(module_filename_obj, 294, CO_NOFREE, mod_consts[199], mod_consts[199], mod_consts[244], NULL, 0, 0, 0);
    codeobj_05284d199480ca0080b8ce2833da5f62 = MAKE_CODE_OBJECT(module_filename_obj, 364, CO_NOFREE, mod_consts[228], mod_consts[228], mod_consts[244], NULL, 0, 0, 0);
    codeobj_43082fa01a7481eddaee874dccc14828 = MAKE_CODE_OBJECT(module_filename_obj, 141, CO_NOFREE, mod_consts[57], mod_consts[57], mod_consts[244], NULL, 0, 0, 0);
    codeobj_0431819fa67337e38020d738864f15e5 = MAKE_CODE_OBJECT(module_filename_obj, 28, CO_NOFREE, mod_consts[49], mod_consts[49], mod_consts[244], NULL, 0, 0, 0);
    codeobj_94996a2e8b790b06591b9cbec09e0c39 = MAKE_CODE_OBJECT(module_filename_obj, 79, CO_NOFREE, mod_consts[79], mod_consts[79], mod_consts[244], NULL, 0, 0, 0);
    codeobj_022a0ebb8ffe16a978c447866871d151 = MAKE_CODE_OBJECT(module_filename_obj, 14, CO_NOFREE, mod_consts[33], mod_consts[33], mod_consts[244], NULL, 0, 0, 0);
    codeobj_e9eaceb8163131038f5d432c3ea7a288 = MAKE_CODE_OBJECT(module_filename_obj, 162, CO_NOFREE, mod_consts[141], mod_consts[141], mod_consts[244], NULL, 0, 0, 0);
    codeobj_06eadba4109df7d3a304198003b00a0d = MAKE_CODE_OBJECT(module_filename_obj, 145, CO_NOFREE, mod_consts[131], mod_consts[131], mod_consts[244], NULL, 0, 0, 0);
    codeobj_70cf0a1ea985143eba6c85c033939d9b = MAKE_CODE_OBJECT(module_filename_obj, 95, CO_NOFREE, mod_consts[89], mod_consts[89], mod_consts[244], NULL, 0, 0, 0);
    codeobj_9d522d71dee56bd424bbdb7f1efece26 = MAKE_CODE_OBJECT(module_filename_obj, 306, CO_NOFREE, mod_consts[202], mod_consts[202], mod_consts[244], NULL, 0, 0, 0);
    codeobj_66f1e88fbde6db268b6a0d193fb8b6f0 = MAKE_CODE_OBJECT(module_filename_obj, 311, CO_NOFREE, mod_consts[204], mod_consts[204], mod_consts[244], NULL, 0, 0, 0);
    codeobj_5e3c16519effce84ba03d86b9588bca6 = MAKE_CODE_OBJECT(module_filename_obj, 45, CO_NOFREE, mod_consts[61], mod_consts[61], mod_consts[244], NULL, 0, 0, 0);
    codeobj_bd3a337f5959c302b618f1a52d7977e4 = MAKE_CODE_OBJECT(module_filename_obj, 37, CO_NOFREE, mod_consts[59], mod_consts[59], mod_consts[244], NULL, 0, 0, 0);
    codeobj_36d24845ffbb070ee400e99e6440c958 = MAKE_CODE_OBJECT(module_filename_obj, 219, CO_NOFREE, mod_consts[163], mod_consts[163], mod_consts[244], NULL, 0, 0, 0);
    codeobj_7c0da8d767a751f27842279ef14aeca7 = MAKE_CODE_OBJECT(module_filename_obj, 173, CO_NOFREE, mod_consts[149], mod_consts[149], mod_consts[244], NULL, 0, 0, 0);
    codeobj_369256e42dfc35a9b57cd00cd0030dc3 = MAKE_CODE_OBJECT(module_filename_obj, 351, CO_NOFREE, mod_consts[223], mod_consts[223], mod_consts[244], NULL, 0, 0, 0);
    codeobj_295fd3f79bafc9c9498eacbf20742a0e = MAKE_CODE_OBJECT(module_filename_obj, 316, CO_NOFREE, mod_consts[207], mod_consts[207], mod_consts[244], NULL, 0, 0, 0);
    codeobj_40c1bbe8ed4ce3289e98e17510f17d65 = MAKE_CODE_OBJECT(module_filename_obj, 336, CO_NOFREE, mod_consts[216], mod_consts[216], mod_consts[244], NULL, 0, 0, 0);
    codeobj_ebadb7363bdb9a15988de8b91424d005 = MAKE_CODE_OBJECT(module_filename_obj, 332, CO_NOFREE, mod_consts[215], mod_consts[215], mod_consts[244], NULL, 0, 0, 0);
    codeobj_21a2dc32c6852624402bab4898d21ddf = MAKE_CODE_OBJECT(module_filename_obj, 324, CO_NOFREE, mod_consts[211], mod_consts[211], mod_consts[244], NULL, 0, 0, 0);
    codeobj_7036a73a4b1dc9d00155f5ec6292a40a = MAKE_CODE_OBJECT(module_filename_obj, 328, CO_NOFREE, mod_consts[213], mod_consts[213], mod_consts[244], NULL, 0, 0, 0);
    codeobj_e49298b42ee48632b79c94cf0b931db0 = MAKE_CODE_OBJECT(module_filename_obj, 341, CO_NOFREE, mod_consts[217], mod_consts[217], mod_consts[244], NULL, 0, 0, 0);
    codeobj_62b5706d1793d4f1b37c75c20a94c727 = MAKE_CODE_OBJECT(module_filename_obj, 389, CO_NOFREE, mod_consts[235], mod_consts[235], mod_consts[244], NULL, 0, 0, 0);
    codeobj_ab97e3b19146bc7dc8df1f07630e7e1b = MAKE_CODE_OBJECT(module_filename_obj, 356, CO_NOFREE, mod_consts[225], mod_consts[225], mod_consts[244], NULL, 0, 0, 0);
    codeobj_b4b21b132864ee67fe231b7ac3700a34 = MAKE_CODE_OBJECT(module_filename_obj, 241, CO_NOFREE, mod_consts[173], mod_consts[173], mod_consts[244], NULL, 0, 0, 0);
    codeobj_3c18260b4fc67f6d451803e9ae97a350 = MAKE_CODE_OBJECT(module_filename_obj, 201, CO_NOFREE, mod_consts[158], mod_consts[158], mod_consts[244], NULL, 0, 0, 0);
    codeobj_649ab6816638af9825ad768a923fcabc = MAKE_CODE_OBJECT(module_filename_obj, 183, CO_NOFREE, mod_consts[155], mod_consts[155], mod_consts[244], NULL, 0, 0, 0);
    codeobj_a2d9d220b6cbb1921be2c723996e0bd8 = MAKE_CODE_OBJECT(module_filename_obj, 155, CO_NOFREE, mod_consts[136], mod_consts[136], mod_consts[244], NULL, 0, 0, 0);
    codeobj_55289a302310e40cd469f1e1fc6a1aa8 = MAKE_CODE_OBJECT(module_filename_obj, 260, CO_NOFREE, mod_consts[177], mod_consts[177], mod_consts[244], NULL, 0, 0, 0);
    codeobj_a50f604eb61ab730c32e1c2e8b7389ca = MAKE_CODE_OBJECT(module_filename_obj, 75, CO_NOFREE, mod_consts[75], mod_consts[75], mod_consts[244], NULL, 0, 0, 0);
    codeobj_a288d43541c2ed432369b0388672c0cc = MAKE_CODE_OBJECT(module_filename_obj, 210, CO_NOFREE, mod_consts[161], mod_consts[161], mod_consts[244], NULL, 0, 0, 0);
    codeobj_2f976bc1fc62f51ff41fbd9a05b54602 = MAKE_CODE_OBJECT(module_filename_obj, 231, CO_NOFREE, mod_consts[170], mod_consts[170], mod_consts[244], NULL, 0, 0, 0);
    codeobj_aebaf65a7e2810e7ac2517dd24379607 = MAKE_CODE_OBJECT(module_filename_obj, 103, CO_NOFREE, mod_consts[91], mod_consts[91], mod_consts[244], NULL, 0, 0, 0);
    codeobj_80604c164a6135846117777da9201bbb = MAKE_CODE_OBJECT(module_filename_obj, 286, CO_NOFREE, mod_consts[195], mod_consts[195], mod_consts[244], NULL, 0, 0, 0);
    codeobj_8a02f9a46e545c2ebd896dc5ee13c293 = MAKE_CODE_OBJECT(module_filename_obj, 279, CO_NOFREE, mod_consts[190], mod_consts[190], mod_consts[244], NULL, 0, 0, 0);
    codeobj_c86a8edf7093ead3d5ea76e95b2d4d73 = MAKE_CODE_OBJECT(module_filename_obj, 66, CO_NOFREE, mod_consts[72], mod_consts[72], mod_consts[244], NULL, 0, 0, 0);
    codeobj_f4569b09d1bb7682065b8454b2841222 = MAKE_CODE_OBJECT(module_filename_obj, 57, CO_NOFREE, mod_consts[69], mod_consts[69], mod_consts[244], NULL, 0, 0, 0);
    codeobj_594e973395c34fbbae2605a54f71f300 = MAKE_CODE_OBJECT(module_filename_obj, 380, CO_NOFREE, mod_consts[233], mod_consts[233], mod_consts[244], NULL, 0, 0, 0);
    codeobj_3ea942064a9c8d9579a0579f45b3df0a = MAKE_CODE_OBJECT(module_filename_obj, 84, CO_NOFREE, mod_consts[82], mod_consts[82], mod_consts[244], NULL, 0, 0, 0);
    codeobj_d96e01bc3a7cfefc742264450f8f10f7 = MAKE_CODE_OBJECT(module_filename_obj, 16, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[245], NULL, 1, 0, 0);
    codeobj_271402221976ae612dfd74b103a9538c = MAKE_CODE_OBJECT(module_filename_obj, 20, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[1], mod_consts[1], mod_consts[246], NULL, 2, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators__(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyThreadState *tstate, PyObject **python_pars);


static PyObject *MAKE_FUNCTION_fastapi$openapi$models$$$function__1___get_validators__(PyObject *annotations);


static PyObject *MAKE_FUNCTION_fastapi$openapi$models$$$function__2_validate(PyObject *annotations);


// The module function definitions.
static PyObject *impl_fastapi$openapi$models$$$function__1___get_validators__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_cls = Nuitka_Cell_New1(python_pars[0]);
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_cls;
        Py_INCREF(tmp_closure_1[0]);

        tmp_return_value = MAKE_GENERATOR_fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators__(tmp_closure_1);

        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}



#if 1
struct fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___locals {
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
};
#endif

static PyObject *fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___context(PyThreadState *tstate, struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

#if 1
    // Heap access.
    struct fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___locals *generator_heap = (struct fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___locals *)generator->m_heap_storage;
#endif

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(tstate, codeobj_d96e01bc3a7cfefc742264450f8f10f7, module_fastapi$openapi$models, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_m_frame->m_type_description == NULL);
    generator->m_frame = cache_m_frame;
    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

    Nuitka_SetFrameGenerator(generator->m_frame, (PyObject *)generator);

    assert(generator->m_frame->m_frame.f_back == NULL);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackGeneratorCompiledFrame(tstate, generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2);

    // Store currently existing exception as the one to publish again when we
    // yield or yield from.
    STORE_GENERATOR_EXCEPTION(tstate, generator);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if (Nuitka_Cell_GET(generator->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[0]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(tstate, generator_heap->exception_value);

            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_2 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[1]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_expression_value_2, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_expression_value_2, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_yield_result_1 = yield_return_value;
        Py_DECREF(tmp_yield_result_1);
    }

    // Release exception attached to the frame
    DROP_GENERATOR_EXCEPTION(generator);



    goto frame_no_exception_1;
    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(tstate, generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[0]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TYPE_F(generator));
#endif
    Py_CLEAR(EXC_VALUE_F(generator));
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif
#endif

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;


    return NULL;

    function_exception_exit:

    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(tstate, generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators__(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___context,
        module_fastapi$openapi$models,
        mod_consts[2],
#if PYTHON_VERSION >= 0x350
        mod_consts[3],
#endif
        codeobj_d96e01bc3a7cfefc742264450f8f10f7,
        closure,
        1,
#if 1
        sizeof(struct fastapi$openapi$models$$$function__1___get_validators__$$$genobj__1___get_validators___locals)
#else
        0
#endif
    );
}


static PyObject *impl_fastapi$openapi$models$$$function__2_validate(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[0];
    PyObject *par_v = python_pars[1];
    struct Nuitka_FrameObject *frame_271402221976ae612dfd74b103a9538c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_271402221976ae612dfd74b103a9538c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_271402221976ae612dfd74b103a9538c)) {
        Py_XDECREF(cache_frame_271402221976ae612dfd74b103a9538c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_271402221976ae612dfd74b103a9538c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_271402221976ae612dfd74b103a9538c = MAKE_FUNCTION_FRAME(tstate, codeobj_271402221976ae612dfd74b103a9538c, module_fastapi$openapi$models, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_271402221976ae612dfd74b103a9538c->m_type_description == NULL);
    frame_271402221976ae612dfd74b103a9538c = cache_frame_271402221976ae612dfd74b103a9538c;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_271402221976ae612dfd74b103a9538c);
    assert(Py_REFCNT(frame_271402221976ae612dfd74b103a9538c) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[4]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[4]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_271402221976ae612dfd74b103a9538c->m_frame.f_lineno = 21;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tstate,
            tmp_called_instance_1,
            mod_consts[5],
            PyTuple_GET_ITEM(mod_consts[6], 0)
        );

        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT(par_v);
        tmp_unicode_arg_1 = par_v;
        tmp_return_value = BUILTIN_UNICODE1(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_271402221976ae612dfd74b103a9538c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_271402221976ae612dfd74b103a9538c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_271402221976ae612dfd74b103a9538c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_271402221976ae612dfd74b103a9538c,
        type_description_1,
        par_cls,
        par_v
    );


    // Release cached frame if used for exception.
    if (frame_271402221976ae612dfd74b103a9538c == cache_frame_271402221976ae612dfd74b103a9538c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_271402221976ae612dfd74b103a9538c);
        cache_frame_271402221976ae612dfd74b103a9538c = NULL;
    }

    assertFrameObject(frame_271402221976ae612dfd74b103a9538c);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_fastapi$openapi$models$$$function__1___get_validators__(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_fastapi$openapi$models$$$function__1___get_validators__,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[3],
#endif
        codeobj_d96e01bc3a7cfefc742264450f8f10f7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_fastapi$openapi$models,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_fastapi$openapi$models$$$function__2_validate(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_fastapi$openapi$models$$$function__2_validate,
        mod_consts[1],
#if PYTHON_VERSION >= 0x300
        mod_consts[47],
#endif
        codeobj_271402221976ae612dfd74b103a9538c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_fastapi$openapi$models,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(PyThreadState *tstate, char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_fastapi$openapi$models[] = {
    impl_fastapi$openapi$models$$$function__1___get_validators__,
    impl_fastapi$openapi$models$$$function__2_validate,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        PyThreadState *tstate = PyThreadState_GET();

        SET_CURRENT_EXCEPTION_TYPE0_STR_STATE(tstate, PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_fastapi$openapi$models;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        PyThreadState *tstate = PyThreadState_GET();

        SET_CURRENT_EXCEPTION_TYPE0_STR(tstate, PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = MAKE_TUPLE_EMPTY(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = MAKE_TUPLE_EMPTY(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && HAS_ERROR_OCCURRED(tstate)) {
        return NULL;
    }

    if (offset > sizeof(functable_fastapi$openapi$models) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR_STATE(tstate, PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!HAS_ERROR_OCCURRED(tstate));

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!HAS_ERROR_OCCURRED(tstate));
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!HAS_ERROR_OCCURRED(tstate));

    PyCodeObject *code_object = MAKE_CODE_OBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        function_name, // TODO: function_qualname
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_fastapi$openapi$models[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_fastapi$openapi$models,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_fastapi$openapi$models(PyThreadState *tstate, PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("fastapi.openapi.models");

    // Store the module for future use.
    module_fastapi$openapi$models = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants(tstate);

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("fastapi.openapi.models: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader(tstate);

#if PYTHON_VERSION >= 0x300
        patchInspectModule(tstate);
#endif

#endif

        /* The constants only used by this module are created now. */
        NUITKA_PRINT_TRACE("fastapi.openapi.models: Calling createModuleConstants().\n");
        createModuleConstants(tstate);

        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initfastapi$openapi$models\n");

    moduledict_fastapi$openapi$models = MODULE_DICT(module_fastapi$openapi$models);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(tstate, loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_fastapi$openapi$models,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_fastapi$openapi$models,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[247]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_fastapi$openapi$models,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_fastapi$openapi$models,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_fastapi$openapi$models,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_fastapi$openapi$models);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

    UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, _spec_from_module, module_fastapi$openapi$models);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(tstate, spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *outline_59_var___class__ = NULL;
    PyObject *outline_60_var___class__ = NULL;
    PyObject *outline_61_var___class__ = NULL;
    PyObject *outline_62_var___class__ = NULL;
    PyObject *tmp_Components$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Components$class_creation_1__prepared = NULL;
    PyObject *tmp_Contact$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Contact$class_creation_1__prepared = NULL;
    PyObject *tmp_Encoding$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Encoding$class_creation_1__prepared = NULL;
    PyObject *tmp_Example$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Example$class_creation_1__prepared = NULL;
    PyObject *tmp_ExternalDocumentation$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_ExternalDocumentation$class_creation_1__prepared = NULL;
    PyObject *tmp_Info$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Info$class_creation_1__prepared = NULL;
    PyObject *tmp_License$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_License$class_creation_1__prepared = NULL;
    PyObject *tmp_Link$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Link$class_creation_1__prepared = NULL;
    PyObject *tmp_MediaType$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_MediaType$class_creation_1__prepared = NULL;
    PyObject *tmp_OAuthFlow$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_OAuthFlow$class_creation_1__prepared = NULL;
    PyObject *tmp_OAuthFlows$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_OAuthFlows$class_creation_1__prepared = NULL;
    PyObject *tmp_OpenAPI$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_OpenAPI$class_creation_1__prepared = NULL;
    PyObject *tmp_Operation$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Operation$class_creation_1__prepared = NULL;
    PyObject *tmp_ParameterBase$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_ParameterBase$class_creation_1__prepared = NULL;
    PyObject *tmp_PathItem$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_PathItem$class_creation_1__prepared = NULL;
    PyObject *tmp_RequestBody$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_RequestBody$class_creation_1__prepared = NULL;
    PyObject *tmp_Response$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Response$class_creation_1__prepared = NULL;
    PyObject *tmp_Schema$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Schema$class_creation_1__prepared = NULL;
    PyObject *tmp_SecurityBase$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_SecurityBase$class_creation_1__prepared = NULL;
    PyObject *tmp_Server$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Server$class_creation_1__prepared = NULL;
    PyObject *tmp_ServerVariable$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_ServerVariable$class_creation_1__prepared = NULL;
    PyObject *tmp_Tag$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Tag$class_creation_1__prepared = NULL;
    PyObject *tmp_XML$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_XML$class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    struct Nuitka_FrameObject *frame_06fea91e0e513f4a51ced046994fa1f1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    struct Nuitka_ExceptionStackItem exception_preserved_1;
    PyObject *locals_fastapi$openapi$models$$$class__1_EmailStr_14 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_022a0ebb8ffe16a978c447866871d151_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_fastapi$openapi$models$$$class__2_Contact_28 = NULL;
    struct Nuitka_FrameObject *frame_0431819fa67337e38020d738864f15e5_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__3_Config_33 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *locals_fastapi$openapi$models$$$class__4_License_37 = NULL;
    struct Nuitka_FrameObject *frame_bd3a337f5959c302b618f1a52d7977e4_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__5_Config_41 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *locals_fastapi$openapi$models$$$class__6_Info_45 = NULL;
    struct Nuitka_FrameObject *frame_5e3c16519effce84ba03d86b9588bca6_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__7_Config_53 = NULL;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *locals_fastapi$openapi$models$$$class__8_ServerVariable_57 = NULL;
    struct Nuitka_FrameObject *frame_f4569b09d1bb7682065b8454b2841222_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__9_Config_62 = NULL;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *locals_fastapi$openapi$models$$$class__10_Server_66 = NULL;
    struct Nuitka_FrameObject *frame_c86a8edf7093ead3d5ea76e95b2d4d73_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__11_Config_71 = NULL;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *locals_fastapi$openapi$models$$$class__12_Reference_75 = NULL;
    struct Nuitka_FrameObject *frame_a50f604eb61ab730c32e1c2e8b7389ca_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *locals_fastapi$openapi$models$$$class__13_Discriminator_79 = NULL;
    struct Nuitka_FrameObject *frame_94996a2e8b790b06591b9cbec09e0c39_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *locals_fastapi$openapi$models$$$class__14_XML_84 = NULL;
    struct Nuitka_FrameObject *frame_3ea942064a9c8d9579a0579f45b3df0a_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__15_Config_91 = NULL;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95 = NULL;
    struct Nuitka_FrameObject *frame_70cf0a1ea985143eba6c85c033939d9b_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__17_Config_99 = NULL;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *locals_fastapi$openapi$models$$$class__18_Schema_103 = NULL;
    struct Nuitka_FrameObject *frame_aebaf65a7e2810e7ac2517dd24379607_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__19_Config_141 = NULL;
    struct Nuitka_FrameObject *frame_43082fa01a7481eddaee874dccc14828_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *locals_fastapi$openapi$models$$$class__20_Example_145 = NULL;
    struct Nuitka_FrameObject *frame_06eadba4109df7d3a304198003b00a0d_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__21_Config_151 = NULL;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *locals_fastapi$openapi$models$$$class__22_ParameterInType_155 = NULL;
    struct Nuitka_FrameObject *frame_a2d9d220b6cbb1921be2c723996e0bd8_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *locals_fastapi$openapi$models$$$class__23_Encoding_162 = NULL;
    struct Nuitka_FrameObject *frame_e9eaceb8163131038f5d432c3ea7a288_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__24_Config_169 = NULL;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *locals_fastapi$openapi$models$$$class__25_MediaType_173 = NULL;
    struct Nuitka_FrameObject *frame_7c0da8d767a751f27842279ef14aeca7_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__26_Config_179 = NULL;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *locals_fastapi$openapi$models$$$class__27_ParameterBase_183 = NULL;
    struct Nuitka_FrameObject *frame_649ab6816638af9825ad768a923fcabc_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__28_Config_197 = NULL;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *locals_fastapi$openapi$models$$$class__29_Parameter_201 = NULL;
    struct Nuitka_FrameObject *frame_3c18260b4fc67f6d451803e9ae97a350_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *locals_fastapi$openapi$models$$$class__30_Header_206 = NULL;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *locals_fastapi$openapi$models$$$class__31_RequestBody_210 = NULL;
    struct Nuitka_FrameObject *frame_a288d43541c2ed432369b0388672c0cc_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__32_Config_215 = NULL;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *locals_fastapi$openapi$models$$$class__33_Link_219 = NULL;
    struct Nuitka_FrameObject *frame_36d24845ffbb070ee400e99e6440c958_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__34_Config_227 = NULL;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *locals_fastapi$openapi$models$$$class__35_Response_231 = NULL;
    struct Nuitka_FrameObject *frame_2f976bc1fc62f51ff41fbd9a05b54602_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__36_Config_237 = NULL;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *locals_fastapi$openapi$models$$$class__37_Operation_241 = NULL;
    struct Nuitka_FrameObject *frame_b4b21b132864ee67fe231b7ac3700a34_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__38_Config_256 = NULL;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *locals_fastapi$openapi$models$$$class__39_PathItem_260 = NULL;
    struct Nuitka_FrameObject *frame_55289a302310e40cd469f1e1fc6a1aa8_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__40_Config_275 = NULL;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279 = NULL;
    struct Nuitka_FrameObject *frame_8a02f9a46e545c2ebd896dc5ee13c293_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *locals_fastapi$openapi$models$$$class__42_SecurityBase_286 = NULL;
    struct Nuitka_FrameObject *frame_80604c164a6135846117777da9201bbb_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__43_Config_290 = NULL;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *locals_fastapi$openapi$models$$$class__44_APIKeyIn_294 = NULL;
    struct Nuitka_FrameObject *frame_e86f088703b54923e512c46648737853_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *locals_fastapi$openapi$models$$$class__45_APIKey_300 = NULL;
    struct Nuitka_FrameObject *frame_cd8f5a24c7697b1506cb744a260b29e0_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *locals_fastapi$openapi$models$$$class__46_HTTPBase_306 = NULL;
    struct Nuitka_FrameObject *frame_9d522d71dee56bd424bbdb7f1efece26_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *locals_fastapi$openapi$models$$$class__47_HTTPBearer_311 = NULL;
    struct Nuitka_FrameObject *frame_66f1e88fbde6db268b6a0d193fb8b6f0_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *locals_fastapi$openapi$models$$$class__48_OAuthFlow_316 = NULL;
    struct Nuitka_FrameObject *frame_295fd3f79bafc9c9498eacbf20742a0e_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__49_Config_320 = NULL;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324 = NULL;
    struct Nuitka_FrameObject *frame_21a2dc32c6852624402bab4898d21ddf_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328 = NULL;
    struct Nuitka_FrameObject *frame_7036a73a4b1dc9d00155f5ec6292a40a_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332 = NULL;
    struct Nuitka_FrameObject *frame_ebadb7363bdb9a15988de8b91424d005_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336 = NULL;
    struct Nuitka_FrameObject *frame_40c1bbe8ed4ce3289e98e17510f17d65_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *locals_fastapi$openapi$models$$$class__54_OAuthFlows_341 = NULL;
    struct Nuitka_FrameObject *frame_e49298b42ee48632b79c94cf0b931db0_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__55_Config_347 = NULL;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *locals_fastapi$openapi$models$$$class__56_OAuth2_351 = NULL;
    struct Nuitka_FrameObject *frame_369256e42dfc35a9b57cd00cd0030dc3_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356 = NULL;
    struct Nuitka_FrameObject *frame_ab97e3b19146bc7dc8df1f07630e7e1b_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *locals_fastapi$openapi$models$$$class__58_Components_364 = NULL;
    struct Nuitka_FrameObject *frame_05284d199480ca0080b8ce2833da5f62_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__59_Config_376 = NULL;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_177;
    PyObject *exception_keeper_type_178;
    PyObject *exception_keeper_value_178;
    PyTracebackObject *exception_keeper_tb_178;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_178;
    PyObject *exception_keeper_type_179;
    PyObject *exception_keeper_value_179;
    PyTracebackObject *exception_keeper_tb_179;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_179;
    PyObject *exception_keeper_type_180;
    PyObject *exception_keeper_value_180;
    PyTracebackObject *exception_keeper_tb_180;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_180;
    PyObject *exception_keeper_type_181;
    PyObject *exception_keeper_value_181;
    PyTracebackObject *exception_keeper_tb_181;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_181;
    PyObject *locals_fastapi$openapi$models$$$class__60_Tag_380 = NULL;
    struct Nuitka_FrameObject *frame_594e973395c34fbbae2605a54f71f300_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__61_Config_385 = NULL;
    PyObject *exception_keeper_type_182;
    PyObject *exception_keeper_value_182;
    PyTracebackObject *exception_keeper_tb_182;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_182;
    PyObject *exception_keeper_type_183;
    PyObject *exception_keeper_value_183;
    PyTracebackObject *exception_keeper_tb_183;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_183;
    PyObject *exception_keeper_type_184;
    PyObject *exception_keeper_value_184;
    PyTracebackObject *exception_keeper_tb_184;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_184;
    PyObject *exception_keeper_type_185;
    PyObject *exception_keeper_value_185;
    PyTracebackObject *exception_keeper_tb_185;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_185;
    PyObject *exception_keeper_type_186;
    PyObject *exception_keeper_value_186;
    PyTracebackObject *exception_keeper_tb_186;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_186;
    PyObject *exception_keeper_type_187;
    PyObject *exception_keeper_value_187;
    PyTracebackObject *exception_keeper_tb_187;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_187;
    PyObject *locals_fastapi$openapi$models$$$class__62_OpenAPI_389 = NULL;
    struct Nuitka_FrameObject *frame_62b5706d1793d4f1b37c75c20a94c727_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    PyObject *locals_fastapi$openapi$models$$$class__63_Config_400 = NULL;
    PyObject *exception_keeper_type_188;
    PyObject *exception_keeper_value_188;
    PyTracebackObject *exception_keeper_tb_188;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_188;
    PyObject *exception_keeper_type_189;
    PyObject *exception_keeper_value_189;
    PyTracebackObject *exception_keeper_tb_189;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_189;
    PyObject *exception_keeper_type_190;
    PyObject *exception_keeper_value_190;
    PyTracebackObject *exception_keeper_tb_190;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_190;
    PyObject *exception_keeper_type_191;
    PyObject *exception_keeper_value_191;
    PyTracebackObject *exception_keeper_tb_191;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_191;
    PyObject *exception_keeper_type_192;
    PyObject *exception_keeper_value_192;
    PyTracebackObject *exception_keeper_tb_192;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_192;
    PyObject *exception_keeper_type_193;
    PyObject *exception_keeper_value_193;
    PyTracebackObject *exception_keeper_tb_193;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_193;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[7], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[8], tmp_assign_source_2);
    }
    frame_06fea91e0e513f4a51ced046994fa1f1 = MAKE_MODULE_FRAME(codeobj_06fea91e0e513f4a51ced046994fa1f1, module_fastapi$openapi$models);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_06fea91e0e513f4a51ced046994fa1f1);
    assert(Py_REFCNT(frame_06fea91e0e513f4a51ced046994fa1f1) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[9]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[9]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[10], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[9]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[9]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[11], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[12], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[13];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_fastapi$openapi$models;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = mod_consts[14];
        tmp_level_value_1 = mod_consts[15];
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 1;
        tmp_import_name_from_1 = IMPORT_MODULE5(tstate, tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_import_name_from_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_4 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_1,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[16],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_4 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_1, mod_consts[16]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[16], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = IMPORT_HARD_TYPING();
        assert(!(tmp_assign_source_5 == NULL));
        assert(tmp_import_from_1__module == NULL);
        Py_INCREF(tmp_assign_source_5);
        tmp_import_from_1__module = tmp_assign_source_5;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_2,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[17],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_2, mod_consts[17]);
        }

        if (tmp_assign_source_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_7 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_3,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[18],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_7 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_3, mod_consts[18]);
        }

        if (tmp_assign_source_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[18], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_4 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_4,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[19],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_4, mod_consts[19]);
        }

        if (tmp_assign_source_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_5 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_5,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[20],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_5, mod_consts[20]);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[20], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_6 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_6,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[21],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_6, mod_consts[21]);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_7 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_7,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[22],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_7, mod_consts[22]);
        }

        if (tmp_assign_source_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_8 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_8,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[23],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_8, mod_consts[23]);
        }

        if (tmp_assign_source_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23], tmp_assign_source_12);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[24];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_fastapi$openapi$models;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = mod_consts[25];
        tmp_level_value_2 = mod_consts[15];
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 4;
        tmp_import_name_from_9 = IMPORT_MODULE5(tstate, tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_import_name_from_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_9,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[4],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_9, mod_consts[4]);
        }

        Py_DECREF(tmp_import_name_from_9);
        if (tmp_assign_source_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[4], tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[26];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_fastapi$openapi$models;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[27];
        tmp_level_value_3 = mod_consts[15];
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 5;
        tmp_assign_source_14 = IMPORT_MODULE5(tstate, tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_assign_source_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_2__module == NULL);
        tmp_import_from_2__module = tmp_assign_source_14;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_10;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_10 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_10)) {
            tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_10,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[28],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_15 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_10, mod_consts[28]);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28], tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_11;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_11 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_11)) {
            tmp_assign_source_16 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_11,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[29],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_16 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_11, mod_consts[29]);
        }

        if (tmp_assign_source_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_import_name_from_12;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_12 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_12)) {
            tmp_assign_source_17 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_12,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[30],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_17 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_12, mod_consts[30]);
        }

        if (tmp_assign_source_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30], tmp_assign_source_17);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[31];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_fastapi$openapi$models;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = Py_None;
        tmp_level_value_4 = mod_consts[15];
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 8;
        tmp_assign_source_18 = IMPORT_MODULE5(tstate, tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_assign_source_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[31], tmp_assign_source_18);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        tmp_operand_value_1 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[31]);

        if (unlikely(tmp_operand_value_1 == NULL)) {
            tmp_operand_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[31]);
        }

        assert(!(tmp_operand_value_1 == NULL));
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 10;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_3;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_13;
        PyObject *tmp_name_value_5;
        PyObject *tmp_globals_arg_value_5;
        PyObject *tmp_locals_arg_value_5;
        PyObject *tmp_fromlist_value_5;
        PyObject *tmp_level_value_5;
        tmp_name_value_5 = mod_consts[26];
        tmp_globals_arg_value_5 = (PyObject *)moduledict_fastapi$openapi$models;
        tmp_locals_arg_value_5 = Py_None;
        tmp_fromlist_value_5 = mod_consts[32];
        tmp_level_value_5 = mod_consts[15];
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 11;
        tmp_import_name_from_13 = IMPORT_MODULE5(tstate, tmp_name_value_5, tmp_globals_arg_value_5, tmp_locals_arg_value_5, tmp_fromlist_value_5, tmp_level_value_5);
        if (tmp_import_name_from_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto try_except_handler_3;
        }
        if (PyModule_Check(tmp_import_name_from_13)) {
            tmp_assign_source_19 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_13,
                (PyObject *)moduledict_fastapi$openapi$models,
                mod_consts[33],
                mod_consts[15]
            );
        } else {
            tmp_assign_source_19 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_13, mod_consts[33]);
        }

        Py_DECREF(tmp_import_name_from_13);
        if (tmp_assign_source_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[33], tmp_assign_source_19);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    exception_preserved_1 = GET_CURRENT_EXCEPTION(tstate);

    if (exception_keeper_tb_3 == NULL) {
        exception_keeper_tb_3 = MAKE_TRACEBACK(frame_06fea91e0e513f4a51ced046994fa1f1, exception_keeper_lineno_3);
    } else if (exception_keeper_lineno_3 != 0) {
        exception_keeper_tb_3 = ADD_TRACEBACK(exception_keeper_tb_3, frame_06fea91e0e513f4a51ced046994fa1f1, exception_keeper_lineno_3);
    }

    PUBLISH_CURRENT_EXCEPTION(tstate, &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    // Tried code:
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_cmp_expr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL(tstate, tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = mod_consts[34];
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_20 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        tmp_assign_source_21 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_metaclass_value_1;
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_1 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[15];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_1, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_22 = SELECT_METACLASS(tstate, tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_22;
    }
    {
        bool tmp_condition_result_4;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_2 = tmp_class_creation_1__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_2, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_condition_result_4 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_4 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[35]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_tuple_element_1 = mod_consts[33];
        tmp_args_value_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 14;
        tmp_assign_source_23 = CALL_FUNCTION(tstate, tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_23;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_4 = tmp_class_creation_1__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_4, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_operand_value_2 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        assert(!(tmp_res == -1));
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_name_value_6;
        PyObject *tmp_default_value_1;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_mod_expr_left_1 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_5 = tmp_class_creation_1__metaclass;
        tmp_name_value_6 = mod_consts[38];
        tmp_default_value_1 = mod_consts[39];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tstate, tmp_expression_value_5, tmp_name_value_6, tmp_default_value_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_6 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_6 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[38]);
            Py_DECREF(tmp_expression_value_6);
            if (tmp_tuple_element_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 14;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_mod_expr_right_1);
        goto try_except_handler_5;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_raise_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_5;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_1;
        exception_lineno = 14;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_5;
    }
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_24;
        tmp_assign_source_24 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_24;
    }
    branch_end_3:;
    {
        PyObject *tmp_assign_source_25;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__1_EmailStr_14 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[33];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_7;
        }
        frame_022a0ebb8ffe16a978c447866871d151_2 = MAKE_CLASS_FRAME(tstate, codeobj_022a0ebb8ffe16a978c447866871d151, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_022a0ebb8ffe16a978c447866871d151_2);
        assert(Py_REFCNT(frame_022a0ebb8ffe16a978c447866871d151_2) == 2);

        // Framed code:
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_annotations_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_subscript_value_2;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_subscript_value_3;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_classmethod_arg_1;
            PyObject *tmp_annotations_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_subscript_value_4;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_subscript_value_5;
            PyObject *tmp_tuple_element_4;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[43]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 15;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_6 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_2;
            } else {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            tmp_called_value_2 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[43]);

            if (unlikely(tmp_called_value_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[43]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 15;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 15;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_dict_key_1 = mod_consts[44];
            tmp_expression_value_7 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[20]);

            if (tmp_expression_value_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[20]);

                    if (unlikely(tmp_expression_value_7 == NULL)) {
                        tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[20]);
                    }

                    if (tmp_expression_value_7 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_2);

                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_expression_value_7);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_expression_value_8 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[18]);

            if (tmp_expression_value_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[18]);

                    if (unlikely(tmp_expression_value_8 == NULL)) {
                        tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[18]);
                    }

                    if (tmp_expression_value_8 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_2);
                        Py_DECREF(tmp_expression_value_7);

                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_expression_value_8);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_tuple_element_3 = Py_Ellipsis;
            tmp_subscript_value_3 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_subscript_value_3, 0, tmp_tuple_element_3);
            tmp_tuple_element_3 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[17]);

            if (tmp_tuple_element_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_3 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_tuple_element_3 == NULL)) {
                        tmp_tuple_element_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_tuple_element_3 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto tuple_build_exception_2;
                    }
                    Py_INCREF(tmp_tuple_element_3);
                } else {
                    goto tuple_build_exception_2;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_3, 1, tmp_tuple_element_3);
            goto tuple_build_noexception_2;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_expression_value_7);
            Py_DECREF(tmp_expression_value_8);
            Py_DECREF(tmp_subscript_value_3);
            goto frame_exception_exit_2;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_2:;
            tmp_subscript_value_2 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_8, tmp_subscript_value_3);
            Py_DECREF(tmp_expression_value_8);
            Py_DECREF(tmp_subscript_value_3);
            if (tmp_subscript_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);
                Py_DECREF(tmp_expression_value_7);

                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_dict_value_1 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_7, tmp_subscript_value_2);
            Py_DECREF(tmp_expression_value_7);
            Py_DECREF(tmp_subscript_value_2);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_annotations_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));


            tmp_args_element_value_1 = MAKE_FUNCTION_fastapi$openapi$models$$$function__1___get_validators__(tmp_annotations_1);

            frame_022a0ebb8ffe16a978c447866871d151_2->m_frame.f_lineno = 15;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 15;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            tmp_dict_key_2 = mod_consts[44];
            tmp_expression_value_9 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[20]);

            if (tmp_expression_value_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[20]);

                    if (unlikely(tmp_expression_value_9 == NULL)) {
                        tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[20]);
                    }

                    if (tmp_expression_value_9 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_expression_value_9);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_expression_value_10 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[18]);

            if (tmp_expression_value_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[18]);

                    if (unlikely(tmp_expression_value_10 == NULL)) {
                        tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[18]);
                    }

                    if (tmp_expression_value_10 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_9);

                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_expression_value_10);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_tuple_element_4 = Py_Ellipsis;
            tmp_subscript_value_5 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_subscript_value_5, 0, tmp_tuple_element_4);
            tmp_tuple_element_4 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[17]);

            if (tmp_tuple_element_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_4 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_tuple_element_4 == NULL)) {
                        tmp_tuple_element_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_tuple_element_4 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 16;
                        type_description_2 = "o";
                        goto tuple_build_exception_3;
                    }
                    Py_INCREF(tmp_tuple_element_4);
                } else {
                    goto tuple_build_exception_3;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_5, 1, tmp_tuple_element_4);
            goto tuple_build_noexception_3;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_3:;
            Py_DECREF(tmp_expression_value_9);
            Py_DECREF(tmp_expression_value_10);
            Py_DECREF(tmp_subscript_value_5);
            goto frame_exception_exit_2;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_3:;
            tmp_subscript_value_4 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_10, tmp_subscript_value_5);
            Py_DECREF(tmp_expression_value_10);
            Py_DECREF(tmp_subscript_value_5);
            if (tmp_subscript_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_9);

                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_dict_value_2 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_9, tmp_subscript_value_4);
            Py_DECREF(tmp_expression_value_9);
            Py_DECREF(tmp_subscript_value_4);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_annotations_2 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_annotations_2, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            assert(!(tmp_res != 0));


            tmp_classmethod_arg_1 = MAKE_FUNCTION_fastapi$openapi$models$$$function__1___get_validators__(tmp_annotations_2);

            tmp_dictset_value = BUILTIN_CLASSMETHOD(tstate, tmp_classmethod_arg_1);
            Py_DECREF(tmp_classmethod_arg_1);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 15;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_2:;
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_2;
            PyObject *tmp_annotations_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_classmethod_arg_2;
            PyObject *tmp_annotations_4;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[43]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_7 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_3;
            } else {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            tmp_called_value_3 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[43]);

            if (unlikely(tmp_called_value_3 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[43]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 19;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_called_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_dict_key_3 = mod_consts[45];
            tmp_dict_value_3 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[17]);

            if (tmp_dict_value_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_dict_value_3 == NULL)) {
                        tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_dict_value_3 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_3);

                        exception_lineno = 20;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_dict_value_3);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_3 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            assert(!(tmp_res != 0));
            tmp_dict_key_3 = mod_consts[44];
            tmp_dict_value_3 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[46]);

            if (tmp_dict_value_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_dict_value_3 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_dict_value_3);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            assert(!(tmp_res != 0));


            tmp_args_element_value_2 = MAKE_FUNCTION_fastapi$openapi$models$$$function__2_validate(tmp_annotations_3);

            frame_022a0ebb8ffe16a978c447866871d151_2->m_frame.f_lineno = 19;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_2);
            Py_DECREF(tmp_called_value_3);
            Py_DECREF(tmp_args_element_value_2);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_dict_key_4 = mod_consts[45];
            tmp_dict_value_4 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[17]);

            if (tmp_dict_value_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_dict_value_4 == NULL)) {
                        tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_dict_value_4 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 20;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_dict_value_4);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_4 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            assert(!(tmp_res != 0));
            tmp_dict_key_4 = mod_consts[44];
            tmp_dict_value_4 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[46]);

            if (tmp_dict_value_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_dict_value_4 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_dict_value_4);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            assert(!(tmp_res != 0));


            tmp_classmethod_arg_2 = MAKE_FUNCTION_fastapi$openapi$models$$$function__2_validate(tmp_annotations_4);

            tmp_dictset_value = BUILTIN_CLASSMETHOD(tstate, tmp_classmethod_arg_2);
            Py_DECREF(tmp_classmethod_arg_2);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_3:;
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[1], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 20;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_1;
        frame_exception_exit_2:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_022a0ebb8ffe16a978c447866871d151_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_022a0ebb8ffe16a978c447866871d151_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_022a0ebb8ffe16a978c447866871d151_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_022a0ebb8ffe16a978c447866871d151_2,
            type_description_2,
            outline_0_var___class__
        );



        assertFrameObject(frame_022a0ebb8ffe16a978c447866871d151_2);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_1;
        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_7;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_1__bases;
            tmp_cmp_expr_right_2 = mod_consts[34];
            tmp_condition_result_8 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_8 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 14;

                goto try_except_handler_7;
            }
            if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
        }
        branch_yes_5:;
        tmp_dictset_value = mod_consts[34];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__1_EmailStr_14, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto try_except_handler_7;
        }
        branch_no_5:;
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_4 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_5 = mod_consts[33];
            tmp_args_value_2 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_5);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_5 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_5);
            tmp_tuple_element_5 = locals_fastapi$openapi$models$$$class__1_EmailStr_14;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_5);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 14;
            tmp_assign_source_26 = CALL_FUNCTION(tstate, tmp_called_value_4, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_26 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 14;

                goto try_except_handler_7;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_26;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_25 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_25);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__1_EmailStr_14);
        locals_fastapi$openapi$models$$$class__1_EmailStr_14 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__1_EmailStr_14);
        locals_fastapi$openapi$models$$$class__1_EmailStr_14 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 14;
        goto try_except_handler_5;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[33], tmp_assign_source_25);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_4;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 7;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_06fea91e0e513f4a51ced046994fa1f1->m_frame) frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = exception_tb->tb_lineno;

    goto try_except_handler_4;
    branch_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    goto try_end_3;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_3:;
    // Tried code:
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_tuple_element_6;
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_6 == NULL)) {
            tmp_tuple_element_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_assign_source_27 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_27, 0, tmp_tuple_element_6);
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_28 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        tmp_assign_source_29 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_29;
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_metaclass_value_2;
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_2;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_condition_result_9 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_11 = tmp_class_creation_2__bases;
        tmp_subscript_value_6 = mod_consts[15];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_11, tmp_subscript_value_6, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_30 = SELECT_METACLASS(tstate, tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_30 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_30;
    }
    {
        bool tmp_condition_result_10;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_12 = tmp_class_creation_2__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_12, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_condition_result_10 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_10 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_13 = tmp_class_creation_2__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[35]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_tuple_element_7 = mod_consts[49];
        tmp_args_value_3 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_7 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 28;
        tmp_assign_source_31 = CALL_FUNCTION(tstate, tmp_called_value_5, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_31;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_14 = tmp_class_creation_2__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_14, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_operand_value_3 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_11 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_mod_expr_left_2;
        PyObject *tmp_mod_expr_right_2;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_name_value_7;
        PyObject *tmp_default_value_2;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_mod_expr_left_2 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_15 = tmp_class_creation_2__metaclass;
        tmp_name_value_7 = mod_consts[38];
        tmp_default_value_2 = mod_consts[39];
        tmp_tuple_element_8 = BUILTIN_GETATTR(tstate, tmp_expression_value_15, tmp_name_value_7, tmp_default_value_2);
        if (tmp_tuple_element_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        tmp_mod_expr_right_2 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_16;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_mod_expr_right_2, 0, tmp_tuple_element_8);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_16 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_16 == NULL));
            tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[38]);
            Py_DECREF(tmp_expression_value_16);
            if (tmp_tuple_element_8 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 28;

                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_2, 1, tmp_tuple_element_8);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_mod_expr_right_2);
        goto try_except_handler_8;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_2, tmp_mod_expr_right_2);
        Py_DECREF(tmp_mod_expr_right_2);
        if (tmp_raise_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_8;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_2;
        exception_lineno = 28;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_8;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_32;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_33;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_fastapi$openapi$models$$$class__2_Contact_28 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_10;
        }
        tmp_dictset_value = mod_consts[49];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_10;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_10;
        }
        frame_0431819fa67337e38020d738864f15e5_3 = MAKE_CLASS_FRAME(tstate, codeobj_0431819fa67337e38020d738864f15e5, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_0431819fa67337e38020d738864f15e5_3);
        assert(Py_REFCNT(frame_0431819fa67337e38020d738864f15e5_3) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_expression_value_17;
            PyObject *tmp_subscript_value_7;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            tmp_expression_value_17 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[22]);

            if (tmp_expression_value_17 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_17 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_17 == NULL)) {
                        tmp_expression_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_17 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 29;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_17);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_subscript_value_7 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[46]);

            if (tmp_subscript_value_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_7 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_7);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_ass_subvalue_1 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_17, tmp_subscript_value_7);
            Py_DECREF(tmp_expression_value_17);
            Py_DECREF(tmp_subscript_value_7);
            if (tmp_ass_subvalue_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 29;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscribed_1 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_1 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_1);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 29;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_ass_subscribed_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_1);

                exception_lineno = 29;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscript_1 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            Py_DECREF(tmp_ass_subvalue_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 29;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_ass_subvalue_2;
            PyObject *tmp_expression_value_18;
            PyObject *tmp_subscript_value_8;
            PyObject *tmp_ass_subscribed_2;
            PyObject *tmp_ass_subscript_2;
            tmp_expression_value_18 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[22]);

            if (tmp_expression_value_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_18 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_18 == NULL)) {
                        tmp_expression_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_18 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 30;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_18);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_subscript_value_8 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[28]);

            if (tmp_subscript_value_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_8 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_subscript_value_8 == NULL)) {
                        tmp_subscript_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[28]);
                    }

                    if (tmp_subscript_value_8 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_18);

                        exception_lineno = 30;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_subscript_value_8);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_ass_subvalue_2 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_18, tmp_subscript_value_8);
            Py_DECREF(tmp_expression_value_18);
            Py_DECREF(tmp_subscript_value_8);
            if (tmp_ass_subvalue_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 30;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscribed_2 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_2);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 30;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_ass_subscribed_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_2);

                exception_lineno = 30;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscript_2 = mod_consts[52];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
            Py_DECREF(tmp_ass_subscribed_2);
            Py_DECREF(tmp_ass_subvalue_2);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 30;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_ass_subvalue_3;
            PyObject *tmp_expression_value_19;
            PyObject *tmp_subscript_value_9;
            PyObject *tmp_ass_subscribed_3;
            PyObject *tmp_ass_subscript_3;
            tmp_expression_value_19 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[22]);

            if (tmp_expression_value_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_19 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_19 == NULL)) {
                        tmp_expression_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_19 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 31;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_19);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_subscript_value_9 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[33]);

            if (tmp_subscript_value_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_9 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[33]);

                    if (unlikely(tmp_subscript_value_9 == NULL)) {
                        tmp_subscript_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[33]);
                    }

                    if (tmp_subscript_value_9 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_19);

                        exception_lineno = 31;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_subscript_value_9);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_ass_subvalue_3 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_19, tmp_subscript_value_9);
            Py_DECREF(tmp_expression_value_19);
            Py_DECREF(tmp_subscript_value_9);
            if (tmp_ass_subvalue_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 31;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscribed_3 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_3 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_3);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 31;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_ass_subscribed_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_3);

                exception_lineno = 31;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscript_3 = mod_consts[53];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
            Py_DECREF(tmp_ass_subscribed_3);
            Py_DECREF(tmp_ass_subvalue_3);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 31;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_assign_source_34;
            tmp_assign_source_34 = MAKE_DICT_EMPTY();
            assert(tmp_Contact$class_creation_1__class_decl_dict == NULL);
            tmp_Contact$class_creation_1__class_decl_dict = tmp_assign_source_34;
        }
        {
            PyObject *tmp_assign_source_35;
            tmp_assign_source_35 = MAKE_DICT_EMPTY();
            assert(tmp_Contact$class_creation_1__prepared == NULL);
            tmp_Contact$class_creation_1__prepared = tmp_assign_source_35;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_Contact$class_creation_1__prepared);
            tmp_set_locals_3 = tmp_Contact$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__3_Config_33 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__3_Config_33, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[54];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__3_Config_33, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__3_Config_33, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kwargs_value_4;
            tmp_called_value_6 = (PyObject *)&PyType_Type;
            tmp_tuple_element_9 = mod_consts[57];
            tmp_args_value_4 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_9);
            tmp_tuple_element_9 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_9);
            tmp_tuple_element_9 = locals_fastapi$openapi$models$$$class__3_Config_33;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_Contact$class_creation_1__class_decl_dict);
            tmp_kwargs_value_4 = tmp_Contact$class_creation_1__class_decl_dict;
            frame_0431819fa67337e38020d738864f15e5_3->m_frame.f_lineno = 33;
            tmp_assign_source_36 = CALL_FUNCTION(tstate, tmp_called_value_6, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 33;
                type_description_2 = "o";
                goto try_except_handler_13;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_36;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_dictset_value = outline_2_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_13;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__3_Config_33);
        locals_fastapi$openapi$models$$$class__3_Config_33 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__3_Config_33);
        locals_fastapi$openapi$models$$$class__3_Config_33 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 33;
        goto try_except_handler_11;
        outline_result_3:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_2 = "o";
            goto try_except_handler_11;
        }
        goto try_end_6;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Contact$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Contact$class_creation_1__class_decl_dict);
        tmp_Contact$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Contact$class_creation_1__prepared);
        Py_DECREF(tmp_Contact$class_creation_1__prepared);
        tmp_Contact$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto frame_exception_exit_3;
        // End of try:
        try_end_6:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_2;
        frame_exception_exit_3:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0431819fa67337e38020d738864f15e5_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0431819fa67337e38020d738864f15e5_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0431819fa67337e38020d738864f15e5_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0431819fa67337e38020d738864f15e5_3,
            type_description_2,
            outline_1_var___class__
        );



        assertFrameObject(frame_0431819fa67337e38020d738864f15e5_3);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_2;
        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_10;
        skip_nested_handling_2:;
        CHECK_OBJECT(tmp_Contact$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Contact$class_creation_1__class_decl_dict);
        tmp_Contact$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Contact$class_creation_1__prepared);
        Py_DECREF(tmp_Contact$class_creation_1__prepared);
        tmp_Contact$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 28;

                goto try_except_handler_10;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__2_Contact_28, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto try_except_handler_10;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_called_value_7;
            PyObject *tmp_args_value_5;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_kwargs_value_5;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_7 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_10 = mod_consts[49];
            tmp_args_value_5 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_10 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_10);
            tmp_tuple_element_10 = locals_fastapi$openapi$models$$$class__2_Contact_28;
            PyTuple_SET_ITEM0(tmp_args_value_5, 2, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_5 = tmp_class_creation_2__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 28;
            tmp_assign_source_37 = CALL_FUNCTION(tstate, tmp_called_value_7, tmp_args_value_5, tmp_kwargs_value_5);
            Py_DECREF(tmp_args_value_5);
            if (tmp_assign_source_37 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 28;

                goto try_except_handler_10;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_37;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_33 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_33);
        goto try_return_handler_10;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__2_Contact_28);
        locals_fastapi$openapi$models$$$class__2_Contact_28 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__2_Contact_28);
        locals_fastapi$openapi$models$$$class__2_Contact_28 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 28;
        goto try_except_handler_8;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[49], tmp_assign_source_33);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_tuple_element_11;
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_11 == NULL)) {
            tmp_tuple_element_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_assign_source_38 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_38, 0, tmp_tuple_element_11);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_39 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_39;
    }
    {
        PyObject *tmp_assign_source_40;
        tmp_assign_source_40 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_40;
    }
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_metaclass_value_3;
        nuitka_bool tmp_condition_result_13;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_20;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_3;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_condition_result_13 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_20 = tmp_class_creation_3__bases;
        tmp_subscript_value_10 = mod_consts[15];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_20, tmp_subscript_value_10, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_41 = SELECT_METACLASS(tstate, tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_41 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_41;
    }
    {
        bool tmp_condition_result_14;
        PyObject *tmp_expression_value_21;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_21 = tmp_class_creation_3__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_21, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_condition_result_14 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_14 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_args_value_6;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_kwargs_value_6;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_22 = tmp_class_creation_3__metaclass;
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_22, mod_consts[35]);
        if (tmp_called_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_tuple_element_12 = mod_consts[59];
        tmp_args_value_6 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_12);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_12 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_12);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_6 = tmp_class_creation_3__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 37;
        tmp_assign_source_42 = CALL_FUNCTION(tstate, tmp_called_value_8, tmp_args_value_6, tmp_kwargs_value_6);
        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_value_6);
        if (tmp_assign_source_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_42;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_23;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_23 = tmp_class_creation_3__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_23, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_operand_value_4 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_mod_expr_left_3;
        PyObject *tmp_mod_expr_right_3;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_name_value_8;
        PyObject *tmp_default_value_3;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_mod_expr_left_3 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_24 = tmp_class_creation_3__metaclass;
        tmp_name_value_8 = mod_consts[38];
        tmp_default_value_3 = mod_consts[39];
        tmp_tuple_element_13 = BUILTIN_GETATTR(tstate, tmp_expression_value_24, tmp_name_value_8, tmp_default_value_3);
        if (tmp_tuple_element_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        tmp_mod_expr_right_3 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_25;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_mod_expr_right_3, 0, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_25 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_25 == NULL));
            tmp_tuple_element_13 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_25, mod_consts[38]);
            Py_DECREF(tmp_expression_value_25);
            if (tmp_tuple_element_13 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 37;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_3, 1, tmp_tuple_element_13);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_mod_expr_right_3);
        goto try_except_handler_14;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_3, tmp_mod_expr_right_3);
        Py_DECREF(tmp_mod_expr_right_3);
        if (tmp_raise_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_14;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_3;
        exception_lineno = 37;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_14;
    }
    branch_no_10:;
    goto branch_end_9;
    branch_no_9:;
    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_43;
    }
    branch_end_9:;
    {
        PyObject *tmp_assign_source_44;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_4 = tmp_class_creation_3__prepared;
            locals_fastapi$openapi$models$$$class__4_License_37 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_16;
        }
        tmp_dictset_value = mod_consts[59];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_16;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_16;
        }
        frame_bd3a337f5959c302b618f1a52d7977e4_4 = MAKE_CLASS_FRAME(tstate, codeobj_bd3a337f5959c302b618f1a52d7977e4, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_bd3a337f5959c302b618f1a52d7977e4_4);
        assert(Py_REFCNT(frame_bd3a337f5959c302b618f1a52d7977e4_4) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_4;
            PyObject *tmp_ass_subscribed_4;
            PyObject *tmp_ass_subscript_4;
            tmp_ass_subvalue_4 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[46]);

            if (tmp_ass_subvalue_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_4 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_4);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_ass_subscribed_4 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_4);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 38;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_ass_subscribed_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_4);

                exception_lineno = 38;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_ass_subscript_4 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4);
            Py_DECREF(tmp_ass_subscribed_4);
            Py_DECREF(tmp_ass_subvalue_4);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 38;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_ass_subvalue_5;
            PyObject *tmp_expression_value_26;
            PyObject *tmp_subscript_value_11;
            PyObject *tmp_ass_subscribed_5;
            PyObject *tmp_ass_subscript_5;
            tmp_expression_value_26 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[22]);

            if (tmp_expression_value_26 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_26 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_26 == NULL)) {
                        tmp_expression_value_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_26 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 39;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }
                    Py_INCREF(tmp_expression_value_26);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_subscript_value_11 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[28]);

            if (tmp_subscript_value_11 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_11 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_subscript_value_11 == NULL)) {
                        tmp_subscript_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[28]);
                    }

                    if (tmp_subscript_value_11 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_26);

                        exception_lineno = 39;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }
                    Py_INCREF(tmp_subscript_value_11);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_ass_subvalue_5 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_26, tmp_subscript_value_11);
            Py_DECREF(tmp_expression_value_26);
            Py_DECREF(tmp_subscript_value_11);
            if (tmp_ass_subvalue_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 39;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_ass_subscribed_5 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_5 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_5);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 39;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_ass_subscribed_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_5);

                exception_lineno = 39;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_ass_subscript_5 = mod_consts[52];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5);
            Py_DECREF(tmp_ass_subscribed_5);
            Py_DECREF(tmp_ass_subvalue_5);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 39;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_assign_source_45;
            tmp_assign_source_45 = MAKE_DICT_EMPTY();
            assert(tmp_License$class_creation_1__class_decl_dict == NULL);
            tmp_License$class_creation_1__class_decl_dict = tmp_assign_source_45;
        }
        {
            PyObject *tmp_assign_source_46;
            tmp_assign_source_46 = MAKE_DICT_EMPTY();
            assert(tmp_License$class_creation_1__prepared == NULL);
            tmp_License$class_creation_1__prepared = tmp_assign_source_46;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_License$class_creation_1__prepared);
            tmp_set_locals_5 = tmp_License$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__5_Config_41 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__5_Config_41, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[60];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__5_Config_41, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__5_Config_41, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_47;
            PyObject *tmp_called_value_9;
            PyObject *tmp_args_value_7;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_kwargs_value_7;
            tmp_called_value_9 = (PyObject *)&PyType_Type;
            tmp_tuple_element_14 = mod_consts[57];
            tmp_args_value_7 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_14);
            tmp_tuple_element_14 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_14);
            tmp_tuple_element_14 = locals_fastapi$openapi$models$$$class__5_Config_41;
            PyTuple_SET_ITEM0(tmp_args_value_7, 2, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_License$class_creation_1__class_decl_dict);
            tmp_kwargs_value_7 = tmp_License$class_creation_1__class_decl_dict;
            frame_bd3a337f5959c302b618f1a52d7977e4_4->m_frame.f_lineno = 41;
            tmp_assign_source_47 = CALL_FUNCTION(tstate, tmp_called_value_9, tmp_args_value_7, tmp_kwargs_value_7);
            Py_DECREF(tmp_args_value_7);
            if (tmp_assign_source_47 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 41;
                type_description_2 = "o";
                goto try_except_handler_19;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_47;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_dictset_value = outline_4_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_19;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__5_Config_41);
        locals_fastapi$openapi$models$$$class__5_Config_41 = NULL;
        goto try_return_handler_18;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__5_Config_41);
        locals_fastapi$openapi$models$$$class__5_Config_41 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto try_except_handler_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 41;
        goto try_except_handler_17;
        outline_result_5:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;
            type_description_2 = "o";
            goto try_except_handler_17;
        }
        goto try_end_8;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_License$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_License$class_creation_1__class_decl_dict);
        tmp_License$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_License$class_creation_1__prepared);
        Py_DECREF(tmp_License$class_creation_1__prepared);
        tmp_License$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto frame_exception_exit_4;
        // End of try:
        try_end_8:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_3;
        frame_exception_exit_4:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bd3a337f5959c302b618f1a52d7977e4_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bd3a337f5959c302b618f1a52d7977e4_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bd3a337f5959c302b618f1a52d7977e4_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bd3a337f5959c302b618f1a52d7977e4_4,
            type_description_2,
            outline_3_var___class__
        );



        assertFrameObject(frame_bd3a337f5959c302b618f1a52d7977e4_4);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_3;
        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_16;
        skip_nested_handling_3:;
        CHECK_OBJECT(tmp_License$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_License$class_creation_1__class_decl_dict);
        tmp_License$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_License$class_creation_1__prepared);
        Py_DECREF(tmp_License$class_creation_1__prepared);
        tmp_License$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_16 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_16 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 37;

                goto try_except_handler_16;
            }
            if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
                goto branch_yes_11;
            } else {
                goto branch_no_11;
            }
        }
        branch_yes_11:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__4_License_37, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto try_except_handler_16;
        }
        branch_no_11:;
        {
            PyObject *tmp_assign_source_48;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_10 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_15 = mod_consts[59];
            tmp_args_value_8 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_15 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_15);
            tmp_tuple_element_15 = locals_fastapi$openapi$models$$$class__4_License_37;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_3__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 37;
            tmp_assign_source_48 = CALL_FUNCTION(tstate, tmp_called_value_10, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_48 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 37;

                goto try_except_handler_16;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_48;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_44 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_44);
        goto try_return_handler_16;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__4_License_37);
        locals_fastapi$openapi$models$$$class__4_License_37 = NULL;
        goto try_return_handler_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__4_License_37);
        locals_fastapi$openapi$models$$$class__4_License_37 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto try_except_handler_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 37;
        goto try_except_handler_14;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[59], tmp_assign_source_44);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_tuple_element_16;
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_16 == NULL)) {
            tmp_tuple_element_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_assign_source_49 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_49, 0, tmp_tuple_element_16);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_50 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_50;
    }
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_51;
    }
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_metaclass_value_4;
        nuitka_bool tmp_condition_result_17;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_4;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_condition_result_17 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_27 = tmp_class_creation_4__bases;
        tmp_subscript_value_12 = mod_consts[15];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_27, tmp_subscript_value_12, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_6:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_52 = SELECT_METACLASS(tstate, tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_52;
    }
    {
        bool tmp_condition_result_18;
        PyObject *tmp_expression_value_28;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_28 = tmp_class_creation_4__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_28, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_condition_result_18 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_18 != false) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_29;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_29 = tmp_class_creation_4__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_29, mod_consts[35]);
        if (tmp_called_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_tuple_element_17 = mod_consts[61];
        tmp_args_value_9 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_17);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_17 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_17);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_4__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 45;
        tmp_assign_source_53 = CALL_FUNCTION(tstate, tmp_called_value_11, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_53;
    }
    {
        bool tmp_condition_result_19;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_30;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_30 = tmp_class_creation_4__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_30, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_operand_value_5 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_mod_expr_left_4;
        PyObject *tmp_mod_expr_right_4;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_name_value_9;
        PyObject *tmp_default_value_4;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_mod_expr_left_4 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_31 = tmp_class_creation_4__metaclass;
        tmp_name_value_9 = mod_consts[38];
        tmp_default_value_4 = mod_consts[39];
        tmp_tuple_element_18 = BUILTIN_GETATTR(tstate, tmp_expression_value_31, tmp_name_value_9, tmp_default_value_4);
        if (tmp_tuple_element_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        tmp_mod_expr_right_4 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_32;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_mod_expr_right_4, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_32 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_32 == NULL));
            tmp_tuple_element_18 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_32, mod_consts[38]);
            Py_DECREF(tmp_expression_value_32);
            if (tmp_tuple_element_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 45;

                goto tuple_build_exception_6;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_4, 1, tmp_tuple_element_18);
        }
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_mod_expr_right_4);
        goto try_except_handler_20;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_4, tmp_mod_expr_right_4);
        Py_DECREF(tmp_mod_expr_right_4);
        if (tmp_raise_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_20;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_4;
        exception_lineno = 45;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_20;
    }
    branch_no_13:;
    goto branch_end_12;
    branch_no_12:;
    {
        PyObject *tmp_assign_source_54;
        tmp_assign_source_54 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_54;
    }
    branch_end_12:;
    {
        PyObject *tmp_assign_source_55;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_6 = tmp_class_creation_4__prepared;
            locals_fastapi$openapi$models$$$class__6_Info_45 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_22;
        }
        tmp_dictset_value = mod_consts[61];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_22;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_22;
        }
        frame_5e3c16519effce84ba03d86b9588bca6_5 = MAKE_CLASS_FRAME(tstate, codeobj_5e3c16519effce84ba03d86b9588bca6, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_5e3c16519effce84ba03d86b9588bca6_5);
        assert(Py_REFCNT(frame_5e3c16519effce84ba03d86b9588bca6_5) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_6;
            PyObject *tmp_ass_subscribed_6;
            PyObject *tmp_ass_subscript_6;
            tmp_ass_subvalue_6 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[46]);

            if (tmp_ass_subvalue_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_6 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_6);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subscribed_6 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_6);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 46;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_6);

                exception_lineno = 46;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_6 = mod_consts[62];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6);
            Py_DECREF(tmp_ass_subscribed_6);
            Py_DECREF(tmp_ass_subvalue_6);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 46;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            PyObject *tmp_ass_subvalue_7;
            PyObject *tmp_expression_value_33;
            PyObject *tmp_subscript_value_13;
            PyObject *tmp_ass_subscribed_7;
            PyObject *tmp_ass_subscript_7;
            tmp_expression_value_33 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[22]);

            if (tmp_expression_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_33 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_33 == NULL)) {
                        tmp_expression_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_33 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 47;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_expression_value_33);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_subscript_value_13 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[46]);

            if (tmp_subscript_value_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_13 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_13);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subvalue_7 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_33, tmp_subscript_value_13);
            Py_DECREF(tmp_expression_value_33);
            Py_DECREF(tmp_subscript_value_13);
            if (tmp_ass_subvalue_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscribed_7 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_7 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_7);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 47;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_7);

                exception_lineno = 47;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_7 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7);
            Py_DECREF(tmp_ass_subscribed_7);
            Py_DECREF(tmp_ass_subvalue_7);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[64], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            PyObject *tmp_ass_subvalue_8;
            PyObject *tmp_expression_value_34;
            PyObject *tmp_subscript_value_14;
            PyObject *tmp_ass_subscribed_8;
            PyObject *tmp_ass_subscript_8;
            tmp_expression_value_34 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[22]);

            if (tmp_expression_value_34 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_34 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_34 == NULL)) {
                        tmp_expression_value_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_34 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 48;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_expression_value_34);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_subscript_value_14 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[46]);

            if (tmp_subscript_value_14 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_14 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_14);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subvalue_8 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_34, tmp_subscript_value_14);
            Py_DECREF(tmp_expression_value_34);
            Py_DECREF(tmp_subscript_value_14);
            if (tmp_ass_subvalue_8 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscribed_8 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_8 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_8);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 48;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_8 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_8);

                exception_lineno = 48;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_8 = mod_consts[64];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_8, tmp_ass_subscript_8, tmp_ass_subvalue_8);
            Py_DECREF(tmp_ass_subscribed_8);
            Py_DECREF(tmp_ass_subvalue_8);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            PyObject *tmp_ass_subvalue_9;
            PyObject *tmp_expression_value_35;
            PyObject *tmp_subscript_value_15;
            PyObject *tmp_ass_subscribed_9;
            PyObject *tmp_ass_subscript_9;
            tmp_expression_value_35 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[22]);

            if (tmp_expression_value_35 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_35 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_35 == NULL)) {
                        tmp_expression_value_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_35 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 49;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_expression_value_35);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_subscript_value_15 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[49]);

            if (tmp_subscript_value_15 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_15 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[49]);

                    if (unlikely(tmp_subscript_value_15 == NULL)) {
                        tmp_subscript_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[49]);
                    }

                    if (tmp_subscript_value_15 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_35);

                        exception_lineno = 49;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_subscript_value_15);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subvalue_9 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_35, tmp_subscript_value_15);
            Py_DECREF(tmp_expression_value_35);
            Py_DECREF(tmp_subscript_value_15);
            if (tmp_ass_subvalue_9 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 49;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscribed_9 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_9 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_9);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 49;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_9 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_9);

                exception_lineno = 49;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_9 = mod_consts[65];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_9, tmp_ass_subscript_9, tmp_ass_subvalue_9);
            Py_DECREF(tmp_ass_subscribed_9);
            Py_DECREF(tmp_ass_subvalue_9);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 49;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            PyObject *tmp_ass_subvalue_10;
            PyObject *tmp_expression_value_36;
            PyObject *tmp_subscript_value_16;
            PyObject *tmp_ass_subscribed_10;
            PyObject *tmp_ass_subscript_10;
            tmp_expression_value_36 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[22]);

            if (tmp_expression_value_36 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_36 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_36 == NULL)) {
                        tmp_expression_value_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_36 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 50;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_expression_value_36);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_subscript_value_16 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[59]);

            if (tmp_subscript_value_16 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_16 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[59]);

                    if (unlikely(tmp_subscript_value_16 == NULL)) {
                        tmp_subscript_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[59]);
                    }

                    if (tmp_subscript_value_16 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_36);

                        exception_lineno = 50;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_subscript_value_16);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subvalue_10 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_36, tmp_subscript_value_16);
            Py_DECREF(tmp_expression_value_36);
            Py_DECREF(tmp_subscript_value_16);
            if (tmp_ass_subvalue_10 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 50;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscribed_10 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_10 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_10);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 50;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_10 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_10);

                exception_lineno = 50;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_10 = mod_consts[66];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_10, tmp_ass_subscript_10, tmp_ass_subvalue_10);
            Py_DECREF(tmp_ass_subscribed_10);
            Py_DECREF(tmp_ass_subvalue_10);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 50;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        {
            PyObject *tmp_ass_subvalue_11;
            PyObject *tmp_ass_subscribed_11;
            PyObject *tmp_ass_subscript_11;
            tmp_ass_subvalue_11 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[46]);

            if (tmp_ass_subvalue_11 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_11 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_11);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_ass_subscribed_11 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_11 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_11);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 51;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if (tmp_ass_subscribed_11 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_11);

                exception_lineno = 51;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_ass_subscript_11 = mod_consts[67];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_11, tmp_ass_subscript_11, tmp_ass_subvalue_11);
            Py_DECREF(tmp_ass_subscribed_11);
            Py_DECREF(tmp_ass_subvalue_11);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 51;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        {
            PyObject *tmp_assign_source_56;
            tmp_assign_source_56 = MAKE_DICT_EMPTY();
            assert(tmp_Info$class_creation_1__class_decl_dict == NULL);
            tmp_Info$class_creation_1__class_decl_dict = tmp_assign_source_56;
        }
        {
            PyObject *tmp_assign_source_57;
            tmp_assign_source_57 = MAKE_DICT_EMPTY();
            assert(tmp_Info$class_creation_1__prepared == NULL);
            tmp_Info$class_creation_1__prepared = tmp_assign_source_57;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_Info$class_creation_1__prepared);
            tmp_set_locals_7 = tmp_Info$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__7_Config_53 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__7_Config_53, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[68];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__7_Config_53, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__7_Config_53, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_called_value_12;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_kwargs_value_10;
            tmp_called_value_12 = (PyObject *)&PyType_Type;
            tmp_tuple_element_19 = mod_consts[57];
            tmp_args_value_10 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_19);
            tmp_tuple_element_19 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_19);
            tmp_tuple_element_19 = locals_fastapi$openapi$models$$$class__7_Config_53;
            PyTuple_SET_ITEM0(tmp_args_value_10, 2, tmp_tuple_element_19);
            CHECK_OBJECT(tmp_Info$class_creation_1__class_decl_dict);
            tmp_kwargs_value_10 = tmp_Info$class_creation_1__class_decl_dict;
            frame_5e3c16519effce84ba03d86b9588bca6_5->m_frame.f_lineno = 53;
            tmp_assign_source_58 = CALL_FUNCTION(tstate, tmp_called_value_12, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_58 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 53;
                type_description_2 = "o";
                goto try_except_handler_25;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_58;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_dictset_value = outline_6_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_25;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_25:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__7_Config_53);
        locals_fastapi$openapi$models$$$class__7_Config_53 = NULL;
        goto try_return_handler_24;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__7_Config_53);
        locals_fastapi$openapi$models$$$class__7_Config_53 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto try_except_handler_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 53;
        goto try_except_handler_23;
        outline_result_7:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 53;
            type_description_2 = "o";
            goto try_except_handler_23;
        }
        goto try_end_10;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Info$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Info$class_creation_1__class_decl_dict);
        tmp_Info$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Info$class_creation_1__prepared);
        Py_DECREF(tmp_Info$class_creation_1__prepared);
        tmp_Info$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto frame_exception_exit_5;
        // End of try:
        try_end_10:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_4;
        frame_exception_exit_5:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5e3c16519effce84ba03d86b9588bca6_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5e3c16519effce84ba03d86b9588bca6_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5e3c16519effce84ba03d86b9588bca6_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5e3c16519effce84ba03d86b9588bca6_5,
            type_description_2,
            outline_5_var___class__
        );



        assertFrameObject(frame_5e3c16519effce84ba03d86b9588bca6_5);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_4;
        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_22;
        skip_nested_handling_4:;
        CHECK_OBJECT(tmp_Info$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Info$class_creation_1__class_decl_dict);
        tmp_Info$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Info$class_creation_1__prepared);
        Py_DECREF(tmp_Info$class_creation_1__prepared);
        tmp_Info$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_5 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_5 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_20 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_20 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 45;

                goto try_except_handler_22;
            }
            if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
                goto branch_yes_14;
            } else {
                goto branch_no_14;
            }
        }
        branch_yes_14:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__6_Info_45, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_22;
        }
        branch_no_14:;
        {
            PyObject *tmp_assign_source_59;
            PyObject *tmp_called_value_13;
            PyObject *tmp_args_value_11;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kwargs_value_11;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_13 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_20 = mod_consts[61];
            tmp_args_value_11 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_20 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_20);
            tmp_tuple_element_20 = locals_fastapi$openapi$models$$$class__6_Info_45;
            PyTuple_SET_ITEM0(tmp_args_value_11, 2, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_11 = tmp_class_creation_4__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 45;
            tmp_assign_source_59 = CALL_FUNCTION(tstate, tmp_called_value_13, tmp_args_value_11, tmp_kwargs_value_11);
            Py_DECREF(tmp_args_value_11);
            if (tmp_assign_source_59 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 45;

                goto try_except_handler_22;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_59;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_55 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_55);
        goto try_return_handler_22;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__6_Info_45);
        locals_fastapi$openapi$models$$$class__6_Info_45 = NULL;
        goto try_return_handler_21;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__6_Info_45);
        locals_fastapi$openapi$models$$$class__6_Info_45 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto try_except_handler_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 45;
        goto try_except_handler_20;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[61], tmp_assign_source_55);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_tuple_element_21;
        tmp_tuple_element_21 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_21 == NULL)) {
            tmp_tuple_element_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_assign_source_60 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_60, 0, tmp_tuple_element_21);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_60;
    }
    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_61 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_61 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_61;
    }
    {
        PyObject *tmp_assign_source_62;
        tmp_assign_source_62 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_62;
    }
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_metaclass_value_5;
        nuitka_bool tmp_condition_result_21;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_37;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_5;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_condition_result_21 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_37 = tmp_class_creation_5__bases;
        tmp_subscript_value_17 = mod_consts[15];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_37, tmp_subscript_value_17, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_63 = SELECT_METACLASS(tstate, tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_63 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_63;
    }
    {
        bool tmp_condition_result_22;
        PyObject *tmp_expression_value_38;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_38 = tmp_class_creation_5__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_38, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_condition_result_22 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_22 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_called_value_14;
        PyObject *tmp_expression_value_39;
        PyObject *tmp_args_value_12;
        PyObject *tmp_tuple_element_22;
        PyObject *tmp_kwargs_value_12;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_39 = tmp_class_creation_5__metaclass;
        tmp_called_value_14 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_39, mod_consts[35]);
        if (tmp_called_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_tuple_element_22 = mod_consts[69];
        tmp_args_value_12 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_22);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_22 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_22);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_12 = tmp_class_creation_5__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 57;
        tmp_assign_source_64 = CALL_FUNCTION(tstate, tmp_called_value_14, tmp_args_value_12, tmp_kwargs_value_12);
        Py_DECREF(tmp_called_value_14);
        Py_DECREF(tmp_args_value_12);
        if (tmp_assign_source_64 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_64;
    }
    {
        bool tmp_condition_result_23;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_40;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_40 = tmp_class_creation_5__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_40, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_operand_value_6 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_23 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
    }
    branch_yes_16:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_mod_expr_left_5;
        PyObject *tmp_mod_expr_right_5;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_expression_value_41;
        PyObject *tmp_name_value_10;
        PyObject *tmp_default_value_5;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_mod_expr_left_5 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_41 = tmp_class_creation_5__metaclass;
        tmp_name_value_10 = mod_consts[38];
        tmp_default_value_5 = mod_consts[39];
        tmp_tuple_element_23 = BUILTIN_GETATTR(tstate, tmp_expression_value_41, tmp_name_value_10, tmp_default_value_5);
        if (tmp_tuple_element_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        tmp_mod_expr_right_5 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_42;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_mod_expr_right_5, 0, tmp_tuple_element_23);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_42 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_42 == NULL));
            tmp_tuple_element_23 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_42, mod_consts[38]);
            Py_DECREF(tmp_expression_value_42);
            if (tmp_tuple_element_23 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto tuple_build_exception_7;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_5, 1, tmp_tuple_element_23);
        }
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_mod_expr_right_5);
        goto try_except_handler_26;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_5, tmp_mod_expr_right_5);
        Py_DECREF(tmp_mod_expr_right_5);
        if (tmp_raise_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_26;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_5;
        exception_lineno = 57;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_26;
    }
    branch_no_16:;
    goto branch_end_15;
    branch_no_15:;
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_65;
    }
    branch_end_15:;
    {
        PyObject *tmp_assign_source_66;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_8 = tmp_class_creation_5__prepared;
            locals_fastapi$openapi$models$$$class__8_ServerVariable_57 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_28;
        }
        tmp_dictset_value = mod_consts[69];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_28;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_28;
        }
        frame_f4569b09d1bb7682065b8454b2841222_6 = MAKE_CLASS_FRAME(tstate, codeobj_f4569b09d1bb7682065b8454b2841222, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_f4569b09d1bb7682065b8454b2841222_6);
        assert(Py_REFCNT(frame_f4569b09d1bb7682065b8454b2841222_6) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[13], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            PyObject *tmp_ass_subvalue_12;
            PyObject *tmp_expression_value_43;
            PyObject *tmp_subscript_value_18;
            PyObject *tmp_expression_value_44;
            PyObject *tmp_subscript_value_19;
            PyObject *tmp_ass_subscribed_12;
            PyObject *tmp_ass_subscript_12;
            tmp_expression_value_43 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[22]);

            if (tmp_expression_value_43 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_43 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_43 == NULL)) {
                        tmp_expression_value_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_43 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 58;
                        type_description_2 = "o";
                        goto frame_exception_exit_6;
                    }
                    Py_INCREF(tmp_expression_value_43);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_expression_value_44 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[21]);

            if (tmp_expression_value_44 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_44 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_44 == NULL)) {
                        tmp_expression_value_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_44 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_43);

                        exception_lineno = 58;
                        type_description_2 = "o";
                        goto frame_exception_exit_6;
                    }
                    Py_INCREF(tmp_expression_value_44);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_subscript_value_19 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[46]);

            if (tmp_subscript_value_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_19 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_19);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_subscript_value_18 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_44, tmp_subscript_value_19);
            Py_DECREF(tmp_expression_value_44);
            Py_DECREF(tmp_subscript_value_19);
            if (tmp_subscript_value_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_43);

                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subvalue_12 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_43, tmp_subscript_value_18);
            Py_DECREF(tmp_expression_value_43);
            Py_DECREF(tmp_subscript_value_18);
            if (tmp_ass_subvalue_12 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subscribed_12 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_12 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_12);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if (tmp_ass_subscribed_12 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_12);

                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subscript_12 = mod_consts[13];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_12, tmp_ass_subscript_12, tmp_ass_subvalue_12);
            Py_DECREF(tmp_ass_subscribed_12);
            Py_DECREF(tmp_ass_subvalue_12);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        {
            PyObject *tmp_ass_subvalue_13;
            PyObject *tmp_ass_subscribed_13;
            PyObject *tmp_ass_subscript_13;
            tmp_ass_subvalue_13 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[46]);

            if (tmp_ass_subvalue_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_13 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_13);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_ass_subscribed_13 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_13 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_13);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 59;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if (tmp_ass_subscribed_13 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_13);

                exception_lineno = 59;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subscript_13 = mod_consts[70];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_13, tmp_ass_subscript_13, tmp_ass_subvalue_13);
            Py_DECREF(tmp_ass_subscribed_13);
            Py_DECREF(tmp_ass_subvalue_13);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 59;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            PyObject *tmp_ass_subvalue_14;
            PyObject *tmp_expression_value_45;
            PyObject *tmp_subscript_value_20;
            PyObject *tmp_ass_subscribed_14;
            PyObject *tmp_ass_subscript_14;
            tmp_expression_value_45 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[22]);

            if (tmp_expression_value_45 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_45 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_45 == NULL)) {
                        tmp_expression_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_45 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 60;
                        type_description_2 = "o";
                        goto frame_exception_exit_6;
                    }
                    Py_INCREF(tmp_expression_value_45);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_subscript_value_20 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[46]);

            if (tmp_subscript_value_20 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_20 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_20);
                } else {
                    goto frame_exception_exit_6;
                }
            }

            tmp_ass_subvalue_14 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_45, tmp_subscript_value_20);
            Py_DECREF(tmp_expression_value_45);
            Py_DECREF(tmp_subscript_value_20);
            if (tmp_ass_subvalue_14 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 60;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subscribed_14 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_14 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_14);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 60;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if (tmp_ass_subscribed_14 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_14);

                exception_lineno = 60;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_ass_subscript_14 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_14, tmp_ass_subscript_14, tmp_ass_subvalue_14);
            Py_DECREF(tmp_ass_subscribed_14);
            Py_DECREF(tmp_ass_subvalue_14);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 60;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        {
            PyObject *tmp_assign_source_67;
            tmp_assign_source_67 = MAKE_DICT_EMPTY();
            assert(tmp_ServerVariable$class_creation_1__class_decl_dict == NULL);
            tmp_ServerVariable$class_creation_1__class_decl_dict = tmp_assign_source_67;
        }
        {
            PyObject *tmp_assign_source_68;
            tmp_assign_source_68 = MAKE_DICT_EMPTY();
            assert(tmp_ServerVariable$class_creation_1__prepared == NULL);
            tmp_ServerVariable$class_creation_1__prepared = tmp_assign_source_68;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_ServerVariable$class_creation_1__prepared);
            tmp_set_locals_9 = tmp_ServerVariable$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__9_Config_62 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__9_Config_62, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[71];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__9_Config_62, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__9_Config_62, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_69;
            PyObject *tmp_called_value_15;
            PyObject *tmp_args_value_13;
            PyObject *tmp_tuple_element_24;
            PyObject *tmp_kwargs_value_13;
            tmp_called_value_15 = (PyObject *)&PyType_Type;
            tmp_tuple_element_24 = mod_consts[57];
            tmp_args_value_13 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_24);
            tmp_tuple_element_24 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_24);
            tmp_tuple_element_24 = locals_fastapi$openapi$models$$$class__9_Config_62;
            PyTuple_SET_ITEM0(tmp_args_value_13, 2, tmp_tuple_element_24);
            CHECK_OBJECT(tmp_ServerVariable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_13 = tmp_ServerVariable$class_creation_1__class_decl_dict;
            frame_f4569b09d1bb7682065b8454b2841222_6->m_frame.f_lineno = 62;
            tmp_assign_source_69 = CALL_FUNCTION(tstate, tmp_called_value_15, tmp_args_value_13, tmp_kwargs_value_13);
            Py_DECREF(tmp_args_value_13);
            if (tmp_assign_source_69 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;
                type_description_2 = "o";
                goto try_except_handler_31;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_69;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_dictset_value = outline_8_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_31;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_31:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__9_Config_62);
        locals_fastapi$openapi$models$$$class__9_Config_62 = NULL;
        goto try_return_handler_30;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__9_Config_62);
        locals_fastapi$openapi$models$$$class__9_Config_62 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto try_except_handler_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 62;
        goto try_except_handler_29;
        outline_result_9:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_2 = "o";
            goto try_except_handler_29;
        }
        goto try_end_12;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_ServerVariable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ServerVariable$class_creation_1__class_decl_dict);
        tmp_ServerVariable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ServerVariable$class_creation_1__prepared);
        Py_DECREF(tmp_ServerVariable$class_creation_1__prepared);
        tmp_ServerVariable$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto frame_exception_exit_6;
        // End of try:
        try_end_12:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_5;
        frame_exception_exit_6:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f4569b09d1bb7682065b8454b2841222_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f4569b09d1bb7682065b8454b2841222_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f4569b09d1bb7682065b8454b2841222_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f4569b09d1bb7682065b8454b2841222_6,
            type_description_2,
            outline_7_var___class__
        );



        assertFrameObject(frame_f4569b09d1bb7682065b8454b2841222_6);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_5;
        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_28;
        skip_nested_handling_5:;
        CHECK_OBJECT(tmp_ServerVariable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ServerVariable$class_creation_1__class_decl_dict);
        tmp_ServerVariable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ServerVariable$class_creation_1__prepared);
        Py_DECREF(tmp_ServerVariable$class_creation_1__prepared);
        tmp_ServerVariable$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto try_except_handler_28;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_17;
            } else {
                goto branch_no_17;
            }
        }
        branch_yes_17:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__8_ServerVariable_57, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_28;
        }
        branch_no_17:;
        {
            PyObject *tmp_assign_source_70;
            PyObject *tmp_called_value_16;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_25;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_16 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_25 = mod_consts[69];
            tmp_args_value_14 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_25 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_25);
            tmp_tuple_element_25 = locals_fastapi$openapi$models$$$class__8_ServerVariable_57;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_5__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 57;
            tmp_assign_source_70 = CALL_FUNCTION(tstate, tmp_called_value_16, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_70 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto try_except_handler_28;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_70;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_66 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_66);
        goto try_return_handler_28;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__8_ServerVariable_57);
        locals_fastapi$openapi$models$$$class__8_ServerVariable_57 = NULL;
        goto try_return_handler_27;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_29 = exception_type;
        exception_keeper_value_29 = exception_value;
        exception_keeper_tb_29 = exception_tb;
        exception_keeper_lineno_29 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__8_ServerVariable_57);
        locals_fastapi$openapi$models$$$class__8_ServerVariable_57 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;
        exception_lineno = exception_keeper_lineno_29;

        goto try_except_handler_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_30 = exception_type;
        exception_keeper_value_30 = exception_value;
        exception_keeper_tb_30 = exception_tb;
        exception_keeper_lineno_30 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;
        exception_lineno = exception_keeper_lineno_30;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 57;
        goto try_except_handler_26;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[69], tmp_assign_source_66);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_tuple_element_26;
        tmp_tuple_element_26 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_26 == NULL)) {
            tmp_tuple_element_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_assign_source_71 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_71, 0, tmp_tuple_element_26);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_71;
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_72 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_72 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_72;
    }
    {
        PyObject *tmp_assign_source_73;
        tmp_assign_source_73 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_73;
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_metaclass_value_6;
        nuitka_bool tmp_condition_result_25;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_46;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_6;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_condition_result_25 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_46 = tmp_class_creation_6__bases;
        tmp_subscript_value_21 = mod_consts[15];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_46, tmp_subscript_value_21, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_8:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_74 = SELECT_METACLASS(tstate, tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_74 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_74;
    }
    {
        bool tmp_condition_result_26;
        PyObject *tmp_expression_value_47;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_47 = tmp_class_creation_6__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_47, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_condition_result_26 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_26 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_48;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_48 = tmp_class_creation_6__metaclass;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_48, mod_consts[35]);
        if (tmp_called_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_tuple_element_27 = mod_consts[72];
        tmp_args_value_15 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_27 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_6__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 66;
        tmp_assign_source_75 = CALL_FUNCTION(tstate, tmp_called_value_17, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_17);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_75 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_75;
    }
    {
        bool tmp_condition_result_27;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_49;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_49 = tmp_class_creation_6__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_49, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_operand_value_7 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_27 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_mod_expr_left_6;
        PyObject *tmp_mod_expr_right_6;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_expression_value_50;
        PyObject *tmp_name_value_11;
        PyObject *tmp_default_value_6;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_mod_expr_left_6 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_50 = tmp_class_creation_6__metaclass;
        tmp_name_value_11 = mod_consts[38];
        tmp_default_value_6 = mod_consts[39];
        tmp_tuple_element_28 = BUILTIN_GETATTR(tstate, tmp_expression_value_50, tmp_name_value_11, tmp_default_value_6);
        if (tmp_tuple_element_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        tmp_mod_expr_right_6 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_51;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_mod_expr_right_6, 0, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_51 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_51 == NULL));
            tmp_tuple_element_28 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_51, mod_consts[38]);
            Py_DECREF(tmp_expression_value_51);
            if (tmp_tuple_element_28 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 66;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_6, 1, tmp_tuple_element_28);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_mod_expr_right_6);
        goto try_except_handler_32;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_6, tmp_mod_expr_right_6);
        Py_DECREF(tmp_mod_expr_right_6);
        if (tmp_raise_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_32;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_6;
        exception_lineno = 66;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_32;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_76;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_77;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_10 = tmp_class_creation_6__prepared;
            locals_fastapi$openapi$models$$$class__10_Server_66 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_34;
        }
        tmp_dictset_value = mod_consts[72];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_34;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_34;
        }
        frame_c86a8edf7093ead3d5ea76e95b2d4d73_7 = MAKE_CLASS_FRAME(tstate, codeobj_c86a8edf7093ead3d5ea76e95b2d4d73, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_c86a8edf7093ead3d5ea76e95b2d4d73_7);
        assert(Py_REFCNT(frame_c86a8edf7093ead3d5ea76e95b2d4d73_7) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_15;
            PyObject *tmp_expression_value_52;
            PyObject *tmp_subscript_value_22;
            PyObject *tmp_tuple_element_29;
            PyObject *tmp_ass_subscribed_15;
            PyObject *tmp_ass_subscript_15;
            tmp_expression_value_52 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[23]);

            if (tmp_expression_value_52 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_52 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_52 == NULL)) {
                        tmp_expression_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_52 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 67;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }
                    Py_INCREF(tmp_expression_value_52);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_tuple_element_29 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[28]);

            if (tmp_tuple_element_29 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_29 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_tuple_element_29 == NULL)) {
                        tmp_tuple_element_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[28]);
                    }

                    if (tmp_tuple_element_29 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_52);

                        exception_lineno = 67;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }
                    Py_INCREF(tmp_tuple_element_29);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_subscript_value_22 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_22, 0, tmp_tuple_element_29);
            tmp_tuple_element_29 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[46]);

            if (tmp_tuple_element_29 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_29 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_29);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_22, 1, tmp_tuple_element_29);
            tmp_ass_subvalue_15 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_52, tmp_subscript_value_22);
            Py_DECREF(tmp_expression_value_52);
            Py_DECREF(tmp_subscript_value_22);
            if (tmp_ass_subvalue_15 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscribed_15 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_15 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_15);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if (tmp_ass_subscribed_15 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_15);

                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscript_15 = mod_consts[52];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_15, tmp_ass_subscript_15, tmp_ass_subvalue_15);
            Py_DECREF(tmp_ass_subscribed_15);
            Py_DECREF(tmp_ass_subvalue_15);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_ass_subvalue_16;
            PyObject *tmp_expression_value_53;
            PyObject *tmp_subscript_value_23;
            PyObject *tmp_ass_subscribed_16;
            PyObject *tmp_ass_subscript_16;
            tmp_expression_value_53 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[22]);

            if (tmp_expression_value_53 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_53 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_53 == NULL)) {
                        tmp_expression_value_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_53 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 68;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }
                    Py_INCREF(tmp_expression_value_53);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_subscript_value_23 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[46]);

            if (tmp_subscript_value_23 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_23 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_23);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_ass_subvalue_16 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_53, tmp_subscript_value_23);
            Py_DECREF(tmp_expression_value_53);
            Py_DECREF(tmp_subscript_value_23);
            if (tmp_ass_subvalue_16 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscribed_16 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_16 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_16);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if (tmp_ass_subscribed_16 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_16);

                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscript_16 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_16, tmp_ass_subscript_16, tmp_ass_subvalue_16);
            Py_DECREF(tmp_ass_subscribed_16);
            Py_DECREF(tmp_ass_subvalue_16);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[73], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 69;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_ass_subvalue_17;
            PyObject *tmp_expression_value_54;
            PyObject *tmp_subscript_value_24;
            PyObject *tmp_expression_value_55;
            PyObject *tmp_subscript_value_25;
            PyObject *tmp_tuple_element_30;
            PyObject *tmp_ass_subscribed_17;
            PyObject *tmp_ass_subscript_17;
            tmp_expression_value_54 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[22]);

            if (tmp_expression_value_54 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_54 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_54 == NULL)) {
                        tmp_expression_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_54 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 69;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }
                    Py_INCREF(tmp_expression_value_54);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_expression_value_55 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[19]);

            if (tmp_expression_value_55 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_55 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_55 == NULL)) {
                        tmp_expression_value_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_55 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_54);

                        exception_lineno = 69;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }
                    Py_INCREF(tmp_expression_value_55);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_tuple_element_30 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[46]);

            if (tmp_tuple_element_30 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_30 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_30);
                } else {
                    goto frame_exception_exit_7;
                }
            }

            tmp_subscript_value_25 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_25, 0, tmp_tuple_element_30);
            tmp_tuple_element_30 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[69]);

            if (tmp_tuple_element_30 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_30 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[69]);

                    if (unlikely(tmp_tuple_element_30 == NULL)) {
                        tmp_tuple_element_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
                    }

                    if (tmp_tuple_element_30 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 69;
                        type_description_2 = "o";
                        goto tuple_build_exception_9;
                    }
                    Py_INCREF(tmp_tuple_element_30);
                } else {
                    goto tuple_build_exception_9;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_25, 1, tmp_tuple_element_30);
            goto tuple_build_noexception_9;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_9:;
            Py_DECREF(tmp_expression_value_54);
            Py_DECREF(tmp_expression_value_55);
            Py_DECREF(tmp_subscript_value_25);
            goto frame_exception_exit_7;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_9:;
            tmp_subscript_value_24 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_55, tmp_subscript_value_25);
            Py_DECREF(tmp_expression_value_55);
            Py_DECREF(tmp_subscript_value_25);
            if (tmp_subscript_value_24 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_54);

                exception_lineno = 69;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subvalue_17 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_54, tmp_subscript_value_24);
            Py_DECREF(tmp_expression_value_54);
            Py_DECREF(tmp_subscript_value_24);
            if (tmp_ass_subvalue_17 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 69;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscribed_17 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_17 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_17);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 69;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if (tmp_ass_subscribed_17 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_17);

                exception_lineno = 69;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_ass_subscript_17 = mod_consts[73];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_17, tmp_ass_subscript_17, tmp_ass_subvalue_17);
            Py_DECREF(tmp_ass_subscribed_17);
            Py_DECREF(tmp_ass_subvalue_17);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 69;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        {
            PyObject *tmp_assign_source_78;
            tmp_assign_source_78 = MAKE_DICT_EMPTY();
            assert(tmp_Server$class_creation_1__class_decl_dict == NULL);
            tmp_Server$class_creation_1__class_decl_dict = tmp_assign_source_78;
        }
        {
            PyObject *tmp_assign_source_79;
            tmp_assign_source_79 = MAKE_DICT_EMPTY();
            assert(tmp_Server$class_creation_1__prepared == NULL);
            tmp_Server$class_creation_1__prepared = tmp_assign_source_79;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_Server$class_creation_1__prepared);
            tmp_set_locals_11 = tmp_Server$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__11_Config_71 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__11_Config_71, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[74];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__11_Config_71, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__11_Config_71, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_80;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_31;
            PyObject *tmp_kwargs_value_16;
            tmp_called_value_18 = (PyObject *)&PyType_Type;
            tmp_tuple_element_31 = mod_consts[57];
            tmp_args_value_16 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_31);
            tmp_tuple_element_31 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_31);
            tmp_tuple_element_31 = locals_fastapi$openapi$models$$$class__11_Config_71;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_31);
            CHECK_OBJECT(tmp_Server$class_creation_1__class_decl_dict);
            tmp_kwargs_value_16 = tmp_Server$class_creation_1__class_decl_dict;
            frame_c86a8edf7093ead3d5ea76e95b2d4d73_7->m_frame.f_lineno = 71;
            tmp_assign_source_80 = CALL_FUNCTION(tstate, tmp_called_value_18, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_80 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_2 = "o";
                goto try_except_handler_37;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_80;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_dictset_value = outline_10_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_37;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_37:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__11_Config_71);
        locals_fastapi$openapi$models$$$class__11_Config_71 = NULL;
        goto try_return_handler_36;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__11_Config_71);
        locals_fastapi$openapi$models$$$class__11_Config_71 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto try_except_handler_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_36:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_36:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 71;
        goto try_except_handler_35;
        outline_result_11:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_2 = "o";
            goto try_except_handler_35;
        }
        goto try_end_14;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Server$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Server$class_creation_1__class_decl_dict);
        tmp_Server$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Server$class_creation_1__prepared);
        Py_DECREF(tmp_Server$class_creation_1__prepared);
        tmp_Server$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto frame_exception_exit_7;
        // End of try:
        try_end_14:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_6;
        frame_exception_exit_7:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c86a8edf7093ead3d5ea76e95b2d4d73_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c86a8edf7093ead3d5ea76e95b2d4d73_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c86a8edf7093ead3d5ea76e95b2d4d73_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c86a8edf7093ead3d5ea76e95b2d4d73_7,
            type_description_2,
            outline_9_var___class__
        );



        assertFrameObject(frame_c86a8edf7093ead3d5ea76e95b2d4d73_7);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_6;
        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_34;
        skip_nested_handling_6:;
        CHECK_OBJECT(tmp_Server$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Server$class_creation_1__class_decl_dict);
        tmp_Server$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Server$class_creation_1__prepared);
        Py_DECREF(tmp_Server$class_creation_1__prepared);
        tmp_Server$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_28;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_28 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_28 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 66;

                goto try_except_handler_34;
            }
            if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
        }
        branch_yes_20:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__10_Server_66, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_34;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_81;
            PyObject *tmp_called_value_19;
            PyObject *tmp_args_value_17;
            PyObject *tmp_tuple_element_32;
            PyObject *tmp_kwargs_value_17;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_19 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_32 = mod_consts[72];
            tmp_args_value_17 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_32 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_32);
            tmp_tuple_element_32 = locals_fastapi$openapi$models$$$class__10_Server_66;
            PyTuple_SET_ITEM0(tmp_args_value_17, 2, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_17 = tmp_class_creation_6__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 66;
            tmp_assign_source_81 = CALL_FUNCTION(tstate, tmp_called_value_19, tmp_args_value_17, tmp_kwargs_value_17);
            Py_DECREF(tmp_args_value_17);
            if (tmp_assign_source_81 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 66;

                goto try_except_handler_34;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_81;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_77 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_77);
        goto try_return_handler_34;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_34:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__10_Server_66);
        locals_fastapi$openapi$models$$$class__10_Server_66 = NULL;
        goto try_return_handler_33;
        // Exception handler code:
        try_except_handler_34:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__10_Server_66);
        locals_fastapi$openapi$models$$$class__10_Server_66 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto try_except_handler_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_33:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_33:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 66;
        goto try_except_handler_32;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[72], tmp_assign_source_77);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_tuple_element_33;
        tmp_tuple_element_33 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_33 == NULL)) {
            tmp_tuple_element_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_assign_source_82 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_82, 0, tmp_tuple_element_33);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_82;
    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_83 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_83 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_83;
    }
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_84;
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_metaclass_value_7;
        nuitka_bool tmp_condition_result_29;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_56;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_7;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_7 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_condition_result_29 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_56 = tmp_class_creation_7__bases;
        tmp_subscript_value_26 = mod_consts[15];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_56, tmp_subscript_value_26, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        goto condexpr_end_9;
        condexpr_false_9:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_85 = SELECT_METACLASS(tstate, tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_85 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_85;
    }
    {
        bool tmp_condition_result_30;
        PyObject *tmp_expression_value_57;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_57 = tmp_class_creation_7__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_57, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_condition_result_30 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_30 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_called_value_20;
        PyObject *tmp_expression_value_58;
        PyObject *tmp_args_value_18;
        PyObject *tmp_tuple_element_34;
        PyObject *tmp_kwargs_value_18;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_58 = tmp_class_creation_7__metaclass;
        tmp_called_value_20 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_58, mod_consts[35]);
        if (tmp_called_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_tuple_element_34 = mod_consts[75];
        tmp_args_value_18 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_34);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_34 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_34);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_18 = tmp_class_creation_7__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 75;
        tmp_assign_source_86 = CALL_FUNCTION(tstate, tmp_called_value_20, tmp_args_value_18, tmp_kwargs_value_18);
        Py_DECREF(tmp_called_value_20);
        Py_DECREF(tmp_args_value_18);
        if (tmp_assign_source_86 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_86;
    }
    {
        bool tmp_condition_result_31;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_59;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_59 = tmp_class_creation_7__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_59, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_operand_value_8 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        assert(!(tmp_res == -1));
        tmp_condition_result_31 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_31 != false) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_mod_expr_left_7;
        PyObject *tmp_mod_expr_right_7;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_expression_value_60;
        PyObject *tmp_name_value_12;
        PyObject *tmp_default_value_7;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_mod_expr_left_7 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_60 = tmp_class_creation_7__metaclass;
        tmp_name_value_12 = mod_consts[38];
        tmp_default_value_7 = mod_consts[39];
        tmp_tuple_element_35 = BUILTIN_GETATTR(tstate, tmp_expression_value_60, tmp_name_value_12, tmp_default_value_7);
        if (tmp_tuple_element_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        tmp_mod_expr_right_7 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_61;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_mod_expr_right_7, 0, tmp_tuple_element_35);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_61 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_61 == NULL));
            tmp_tuple_element_35 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_61, mod_consts[38]);
            Py_DECREF(tmp_expression_value_61);
            if (tmp_tuple_element_35 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_7, 1, tmp_tuple_element_35);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_mod_expr_right_7);
        goto try_except_handler_38;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_7, tmp_mod_expr_right_7);
        Py_DECREF(tmp_mod_expr_right_7);
        if (tmp_raise_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_38;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_7;
        exception_lineno = 75;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_38;
    }
    branch_no_22:;
    goto branch_end_21;
    branch_no_21:;
    {
        PyObject *tmp_assign_source_87;
        tmp_assign_source_87 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_87;
    }
    branch_end_21:;
    {
        PyObject *tmp_assign_source_88;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_12 = tmp_class_creation_7__prepared;
            locals_fastapi$openapi$models$$$class__12_Reference_75 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_40;
        }
        tmp_dictset_value = mod_consts[75];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_40;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_40;
        }
        frame_a50f604eb61ab730c32e1c2e8b7389ca_8 = MAKE_CLASS_FRAME(tstate, codeobj_a50f604eb61ab730c32e1c2e8b7389ca, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_a50f604eb61ab730c32e1c2e8b7389ca_8);
        assert(Py_REFCNT(frame_a50f604eb61ab730c32e1c2e8b7389ca_8) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_21;
            tmp_called_value_21 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[30]);

            if (tmp_called_value_21 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_21 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_21 == NULL)) {
                        tmp_called_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_21 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 76;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_called_value_21);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            frame_a50f604eb61ab730c32e1c2e8b7389ca_8->m_frame.f_lineno = 76;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_21, &PyTuple_GET_ITEM(mod_consts[76], 0), mod_consts[77]);
            Py_DECREF(tmp_called_value_21);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 76;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[78], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 76;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        {
            PyObject *tmp_ass_subvalue_18;
            PyObject *tmp_ass_subscribed_18;
            PyObject *tmp_ass_subscript_18;
            tmp_ass_subvalue_18 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[46]);

            if (tmp_ass_subvalue_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_18 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_18);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            tmp_ass_subscribed_18 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_18 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_18);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 76;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_ass_subscribed_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_18);

                exception_lineno = 76;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_ass_subscript_18 = mod_consts[78];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_18, tmp_ass_subscript_18, tmp_ass_subvalue_18);
            Py_DECREF(tmp_ass_subscribed_18);
            Py_DECREF(tmp_ass_subvalue_18);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 76;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_7;
        frame_exception_exit_8:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a50f604eb61ab730c32e1c2e8b7389ca_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a50f604eb61ab730c32e1c2e8b7389ca_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a50f604eb61ab730c32e1c2e8b7389ca_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a50f604eb61ab730c32e1c2e8b7389ca_8,
            type_description_2,
            outline_11_var___class__
        );



        assertFrameObject(frame_a50f604eb61ab730c32e1c2e8b7389ca_8);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_7;
        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_40;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_32;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_32 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_32 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto try_except_handler_40;
            }
            if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
                goto branch_yes_23;
            } else {
                goto branch_no_23;
            }
        }
        branch_yes_23:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__12_Reference_75, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_40;
        }
        branch_no_23:;
        {
            PyObject *tmp_assign_source_89;
            PyObject *tmp_called_value_22;
            PyObject *tmp_args_value_19;
            PyObject *tmp_tuple_element_36;
            PyObject *tmp_kwargs_value_19;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_22 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_36 = mod_consts[75];
            tmp_args_value_19 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_36 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_36);
            tmp_tuple_element_36 = locals_fastapi$openapi$models$$$class__12_Reference_75;
            PyTuple_SET_ITEM0(tmp_args_value_19, 2, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_19 = tmp_class_creation_7__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 75;
            tmp_assign_source_89 = CALL_FUNCTION(tstate, tmp_called_value_22, tmp_args_value_19, tmp_kwargs_value_19);
            Py_DECREF(tmp_args_value_19);
            if (tmp_assign_source_89 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto try_except_handler_40;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_89;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_88 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_88);
        goto try_return_handler_40;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_40:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__12_Reference_75);
        locals_fastapi$openapi$models$$$class__12_Reference_75 = NULL;
        goto try_return_handler_39;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__12_Reference_75);
        locals_fastapi$openapi$models$$$class__12_Reference_75 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto try_except_handler_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 75;
        goto try_except_handler_38;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75], tmp_assign_source_88);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_tuple_element_37;
        tmp_tuple_element_37 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_37 == NULL)) {
            tmp_tuple_element_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_assign_source_90 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_90, 0, tmp_tuple_element_37);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_90;
    }
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_91 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_91 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_91;
    }
    {
        PyObject *tmp_assign_source_92;
        tmp_assign_source_92 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_92;
    }
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_metaclass_value_8;
        nuitka_bool tmp_condition_result_33;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_62;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_8;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_8 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_condition_result_33 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_62 = tmp_class_creation_8__bases;
        tmp_subscript_value_27 = mod_consts[15];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_62, tmp_subscript_value_27, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_10:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_93 = SELECT_METACLASS(tstate, tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_93 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_93;
    }
    {
        bool tmp_condition_result_34;
        PyObject *tmp_expression_value_63;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_63 = tmp_class_creation_8__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_63, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_condition_result_34 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_34 != false) {
            goto branch_yes_24;
        } else {
            goto branch_no_24;
        }
    }
    branch_yes_24:;
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_called_value_23;
        PyObject *tmp_expression_value_64;
        PyObject *tmp_args_value_20;
        PyObject *tmp_tuple_element_38;
        PyObject *tmp_kwargs_value_20;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_64 = tmp_class_creation_8__metaclass;
        tmp_called_value_23 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_64, mod_consts[35]);
        if (tmp_called_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_tuple_element_38 = mod_consts[79];
        tmp_args_value_20 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_38);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_38 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_38);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_20 = tmp_class_creation_8__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 79;
        tmp_assign_source_94 = CALL_FUNCTION(tstate, tmp_called_value_23, tmp_args_value_20, tmp_kwargs_value_20);
        Py_DECREF(tmp_called_value_23);
        Py_DECREF(tmp_args_value_20);
        if (tmp_assign_source_94 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_94;
    }
    {
        bool tmp_condition_result_35;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_65;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_65 = tmp_class_creation_8__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_65, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_operand_value_9 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_35 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_35 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_mod_expr_left_8;
        PyObject *tmp_mod_expr_right_8;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_expression_value_66;
        PyObject *tmp_name_value_13;
        PyObject *tmp_default_value_8;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_mod_expr_left_8 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_66 = tmp_class_creation_8__metaclass;
        tmp_name_value_13 = mod_consts[38];
        tmp_default_value_8 = mod_consts[39];
        tmp_tuple_element_39 = BUILTIN_GETATTR(tstate, tmp_expression_value_66, tmp_name_value_13, tmp_default_value_8);
        if (tmp_tuple_element_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        tmp_mod_expr_right_8 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_67;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_mod_expr_right_8, 0, tmp_tuple_element_39);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_67 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_67 == NULL));
            tmp_tuple_element_39 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_67, mod_consts[38]);
            Py_DECREF(tmp_expression_value_67);
            if (tmp_tuple_element_39 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_8, 1, tmp_tuple_element_39);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_mod_expr_right_8);
        goto try_except_handler_41;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_8, tmp_mod_expr_right_8);
        Py_DECREF(tmp_mod_expr_right_8);
        if (tmp_raise_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_41;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_8;
        exception_lineno = 79;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_41;
    }
    branch_no_25:;
    goto branch_end_24;
    branch_no_24:;
    {
        PyObject *tmp_assign_source_95;
        tmp_assign_source_95 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_95;
    }
    branch_end_24:;
    {
        PyObject *tmp_assign_source_96;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_13 = tmp_class_creation_8__prepared;
            locals_fastapi$openapi$models$$$class__13_Discriminator_79 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_43;
        }
        tmp_dictset_value = mod_consts[79];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_43;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_43;
        }
        frame_94996a2e8b790b06591b9cbec09e0c39_9 = MAKE_CLASS_FRAME(tstate, codeobj_94996a2e8b790b06591b9cbec09e0c39, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_94996a2e8b790b06591b9cbec09e0c39_9);
        assert(Py_REFCNT(frame_94996a2e8b790b06591b9cbec09e0c39_9) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_19;
            PyObject *tmp_ass_subscribed_19;
            PyObject *tmp_ass_subscript_19;
            tmp_ass_subvalue_19 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[46]);

            if (tmp_ass_subvalue_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_19 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_19);
                } else {
                    goto frame_exception_exit_9;
                }
            }

            tmp_ass_subscribed_19 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_19 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_19);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 80;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }

            if (tmp_ass_subscribed_19 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_19);

                exception_lineno = 80;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
            tmp_ass_subscript_19 = mod_consts[80];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_19, tmp_ass_subscript_19, tmp_ass_subvalue_19);
            Py_DECREF(tmp_ass_subscribed_19);
            Py_DECREF(tmp_ass_subvalue_19);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 80;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[81], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }
        {
            PyObject *tmp_ass_subvalue_20;
            PyObject *tmp_expression_value_68;
            PyObject *tmp_subscript_value_28;
            PyObject *tmp_expression_value_69;
            PyObject *tmp_subscript_value_29;
            PyObject *tmp_tuple_element_40;
            PyObject *tmp_ass_subscribed_20;
            PyObject *tmp_ass_subscript_20;
            tmp_expression_value_68 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[22]);

            if (tmp_expression_value_68 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_68 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_68 == NULL)) {
                        tmp_expression_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_68 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 81;
                        type_description_2 = "o";
                        goto frame_exception_exit_9;
                    }
                    Py_INCREF(tmp_expression_value_68);
                } else {
                    goto frame_exception_exit_9;
                }
            }

            tmp_expression_value_69 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[19]);

            if (tmp_expression_value_69 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_69 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_69 == NULL)) {
                        tmp_expression_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_69 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_68);

                        exception_lineno = 81;
                        type_description_2 = "o";
                        goto frame_exception_exit_9;
                    }
                    Py_INCREF(tmp_expression_value_69);
                } else {
                    goto frame_exception_exit_9;
                }
            }

            tmp_tuple_element_40 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[46]);

            if (tmp_tuple_element_40 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_40 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_40);
                } else {
                    goto frame_exception_exit_9;
                }
            }

            tmp_subscript_value_29 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_29, 0, tmp_tuple_element_40);
            tmp_tuple_element_40 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[46]);

            if (tmp_tuple_element_40 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_40 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_40);
                } else {
                    goto frame_exception_exit_9;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_29, 1, tmp_tuple_element_40);
            tmp_subscript_value_28 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_69, tmp_subscript_value_29);
            Py_DECREF(tmp_expression_value_69);
            Py_DECREF(tmp_subscript_value_29);
            if (tmp_subscript_value_28 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_68);

                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
            tmp_ass_subvalue_20 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_68, tmp_subscript_value_28);
            Py_DECREF(tmp_expression_value_68);
            Py_DECREF(tmp_subscript_value_28);
            if (tmp_ass_subvalue_20 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
            tmp_ass_subscribed_20 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_20 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_20);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }

            if (tmp_ass_subscribed_20 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_20);

                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
            tmp_ass_subscript_20 = mod_consts[81];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_20, tmp_ass_subscript_20, tmp_ass_subvalue_20);
            Py_DECREF(tmp_ass_subscribed_20);
            Py_DECREF(tmp_ass_subvalue_20);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_8;
        frame_exception_exit_9:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_94996a2e8b790b06591b9cbec09e0c39_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_94996a2e8b790b06591b9cbec09e0c39_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_94996a2e8b790b06591b9cbec09e0c39_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_94996a2e8b790b06591b9cbec09e0c39_9,
            type_description_2,
            outline_12_var___class__
        );



        assertFrameObject(frame_94996a2e8b790b06591b9cbec09e0c39_9);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_8;
        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_43;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_36 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_36 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_43;
            }
            if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
                goto branch_yes_26;
            } else {
                goto branch_no_26;
            }
        }
        branch_yes_26:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__13_Discriminator_79, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_43;
        }
        branch_no_26:;
        {
            PyObject *tmp_assign_source_97;
            PyObject *tmp_called_value_24;
            PyObject *tmp_args_value_21;
            PyObject *tmp_tuple_element_41;
            PyObject *tmp_kwargs_value_21;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_24 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_41 = mod_consts[79];
            tmp_args_value_21 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_41 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_41);
            tmp_tuple_element_41 = locals_fastapi$openapi$models$$$class__13_Discriminator_79;
            PyTuple_SET_ITEM0(tmp_args_value_21, 2, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_21 = tmp_class_creation_8__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 79;
            tmp_assign_source_97 = CALL_FUNCTION(tstate, tmp_called_value_24, tmp_args_value_21, tmp_kwargs_value_21);
            Py_DECREF(tmp_args_value_21);
            if (tmp_assign_source_97 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_43;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_97;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_96 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_96);
        goto try_return_handler_43;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_43:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__13_Discriminator_79);
        locals_fastapi$openapi$models$$$class__13_Discriminator_79 = NULL;
        goto try_return_handler_42;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__13_Discriminator_79);
        locals_fastapi$openapi$models$$$class__13_Discriminator_79 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto try_except_handler_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 79;
        goto try_except_handler_41;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[79], tmp_assign_source_96);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_43;
    exception_value = exception_keeper_value_43;
    exception_tb = exception_keeper_tb_43;
    exception_lineno = exception_keeper_lineno_43;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_tuple_element_42;
        tmp_tuple_element_42 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_42 == NULL)) {
            tmp_tuple_element_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_assign_source_98 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_98, 0, tmp_tuple_element_42);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_98;
    }
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_99 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_99;
    }
    {
        PyObject *tmp_assign_source_100;
        tmp_assign_source_100 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_100;
    }
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_metaclass_value_9;
        nuitka_bool tmp_condition_result_37;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_70;
        PyObject *tmp_subscript_value_30;
        PyObject *tmp_bases_value_9;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_9 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_condition_result_37 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_70 = tmp_class_creation_9__bases;
        tmp_subscript_value_30 = mod_consts[15];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_70, tmp_subscript_value_30, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_101 = SELECT_METACLASS(tstate, tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_101 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_101;
    }
    {
        bool tmp_condition_result_38;
        PyObject *tmp_expression_value_71;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_71 = tmp_class_creation_9__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_71, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_condition_result_38 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_38 != false) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_72;
        PyObject *tmp_args_value_22;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_kwargs_value_22;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_72 = tmp_class_creation_9__metaclass;
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_72, mod_consts[35]);
        if (tmp_called_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_tuple_element_43 = mod_consts[82];
        tmp_args_value_22 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_43 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_22 = tmp_class_creation_9__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 84;
        tmp_assign_source_102 = CALL_FUNCTION(tstate, tmp_called_value_25, tmp_args_value_22, tmp_kwargs_value_22);
        Py_DECREF(tmp_called_value_25);
        Py_DECREF(tmp_args_value_22);
        if (tmp_assign_source_102 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_102;
    }
    {
        bool tmp_condition_result_39;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_73;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_73 = tmp_class_creation_9__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_73, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_operand_value_10 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_39 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_39 != false) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_mod_expr_left_9;
        PyObject *tmp_mod_expr_right_9;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_expression_value_74;
        PyObject *tmp_name_value_14;
        PyObject *tmp_default_value_9;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_mod_expr_left_9 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_74 = tmp_class_creation_9__metaclass;
        tmp_name_value_14 = mod_consts[38];
        tmp_default_value_9 = mod_consts[39];
        tmp_tuple_element_44 = BUILTIN_GETATTR(tstate, tmp_expression_value_74, tmp_name_value_14, tmp_default_value_9);
        if (tmp_tuple_element_44 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        tmp_mod_expr_right_9 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_75;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_mod_expr_right_9, 0, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_75 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_75 == NULL));
            tmp_tuple_element_44 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_75, mod_consts[38]);
            Py_DECREF(tmp_expression_value_75);
            if (tmp_tuple_element_44 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_9, 1, tmp_tuple_element_44);
        }
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_mod_expr_right_9);
        goto try_except_handler_44;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_9, tmp_mod_expr_right_9);
        Py_DECREF(tmp_mod_expr_right_9);
        if (tmp_raise_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_44;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_9;
        exception_lineno = 84;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_44;
    }
    branch_no_28:;
    goto branch_end_27;
    branch_no_27:;
    {
        PyObject *tmp_assign_source_103;
        tmp_assign_source_103 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_103;
    }
    branch_end_27:;
    {
        PyObject *tmp_assign_source_104;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_14 = tmp_class_creation_9__prepared;
            locals_fastapi$openapi$models$$$class__14_XML_84 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_46;
        }
        tmp_dictset_value = mod_consts[82];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_46;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_46;
        }
        frame_3ea942064a9c8d9579a0579f45b3df0a_10 = MAKE_CLASS_FRAME(tstate, codeobj_3ea942064a9c8d9579a0579f45b3df0a, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_3ea942064a9c8d9579a0579f45b3df0a_10);
        assert(Py_REFCNT(frame_3ea942064a9c8d9579a0579f45b3df0a_10) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_ass_subvalue_21;
            PyObject *tmp_expression_value_76;
            PyObject *tmp_subscript_value_31;
            PyObject *tmp_ass_subscribed_21;
            PyObject *tmp_ass_subscript_21;
            tmp_expression_value_76 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[22]);

            if (tmp_expression_value_76 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_76 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_76 == NULL)) {
                        tmp_expression_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_76 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 85;
                        type_description_2 = "o";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_expression_value_76);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_subscript_value_31 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[46]);

            if (tmp_subscript_value_31 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_31 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_31);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_ass_subvalue_21 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_76, tmp_subscript_value_31);
            Py_DECREF(tmp_expression_value_76);
            Py_DECREF(tmp_subscript_value_31);
            if (tmp_ass_subvalue_21 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscribed_21 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_21 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_21);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }

            if (tmp_ass_subscribed_21 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_21);

                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscript_21 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_21, tmp_ass_subscript_21, tmp_ass_subvalue_21);
            Py_DECREF(tmp_ass_subscribed_21);
            Py_DECREF(tmp_ass_subvalue_21);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[83], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_ass_subvalue_22;
            PyObject *tmp_expression_value_77;
            PyObject *tmp_subscript_value_32;
            PyObject *tmp_ass_subscribed_22;
            PyObject *tmp_ass_subscript_22;
            tmp_expression_value_77 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[22]);

            if (tmp_expression_value_77 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_77 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_77 == NULL)) {
                        tmp_expression_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_77 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 86;
                        type_description_2 = "o";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_expression_value_77);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_subscript_value_32 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[46]);

            if (tmp_subscript_value_32 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_32 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_32);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_ass_subvalue_22 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_77, tmp_subscript_value_32);
            Py_DECREF(tmp_expression_value_77);
            Py_DECREF(tmp_subscript_value_32);
            if (tmp_ass_subvalue_22 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 86;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscribed_22 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_22 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_22);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 86;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }

            if (tmp_ass_subscribed_22 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_22);

                exception_lineno = 86;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscript_22 = mod_consts[83];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_22, tmp_ass_subscript_22, tmp_ass_subvalue_22);
            Py_DECREF(tmp_ass_subscribed_22);
            Py_DECREF(tmp_ass_subvalue_22);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 86;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[84], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_ass_subvalue_23;
            PyObject *tmp_expression_value_78;
            PyObject *tmp_subscript_value_33;
            PyObject *tmp_ass_subscribed_23;
            PyObject *tmp_ass_subscript_23;
            tmp_expression_value_78 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[22]);

            if (tmp_expression_value_78 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_78 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_78 == NULL)) {
                        tmp_expression_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_78 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 87;
                        type_description_2 = "o";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_expression_value_78);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_subscript_value_33 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[46]);

            if (tmp_subscript_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_33 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_33);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_ass_subvalue_23 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_78, tmp_subscript_value_33);
            Py_DECREF(tmp_expression_value_78);
            Py_DECREF(tmp_subscript_value_33);
            if (tmp_ass_subvalue_23 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 87;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscribed_23 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_23 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_23);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 87;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }

            if (tmp_ass_subscribed_23 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_23);

                exception_lineno = 87;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscript_23 = mod_consts[84];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_23, tmp_ass_subscript_23, tmp_ass_subvalue_23);
            Py_DECREF(tmp_ass_subscribed_23);
            Py_DECREF(tmp_ass_subvalue_23);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 87;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[85], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_ass_subvalue_24;
            PyObject *tmp_expression_value_79;
            PyObject *tmp_subscript_value_34;
            PyObject *tmp_ass_subscribed_24;
            PyObject *tmp_ass_subscript_24;
            tmp_expression_value_79 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[22]);

            if (tmp_expression_value_79 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_79 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_79 == NULL)) {
                        tmp_expression_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_79 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 88;
                        type_description_2 = "o";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_expression_value_79);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_subscript_value_34 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[86]);

            if (tmp_subscript_value_34 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_34 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_34);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_ass_subvalue_24 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_79, tmp_subscript_value_34);
            Py_DECREF(tmp_expression_value_79);
            Py_DECREF(tmp_subscript_value_34);
            if (tmp_ass_subvalue_24 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscribed_24 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_24 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_24);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 88;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }

            if (tmp_ass_subscribed_24 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_24);

                exception_lineno = 88;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscript_24 = mod_consts[85];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_24, tmp_ass_subscript_24, tmp_ass_subvalue_24);
            Py_DECREF(tmp_ass_subscribed_24);
            Py_DECREF(tmp_ass_subvalue_24);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[87], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 89;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_ass_subvalue_25;
            PyObject *tmp_expression_value_80;
            PyObject *tmp_subscript_value_35;
            PyObject *tmp_ass_subscribed_25;
            PyObject *tmp_ass_subscript_25;
            tmp_expression_value_80 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[22]);

            if (tmp_expression_value_80 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_80 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_80 == NULL)) {
                        tmp_expression_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_80 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 89;
                        type_description_2 = "o";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_expression_value_80);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_subscript_value_35 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[86]);

            if (tmp_subscript_value_35 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_35 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_35);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_ass_subvalue_25 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_80, tmp_subscript_value_35);
            Py_DECREF(tmp_expression_value_80);
            Py_DECREF(tmp_subscript_value_35);
            if (tmp_ass_subvalue_25 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 89;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscribed_25 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_25 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_25);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 89;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }

            if (tmp_ass_subscribed_25 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_25);

                exception_lineno = 89;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
            tmp_ass_subscript_25 = mod_consts[87];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_25, tmp_ass_subscript_25, tmp_ass_subvalue_25);
            Py_DECREF(tmp_ass_subscribed_25);
            Py_DECREF(tmp_ass_subvalue_25);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 89;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }
        {
            PyObject *tmp_assign_source_105;
            tmp_assign_source_105 = MAKE_DICT_EMPTY();
            assert(tmp_XML$class_creation_1__class_decl_dict == NULL);
            tmp_XML$class_creation_1__class_decl_dict = tmp_assign_source_105;
        }
        {
            PyObject *tmp_assign_source_106;
            tmp_assign_source_106 = MAKE_DICT_EMPTY();
            assert(tmp_XML$class_creation_1__prepared == NULL);
            tmp_XML$class_creation_1__prepared = tmp_assign_source_106;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_XML$class_creation_1__prepared);
            tmp_set_locals_15 = tmp_XML$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__15_Config_91 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__15_Config_91, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[88];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__15_Config_91, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__15_Config_91, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_107;
            PyObject *tmp_called_value_26;
            PyObject *tmp_args_value_23;
            PyObject *tmp_tuple_element_45;
            PyObject *tmp_kwargs_value_23;
            tmp_called_value_26 = (PyObject *)&PyType_Type;
            tmp_tuple_element_45 = mod_consts[57];
            tmp_args_value_23 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_45);
            tmp_tuple_element_45 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_45);
            tmp_tuple_element_45 = locals_fastapi$openapi$models$$$class__15_Config_91;
            PyTuple_SET_ITEM0(tmp_args_value_23, 2, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_XML$class_creation_1__class_decl_dict);
            tmp_kwargs_value_23 = tmp_XML$class_creation_1__class_decl_dict;
            frame_3ea942064a9c8d9579a0579f45b3df0a_10->m_frame.f_lineno = 91;
            tmp_assign_source_107 = CALL_FUNCTION(tstate, tmp_called_value_26, tmp_args_value_23, tmp_kwargs_value_23);
            Py_DECREF(tmp_args_value_23);
            if (tmp_assign_source_107 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 91;
                type_description_2 = "o";
                goto try_except_handler_49;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_107;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_dictset_value = outline_14_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_49;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_49:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__15_Config_91);
        locals_fastapi$openapi$models$$$class__15_Config_91 = NULL;
        goto try_return_handler_48;
        // Exception handler code:
        try_except_handler_49:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__15_Config_91);
        locals_fastapi$openapi$models$$$class__15_Config_91 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto try_except_handler_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_48:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_48:;
        exception_keeper_type_45 = exception_type;
        exception_keeper_value_45 = exception_value;
        exception_keeper_tb_45 = exception_tb;
        exception_keeper_lineno_45 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;
        exception_lineno = exception_keeper_lineno_45;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 91;
        goto try_except_handler_47;
        outline_result_15:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_2 = "o";
            goto try_except_handler_47;
        }
        goto try_end_18;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_XML$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_XML$class_creation_1__class_decl_dict);
        tmp_XML$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_XML$class_creation_1__prepared);
        Py_DECREF(tmp_XML$class_creation_1__prepared);
        tmp_XML$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto frame_exception_exit_10;
        // End of try:
        try_end_18:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_9;
        frame_exception_exit_10:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3ea942064a9c8d9579a0579f45b3df0a_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3ea942064a9c8d9579a0579f45b3df0a_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3ea942064a9c8d9579a0579f45b3df0a_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3ea942064a9c8d9579a0579f45b3df0a_10,
            type_description_2,
            outline_13_var___class__
        );



        assertFrameObject(frame_3ea942064a9c8d9579a0579f45b3df0a_10);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_9;
        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_46;
        skip_nested_handling_9:;
        CHECK_OBJECT(tmp_XML$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_XML$class_creation_1__class_decl_dict);
        tmp_XML$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_XML$class_creation_1__prepared);
        Py_DECREF(tmp_XML$class_creation_1__prepared);
        tmp_XML$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_40;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_40 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_40 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;

                goto try_except_handler_46;
            }
            if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
                goto branch_yes_29;
            } else {
                goto branch_no_29;
            }
        }
        branch_yes_29:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__14_XML_84, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;

            goto try_except_handler_46;
        }
        branch_no_29:;
        {
            PyObject *tmp_assign_source_108;
            PyObject *tmp_called_value_27;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_46;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_27 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_46 = mod_consts[82];
            tmp_args_value_24 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_46);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_46 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_46);
            tmp_tuple_element_46 = locals_fastapi$openapi$models$$$class__14_XML_84;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_46);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_9__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 84;
            tmp_assign_source_108 = CALL_FUNCTION(tstate, tmp_called_value_27, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_108 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;

                goto try_except_handler_46;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_108;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_104 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_104);
        goto try_return_handler_46;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_46:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__14_XML_84);
        locals_fastapi$openapi$models$$$class__14_XML_84 = NULL;
        goto try_return_handler_45;
        // Exception handler code:
        try_except_handler_46:;
        exception_keeper_type_47 = exception_type;
        exception_keeper_value_47 = exception_value;
        exception_keeper_tb_47 = exception_tb;
        exception_keeper_lineno_47 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__14_XML_84);
        locals_fastapi$openapi$models$$$class__14_XML_84 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;
        exception_lineno = exception_keeper_lineno_47;

        goto try_except_handler_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 84;
        goto try_except_handler_44;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[82], tmp_assign_source_104);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_49 = exception_type;
    exception_keeper_value_49 = exception_value;
    exception_keeper_tb_49 = exception_tb;
    exception_keeper_lineno_49 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_49;
    exception_value = exception_keeper_value_49;
    exception_tb = exception_keeper_tb_49;
    exception_lineno = exception_keeper_lineno_49;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_tuple_element_47;
        tmp_tuple_element_47 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_47 == NULL)) {
            tmp_tuple_element_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_assign_source_109 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_109, 0, tmp_tuple_element_47);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_109;
    }
    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_110 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_110 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        tmp_assign_source_111 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_metaclass_value_10;
        nuitka_bool tmp_condition_result_41;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_36;
        PyObject *tmp_bases_value_10;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_10 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_condition_result_41 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_41 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_81 = tmp_class_creation_10__bases;
        tmp_subscript_value_36 = mod_consts[15];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_81, tmp_subscript_value_36, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_12:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_112 = SELECT_METACLASS(tstate, tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_112 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_112;
    }
    {
        bool tmp_condition_result_42;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_82 = tmp_class_creation_10__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_82, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_condition_result_42 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_42 != false) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_113;
        PyObject *tmp_called_value_28;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_83 = tmp_class_creation_10__metaclass;
        tmp_called_value_28 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_83, mod_consts[35]);
        if (tmp_called_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_tuple_element_48 = mod_consts[89];
        tmp_args_value_25 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_48);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_48 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_48);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_10__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 95;
        tmp_assign_source_113 = CALL_FUNCTION(tstate, tmp_called_value_28, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_28);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_113 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_113;
    }
    {
        bool tmp_condition_result_43;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_84 = tmp_class_creation_10__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_84, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_operand_value_11 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        assert(!(tmp_res == -1));
        tmp_condition_result_43 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_43 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_mod_expr_left_10;
        PyObject *tmp_mod_expr_right_10;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_expression_value_85;
        PyObject *tmp_name_value_15;
        PyObject *tmp_default_value_10;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_mod_expr_left_10 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_85 = tmp_class_creation_10__metaclass;
        tmp_name_value_15 = mod_consts[38];
        tmp_default_value_10 = mod_consts[39];
        tmp_tuple_element_49 = BUILTIN_GETATTR(tstate, tmp_expression_value_85, tmp_name_value_15, tmp_default_value_10);
        if (tmp_tuple_element_49 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        tmp_mod_expr_right_10 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_86;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_mod_expr_right_10, 0, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_86 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_86 == NULL));
            tmp_tuple_element_49 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_86, mod_consts[38]);
            Py_DECREF(tmp_expression_value_86);
            if (tmp_tuple_element_49 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_10, 1, tmp_tuple_element_49);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_mod_expr_right_10);
        goto try_except_handler_50;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_10, tmp_mod_expr_right_10);
        Py_DECREF(tmp_mod_expr_right_10);
        if (tmp_raise_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_50;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_10;
        exception_lineno = 95;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_50;
    }
    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    {
        PyObject *tmp_assign_source_114;
        tmp_assign_source_114 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_114;
    }
    branch_end_30:;
    {
        PyObject *tmp_assign_source_115;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_16 = tmp_class_creation_10__prepared;
            locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_52;
        }
        tmp_dictset_value = mod_consts[89];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_52;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_52;
        }
        frame_70cf0a1ea985143eba6c85c033939d9b_11 = MAKE_CLASS_FRAME(tstate, codeobj_70cf0a1ea985143eba6c85c033939d9b, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_70cf0a1ea985143eba6c85c033939d9b_11);
        assert(Py_REFCNT(frame_70cf0a1ea985143eba6c85c033939d9b_11) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }
        {
            PyObject *tmp_ass_subvalue_26;
            PyObject *tmp_expression_value_87;
            PyObject *tmp_subscript_value_37;
            PyObject *tmp_ass_subscribed_26;
            PyObject *tmp_ass_subscript_26;
            tmp_expression_value_87 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[22]);

            if (tmp_expression_value_87 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_87 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_87 == NULL)) {
                        tmp_expression_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_87 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 96;
                        type_description_2 = "o";
                        goto frame_exception_exit_11;
                    }
                    Py_INCREF(tmp_expression_value_87);
                } else {
                    goto frame_exception_exit_11;
                }
            }

            tmp_subscript_value_37 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[46]);

            if (tmp_subscript_value_37 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_37 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_37);
                } else {
                    goto frame_exception_exit_11;
                }
            }

            tmp_ass_subvalue_26 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_87, tmp_subscript_value_37);
            Py_DECREF(tmp_expression_value_87);
            Py_DECREF(tmp_subscript_value_37);
            if (tmp_ass_subvalue_26 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
            tmp_ass_subscribed_26 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_26 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_26);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }

            if (tmp_ass_subscribed_26 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_26);

                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
            tmp_ass_subscript_26 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_26, tmp_ass_subscript_26, tmp_ass_subvalue_26);
            Py_DECREF(tmp_ass_subscribed_26);
            Py_DECREF(tmp_ass_subvalue_26);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }
        {
            PyObject *tmp_ass_subvalue_27;
            PyObject *tmp_ass_subscribed_27;
            PyObject *tmp_ass_subscript_27;
            tmp_ass_subvalue_27 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[28]);

            if (tmp_ass_subvalue_27 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_27 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_ass_subvalue_27 == NULL)) {
                        tmp_ass_subvalue_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[28]);
                    }

                    if (tmp_ass_subvalue_27 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 97;
                        type_description_2 = "o";
                        goto frame_exception_exit_11;
                    }
                    Py_INCREF(tmp_ass_subvalue_27);
                } else {
                    goto frame_exception_exit_11;
                }
            }

            tmp_ass_subscribed_27 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_27 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_27);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 97;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }

            if (tmp_ass_subscribed_27 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_27);

                exception_lineno = 97;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
            tmp_ass_subscript_27 = mod_consts[52];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_27, tmp_ass_subscript_27, tmp_ass_subvalue_27);
            Py_DECREF(tmp_ass_subscribed_27);
            Py_DECREF(tmp_ass_subvalue_27);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 97;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }
        {
            PyObject *tmp_assign_source_116;
            tmp_assign_source_116 = MAKE_DICT_EMPTY();
            assert(tmp_ExternalDocumentation$class_creation_1__class_decl_dict == NULL);
            tmp_ExternalDocumentation$class_creation_1__class_decl_dict = tmp_assign_source_116;
        }
        {
            PyObject *tmp_assign_source_117;
            tmp_assign_source_117 = MAKE_DICT_EMPTY();
            assert(tmp_ExternalDocumentation$class_creation_1__prepared == NULL);
            tmp_ExternalDocumentation$class_creation_1__prepared = tmp_assign_source_117;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__prepared);
            tmp_set_locals_17 = tmp_ExternalDocumentation$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__17_Config_99 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__17_Config_99, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[90];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__17_Config_99, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__17_Config_99, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_118;
            PyObject *tmp_called_value_29;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_50;
            PyObject *tmp_kwargs_value_26;
            tmp_called_value_29 = (PyObject *)&PyType_Type;
            tmp_tuple_element_50 = mod_consts[57];
            tmp_args_value_26 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_50);
            tmp_tuple_element_50 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_50);
            tmp_tuple_element_50 = locals_fastapi$openapi$models$$$class__17_Config_99;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_50);
            CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__class_decl_dict);
            tmp_kwargs_value_26 = tmp_ExternalDocumentation$class_creation_1__class_decl_dict;
            frame_70cf0a1ea985143eba6c85c033939d9b_11->m_frame.f_lineno = 99;
            tmp_assign_source_118 = CALL_FUNCTION(tstate, tmp_called_value_29, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_55;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_118;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_dictset_value = outline_16_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_55;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_55:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__17_Config_99);
        locals_fastapi$openapi$models$$$class__17_Config_99 = NULL;
        goto try_return_handler_54;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_50 = exception_type;
        exception_keeper_value_50 = exception_value;
        exception_keeper_tb_50 = exception_tb;
        exception_keeper_lineno_50 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__17_Config_99);
        locals_fastapi$openapi$models$$$class__17_Config_99 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;
        exception_lineno = exception_keeper_lineno_50;

        goto try_except_handler_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_54:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 99;
        goto try_except_handler_53;
        outline_result_17:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;
            type_description_2 = "o";
            goto try_except_handler_53;
        }
        goto try_end_20;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ExternalDocumentation$class_creation_1__class_decl_dict);
        tmp_ExternalDocumentation$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__prepared);
        Py_DECREF(tmp_ExternalDocumentation$class_creation_1__prepared);
        tmp_ExternalDocumentation$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto frame_exception_exit_11;
        // End of try:
        try_end_20:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_10;
        frame_exception_exit_11:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_70cf0a1ea985143eba6c85c033939d9b_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_70cf0a1ea985143eba6c85c033939d9b_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_70cf0a1ea985143eba6c85c033939d9b_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_70cf0a1ea985143eba6c85c033939d9b_11,
            type_description_2,
            outline_15_var___class__
        );



        assertFrameObject(frame_70cf0a1ea985143eba6c85c033939d9b_11);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_10;
        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_52;
        skip_nested_handling_10:;
        CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ExternalDocumentation$class_creation_1__class_decl_dict);
        tmp_ExternalDocumentation$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ExternalDocumentation$class_creation_1__prepared);
        Py_DECREF(tmp_ExternalDocumentation$class_creation_1__prepared);
        tmp_ExternalDocumentation$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_44;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_44 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_44 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_52;
            }
            if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
                goto branch_yes_32;
            } else {
                goto branch_no_32;
            }
        }
        branch_yes_32:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_52;
        }
        branch_no_32:;
        {
            PyObject *tmp_assign_source_119;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_value_27;
            PyObject *tmp_tuple_element_51;
            PyObject *tmp_kwargs_value_27;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_30 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_51 = mod_consts[89];
            tmp_args_value_27 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_51 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_51);
            tmp_tuple_element_51 = locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95;
            PyTuple_SET_ITEM0(tmp_args_value_27, 2, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_27 = tmp_class_creation_10__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 95;
            tmp_assign_source_119 = CALL_FUNCTION(tstate, tmp_called_value_30, tmp_args_value_27, tmp_kwargs_value_27);
            Py_DECREF(tmp_args_value_27);
            if (tmp_assign_source_119 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_52;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_119;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_115 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_115);
        goto try_return_handler_52;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_52:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95);
        locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95 = NULL;
        goto try_return_handler_51;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95);
        locals_fastapi$openapi$models$$$class__16_ExternalDocumentation_95 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto try_except_handler_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_51:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_51:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 95;
        goto try_except_handler_50;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[89], tmp_assign_source_115);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_50:;
    exception_keeper_type_55 = exception_type;
    exception_keeper_value_55 = exception_value;
    exception_keeper_tb_55 = exception_tb;
    exception_keeper_lineno_55 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_55;
    exception_value = exception_keeper_value_55;
    exception_tb = exception_keeper_tb_55;
    exception_lineno = exception_keeper_lineno_55;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_tuple_element_52;
        tmp_tuple_element_52 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_52 == NULL)) {
            tmp_tuple_element_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_assign_source_120 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_120, 0, tmp_tuple_element_52);
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_120;
    }
    {
        PyObject *tmp_assign_source_121;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_121 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_121 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_121;
    }
    {
        PyObject *tmp_assign_source_122;
        tmp_assign_source_122 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_122;
    }
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_metaclass_value_11;
        nuitka_bool tmp_condition_result_45;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_88;
        PyObject *tmp_subscript_value_38;
        PyObject *tmp_bases_value_11;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_11 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_condition_result_45 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_45 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_88 = tmp_class_creation_11__bases;
        tmp_subscript_value_38 = mod_consts[15];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_88, tmp_subscript_value_38, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_123 = SELECT_METACLASS(tstate, tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_123 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_123;
    }
    {
        bool tmp_condition_result_46;
        PyObject *tmp_expression_value_89;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_89 = tmp_class_creation_11__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_89, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_condition_result_46 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_46 != false) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    {
        PyObject *tmp_assign_source_124;
        PyObject *tmp_called_value_31;
        PyObject *tmp_expression_value_90;
        PyObject *tmp_args_value_28;
        PyObject *tmp_tuple_element_53;
        PyObject *tmp_kwargs_value_28;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_90 = tmp_class_creation_11__metaclass;
        tmp_called_value_31 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_90, mod_consts[35]);
        if (tmp_called_value_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_tuple_element_53 = mod_consts[91];
        tmp_args_value_28 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_53 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_28 = tmp_class_creation_11__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 103;
        tmp_assign_source_124 = CALL_FUNCTION(tstate, tmp_called_value_31, tmp_args_value_28, tmp_kwargs_value_28);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_value_28);
        if (tmp_assign_source_124 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_124;
    }
    {
        bool tmp_condition_result_47;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_91;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_91 = tmp_class_creation_11__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_91, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_operand_value_12 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_47 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_mod_expr_left_11;
        PyObject *tmp_mod_expr_right_11;
        PyObject *tmp_tuple_element_54;
        PyObject *tmp_expression_value_92;
        PyObject *tmp_name_value_16;
        PyObject *tmp_default_value_11;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_mod_expr_left_11 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_92 = tmp_class_creation_11__metaclass;
        tmp_name_value_16 = mod_consts[38];
        tmp_default_value_11 = mod_consts[39];
        tmp_tuple_element_54 = BUILTIN_GETATTR(tstate, tmp_expression_value_92, tmp_name_value_16, tmp_default_value_11);
        if (tmp_tuple_element_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        tmp_mod_expr_right_11 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_93;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_mod_expr_right_11, 0, tmp_tuple_element_54);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_93 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_93 == NULL));
            tmp_tuple_element_54 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_93, mod_consts[38]);
            Py_DECREF(tmp_expression_value_93);
            if (tmp_tuple_element_54 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_11, 1, tmp_tuple_element_54);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_mod_expr_right_11);
        goto try_except_handler_56;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_11, tmp_mod_expr_right_11);
        Py_DECREF(tmp_mod_expr_right_11);
        if (tmp_raise_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_56;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_11;
        exception_lineno = 103;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_56;
    }
    branch_no_34:;
    goto branch_end_33;
    branch_no_33:;
    {
        PyObject *tmp_assign_source_125;
        tmp_assign_source_125 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_125;
    }
    branch_end_33:;
    {
        PyObject *tmp_assign_source_126;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_18 = tmp_class_creation_11__prepared;
            locals_fastapi$openapi$models$$$class__18_Schema_103 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_58;
        }
        tmp_dictset_value = mod_consts[91];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_58;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_58;
        }
        frame_aebaf65a7e2810e7ac2517dd24379607_12 = MAKE_CLASS_FRAME(tstate, codeobj_aebaf65a7e2810e7ac2517dd24379607, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_aebaf65a7e2810e7ac2517dd24379607_12);
        assert(Py_REFCNT(frame_aebaf65a7e2810e7ac2517dd24379607_12) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_32;
            tmp_called_value_32 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_32 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_32 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_32 == NULL)) {
                        tmp_called_value_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_32 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 104;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_32);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 104;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_32, &PyTuple_GET_ITEM(mod_consts[92], 0), mod_consts[93]);
            Py_DECREF(tmp_called_value_32);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[78], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_28;
            PyObject *tmp_expression_value_94;
            PyObject *tmp_subscript_value_39;
            PyObject *tmp_ass_subscribed_28;
            PyObject *tmp_ass_subscript_28;
            tmp_expression_value_94 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_94 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_94 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_94 == NULL)) {
                        tmp_expression_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_94 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 104;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_94);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_39 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_39 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_39 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_39);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_28 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_94, tmp_subscript_value_39);
            Py_DECREF(tmp_expression_value_94);
            Py_DECREF(tmp_subscript_value_39);
            if (tmp_ass_subvalue_28 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_28 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_28 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_28);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_28 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_28);

                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_28 = mod_consts[78];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_28, tmp_ass_subscript_28, tmp_ass_subvalue_28);
            Py_DECREF(tmp_ass_subscribed_28);
            Py_DECREF(tmp_ass_subvalue_28);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[62], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_29;
            PyObject *tmp_expression_value_95;
            PyObject *tmp_subscript_value_40;
            PyObject *tmp_ass_subscribed_29;
            PyObject *tmp_ass_subscript_29;
            tmp_expression_value_95 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_95 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_95 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_95 == NULL)) {
                        tmp_expression_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_95 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 105;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_95);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_40 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_40 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_40 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_40);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_29 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_95, tmp_subscript_value_40);
            Py_DECREF(tmp_expression_value_95);
            Py_DECREF(tmp_subscript_value_40);
            if (tmp_ass_subvalue_29 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_29 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_29 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_29);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 105;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_29 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_29);

                exception_lineno = 105;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_29 = mod_consts[62];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_29, tmp_ass_subscript_29, tmp_ass_subvalue_29);
            Py_DECREF(tmp_ass_subscribed_29);
            Py_DECREF(tmp_ass_subvalue_29);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_30;
            PyObject *tmp_expression_value_96;
            PyObject *tmp_subscript_value_41;
            PyObject *tmp_ass_subscribed_30;
            PyObject *tmp_ass_subscript_30;
            tmp_expression_value_96 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_96 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_96 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_96 == NULL)) {
                        tmp_expression_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_96 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 106;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_96);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_41 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[95]);

            if (tmp_subscript_value_41 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_41 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_subscript_value_41);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_30 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_96, tmp_subscript_value_41);
            Py_DECREF(tmp_expression_value_96);
            Py_DECREF(tmp_subscript_value_41);
            if (tmp_ass_subvalue_30 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 106;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_30 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_30 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_30);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 106;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_30 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_30);

                exception_lineno = 106;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_30 = mod_consts[94];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_30, tmp_ass_subscript_30, tmp_ass_subvalue_30);
            Py_DECREF(tmp_ass_subscribed_30);
            Py_DECREF(tmp_ass_subvalue_30);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 106;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_31;
            PyObject *tmp_expression_value_97;
            PyObject *tmp_subscript_value_42;
            PyObject *tmp_ass_subscribed_31;
            PyObject *tmp_ass_subscript_31;
            tmp_expression_value_97 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_97 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_97 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_97 == NULL)) {
                        tmp_expression_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_97 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 107;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_97);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_42 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[95]);

            if (tmp_subscript_value_42 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_42 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_subscript_value_42);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_31 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_97, tmp_subscript_value_42);
            Py_DECREF(tmp_expression_value_97);
            Py_DECREF(tmp_subscript_value_42);
            if (tmp_ass_subvalue_31 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 107;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_31 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_31 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_31);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 107;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_31 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_31);

                exception_lineno = 107;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_31 = mod_consts[96];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_31, tmp_ass_subscript_31, tmp_ass_subvalue_31);
            Py_DECREF(tmp_ass_subscribed_31);
            Py_DECREF(tmp_ass_subvalue_31);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 107;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[97], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_32;
            PyObject *tmp_expression_value_98;
            PyObject *tmp_subscript_value_43;
            PyObject *tmp_ass_subscribed_32;
            PyObject *tmp_ass_subscript_32;
            tmp_expression_value_98 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_98 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_98 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_98 == NULL)) {
                        tmp_expression_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_98 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 108;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_98);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_43 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[95]);

            if (tmp_subscript_value_43 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_43 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_subscript_value_43);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_32 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_98, tmp_subscript_value_43);
            Py_DECREF(tmp_expression_value_98);
            Py_DECREF(tmp_subscript_value_43);
            if (tmp_ass_subvalue_32 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 108;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_32 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_32 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_32);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 108;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_32 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_32);

                exception_lineno = 108;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_32 = mod_consts[97];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_32, tmp_ass_subscript_32, tmp_ass_subvalue_32);
            Py_DECREF(tmp_ass_subscribed_32);
            Py_DECREF(tmp_ass_subvalue_32);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 108;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_33;
            PyObject *tmp_expression_value_99;
            PyObject *tmp_subscript_value_44;
            PyObject *tmp_ass_subscribed_33;
            PyObject *tmp_ass_subscript_33;
            tmp_expression_value_99 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_99 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_99 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_99 == NULL)) {
                        tmp_expression_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_99 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 109;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_99);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_44 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[95]);

            if (tmp_subscript_value_44 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_44 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_subscript_value_44);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_33 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_99, tmp_subscript_value_44);
            Py_DECREF(tmp_expression_value_99);
            Py_DECREF(tmp_subscript_value_44);
            if (tmp_ass_subvalue_33 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_33 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_33 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_33);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 109;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_33 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_33);

                exception_lineno = 109;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_33 = mod_consts[98];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_33, tmp_ass_subscript_33, tmp_ass_subvalue_33);
            Py_DECREF(tmp_ass_subscribed_33);
            Py_DECREF(tmp_ass_subvalue_33);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[99], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_34;
            PyObject *tmp_expression_value_100;
            PyObject *tmp_subscript_value_45;
            PyObject *tmp_ass_subscribed_34;
            PyObject *tmp_ass_subscript_34;
            tmp_expression_value_100 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_100 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_100 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_100 == NULL)) {
                        tmp_expression_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_100 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 110;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_100);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_45 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[95]);

            if (tmp_subscript_value_45 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_45 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_subscript_value_45);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_34 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_100, tmp_subscript_value_45);
            Py_DECREF(tmp_expression_value_100);
            Py_DECREF(tmp_subscript_value_45);
            if (tmp_ass_subvalue_34 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_34 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_34 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_34);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 110;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_34 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_34);

                exception_lineno = 110;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_34 = mod_consts[99];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_34, tmp_ass_subscript_34, tmp_ass_subvalue_34);
            Py_DECREF(tmp_ass_subscribed_34);
            Py_DECREF(tmp_ass_subvalue_34);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_33;
            tmp_called_value_33 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_33 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_33 == NULL)) {
                        tmp_called_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_33 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 111;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_33);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 111;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_33, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_33);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[102], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_35;
            PyObject *tmp_expression_value_101;
            PyObject *tmp_subscript_value_46;
            PyObject *tmp_ass_subscribed_35;
            PyObject *tmp_ass_subscript_35;
            tmp_expression_value_101 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_101 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_101 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_101 == NULL)) {
                        tmp_expression_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_101 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 111;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_101);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_46 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_46 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_46 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_46);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_35 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_101, tmp_subscript_value_46);
            Py_DECREF(tmp_expression_value_101);
            Py_DECREF(tmp_subscript_value_46);
            if (tmp_ass_subvalue_35 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_35 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_35 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_35);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_35 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_35);

                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_35 = mod_consts[102];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_35, tmp_ass_subscript_35, tmp_ass_subvalue_35);
            Py_DECREF(tmp_ass_subscribed_35);
            Py_DECREF(tmp_ass_subvalue_35);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 111;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_34;
            tmp_called_value_34 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_34 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_34 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_34 == NULL)) {
                        tmp_called_value_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_34 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 112;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_34);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 112;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_34, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_34);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[104], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_36;
            PyObject *tmp_expression_value_102;
            PyObject *tmp_subscript_value_47;
            PyObject *tmp_ass_subscribed_36;
            PyObject *tmp_ass_subscript_36;
            tmp_expression_value_102 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_102 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_102 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_102 == NULL)) {
                        tmp_expression_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_102 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 112;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_102);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_47 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_47 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_47 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_47);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_36 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_102, tmp_subscript_value_47);
            Py_DECREF(tmp_expression_value_102);
            Py_DECREF(tmp_subscript_value_47);
            if (tmp_ass_subvalue_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_36 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_36 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_36);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_36);

                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_36 = mod_consts[104];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_36, tmp_ass_subscript_36, tmp_ass_subvalue_36);
            Py_DECREF(tmp_ass_subscribed_36);
            Py_DECREF(tmp_ass_subvalue_36);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[105], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_37;
            PyObject *tmp_expression_value_103;
            PyObject *tmp_subscript_value_48;
            PyObject *tmp_ass_subscribed_37;
            PyObject *tmp_ass_subscript_37;
            tmp_expression_value_103 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_103 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_103 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_103 == NULL)) {
                        tmp_expression_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_103 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 113;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_103);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_48 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_48 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_48 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_48);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_37 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_103, tmp_subscript_value_48);
            Py_DECREF(tmp_expression_value_103);
            Py_DECREF(tmp_subscript_value_48);
            if (tmp_ass_subvalue_37 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_37 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_37 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_37);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_37 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_37);

                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_37 = mod_consts[105];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_37, tmp_ass_subscript_37, tmp_ass_subvalue_37);
            Py_DECREF(tmp_ass_subscribed_37);
            Py_DECREF(tmp_ass_subvalue_37);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_35;
            tmp_called_value_35 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_35 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_35 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_35 == NULL)) {
                        tmp_called_value_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_35 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 114;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_35);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 114;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_35, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_35);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[106], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_38;
            PyObject *tmp_expression_value_104;
            PyObject *tmp_subscript_value_49;
            PyObject *tmp_ass_subscribed_38;
            PyObject *tmp_ass_subscript_38;
            tmp_expression_value_104 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_104 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_104 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_104 == NULL)) {
                        tmp_expression_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_104 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 114;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_104);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_49 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_49 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_49 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_49);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_38 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_104, tmp_subscript_value_49);
            Py_DECREF(tmp_expression_value_104);
            Py_DECREF(tmp_subscript_value_49);
            if (tmp_ass_subvalue_38 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_38 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_38 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_38);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_38 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_38);

                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_38 = mod_consts[106];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_38, tmp_ass_subscript_38, tmp_ass_subvalue_38);
            Py_DECREF(tmp_ass_subscribed_38);
            Py_DECREF(tmp_ass_subvalue_38);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_36;
            tmp_called_value_36 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_36 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_36 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_36 == NULL)) {
                        tmp_called_value_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_36 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 115;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_36);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 115;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_36, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_36);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[107], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_39;
            PyObject *tmp_expression_value_105;
            PyObject *tmp_subscript_value_50;
            PyObject *tmp_ass_subscribed_39;
            PyObject *tmp_ass_subscript_39;
            tmp_expression_value_105 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_105 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_105 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_105 == NULL)) {
                        tmp_expression_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_105 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 115;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_105);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_50 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_50 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_50 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_50);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_39 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_105, tmp_subscript_value_50);
            Py_DECREF(tmp_expression_value_105);
            Py_DECREF(tmp_subscript_value_50);
            if (tmp_ass_subvalue_39 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_39 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_39 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_39);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_39 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_39);

                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_39 = mod_consts[107];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_39, tmp_ass_subscript_39, tmp_ass_subvalue_39);
            Py_DECREF(tmp_ass_subscribed_39);
            Py_DECREF(tmp_ass_subvalue_39);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[108], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_40;
            PyObject *tmp_expression_value_106;
            PyObject *tmp_subscript_value_51;
            PyObject *tmp_ass_subscribed_40;
            PyObject *tmp_ass_subscript_40;
            tmp_expression_value_106 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_106 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_106 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_106 == NULL)) {
                        tmp_expression_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_106 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 116;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_106);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_51 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_subscript_value_51 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_51 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_51);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_40 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_106, tmp_subscript_value_51);
            Py_DECREF(tmp_expression_value_106);
            Py_DECREF(tmp_subscript_value_51);
            if (tmp_ass_subvalue_40 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_40 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_40 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_40);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_40 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_40);

                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_40 = mod_consts[108];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_40, tmp_ass_subscript_40, tmp_ass_subvalue_40);
            Py_DECREF(tmp_ass_subscribed_40);
            Py_DECREF(tmp_ass_subvalue_40);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_37;
            tmp_called_value_37 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_37 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_37 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_37 == NULL)) {
                        tmp_called_value_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_37 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 117;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_37);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 117;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_37, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_37);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[109], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_41;
            PyObject *tmp_expression_value_107;
            PyObject *tmp_subscript_value_52;
            PyObject *tmp_ass_subscribed_41;
            PyObject *tmp_ass_subscript_41;
            tmp_expression_value_107 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_107 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_107 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_107 == NULL)) {
                        tmp_expression_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_107 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 117;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_107);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_52 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_52 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_52 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_52);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_41 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_107, tmp_subscript_value_52);
            Py_DECREF(tmp_expression_value_107);
            Py_DECREF(tmp_subscript_value_52);
            if (tmp_ass_subvalue_41 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_41 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_41 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_41);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_41 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_41);

                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_41 = mod_consts[109];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_41, tmp_ass_subscript_41, tmp_ass_subvalue_41);
            Py_DECREF(tmp_ass_subscribed_41);
            Py_DECREF(tmp_ass_subvalue_41);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_38;
            tmp_called_value_38 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_38 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_38 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_38 == NULL)) {
                        tmp_called_value_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_38 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 118;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_38);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 118;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_38, &PyTuple_GET_ITEM(mod_consts[100], 0), mod_consts[101]);
            Py_DECREF(tmp_called_value_38);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[110], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_42;
            PyObject *tmp_expression_value_108;
            PyObject *tmp_subscript_value_53;
            PyObject *tmp_ass_subscribed_42;
            PyObject *tmp_ass_subscript_42;
            tmp_expression_value_108 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_108 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_108 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_108 == NULL)) {
                        tmp_expression_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_108 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 118;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_108);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_53 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[103]);

            if (tmp_subscript_value_53 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_53 = (PyObject *)&PyLong_Type;
                    Py_INCREF(tmp_subscript_value_53);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_42 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_108, tmp_subscript_value_53);
            Py_DECREF(tmp_expression_value_108);
            Py_DECREF(tmp_subscript_value_53);
            if (tmp_ass_subvalue_42 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_42 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_42 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_42);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_42 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_42);

                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_42 = mod_consts[110];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_42, tmp_ass_subscript_42, tmp_ass_subvalue_42);
            Py_DECREF(tmp_ass_subscribed_42);
            Py_DECREF(tmp_ass_subvalue_42);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[111], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_43;
            PyObject *tmp_expression_value_109;
            PyObject *tmp_subscript_value_54;
            PyObject *tmp_expression_value_110;
            PyObject *tmp_subscript_value_55;
            PyObject *tmp_ass_subscribed_43;
            PyObject *tmp_ass_subscript_43;
            tmp_expression_value_109 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_109 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_109 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_109 == NULL)) {
                        tmp_expression_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_109 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 119;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_109);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_110 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

            if (tmp_expression_value_110 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_110 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_110 == NULL)) {
                        tmp_expression_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_110 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_109);

                        exception_lineno = 119;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_110);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_55 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_55 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_55 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_55);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_54 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_110, tmp_subscript_value_55);
            Py_DECREF(tmp_expression_value_110);
            Py_DECREF(tmp_subscript_value_55);
            if (tmp_subscript_value_54 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_109);

                exception_lineno = 119;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_43 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_109, tmp_subscript_value_54);
            Py_DECREF(tmp_expression_value_109);
            Py_DECREF(tmp_subscript_value_54);
            if (tmp_ass_subvalue_43 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 119;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_43 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_43 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_43);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 119;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_43 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_43);

                exception_lineno = 119;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_43 = mod_consts[111];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_43, tmp_ass_subscript_43, tmp_ass_subvalue_43);
            Py_DECREF(tmp_ass_subscribed_43);
            Py_DECREF(tmp_ass_subvalue_43);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 119;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[13], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_44;
            PyObject *tmp_expression_value_111;
            PyObject *tmp_subscript_value_56;
            PyObject *tmp_expression_value_112;
            PyObject *tmp_subscript_value_57;
            PyObject *tmp_ass_subscribed_44;
            PyObject *tmp_ass_subscript_44;
            tmp_expression_value_111 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_111 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_111 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_111 == NULL)) {
                        tmp_expression_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_111 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 120;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_111);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_112 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

            if (tmp_expression_value_112 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_112 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_112 == NULL)) {
                        tmp_expression_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_112 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_111);

                        exception_lineno = 120;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_112);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_57 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[17]);

            if (tmp_subscript_value_57 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_57 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_57 == NULL)) {
                        tmp_subscript_value_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_57 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_111);
                        Py_DECREF(tmp_expression_value_112);

                        exception_lineno = 120;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_57);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_56 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_112, tmp_subscript_value_57);
            Py_DECREF(tmp_expression_value_112);
            Py_DECREF(tmp_subscript_value_57);
            if (tmp_subscript_value_56 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_111);

                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_44 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_111, tmp_subscript_value_56);
            Py_DECREF(tmp_expression_value_111);
            Py_DECREF(tmp_subscript_value_56);
            if (tmp_ass_subvalue_44 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_44 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_44 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_44);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_44 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_44);

                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_44 = mod_consts[13];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_44, tmp_ass_subscript_44, tmp_ass_subvalue_44);
            Py_DECREF(tmp_ass_subscribed_44);
            Py_DECREF(tmp_ass_subvalue_44);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[112], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 121;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_45;
            PyObject *tmp_expression_value_113;
            PyObject *tmp_subscript_value_58;
            PyObject *tmp_ass_subscribed_45;
            PyObject *tmp_ass_subscript_45;
            tmp_expression_value_113 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_113 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_113 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_113 == NULL)) {
                        tmp_expression_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_113 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 121;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_113);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_58 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_58 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_58 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_58);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_45 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_113, tmp_subscript_value_58);
            Py_DECREF(tmp_expression_value_113);
            Py_DECREF(tmp_subscript_value_58);
            if (tmp_ass_subvalue_45 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_45 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_45 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_45);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_45 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_45);

                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_45 = mod_consts[112];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_45, tmp_ass_subscript_45, tmp_ass_subvalue_45);
            Py_DECREF(tmp_ass_subscribed_45);
            Py_DECREF(tmp_ass_subvalue_45);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[113], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_46;
            PyObject *tmp_expression_value_114;
            PyObject *tmp_subscript_value_59;
            PyObject *tmp_expression_value_115;
            PyObject *tmp_subscript_value_60;
            PyObject *tmp_ass_subscribed_46;
            PyObject *tmp_ass_subscript_46;
            tmp_expression_value_114 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_114 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_114 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_114 == NULL)) {
                        tmp_expression_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_114 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 122;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_114);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_115 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

            if (tmp_expression_value_115 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_115 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_115 == NULL)) {
                        tmp_expression_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_115 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_114);

                        exception_lineno = 122;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_115);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_60 = mod_consts[91];
            tmp_subscript_value_59 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_115, tmp_subscript_value_60);
            Py_DECREF(tmp_expression_value_115);
            if (tmp_subscript_value_59 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_114);

                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_46 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_114, tmp_subscript_value_59);
            Py_DECREF(tmp_expression_value_114);
            Py_DECREF(tmp_subscript_value_59);
            if (tmp_ass_subvalue_46 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_46 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_46 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_46);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_46 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_46);

                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_46 = mod_consts[113];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_46, tmp_ass_subscript_46, tmp_ass_subvalue_46);
            Py_DECREF(tmp_ass_subscribed_46);
            Py_DECREF(tmp_ass_subvalue_46);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[114], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_47;
            PyObject *tmp_expression_value_116;
            PyObject *tmp_subscript_value_61;
            PyObject *tmp_expression_value_117;
            PyObject *tmp_subscript_value_62;
            PyObject *tmp_ass_subscribed_47;
            PyObject *tmp_ass_subscript_47;
            tmp_expression_value_116 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_116 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_116 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_116 == NULL)) {
                        tmp_expression_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_116 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 123;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_116);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_117 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

            if (tmp_expression_value_117 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_117 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_117 == NULL)) {
                        tmp_expression_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_117 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_116);

                        exception_lineno = 123;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_117);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_62 = mod_consts[91];
            tmp_subscript_value_61 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_117, tmp_subscript_value_62);
            Py_DECREF(tmp_expression_value_117);
            if (tmp_subscript_value_61 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_116);

                exception_lineno = 123;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_47 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_116, tmp_subscript_value_61);
            Py_DECREF(tmp_expression_value_116);
            Py_DECREF(tmp_subscript_value_61);
            if (tmp_ass_subvalue_47 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 123;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_47 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_47 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_47);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 123;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_47 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_47);

                exception_lineno = 123;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_47 = mod_consts[114];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_47, tmp_ass_subscript_47, tmp_ass_subvalue_47);
            Py_DECREF(tmp_ass_subscribed_47);
            Py_DECREF(tmp_ass_subvalue_47);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 123;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[115], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_48;
            PyObject *tmp_expression_value_118;
            PyObject *tmp_subscript_value_63;
            PyObject *tmp_expression_value_119;
            PyObject *tmp_subscript_value_64;
            PyObject *tmp_ass_subscribed_48;
            PyObject *tmp_ass_subscript_48;
            tmp_expression_value_118 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_118 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_118 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_118 == NULL)) {
                        tmp_expression_value_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_118 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 124;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_118);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_119 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

            if (tmp_expression_value_119 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_119 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_119 == NULL)) {
                        tmp_expression_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_119 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_118);

                        exception_lineno = 124;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_119);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_64 = mod_consts[91];
            tmp_subscript_value_63 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_119, tmp_subscript_value_64);
            Py_DECREF(tmp_expression_value_119);
            if (tmp_subscript_value_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_118);

                exception_lineno = 124;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_48 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_118, tmp_subscript_value_63);
            Py_DECREF(tmp_expression_value_118);
            Py_DECREF(tmp_subscript_value_63);
            if (tmp_ass_subvalue_48 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_48 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_48 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_48);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 124;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_48 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_48);

                exception_lineno = 124;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_48 = mod_consts[115];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_48, tmp_ass_subscript_48, tmp_ass_subvalue_48);
            Py_DECREF(tmp_ass_subscribed_48);
            Py_DECREF(tmp_ass_subvalue_48);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_called_value_39;
            tmp_called_value_39 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[30]);

            if (tmp_called_value_39 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_39 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_39 == NULL)) {
                        tmp_called_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_39 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 125;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_value_39);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 125;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_39, &PyTuple_GET_ITEM(mod_consts[116], 0), mod_consts[93]);
            Py_DECREF(tmp_called_value_39);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[117], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_ass_subvalue_49;
            PyObject *tmp_expression_value_120;
            PyObject *tmp_subscript_value_65;
            PyObject *tmp_ass_subscribed_49;
            PyObject *tmp_ass_subscript_49;
            tmp_expression_value_120 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_120 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_120 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_120 == NULL)) {
                        tmp_expression_value_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_120 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 125;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_120);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_65 = mod_consts[91];
            tmp_ass_subvalue_49 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_120, tmp_subscript_value_65);
            Py_DECREF(tmp_expression_value_120);
            if (tmp_ass_subvalue_49 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_49 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_49 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_49);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_49 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_49);

                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_49 = mod_consts[117];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_49, tmp_ass_subscript_49, tmp_ass_subvalue_49);
            Py_DECREF(tmp_ass_subscribed_49);
            Py_DECREF(tmp_ass_subvalue_49);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[118], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_50;
            PyObject *tmp_expression_value_121;
            PyObject *tmp_subscript_value_66;
            PyObject *tmp_expression_value_122;
            PyObject *tmp_subscript_value_67;
            PyObject *tmp_tuple_element_55;
            PyObject *tmp_ass_subscribed_50;
            PyObject *tmp_ass_subscript_50;
            tmp_expression_value_121 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_121 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_121 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_121 == NULL)) {
                        tmp_expression_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_121 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 126;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_121);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_122 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[23]);

            if (tmp_expression_value_122 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_122 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_122 == NULL)) {
                        tmp_expression_value_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_122 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_121);

                        exception_lineno = 126;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_122);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_tuple_element_55 = mod_consts[91];
            tmp_subscript_value_67 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_123;
                PyObject *tmp_subscript_value_68;
                PyTuple_SET_ITEM0(tmp_subscript_value_67, 0, tmp_tuple_element_55);
                tmp_expression_value_123 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[21]);

                if (tmp_expression_value_123 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_123 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                        if (unlikely(tmp_expression_value_123 == NULL)) {
                            tmp_expression_value_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                        }

                        if (tmp_expression_value_123 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 126;
                            type_description_2 = "o";
                            goto tuple_build_exception_15;
                        }
                        Py_INCREF(tmp_expression_value_123);
                    } else {
                        goto tuple_build_exception_15;
                    }
                }

                tmp_subscript_value_68 = mod_consts[91];
                tmp_tuple_element_55 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_123, tmp_subscript_value_68);
                Py_DECREF(tmp_expression_value_123);
                if (tmp_tuple_element_55 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 126;
                    type_description_2 = "o";
                    goto tuple_build_exception_15;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_67, 1, tmp_tuple_element_55);
            }
            goto tuple_build_noexception_15;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_15:;
            Py_DECREF(tmp_expression_value_121);
            Py_DECREF(tmp_expression_value_122);
            Py_DECREF(tmp_subscript_value_67);
            goto frame_exception_exit_12;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_15:;
            tmp_subscript_value_66 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_122, tmp_subscript_value_67);
            Py_DECREF(tmp_expression_value_122);
            Py_DECREF(tmp_subscript_value_67);
            if (tmp_subscript_value_66 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_121);

                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_50 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_121, tmp_subscript_value_66);
            Py_DECREF(tmp_expression_value_121);
            Py_DECREF(tmp_subscript_value_66);
            if (tmp_ass_subvalue_50 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_50 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_50 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_50);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_50 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_50);

                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_50 = mod_consts[118];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_50, tmp_ass_subscript_50, tmp_ass_subvalue_50);
            Py_DECREF(tmp_ass_subscribed_50);
            Py_DECREF(tmp_ass_subvalue_50);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[119], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_51;
            PyObject *tmp_expression_value_124;
            PyObject *tmp_subscript_value_69;
            PyObject *tmp_expression_value_125;
            PyObject *tmp_subscript_value_70;
            PyObject *tmp_tuple_element_56;
            PyObject *tmp_ass_subscribed_51;
            PyObject *tmp_ass_subscript_51;
            tmp_expression_value_124 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_124 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_124 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_124 == NULL)) {
                        tmp_expression_value_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_124 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 127;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_124);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_125 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[19]);

            if (tmp_expression_value_125 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_125 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_125 == NULL)) {
                        tmp_expression_value_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_125 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_124);

                        exception_lineno = 127;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_125);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_tuple_element_56 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_tuple_element_56 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_56 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_56);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_70 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_70, 0, tmp_tuple_element_56);
            tmp_tuple_element_56 = mod_consts[91];
            PyTuple_SET_ITEM0(tmp_subscript_value_70, 1, tmp_tuple_element_56);
            tmp_subscript_value_69 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_125, tmp_subscript_value_70);
            Py_DECREF(tmp_expression_value_125);
            Py_DECREF(tmp_subscript_value_70);
            if (tmp_subscript_value_69 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_124);

                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_51 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_124, tmp_subscript_value_69);
            Py_DECREF(tmp_expression_value_124);
            Py_DECREF(tmp_subscript_value_69);
            if (tmp_ass_subvalue_51 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_51 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_51 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_51);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_51 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_51);

                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_51 = mod_consts[119];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_51, tmp_ass_subscript_51, tmp_ass_subvalue_51);
            Py_DECREF(tmp_ass_subscribed_51);
            Py_DECREF(tmp_ass_subvalue_51);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[120], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_52;
            PyObject *tmp_expression_value_126;
            PyObject *tmp_subscript_value_71;
            PyObject *tmp_expression_value_127;
            PyObject *tmp_subscript_value_72;
            PyObject *tmp_tuple_element_57;
            PyObject *tmp_ass_subscribed_52;
            PyObject *tmp_ass_subscript_52;
            tmp_expression_value_126 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_126 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_126 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_126 == NULL)) {
                        tmp_expression_value_126 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_126 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 128;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_126);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_expression_value_127 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[23]);

            if (tmp_expression_value_127 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_127 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_127 == NULL)) {
                        tmp_expression_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_127 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_126);

                        exception_lineno = 128;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_127);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_tuple_element_57 = mod_consts[91];
            tmp_subscript_value_72 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_subscript_value_72, 0, tmp_tuple_element_57);
            tmp_tuple_element_57 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[75]);

            if (tmp_tuple_element_57 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_57 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_57 == NULL)) {
                        tmp_tuple_element_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_57 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 128;
                        type_description_2 = "o";
                        goto tuple_build_exception_16;
                    }
                    Py_INCREF(tmp_tuple_element_57);
                } else {
                    goto tuple_build_exception_16;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_72, 1, tmp_tuple_element_57);
            tmp_tuple_element_57 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_tuple_element_57 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_57 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_tuple_element_57);
                } else {
                    goto tuple_build_exception_16;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_72, 2, tmp_tuple_element_57);
            goto tuple_build_noexception_16;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_16:;
            Py_DECREF(tmp_expression_value_126);
            Py_DECREF(tmp_expression_value_127);
            Py_DECREF(tmp_subscript_value_72);
            goto frame_exception_exit_12;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_16:;
            tmp_subscript_value_71 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_127, tmp_subscript_value_72);
            Py_DECREF(tmp_expression_value_127);
            Py_DECREF(tmp_subscript_value_72);
            if (tmp_subscript_value_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_126);

                exception_lineno = 128;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subvalue_52 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_126, tmp_subscript_value_71);
            Py_DECREF(tmp_expression_value_126);
            Py_DECREF(tmp_subscript_value_71);
            if (tmp_ass_subvalue_52 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_52 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_52 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_52);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 128;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_52 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_52);

                exception_lineno = 128;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_52 = mod_consts[120];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_52, tmp_ass_subscript_52, tmp_ass_subvalue_52);
            Py_DECREF(tmp_ass_subscribed_52);
            Py_DECREF(tmp_ass_subvalue_52);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_53;
            PyObject *tmp_expression_value_128;
            PyObject *tmp_subscript_value_73;
            PyObject *tmp_ass_subscribed_53;
            PyObject *tmp_ass_subscript_53;
            tmp_expression_value_128 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_128 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_128 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_128 == NULL)) {
                        tmp_expression_value_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_128 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 129;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_128);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_73 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_73 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_73 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_73);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_53 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_128, tmp_subscript_value_73);
            Py_DECREF(tmp_expression_value_128);
            Py_DECREF(tmp_subscript_value_73);
            if (tmp_ass_subvalue_53 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_53 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_53 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_53);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 129;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_53 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_53);

                exception_lineno = 129;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_53 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_53, tmp_ass_subscript_53, tmp_ass_subvalue_53);
            Py_DECREF(tmp_ass_subscribed_53);
            Py_DECREF(tmp_ass_subvalue_53);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[121], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_54;
            PyObject *tmp_expression_value_129;
            PyObject *tmp_subscript_value_74;
            PyObject *tmp_ass_subscribed_54;
            PyObject *tmp_ass_subscript_54;
            tmp_expression_value_129 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_129 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_129 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_129 == NULL)) {
                        tmp_expression_value_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_129 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 130;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_129);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_74 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[46]);

            if (tmp_subscript_value_74 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_74 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_74);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_54 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_129, tmp_subscript_value_74);
            Py_DECREF(tmp_expression_value_129);
            Py_DECREF(tmp_subscript_value_74);
            if (tmp_ass_subvalue_54 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_54 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_54 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_54);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_54 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_54);

                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_54 = mod_consts[121];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_54, tmp_ass_subscript_54, tmp_ass_subvalue_54);
            Py_DECREF(tmp_ass_subscribed_54);
            Py_DECREF(tmp_ass_subvalue_54);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[70], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 131;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_55;
            PyObject *tmp_expression_value_130;
            PyObject *tmp_subscript_value_75;
            PyObject *tmp_ass_subscribed_55;
            PyObject *tmp_ass_subscript_55;
            tmp_expression_value_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_130 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_130 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_130 == NULL)) {
                        tmp_expression_value_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_130 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 131;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_130);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_75 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[17]);

            if (tmp_subscript_value_75 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_75 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_75 == NULL)) {
                        tmp_subscript_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_75 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_130);

                        exception_lineno = 131;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_75);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_55 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_130, tmp_subscript_value_75);
            Py_DECREF(tmp_expression_value_130);
            Py_DECREF(tmp_subscript_value_75);
            if (tmp_ass_subvalue_55 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 131;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_55 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_55 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_55);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 131;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_55 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_55);

                exception_lineno = 131;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_55 = mod_consts[70];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_55, tmp_ass_subscript_55, tmp_ass_subvalue_55);
            Py_DECREF(tmp_ass_subscribed_55);
            Py_DECREF(tmp_ass_subvalue_55);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 131;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[122], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_56;
            PyObject *tmp_expression_value_131;
            PyObject *tmp_subscript_value_76;
            PyObject *tmp_ass_subscribed_56;
            PyObject *tmp_ass_subscript_56;
            tmp_expression_value_131 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_131 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_131 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_131 == NULL)) {
                        tmp_expression_value_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_131 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 132;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_131);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_76 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_subscript_value_76 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_76 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_76);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_56 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_131, tmp_subscript_value_76);
            Py_DECREF(tmp_expression_value_131);
            Py_DECREF(tmp_subscript_value_76);
            if (tmp_ass_subvalue_56 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 132;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_56 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_56 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_56);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 132;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_56 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_56);

                exception_lineno = 132;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_56 = mod_consts[122];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_56, tmp_ass_subscript_56, tmp_ass_subvalue_56);
            Py_DECREF(tmp_ass_subscribed_56);
            Py_DECREF(tmp_ass_subvalue_56);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 132;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[123], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_57;
            PyObject *tmp_expression_value_132;
            PyObject *tmp_subscript_value_77;
            PyObject *tmp_ass_subscribed_57;
            PyObject *tmp_ass_subscript_57;
            tmp_expression_value_132 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_132 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_132 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_132 == NULL)) {
                        tmp_expression_value_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_132 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 133;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_132);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_77 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[79]);

            if (tmp_subscript_value_77 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_77 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[79]);

                    if (unlikely(tmp_subscript_value_77 == NULL)) {
                        tmp_subscript_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[79]);
                    }

                    if (tmp_subscript_value_77 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_132);

                        exception_lineno = 133;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_77);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_57 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_132, tmp_subscript_value_77);
            Py_DECREF(tmp_expression_value_132);
            Py_DECREF(tmp_subscript_value_77);
            if (tmp_ass_subvalue_57 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 133;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_57 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_57 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_57);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 133;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_57 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_57);

                exception_lineno = 133;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_57 = mod_consts[123];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_57, tmp_ass_subscript_57, tmp_ass_subvalue_57);
            Py_DECREF(tmp_ass_subscribed_57);
            Py_DECREF(tmp_ass_subvalue_57);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 133;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[124], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_58;
            PyObject *tmp_expression_value_133;
            PyObject *tmp_subscript_value_78;
            PyObject *tmp_ass_subscribed_58;
            PyObject *tmp_ass_subscript_58;
            tmp_expression_value_133 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_133 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_133 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_133 == NULL)) {
                        tmp_expression_value_133 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_133 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 134;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_133);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_78 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_subscript_value_78 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_78 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_78);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_58 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_133, tmp_subscript_value_78);
            Py_DECREF(tmp_expression_value_133);
            Py_DECREF(tmp_subscript_value_78);
            if (tmp_ass_subvalue_58 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 134;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_58 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_58 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_58);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 134;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_58 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_58);

                exception_lineno = 134;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_58 = mod_consts[124];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_58, tmp_ass_subscript_58, tmp_ass_subvalue_58);
            Py_DECREF(tmp_ass_subscribed_58);
            Py_DECREF(tmp_ass_subvalue_58);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 134;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[125], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 135;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_59;
            PyObject *tmp_expression_value_134;
            PyObject *tmp_subscript_value_79;
            PyObject *tmp_ass_subscribed_59;
            PyObject *tmp_ass_subscript_59;
            tmp_expression_value_134 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_134 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_134 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_134 == NULL)) {
                        tmp_expression_value_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_134 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 135;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_134);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_79 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_subscript_value_79 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_79 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_79);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_59 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_134, tmp_subscript_value_79);
            Py_DECREF(tmp_expression_value_134);
            Py_DECREF(tmp_subscript_value_79);
            if (tmp_ass_subvalue_59 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 135;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_59 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_59 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_59);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 135;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_59 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_59);

                exception_lineno = 135;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_59 = mod_consts[125];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_59, tmp_ass_subscript_59, tmp_ass_subvalue_59);
            Py_DECREF(tmp_ass_subscribed_59);
            Py_DECREF(tmp_ass_subvalue_59);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 135;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[126], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_60;
            PyObject *tmp_expression_value_135;
            PyObject *tmp_subscript_value_80;
            PyObject *tmp_ass_subscribed_60;
            PyObject *tmp_ass_subscript_60;
            tmp_expression_value_135 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_135 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_135 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_135 == NULL)) {
                        tmp_expression_value_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_135 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 136;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_135);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_80 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[82]);

            if (tmp_subscript_value_80 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_80 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[82]);

                    if (unlikely(tmp_subscript_value_80 == NULL)) {
                        tmp_subscript_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[82]);
                    }

                    if (tmp_subscript_value_80 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_135);

                        exception_lineno = 136;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_80);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_60 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_135, tmp_subscript_value_80);
            Py_DECREF(tmp_expression_value_135);
            Py_DECREF(tmp_subscript_value_80);
            if (tmp_ass_subvalue_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 136;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_60 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_60 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_60);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 136;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_60);

                exception_lineno = 136;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_60 = mod_consts[126];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_60, tmp_ass_subscript_60, tmp_ass_subvalue_60);
            Py_DECREF(tmp_ass_subscribed_60);
            Py_DECREF(tmp_ass_subvalue_60);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 136;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[127], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_61;
            PyObject *tmp_expression_value_136;
            PyObject *tmp_subscript_value_81;
            PyObject *tmp_ass_subscribed_61;
            PyObject *tmp_ass_subscript_61;
            tmp_expression_value_136 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_136 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_136 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_136 == NULL)) {
                        tmp_expression_value_136 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_136 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 137;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_136);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_81 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[89]);

            if (tmp_subscript_value_81 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_81 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[89]);

                    if (unlikely(tmp_subscript_value_81 == NULL)) {
                        tmp_subscript_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[89]);
                    }

                    if (tmp_subscript_value_81 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_136);

                        exception_lineno = 137;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_81);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_61 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_136, tmp_subscript_value_81);
            Py_DECREF(tmp_expression_value_136);
            Py_DECREF(tmp_subscript_value_81);
            if (tmp_ass_subvalue_61 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 137;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_61 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_61 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_61);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 137;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_61 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_61);

                exception_lineno = 137;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_61 = mod_consts[127];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_61, tmp_ass_subscript_61, tmp_ass_subvalue_61);
            Py_DECREF(tmp_ass_subscribed_61);
            Py_DECREF(tmp_ass_subvalue_61);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 137;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[128], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_62;
            PyObject *tmp_expression_value_137;
            PyObject *tmp_subscript_value_82;
            PyObject *tmp_ass_subscribed_62;
            PyObject *tmp_ass_subscript_62;
            tmp_expression_value_137 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_137 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_137 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_137 == NULL)) {
                        tmp_expression_value_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_137 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 138;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_137);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_82 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[17]);

            if (tmp_subscript_value_82 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_82 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_82 == NULL)) {
                        tmp_subscript_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_82 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_137);

                        exception_lineno = 138;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_subscript_value_82);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_62 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_137, tmp_subscript_value_82);
            Py_DECREF(tmp_expression_value_137);
            Py_DECREF(tmp_subscript_value_82);
            if (tmp_ass_subvalue_62 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 138;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_62 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_62 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_62);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 138;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_62 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_62);

                exception_lineno = 138;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_62 = mod_consts[128];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_62, tmp_ass_subscript_62, tmp_ass_subvalue_62);
            Py_DECREF(tmp_ass_subscribed_62);
            Py_DECREF(tmp_ass_subvalue_62);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 138;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[129], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_ass_subvalue_63;
            PyObject *tmp_expression_value_138;
            PyObject *tmp_subscript_value_83;
            PyObject *tmp_ass_subscribed_63;
            PyObject *tmp_ass_subscript_63;
            tmp_expression_value_138 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[22]);

            if (tmp_expression_value_138 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_138 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_138 == NULL)) {
                        tmp_expression_value_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_138 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 139;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_expression_value_138);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_subscript_value_83 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[86]);

            if (tmp_subscript_value_83 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_83 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_83);
                } else {
                    goto frame_exception_exit_12;
                }
            }

            tmp_ass_subvalue_63 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_138, tmp_subscript_value_83);
            Py_DECREF(tmp_expression_value_138);
            Py_DECREF(tmp_subscript_value_83);
            if (tmp_ass_subvalue_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscribed_63 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_63 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_63);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_ass_subscribed_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_63);

                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_ass_subscript_63 = mod_consts[129];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_63, tmp_ass_subscript_63, tmp_ass_subvalue_63);
            Py_DECREF(tmp_ass_subscribed_63);
            Py_DECREF(tmp_ass_subvalue_63);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }
        {
            PyObject *tmp_assign_source_127;
            tmp_assign_source_127 = MAKE_DICT_EMPTY();
            assert(tmp_Schema$class_creation_1__class_decl_dict == NULL);
            tmp_Schema$class_creation_1__class_decl_dict = tmp_assign_source_127;
        }
        {
            PyObject *tmp_assign_source_128;
            tmp_assign_source_128 = MAKE_DICT_EMPTY();
            assert(tmp_Schema$class_creation_1__prepared == NULL);
            tmp_Schema$class_creation_1__prepared = tmp_assign_source_128;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_Schema$class_creation_1__prepared);
            tmp_set_locals_19 = tmp_Schema$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__19_Config_141 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__19_Config_141, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[130];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__19_Config_141, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__19_Config_141, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__19_Config_141, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        frame_43082fa01a7481eddaee874dccc14828_13 = MAKE_CLASS_FRAME(tstate, codeobj_43082fa01a7481eddaee874dccc14828, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_43082fa01a7481eddaee874dccc14828_13);
        assert(Py_REFCNT(frame_43082fa01a7481eddaee874dccc14828_13) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_64;
            PyObject *tmp_ass_subscribed_64;
            PyObject *tmp_ass_subscript_64;
            tmp_ass_subvalue_64 = (PyObject *)&PyUnicode_Type;
            tmp_ass_subscribed_64 = DICT_GET_ITEM0(tstate, locals_fastapi$openapi$models$$$class__19_Config_141, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_64 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 142;
                type_description_3 = "o";
                goto frame_exception_exit_13;
            }

            if (tmp_ass_subscribed_64 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_3 = "o";
                goto frame_exception_exit_13;
            }
            tmp_ass_subscript_64 = mod_consts[56];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_64, tmp_ass_subscript_64, tmp_ass_subvalue_64);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_3 = "o";
                goto frame_exception_exit_13;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_11;
        frame_exception_exit_13:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_43082fa01a7481eddaee874dccc14828_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_43082fa01a7481eddaee874dccc14828_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_43082fa01a7481eddaee874dccc14828_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_43082fa01a7481eddaee874dccc14828_13,
            type_description_3,
            outline_18_var___class__
        );



        assertFrameObject(frame_43082fa01a7481eddaee874dccc14828_13);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_12;
        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_12:;
        type_description_2 = "o";
        goto try_except_handler_61;
        skip_nested_handling_11:;
        {
            PyObject *tmp_assign_source_129;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_value_29;
            PyObject *tmp_tuple_element_58;
            PyObject *tmp_kwargs_value_29;
            tmp_called_value_40 = (PyObject *)&PyType_Type;
            tmp_tuple_element_58 = mod_consts[57];
            tmp_args_value_29 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_58);
            tmp_tuple_element_58 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_58);
            tmp_tuple_element_58 = locals_fastapi$openapi$models$$$class__19_Config_141;
            PyTuple_SET_ITEM0(tmp_args_value_29, 2, tmp_tuple_element_58);
            CHECK_OBJECT(tmp_Schema$class_creation_1__class_decl_dict);
            tmp_kwargs_value_29 = tmp_Schema$class_creation_1__class_decl_dict;
            frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame.f_lineno = 141;
            tmp_assign_source_129 = CALL_FUNCTION(tstate, tmp_called_value_40, tmp_args_value_29, tmp_kwargs_value_29);
            Py_DECREF(tmp_args_value_29);
            if (tmp_assign_source_129 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 141;
                type_description_2 = "o";
                goto try_except_handler_61;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_129;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_dictset_value = outline_18_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_61;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_61:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__19_Config_141);
        locals_fastapi$openapi$models$$$class__19_Config_141 = NULL;
        goto try_return_handler_60;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_56 = exception_type;
        exception_keeper_value_56 = exception_value;
        exception_keeper_tb_56 = exception_tb;
        exception_keeper_lineno_56 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__19_Config_141);
        locals_fastapi$openapi$models$$$class__19_Config_141 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;
        exception_lineno = exception_keeper_lineno_56;

        goto try_except_handler_60;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 141;
        goto try_except_handler_59;
        outline_result_19:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_2 = "o";
            goto try_except_handler_59;
        }
        goto try_end_22;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Schema$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Schema$class_creation_1__class_decl_dict);
        tmp_Schema$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Schema$class_creation_1__prepared);
        Py_DECREF(tmp_Schema$class_creation_1__prepared);
        tmp_Schema$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto frame_exception_exit_12;
        // End of try:
        try_end_22:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_12;
        frame_exception_exit_12:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_aebaf65a7e2810e7ac2517dd24379607_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_aebaf65a7e2810e7ac2517dd24379607_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_aebaf65a7e2810e7ac2517dd24379607_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_aebaf65a7e2810e7ac2517dd24379607_12,
            type_description_2,
            outline_17_var___class__
        );



        assertFrameObject(frame_aebaf65a7e2810e7ac2517dd24379607_12);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_11;
        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_11:;

        goto try_except_handler_58;
        skip_nested_handling_12:;
        CHECK_OBJECT(tmp_Schema$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Schema$class_creation_1__class_decl_dict);
        tmp_Schema$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Schema$class_creation_1__prepared);
        Py_DECREF(tmp_Schema$class_creation_1__prepared);
        tmp_Schema$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_48 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_48 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto try_except_handler_58;
            }
            if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
                goto branch_yes_35;
            } else {
                goto branch_no_35;
            }
        }
        branch_yes_35:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__18_Schema_103, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_58;
        }
        branch_no_35:;
        {
            PyObject *tmp_assign_source_130;
            PyObject *tmp_called_value_41;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_59;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_41 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_59 = mod_consts[91];
            tmp_args_value_30 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_59);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_59 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_59);
            tmp_tuple_element_59 = locals_fastapi$openapi$models$$$class__18_Schema_103;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_59);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_11__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 103;
            tmp_assign_source_130 = CALL_FUNCTION(tstate, tmp_called_value_41, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_130 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto try_except_handler_58;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_130;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_126 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_126);
        goto try_return_handler_58;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_58:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__18_Schema_103);
        locals_fastapi$openapi$models$$$class__18_Schema_103 = NULL;
        goto try_return_handler_57;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_59 = exception_type;
        exception_keeper_value_59 = exception_value;
        exception_keeper_tb_59 = exception_tb;
        exception_keeper_lineno_59 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__18_Schema_103);
        locals_fastapi$openapi$models$$$class__18_Schema_103 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;
        exception_lineno = exception_keeper_lineno_59;

        goto try_except_handler_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_57:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_57:;
        exception_keeper_type_60 = exception_type;
        exception_keeper_value_60 = exception_value;
        exception_keeper_tb_60 = exception_tb;
        exception_keeper_lineno_60 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;
        exception_lineno = exception_keeper_lineno_60;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 103;
        goto try_except_handler_56;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[91], tmp_assign_source_126);
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_56:;
    exception_keeper_type_61 = exception_type;
    exception_keeper_value_61 = exception_value;
    exception_keeper_tb_61 = exception_tb;
    exception_keeper_lineno_61 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_61;
    exception_value = exception_keeper_value_61;
    exception_tb = exception_keeper_tb_61;
    exception_lineno = exception_keeper_lineno_61;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_tuple_element_60;
        tmp_tuple_element_60 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_60 == NULL)) {
            tmp_tuple_element_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_60 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_assign_source_131 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_131, 0, tmp_tuple_element_60);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_131;
    }
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_132 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_132 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_132;
    }
    {
        PyObject *tmp_assign_source_133;
        tmp_assign_source_133 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_133;
    }
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_metaclass_value_12;
        nuitka_bool tmp_condition_result_49;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_139;
        PyObject *tmp_subscript_value_84;
        PyObject *tmp_bases_value_12;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_12 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_condition_result_49 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_49 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_139 = tmp_class_creation_12__bases;
        tmp_subscript_value_84 = mod_consts[15];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_139, tmp_subscript_value_84, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_14:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_134 = SELECT_METACLASS(tstate, tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_134 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_134;
    }
    {
        bool tmp_condition_result_50;
        PyObject *tmp_expression_value_140;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_140 = tmp_class_creation_12__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_140, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_condition_result_50 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_50 != false) {
            goto branch_yes_36;
        } else {
            goto branch_no_36;
        }
    }
    branch_yes_36:;
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_called_value_42;
        PyObject *tmp_expression_value_141;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_61;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_141 = tmp_class_creation_12__metaclass;
        tmp_called_value_42 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_141, mod_consts[35]);
        if (tmp_called_value_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_tuple_element_61 = mod_consts[131];
        tmp_args_value_31 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_61);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_61 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_61);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_12__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 145;
        tmp_assign_source_135 = CALL_FUNCTION(tstate, tmp_called_value_42, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_42);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_135;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_142;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_142 = tmp_class_creation_12__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_142, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_operand_value_13 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_51 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_mod_expr_left_12;
        PyObject *tmp_mod_expr_right_12;
        PyObject *tmp_tuple_element_62;
        PyObject *tmp_expression_value_143;
        PyObject *tmp_name_value_17;
        PyObject *tmp_default_value_12;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_mod_expr_left_12 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_143 = tmp_class_creation_12__metaclass;
        tmp_name_value_17 = mod_consts[38];
        tmp_default_value_12 = mod_consts[39];
        tmp_tuple_element_62 = BUILTIN_GETATTR(tstate, tmp_expression_value_143, tmp_name_value_17, tmp_default_value_12);
        if (tmp_tuple_element_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        tmp_mod_expr_right_12 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_144;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_mod_expr_right_12, 0, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_144 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_144 == NULL));
            tmp_tuple_element_62 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_144, mod_consts[38]);
            Py_DECREF(tmp_expression_value_144);
            if (tmp_tuple_element_62 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 145;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_12, 1, tmp_tuple_element_62);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_mod_expr_right_12);
        goto try_except_handler_62;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_12, tmp_mod_expr_right_12);
        Py_DECREF(tmp_mod_expr_right_12);
        if (tmp_raise_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_62;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_12;
        exception_lineno = 145;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_62;
    }
    branch_no_37:;
    goto branch_end_36;
    branch_no_36:;
    {
        PyObject *tmp_assign_source_136;
        tmp_assign_source_136 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_136;
    }
    branch_end_36:;
    {
        PyObject *tmp_assign_source_137;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_20 = tmp_class_creation_12__prepared;
            locals_fastapi$openapi$models$$$class__20_Example_145 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_64;
        }
        tmp_dictset_value = mod_consts[131];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_64;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_64;
        }
        frame_06eadba4109df7d3a304198003b00a0d_14 = MAKE_CLASS_FRAME(tstate, codeobj_06eadba4109df7d3a304198003b00a0d, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_06eadba4109df7d3a304198003b00a0d_14);
        assert(Py_REFCNT(frame_06eadba4109df7d3a304198003b00a0d_14) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[132], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }
        {
            PyObject *tmp_ass_subvalue_65;
            PyObject *tmp_expression_value_145;
            PyObject *tmp_subscript_value_85;
            PyObject *tmp_ass_subscribed_65;
            PyObject *tmp_ass_subscript_65;
            tmp_expression_value_145 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[22]);

            if (tmp_expression_value_145 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_145 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_145 == NULL)) {
                        tmp_expression_value_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_145 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 146;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_expression_value_145);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_subscript_value_85 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[46]);

            if (tmp_subscript_value_85 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_85 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_85);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_ass_subvalue_65 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_145, tmp_subscript_value_85);
            Py_DECREF(tmp_expression_value_145);
            Py_DECREF(tmp_subscript_value_85);
            if (tmp_ass_subvalue_65 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscribed_65 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_65 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_65);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 146;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }

            if (tmp_ass_subscribed_65 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_65);

                exception_lineno = 146;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscript_65 = mod_consts[132];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_65, tmp_ass_subscript_65, tmp_ass_subvalue_65);
            Py_DECREF(tmp_ass_subscribed_65);
            Py_DECREF(tmp_ass_subvalue_65);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 147;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }
        {
            PyObject *tmp_ass_subvalue_66;
            PyObject *tmp_expression_value_146;
            PyObject *tmp_subscript_value_86;
            PyObject *tmp_ass_subscribed_66;
            PyObject *tmp_ass_subscript_66;
            tmp_expression_value_146 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[22]);

            if (tmp_expression_value_146 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_146 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_146 == NULL)) {
                        tmp_expression_value_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_146 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 147;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_expression_value_146);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_subscript_value_86 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[46]);

            if (tmp_subscript_value_86 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_86 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_86);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_ass_subvalue_66 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_146, tmp_subscript_value_86);
            Py_DECREF(tmp_expression_value_146);
            Py_DECREF(tmp_subscript_value_86);
            if (tmp_ass_subvalue_66 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscribed_66 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_66 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_66);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }

            if (tmp_ass_subscribed_66 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_66);

                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscript_66 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_66, tmp_ass_subscript_66, tmp_ass_subvalue_66);
            Py_DECREF(tmp_ass_subscribed_66);
            Py_DECREF(tmp_ass_subvalue_66);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[133], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 148;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }
        {
            PyObject *tmp_ass_subvalue_67;
            PyObject *tmp_expression_value_147;
            PyObject *tmp_subscript_value_87;
            PyObject *tmp_ass_subscribed_67;
            PyObject *tmp_ass_subscript_67;
            tmp_expression_value_147 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[22]);

            if (tmp_expression_value_147 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_147 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_147 == NULL)) {
                        tmp_expression_value_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_147 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 148;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_expression_value_147);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_subscript_value_87 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[17]);

            if (tmp_subscript_value_87 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_87 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_87 == NULL)) {
                        tmp_subscript_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_87 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_147);

                        exception_lineno = 148;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_subscript_value_87);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_ass_subvalue_67 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_147, tmp_subscript_value_87);
            Py_DECREF(tmp_expression_value_147);
            Py_DECREF(tmp_subscript_value_87);
            if (tmp_ass_subvalue_67 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 148;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscribed_67 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_67 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_67);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 148;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }

            if (tmp_ass_subscribed_67 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_67);

                exception_lineno = 148;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscript_67 = mod_consts[133];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_67, tmp_ass_subscript_67, tmp_ass_subvalue_67);
            Py_DECREF(tmp_ass_subscribed_67);
            Py_DECREF(tmp_ass_subvalue_67);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 148;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[134], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }
        {
            PyObject *tmp_ass_subvalue_68;
            PyObject *tmp_expression_value_148;
            PyObject *tmp_subscript_value_88;
            PyObject *tmp_ass_subscribed_68;
            PyObject *tmp_ass_subscript_68;
            tmp_expression_value_148 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[22]);

            if (tmp_expression_value_148 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_148 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_148 == NULL)) {
                        tmp_expression_value_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_148 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 149;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_expression_value_148);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_subscript_value_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[28]);

            if (tmp_subscript_value_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_88 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_subscript_value_88 == NULL)) {
                        tmp_subscript_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[28]);
                    }

                    if (tmp_subscript_value_88 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_148);

                        exception_lineno = 149;
                        type_description_2 = "o";
                        goto frame_exception_exit_14;
                    }
                    Py_INCREF(tmp_subscript_value_88);
                } else {
                    goto frame_exception_exit_14;
                }
            }

            tmp_ass_subvalue_68 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_148, tmp_subscript_value_88);
            Py_DECREF(tmp_expression_value_148);
            Py_DECREF(tmp_subscript_value_88);
            if (tmp_ass_subvalue_68 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscribed_68 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_68 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_68);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 149;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }

            if (tmp_ass_subscribed_68 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_68);

                exception_lineno = 149;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
            tmp_ass_subscript_68 = mod_consts[134];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_68, tmp_ass_subscript_68, tmp_ass_subvalue_68);
            Py_DECREF(tmp_ass_subscribed_68);
            Py_DECREF(tmp_ass_subvalue_68);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
        }
        {
            PyObject *tmp_assign_source_138;
            tmp_assign_source_138 = MAKE_DICT_EMPTY();
            assert(tmp_Example$class_creation_1__class_decl_dict == NULL);
            tmp_Example$class_creation_1__class_decl_dict = tmp_assign_source_138;
        }
        {
            PyObject *tmp_assign_source_139;
            tmp_assign_source_139 = MAKE_DICT_EMPTY();
            assert(tmp_Example$class_creation_1__prepared == NULL);
            tmp_Example$class_creation_1__prepared = tmp_assign_source_139;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_Example$class_creation_1__prepared);
            tmp_set_locals_21 = tmp_Example$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__21_Config_151 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__21_Config_151, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[135];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__21_Config_151, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__21_Config_151, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_140;
            PyObject *tmp_called_value_43;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_63;
            PyObject *tmp_kwargs_value_32;
            tmp_called_value_43 = (PyObject *)&PyType_Type;
            tmp_tuple_element_63 = mod_consts[57];
            tmp_args_value_32 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_63);
            tmp_tuple_element_63 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_63);
            tmp_tuple_element_63 = locals_fastapi$openapi$models$$$class__21_Config_151;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_63);
            CHECK_OBJECT(tmp_Example$class_creation_1__class_decl_dict);
            tmp_kwargs_value_32 = tmp_Example$class_creation_1__class_decl_dict;
            frame_06eadba4109df7d3a304198003b00a0d_14->m_frame.f_lineno = 151;
            tmp_assign_source_140 = CALL_FUNCTION(tstate, tmp_called_value_43, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_140 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 151;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_140;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_dictset_value = outline_20_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_67;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_67:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__21_Config_151);
        locals_fastapi$openapi$models$$$class__21_Config_151 = NULL;
        goto try_return_handler_66;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_62 = exception_type;
        exception_keeper_value_62 = exception_value;
        exception_keeper_tb_62 = exception_tb;
        exception_keeper_lineno_62 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__21_Config_151);
        locals_fastapi$openapi$models$$$class__21_Config_151 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;
        exception_lineno = exception_keeper_lineno_62;

        goto try_except_handler_66;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_66:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_66:;
        exception_keeper_type_63 = exception_type;
        exception_keeper_value_63 = exception_value;
        exception_keeper_tb_63 = exception_tb;
        exception_keeper_lineno_63 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;
        exception_lineno = exception_keeper_lineno_63;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 151;
        goto try_except_handler_65;
        outline_result_21:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;
            type_description_2 = "o";
            goto try_except_handler_65;
        }
        goto try_end_24;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Example$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Example$class_creation_1__class_decl_dict);
        tmp_Example$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Example$class_creation_1__prepared);
        Py_DECREF(tmp_Example$class_creation_1__prepared);
        tmp_Example$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto frame_exception_exit_14;
        // End of try:
        try_end_24:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_13;
        frame_exception_exit_14:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_06eadba4109df7d3a304198003b00a0d_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_06eadba4109df7d3a304198003b00a0d_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_06eadba4109df7d3a304198003b00a0d_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_06eadba4109df7d3a304198003b00a0d_14,
            type_description_2,
            outline_19_var___class__
        );



        assertFrameObject(frame_06eadba4109df7d3a304198003b00a0d_14);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_13;
        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_64;
        skip_nested_handling_13:;
        CHECK_OBJECT(tmp_Example$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Example$class_creation_1__class_decl_dict);
        tmp_Example$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Example$class_creation_1__prepared);
        Py_DECREF(tmp_Example$class_creation_1__prepared);
        tmp_Example$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_52;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_52 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_52 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 145;

                goto try_except_handler_64;
            }
            if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
                goto branch_yes_38;
            } else {
                goto branch_no_38;
            }
        }
        branch_yes_38:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__20_Example_145, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;

            goto try_except_handler_64;
        }
        branch_no_38:;
        {
            PyObject *tmp_assign_source_141;
            PyObject *tmp_called_value_44;
            PyObject *tmp_args_value_33;
            PyObject *tmp_tuple_element_64;
            PyObject *tmp_kwargs_value_33;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_44 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_64 = mod_consts[131];
            tmp_args_value_33 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_64 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_64);
            tmp_tuple_element_64 = locals_fastapi$openapi$models$$$class__20_Example_145;
            PyTuple_SET_ITEM0(tmp_args_value_33, 2, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_33 = tmp_class_creation_12__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 145;
            tmp_assign_source_141 = CALL_FUNCTION(tstate, tmp_called_value_44, tmp_args_value_33, tmp_kwargs_value_33);
            Py_DECREF(tmp_args_value_33);
            if (tmp_assign_source_141 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 145;

                goto try_except_handler_64;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_141;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_137 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_137);
        goto try_return_handler_64;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_64:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__20_Example_145);
        locals_fastapi$openapi$models$$$class__20_Example_145 = NULL;
        goto try_return_handler_63;
        // Exception handler code:
        try_except_handler_64:;
        exception_keeper_type_65 = exception_type;
        exception_keeper_value_65 = exception_value;
        exception_keeper_tb_65 = exception_tb;
        exception_keeper_lineno_65 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__20_Example_145);
        locals_fastapi$openapi$models$$$class__20_Example_145 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;
        exception_lineno = exception_keeper_lineno_65;

        goto try_except_handler_63;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_63:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_63:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 145;
        goto try_except_handler_62;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[131], tmp_assign_source_137);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_62:;
    exception_keeper_type_67 = exception_type;
    exception_keeper_value_67 = exception_value;
    exception_keeper_tb_67 = exception_tb;
    exception_keeper_lineno_67 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_67;
    exception_value = exception_keeper_value_67;
    exception_tb = exception_keeper_tb_67;
    exception_lineno = exception_keeper_lineno_67;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_142;
        PyObject *tmp_tuple_element_65;
        tmp_tuple_element_65 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[16]);

        if (unlikely(tmp_tuple_element_65 == NULL)) {
            tmp_tuple_element_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[16]);
        }

        if (tmp_tuple_element_65 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_assign_source_142 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_142, 0, tmp_tuple_element_65);
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_142;
    }
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_143 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_143 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        tmp_assign_source_144 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_144;
    }
    {
        PyObject *tmp_assign_source_145;
        PyObject *tmp_metaclass_value_13;
        nuitka_bool tmp_condition_result_53;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_149;
        PyObject *tmp_subscript_value_89;
        PyObject *tmp_bases_value_13;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_13 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_condition_result_53 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_53 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_149 = tmp_class_creation_13__bases;
        tmp_subscript_value_89 = mod_consts[15];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_149, tmp_subscript_value_89, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        goto condexpr_end_15;
        condexpr_false_15:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_15:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_145 = SELECT_METACLASS(tstate, tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_145 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_145;
    }
    {
        bool tmp_condition_result_54;
        PyObject *tmp_expression_value_150;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_150 = tmp_class_creation_13__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_150, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_condition_result_54 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_54 != false) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_called_value_45;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_args_value_34;
        PyObject *tmp_tuple_element_66;
        PyObject *tmp_kwargs_value_34;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_151 = tmp_class_creation_13__metaclass;
        tmp_called_value_45 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_151, mod_consts[35]);
        if (tmp_called_value_45 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_tuple_element_66 = mod_consts[136];
        tmp_args_value_34 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_66);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_66 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_66);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_34 = tmp_class_creation_13__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 155;
        tmp_assign_source_146 = CALL_FUNCTION(tstate, tmp_called_value_45, tmp_args_value_34, tmp_kwargs_value_34);
        Py_DECREF(tmp_called_value_45);
        Py_DECREF(tmp_args_value_34);
        if (tmp_assign_source_146 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_146;
    }
    {
        bool tmp_condition_result_55;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_152;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_152 = tmp_class_creation_13__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_152, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_operand_value_14 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_mod_expr_left_13;
        PyObject *tmp_mod_expr_right_13;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_name_value_18;
        PyObject *tmp_default_value_13;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_mod_expr_left_13 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_153 = tmp_class_creation_13__metaclass;
        tmp_name_value_18 = mod_consts[38];
        tmp_default_value_13 = mod_consts[39];
        tmp_tuple_element_67 = BUILTIN_GETATTR(tstate, tmp_expression_value_153, tmp_name_value_18, tmp_default_value_13);
        if (tmp_tuple_element_67 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        tmp_mod_expr_right_13 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_154;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_mod_expr_right_13, 0, tmp_tuple_element_67);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_154 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_154 == NULL));
            tmp_tuple_element_67 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_154, mod_consts[38]);
            Py_DECREF(tmp_expression_value_154);
            if (tmp_tuple_element_67 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_13, 1, tmp_tuple_element_67);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_mod_expr_right_13);
        goto try_except_handler_68;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_13, tmp_mod_expr_right_13);
        Py_DECREF(tmp_mod_expr_right_13);
        if (tmp_raise_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_68;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_13;
        exception_lineno = 155;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_68;
    }
    branch_no_40:;
    goto branch_end_39;
    branch_no_39:;
    {
        PyObject *tmp_assign_source_147;
        tmp_assign_source_147 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_147;
    }
    branch_end_39:;
    {
        PyObject *tmp_assign_source_148;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_22 = tmp_class_creation_13__prepared;
            locals_fastapi$openapi$models$$$class__22_ParameterInType_155 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_70;
        }
        tmp_dictset_value = mod_consts[136];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_70;
        }
        frame_a2d9d220b6cbb1921be2c723996e0bd8_15 = MAKE_CLASS_FRAME(tstate, codeobj_a2d9d220b6cbb1921be2c723996e0bd8, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_a2d9d220b6cbb1921be2c723996e0bd8_15);
        assert(Py_REFCNT(frame_a2d9d220b6cbb1921be2c723996e0bd8_15) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[137];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[137], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 156;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = mod_consts[138];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[138], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = mod_consts[139];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[139], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = mod_consts[140];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[140], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 159;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_14;
        frame_exception_exit_15:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a2d9d220b6cbb1921be2c723996e0bd8_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a2d9d220b6cbb1921be2c723996e0bd8_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a2d9d220b6cbb1921be2c723996e0bd8_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a2d9d220b6cbb1921be2c723996e0bd8_15,
            type_description_2,
            outline_21_var___class__
        );



        assertFrameObject(frame_a2d9d220b6cbb1921be2c723996e0bd8_15);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_14;
        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_70;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_56;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_56 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_56 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto try_except_handler_70;
            }
            if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
                goto branch_yes_41;
            } else {
                goto branch_no_41;
            }
        }
        branch_yes_41:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__22_ParameterInType_155, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_70;
        }
        branch_no_41:;
        {
            PyObject *tmp_assign_source_149;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_value_35;
            PyObject *tmp_tuple_element_68;
            PyObject *tmp_kwargs_value_35;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_46 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_68 = mod_consts[136];
            tmp_args_value_35 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_68 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_68);
            tmp_tuple_element_68 = locals_fastapi$openapi$models$$$class__22_ParameterInType_155;
            PyTuple_SET_ITEM0(tmp_args_value_35, 2, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_35 = tmp_class_creation_13__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 155;
            tmp_assign_source_149 = CALL_FUNCTION(tstate, tmp_called_value_46, tmp_args_value_35, tmp_kwargs_value_35);
            Py_DECREF(tmp_args_value_35);
            if (tmp_assign_source_149 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto try_except_handler_70;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_149;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_148 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_148);
        goto try_return_handler_70;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_70:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__22_ParameterInType_155);
        locals_fastapi$openapi$models$$$class__22_ParameterInType_155 = NULL;
        goto try_return_handler_69;
        // Exception handler code:
        try_except_handler_70:;
        exception_keeper_type_68 = exception_type;
        exception_keeper_value_68 = exception_value;
        exception_keeper_tb_68 = exception_tb;
        exception_keeper_lineno_68 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__22_ParameterInType_155);
        locals_fastapi$openapi$models$$$class__22_ParameterInType_155 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;
        exception_lineno = exception_keeper_lineno_68;

        goto try_except_handler_69;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_69:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_69:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 155;
        goto try_except_handler_68;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[136], tmp_assign_source_148);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_68:;
    exception_keeper_type_70 = exception_type;
    exception_keeper_value_70 = exception_value;
    exception_keeper_tb_70 = exception_tb;
    exception_keeper_lineno_70 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_70;
    exception_value = exception_keeper_value_70;
    exception_tb = exception_keeper_tb_70;
    exception_lineno = exception_keeper_lineno_70;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_150;
        PyObject *tmp_tuple_element_69;
        tmp_tuple_element_69 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_69 == NULL)) {
            tmp_tuple_element_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_69 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_assign_source_150 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_150, 0, tmp_tuple_element_69);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_150;
    }
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_151 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_151 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_151;
    }
    {
        PyObject *tmp_assign_source_152;
        tmp_assign_source_152 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_152;
    }
    {
        PyObject *tmp_assign_source_153;
        PyObject *tmp_metaclass_value_14;
        nuitka_bool tmp_condition_result_57;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_155;
        PyObject *tmp_subscript_value_90;
        PyObject *tmp_bases_value_14;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_14 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_condition_result_57 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_57 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_155 = tmp_class_creation_14__bases;
        tmp_subscript_value_90 = mod_consts[15];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_155, tmp_subscript_value_90, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_16:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_153 = SELECT_METACLASS(tstate, tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_153 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_153;
    }
    {
        bool tmp_condition_result_58;
        PyObject *tmp_expression_value_156;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_156 = tmp_class_creation_14__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_156, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_condition_result_58 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_58 != false) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_called_value_47;
        PyObject *tmp_expression_value_157;
        PyObject *tmp_args_value_36;
        PyObject *tmp_tuple_element_70;
        PyObject *tmp_kwargs_value_36;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_157 = tmp_class_creation_14__metaclass;
        tmp_called_value_47 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_157, mod_consts[35]);
        if (tmp_called_value_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_tuple_element_70 = mod_consts[141];
        tmp_args_value_36 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_70 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_36 = tmp_class_creation_14__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 162;
        tmp_assign_source_154 = CALL_FUNCTION(tstate, tmp_called_value_47, tmp_args_value_36, tmp_kwargs_value_36);
        Py_DECREF(tmp_called_value_47);
        Py_DECREF(tmp_args_value_36);
        if (tmp_assign_source_154 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_154;
    }
    {
        bool tmp_condition_result_59;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_158;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_158 = tmp_class_creation_14__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_158, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_operand_value_15 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_59 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_mod_expr_left_14;
        PyObject *tmp_mod_expr_right_14;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_expression_value_159;
        PyObject *tmp_name_value_19;
        PyObject *tmp_default_value_14;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_mod_expr_left_14 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_159 = tmp_class_creation_14__metaclass;
        tmp_name_value_19 = mod_consts[38];
        tmp_default_value_14 = mod_consts[39];
        tmp_tuple_element_71 = BUILTIN_GETATTR(tstate, tmp_expression_value_159, tmp_name_value_19, tmp_default_value_14);
        if (tmp_tuple_element_71 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        tmp_mod_expr_right_14 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_160;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_mod_expr_right_14, 0, tmp_tuple_element_71);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_160 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_160 == NULL));
            tmp_tuple_element_71 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_160, mod_consts[38]);
            Py_DECREF(tmp_expression_value_160);
            if (tmp_tuple_element_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 162;

                goto tuple_build_exception_19;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_14, 1, tmp_tuple_element_71);
        }
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_mod_expr_right_14);
        goto try_except_handler_71;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_14, tmp_mod_expr_right_14);
        Py_DECREF(tmp_mod_expr_right_14);
        if (tmp_raise_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_71;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_14;
        exception_lineno = 162;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_71;
    }
    branch_no_43:;
    goto branch_end_42;
    branch_no_42:;
    {
        PyObject *tmp_assign_source_155;
        tmp_assign_source_155 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_155;
    }
    branch_end_42:;
    {
        PyObject *tmp_assign_source_156;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_23 = tmp_class_creation_14__prepared;
            locals_fastapi$openapi$models$$$class__23_Encoding_162 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_73;
        }
        tmp_dictset_value = mod_consts[141];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_73;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_73;
        }
        frame_e9eaceb8163131038f5d432c3ea7a288_16 = MAKE_CLASS_FRAME(tstate, codeobj_e9eaceb8163131038f5d432c3ea7a288, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e9eaceb8163131038f5d432c3ea7a288_16);
        assert(Py_REFCNT(frame_e9eaceb8163131038f5d432c3ea7a288_16) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[142], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_ass_subvalue_69;
            PyObject *tmp_expression_value_161;
            PyObject *tmp_subscript_value_91;
            PyObject *tmp_ass_subscribed_69;
            PyObject *tmp_ass_subscript_69;
            tmp_expression_value_161 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[22]);

            if (tmp_expression_value_161 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_161 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_161 == NULL)) {
                        tmp_expression_value_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_161 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 163;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_161);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_subscript_value_91 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[46]);

            if (tmp_subscript_value_91 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_91 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_91);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_ass_subvalue_69 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_161, tmp_subscript_value_91);
            Py_DECREF(tmp_expression_value_161);
            Py_DECREF(tmp_subscript_value_91);
            if (tmp_ass_subvalue_69 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 163;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscribed_69 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_69 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_69);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 163;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }

            if (tmp_ass_subscribed_69 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_69);

                exception_lineno = 163;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscript_69 = mod_consts[142];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_69, tmp_ass_subscript_69, tmp_ass_subvalue_69);
            Py_DECREF(tmp_ass_subscribed_69);
            Py_DECREF(tmp_ass_subvalue_69);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 163;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[143], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_ass_subvalue_70;
            PyObject *tmp_expression_value_162;
            PyObject *tmp_subscript_value_92;
            PyObject *tmp_expression_value_163;
            PyObject *tmp_subscript_value_93;
            PyObject *tmp_tuple_element_72;
            PyObject *tmp_ass_subscribed_70;
            PyObject *tmp_ass_subscript_70;
            tmp_expression_value_162 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[22]);

            if (tmp_expression_value_162 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_162 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_162 == NULL)) {
                        tmp_expression_value_162 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_162 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 164;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_162);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_expression_value_163 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[19]);

            if (tmp_expression_value_163 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_163 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_163 == NULL)) {
                        tmp_expression_value_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_163 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_162);

                        exception_lineno = 164;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_163);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_tuple_element_72 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[46]);

            if (tmp_tuple_element_72 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_72 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_72);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_subscript_value_93 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_164;
                PyObject *tmp_subscript_value_94;
                PyObject *tmp_tuple_element_73;
                PyTuple_SET_ITEM(tmp_subscript_value_93, 0, tmp_tuple_element_72);
                tmp_expression_value_164 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[23]);

                if (tmp_expression_value_164 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_164 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_164 == NULL)) {
                            tmp_expression_value_164 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_164 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 164;
                            type_description_2 = "o";
                            goto tuple_build_exception_20;
                        }
                        Py_INCREF(tmp_expression_value_164);
                    } else {
                        goto tuple_build_exception_20;
                    }
                }

                tmp_tuple_element_73 = mod_consts[144];
                tmp_subscript_value_94 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM0(tmp_subscript_value_94, 0, tmp_tuple_element_73);
                tmp_tuple_element_73 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[75]);

                if (tmp_tuple_element_73 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_73 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_73 == NULL)) {
                            tmp_tuple_element_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_73 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 164;
                            type_description_2 = "o";
                            goto tuple_build_exception_21;
                        }
                        Py_INCREF(tmp_tuple_element_73);
                    } else {
                        goto tuple_build_exception_21;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_94, 1, tmp_tuple_element_73);
                goto tuple_build_noexception_20;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_21:;
                Py_DECREF(tmp_expression_value_164);
                Py_DECREF(tmp_subscript_value_94);
                goto tuple_build_exception_20;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_20:;
                tmp_tuple_element_72 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_164, tmp_subscript_value_94);
                Py_DECREF(tmp_expression_value_164);
                Py_DECREF(tmp_subscript_value_94);
                if (tmp_tuple_element_72 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 164;
                    type_description_2 = "o";
                    goto tuple_build_exception_20;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_93, 1, tmp_tuple_element_72);
            }
            goto tuple_build_noexception_21;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_20:;
            Py_DECREF(tmp_expression_value_162);
            Py_DECREF(tmp_expression_value_163);
            Py_DECREF(tmp_subscript_value_93);
            goto frame_exception_exit_16;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_21:;
            tmp_subscript_value_92 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_163, tmp_subscript_value_93);
            Py_DECREF(tmp_expression_value_163);
            Py_DECREF(tmp_subscript_value_93);
            if (tmp_subscript_value_92 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_162);

                exception_lineno = 164;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subvalue_70 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_162, tmp_subscript_value_92);
            Py_DECREF(tmp_expression_value_162);
            Py_DECREF(tmp_subscript_value_92);
            if (tmp_ass_subvalue_70 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscribed_70 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_70 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_70);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 164;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }

            if (tmp_ass_subscribed_70 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_70);

                exception_lineno = 164;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscript_70 = mod_consts[143];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_70, tmp_ass_subscript_70, tmp_ass_subvalue_70);
            Py_DECREF(tmp_ass_subscribed_70);
            Py_DECREF(tmp_ass_subvalue_70);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[145], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_ass_subvalue_71;
            PyObject *tmp_expression_value_165;
            PyObject *tmp_subscript_value_95;
            PyObject *tmp_ass_subscribed_71;
            PyObject *tmp_ass_subscript_71;
            tmp_expression_value_165 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[22]);

            if (tmp_expression_value_165 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_165 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_165 == NULL)) {
                        tmp_expression_value_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_165 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 165;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_165);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_subscript_value_95 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[46]);

            if (tmp_subscript_value_95 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_95 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_95);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_ass_subvalue_71 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_165, tmp_subscript_value_95);
            Py_DECREF(tmp_expression_value_165);
            Py_DECREF(tmp_subscript_value_95);
            if (tmp_ass_subvalue_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 165;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscribed_71 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_71 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_71);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 165;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }

            if (tmp_ass_subscribed_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_71);

                exception_lineno = 165;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscript_71 = mod_consts[145];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_71, tmp_ass_subscript_71, tmp_ass_subvalue_71);
            Py_DECREF(tmp_ass_subscribed_71);
            Py_DECREF(tmp_ass_subvalue_71);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 165;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[146], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 166;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_ass_subvalue_72;
            PyObject *tmp_expression_value_166;
            PyObject *tmp_subscript_value_96;
            PyObject *tmp_ass_subscribed_72;
            PyObject *tmp_ass_subscript_72;
            tmp_expression_value_166 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[22]);

            if (tmp_expression_value_166 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_166 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_166 == NULL)) {
                        tmp_expression_value_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_166 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 166;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_166);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_subscript_value_96 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[86]);

            if (tmp_subscript_value_96 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_96 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_96);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_ass_subvalue_72 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_166, tmp_subscript_value_96);
            Py_DECREF(tmp_expression_value_166);
            Py_DECREF(tmp_subscript_value_96);
            if (tmp_ass_subvalue_72 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 166;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscribed_72 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_72 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_72);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 166;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }

            if (tmp_ass_subscribed_72 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_72);

                exception_lineno = 166;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscript_72 = mod_consts[146];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_72, tmp_ass_subscript_72, tmp_ass_subvalue_72);
            Py_DECREF(tmp_ass_subscribed_72);
            Py_DECREF(tmp_ass_subvalue_72);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 166;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[147], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 167;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_ass_subvalue_73;
            PyObject *tmp_expression_value_167;
            PyObject *tmp_subscript_value_97;
            PyObject *tmp_ass_subscribed_73;
            PyObject *tmp_ass_subscript_73;
            tmp_expression_value_167 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[22]);

            if (tmp_expression_value_167 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_167 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_167 == NULL)) {
                        tmp_expression_value_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_167 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 167;
                        type_description_2 = "o";
                        goto frame_exception_exit_16;
                    }
                    Py_INCREF(tmp_expression_value_167);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_subscript_value_97 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[86]);

            if (tmp_subscript_value_97 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_97 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_97);
                } else {
                    goto frame_exception_exit_16;
                }
            }

            tmp_ass_subvalue_73 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_167, tmp_subscript_value_97);
            Py_DECREF(tmp_expression_value_167);
            Py_DECREF(tmp_subscript_value_97);
            if (tmp_ass_subvalue_73 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 167;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscribed_73 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_73 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_73);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 167;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }

            if (tmp_ass_subscribed_73 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_73);

                exception_lineno = 167;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
            tmp_ass_subscript_73 = mod_consts[147];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_73, tmp_ass_subscript_73, tmp_ass_subvalue_73);
            Py_DECREF(tmp_ass_subscribed_73);
            Py_DECREF(tmp_ass_subvalue_73);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 167;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }
        {
            PyObject *tmp_assign_source_157;
            tmp_assign_source_157 = MAKE_DICT_EMPTY();
            assert(tmp_Encoding$class_creation_1__class_decl_dict == NULL);
            tmp_Encoding$class_creation_1__class_decl_dict = tmp_assign_source_157;
        }
        {
            PyObject *tmp_assign_source_158;
            tmp_assign_source_158 = MAKE_DICT_EMPTY();
            assert(tmp_Encoding$class_creation_1__prepared == NULL);
            tmp_Encoding$class_creation_1__prepared = tmp_assign_source_158;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_Encoding$class_creation_1__prepared);
            tmp_set_locals_24 = tmp_Encoding$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__24_Config_169 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__24_Config_169, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[148];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__24_Config_169, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__24_Config_169, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_159;
            PyObject *tmp_called_value_48;
            PyObject *tmp_args_value_37;
            PyObject *tmp_tuple_element_74;
            PyObject *tmp_kwargs_value_37;
            tmp_called_value_48 = (PyObject *)&PyType_Type;
            tmp_tuple_element_74 = mod_consts[57];
            tmp_args_value_37 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_74);
            tmp_tuple_element_74 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_74);
            tmp_tuple_element_74 = locals_fastapi$openapi$models$$$class__24_Config_169;
            PyTuple_SET_ITEM0(tmp_args_value_37, 2, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_Encoding$class_creation_1__class_decl_dict);
            tmp_kwargs_value_37 = tmp_Encoding$class_creation_1__class_decl_dict;
            frame_e9eaceb8163131038f5d432c3ea7a288_16->m_frame.f_lineno = 169;
            tmp_assign_source_159 = CALL_FUNCTION(tstate, tmp_called_value_48, tmp_args_value_37, tmp_kwargs_value_37);
            Py_DECREF(tmp_args_value_37);
            if (tmp_assign_source_159 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_2 = "o";
                goto try_except_handler_76;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_159;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_dictset_value = outline_23_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_76;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_76:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__24_Config_169);
        locals_fastapi$openapi$models$$$class__24_Config_169 = NULL;
        goto try_return_handler_75;
        // Exception handler code:
        try_except_handler_76:;
        exception_keeper_type_71 = exception_type;
        exception_keeper_value_71 = exception_value;
        exception_keeper_tb_71 = exception_tb;
        exception_keeper_lineno_71 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__24_Config_169);
        locals_fastapi$openapi$models$$$class__24_Config_169 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;
        exception_lineno = exception_keeper_lineno_71;

        goto try_except_handler_75;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_75:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_72 = exception_type;
        exception_keeper_value_72 = exception_value;
        exception_keeper_tb_72 = exception_tb;
        exception_keeper_lineno_72 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_72;
        exception_value = exception_keeper_value_72;
        exception_tb = exception_keeper_tb_72;
        exception_lineno = exception_keeper_lineno_72;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 169;
        goto try_except_handler_74;
        outline_result_24:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_2 = "o";
            goto try_except_handler_74;
        }
        goto try_end_27;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Encoding$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Encoding$class_creation_1__class_decl_dict);
        tmp_Encoding$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Encoding$class_creation_1__prepared);
        Py_DECREF(tmp_Encoding$class_creation_1__prepared);
        tmp_Encoding$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto frame_exception_exit_16;
        // End of try:
        try_end_27:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_15;
        frame_exception_exit_16:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e9eaceb8163131038f5d432c3ea7a288_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e9eaceb8163131038f5d432c3ea7a288_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e9eaceb8163131038f5d432c3ea7a288_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e9eaceb8163131038f5d432c3ea7a288_16,
            type_description_2,
            outline_22_var___class__
        );



        assertFrameObject(frame_e9eaceb8163131038f5d432c3ea7a288_16);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_15;
        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_73;
        skip_nested_handling_15:;
        CHECK_OBJECT(tmp_Encoding$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Encoding$class_creation_1__class_decl_dict);
        tmp_Encoding$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Encoding$class_creation_1__prepared);
        Py_DECREF(tmp_Encoding$class_creation_1__prepared);
        tmp_Encoding$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_60 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_60 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 162;

                goto try_except_handler_73;
            }
            if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
                goto branch_yes_44;
            } else {
                goto branch_no_44;
            }
        }
        branch_yes_44:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__23_Encoding_162, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto try_except_handler_73;
        }
        branch_no_44:;
        {
            PyObject *tmp_assign_source_160;
            PyObject *tmp_called_value_49;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_75;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_49 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_75 = mod_consts[141];
            tmp_args_value_38 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_75);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_75 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_75);
            tmp_tuple_element_75 = locals_fastapi$openapi$models$$$class__23_Encoding_162;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_75);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_14__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 162;
            tmp_assign_source_160 = CALL_FUNCTION(tstate, tmp_called_value_49, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_160 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 162;

                goto try_except_handler_73;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_160;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_assign_source_156 = outline_22_var___class__;
        Py_INCREF(tmp_assign_source_156);
        goto try_return_handler_73;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_73:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__23_Encoding_162);
        locals_fastapi$openapi$models$$$class__23_Encoding_162 = NULL;
        goto try_return_handler_72;
        // Exception handler code:
        try_except_handler_73:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__23_Encoding_162);
        locals_fastapi$openapi$models$$$class__23_Encoding_162 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto try_except_handler_72;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_72:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_72:;
        exception_keeper_type_75 = exception_type;
        exception_keeper_value_75 = exception_value;
        exception_keeper_tb_75 = exception_tb;
        exception_keeper_lineno_75 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;
        exception_lineno = exception_keeper_lineno_75;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 162;
        goto try_except_handler_71;
        outline_result_23:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[141], tmp_assign_source_156);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_71:;
    exception_keeper_type_76 = exception_type;
    exception_keeper_value_76 = exception_value;
    exception_keeper_tb_76 = exception_tb;
    exception_keeper_lineno_76 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_76;
    exception_value = exception_keeper_value_76;
    exception_tb = exception_keeper_tb_76;
    exception_lineno = exception_keeper_lineno_76;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_161;
        PyObject *tmp_tuple_element_76;
        tmp_tuple_element_76 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_76 == NULL)) {
            tmp_tuple_element_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_76 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_assign_source_161 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_161, 0, tmp_tuple_element_76);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_161;
    }
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_162 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_162 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_162;
    }
    {
        PyObject *tmp_assign_source_163;
        tmp_assign_source_163 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_163;
    }
    {
        PyObject *tmp_assign_source_164;
        PyObject *tmp_metaclass_value_15;
        nuitka_bool tmp_condition_result_61;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_168;
        PyObject *tmp_subscript_value_98;
        PyObject *tmp_bases_value_15;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_15 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_condition_result_61 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_168 = tmp_class_creation_15__bases;
        tmp_subscript_value_98 = mod_consts[15];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_168, tmp_subscript_value_98, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        goto condexpr_end_17;
        condexpr_false_17:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_164 = SELECT_METACLASS(tstate, tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_164 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_164;
    }
    {
        bool tmp_condition_result_62;
        PyObject *tmp_expression_value_169;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_169 = tmp_class_creation_15__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_169, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_condition_result_62 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_62 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    {
        PyObject *tmp_assign_source_165;
        PyObject *tmp_called_value_50;
        PyObject *tmp_expression_value_170;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_170 = tmp_class_creation_15__metaclass;
        tmp_called_value_50 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_170, mod_consts[35]);
        if (tmp_called_value_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_tuple_element_77 = mod_consts[149];
        tmp_args_value_39 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_77);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_77 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_77);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_15__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 173;
        tmp_assign_source_165 = CALL_FUNCTION(tstate, tmp_called_value_50, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_50);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_165 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_165;
    }
    {
        bool tmp_condition_result_63;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_171;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_171 = tmp_class_creation_15__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_171, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_operand_value_16 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_63 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_63 != false) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_mod_expr_left_15;
        PyObject *tmp_mod_expr_right_15;
        PyObject *tmp_tuple_element_78;
        PyObject *tmp_expression_value_172;
        PyObject *tmp_name_value_20;
        PyObject *tmp_default_value_15;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_mod_expr_left_15 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_172 = tmp_class_creation_15__metaclass;
        tmp_name_value_20 = mod_consts[38];
        tmp_default_value_15 = mod_consts[39];
        tmp_tuple_element_78 = BUILTIN_GETATTR(tstate, tmp_expression_value_172, tmp_name_value_20, tmp_default_value_15);
        if (tmp_tuple_element_78 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        tmp_mod_expr_right_15 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_173;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_mod_expr_right_15, 0, tmp_tuple_element_78);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_173 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_173 == NULL));
            tmp_tuple_element_78 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_173, mod_consts[38]);
            Py_DECREF(tmp_expression_value_173);
            if (tmp_tuple_element_78 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 173;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_15, 1, tmp_tuple_element_78);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_mod_expr_right_15);
        goto try_except_handler_77;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_15, tmp_mod_expr_right_15);
        Py_DECREF(tmp_mod_expr_right_15);
        if (tmp_raise_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_77;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_15;
        exception_lineno = 173;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_77;
    }
    branch_no_46:;
    goto branch_end_45;
    branch_no_45:;
    {
        PyObject *tmp_assign_source_166;
        tmp_assign_source_166 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_166;
    }
    branch_end_45:;
    {
        PyObject *tmp_assign_source_167;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_25 = tmp_class_creation_15__prepared;
            locals_fastapi$openapi$models$$$class__25_MediaType_173 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_79;
        }
        tmp_dictset_value = mod_consts[149];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_79;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_79;
        }
        frame_7c0da8d767a751f27842279ef14aeca7_17 = MAKE_CLASS_FRAME(tstate, codeobj_7c0da8d767a751f27842279ef14aeca7, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_7c0da8d767a751f27842279ef14aeca7_17);
        assert(Py_REFCNT(frame_7c0da8d767a751f27842279ef14aeca7_17) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_51;
            tmp_called_value_51 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[30]);

            if (tmp_called_value_51 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_51 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_51 == NULL)) {
                        tmp_called_value_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_51 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 174;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_called_value_51);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            frame_7c0da8d767a751f27842279ef14aeca7_17->m_frame.f_lineno = 174;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_51, &PyTuple_GET_ITEM(mod_consts[150], 0), mod_consts[93]);
            Py_DECREF(tmp_called_value_51);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[151], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        {
            PyObject *tmp_ass_subvalue_74;
            PyObject *tmp_expression_value_174;
            PyObject *tmp_subscript_value_99;
            PyObject *tmp_expression_value_175;
            PyObject *tmp_subscript_value_100;
            PyObject *tmp_tuple_element_79;
            PyObject *tmp_ass_subscribed_74;
            PyObject *tmp_ass_subscript_74;
            tmp_expression_value_174 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[22]);

            if (tmp_expression_value_174 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_174 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_174 == NULL)) {
                        tmp_expression_value_174 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_174 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 174;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_174);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_expression_value_175 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[23]);

            if (tmp_expression_value_175 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_175 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_175 == NULL)) {
                        tmp_expression_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_175 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_174);

                        exception_lineno = 174;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_175);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_tuple_element_79 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[91]);

            if (tmp_tuple_element_79 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_79 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[91]);

                    if (unlikely(tmp_tuple_element_79 == NULL)) {
                        tmp_tuple_element_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
                    }

                    if (tmp_tuple_element_79 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_174);
                        Py_DECREF(tmp_expression_value_175);

                        exception_lineno = 174;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_tuple_element_79);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_subscript_value_100 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_100, 0, tmp_tuple_element_79);
            tmp_tuple_element_79 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[75]);

            if (tmp_tuple_element_79 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_79 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_79 == NULL)) {
                        tmp_tuple_element_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_79 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 174;
                        type_description_2 = "o";
                        goto tuple_build_exception_23;
                    }
                    Py_INCREF(tmp_tuple_element_79);
                } else {
                    goto tuple_build_exception_23;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_100, 1, tmp_tuple_element_79);
            goto tuple_build_noexception_23;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_23:;
            Py_DECREF(tmp_expression_value_174);
            Py_DECREF(tmp_expression_value_175);
            Py_DECREF(tmp_subscript_value_100);
            goto frame_exception_exit_17;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_23:;
            tmp_subscript_value_99 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_175, tmp_subscript_value_100);
            Py_DECREF(tmp_expression_value_175);
            Py_DECREF(tmp_subscript_value_100);
            if (tmp_subscript_value_99 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_174);

                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subvalue_74 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_174, tmp_subscript_value_99);
            Py_DECREF(tmp_expression_value_174);
            Py_DECREF(tmp_subscript_value_99);
            if (tmp_ass_subvalue_74 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscribed_74 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_74 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_74);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_ass_subscribed_74 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_74);

                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscript_74 = mod_consts[151];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_74, tmp_ass_subscript_74, tmp_ass_subvalue_74);
            Py_DECREF(tmp_ass_subscribed_74);
            Py_DECREF(tmp_ass_subvalue_74);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[128], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            PyObject *tmp_ass_subvalue_75;
            PyObject *tmp_expression_value_176;
            PyObject *tmp_subscript_value_101;
            PyObject *tmp_ass_subscribed_75;
            PyObject *tmp_ass_subscript_75;
            tmp_expression_value_176 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[22]);

            if (tmp_expression_value_176 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_176 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_176 == NULL)) {
                        tmp_expression_value_176 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_176 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 175;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_176);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_subscript_value_101 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[17]);

            if (tmp_subscript_value_101 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_101 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_101 == NULL)) {
                        tmp_subscript_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_101 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_176);

                        exception_lineno = 175;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_subscript_value_101);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_ass_subvalue_75 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_176, tmp_subscript_value_101);
            Py_DECREF(tmp_expression_value_176);
            Py_DECREF(tmp_subscript_value_101);
            if (tmp_ass_subvalue_75 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscribed_75 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_75 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_75);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 175;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_ass_subscribed_75 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_75);

                exception_lineno = 175;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscript_75 = mod_consts[128];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_75, tmp_ass_subscript_75, tmp_ass_subvalue_75);
            Py_DECREF(tmp_ass_subscribed_75);
            Py_DECREF(tmp_ass_subvalue_75);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[152], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            PyObject *tmp_ass_subvalue_76;
            PyObject *tmp_expression_value_177;
            PyObject *tmp_subscript_value_102;
            PyObject *tmp_expression_value_178;
            PyObject *tmp_subscript_value_103;
            PyObject *tmp_tuple_element_80;
            PyObject *tmp_ass_subscribed_76;
            PyObject *tmp_ass_subscript_76;
            tmp_expression_value_177 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[22]);

            if (tmp_expression_value_177 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_177 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_177 == NULL)) {
                        tmp_expression_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_177 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 176;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_177);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_expression_value_178 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[19]);

            if (tmp_expression_value_178 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_178 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_178 == NULL)) {
                        tmp_expression_value_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_178 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_177);

                        exception_lineno = 176;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_178);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_tuple_element_80 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[46]);

            if (tmp_tuple_element_80 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_80 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_80);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_subscript_value_103 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_179;
                PyObject *tmp_subscript_value_104;
                PyObject *tmp_tuple_element_81;
                PyTuple_SET_ITEM(tmp_subscript_value_103, 0, tmp_tuple_element_80);
                tmp_expression_value_179 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[23]);

                if (tmp_expression_value_179 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_179 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_179 == NULL)) {
                            tmp_expression_value_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_179 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 176;
                            type_description_2 = "o";
                            goto tuple_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_179);
                    } else {
                        goto tuple_build_exception_24;
                    }
                }

                tmp_tuple_element_81 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[131]);

                if (tmp_tuple_element_81 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_81 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[131]);

                        if (unlikely(tmp_tuple_element_81 == NULL)) {
                            tmp_tuple_element_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[131]);
                        }

                        if (tmp_tuple_element_81 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_179);

                            exception_lineno = 176;
                            type_description_2 = "o";
                            goto tuple_build_exception_24;
                        }
                        Py_INCREF(tmp_tuple_element_81);
                    } else {
                        goto tuple_build_exception_24;
                    }
                }

                tmp_subscript_value_104 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_104, 0, tmp_tuple_element_81);
                tmp_tuple_element_81 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[75]);

                if (tmp_tuple_element_81 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_81 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_81 == NULL)) {
                            tmp_tuple_element_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_81 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 176;
                            type_description_2 = "o";
                            goto tuple_build_exception_25;
                        }
                        Py_INCREF(tmp_tuple_element_81);
                    } else {
                        goto tuple_build_exception_25;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_104, 1, tmp_tuple_element_81);
                goto tuple_build_noexception_24;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_25:;
                Py_DECREF(tmp_expression_value_179);
                Py_DECREF(tmp_subscript_value_104);
                goto tuple_build_exception_24;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_24:;
                tmp_tuple_element_80 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_179, tmp_subscript_value_104);
                Py_DECREF(tmp_expression_value_179);
                Py_DECREF(tmp_subscript_value_104);
                if (tmp_tuple_element_80 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 176;
                    type_description_2 = "o";
                    goto tuple_build_exception_24;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_103, 1, tmp_tuple_element_80);
            }
            goto tuple_build_noexception_25;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_24:;
            Py_DECREF(tmp_expression_value_177);
            Py_DECREF(tmp_expression_value_178);
            Py_DECREF(tmp_subscript_value_103);
            goto frame_exception_exit_17;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_25:;
            tmp_subscript_value_102 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_178, tmp_subscript_value_103);
            Py_DECREF(tmp_expression_value_178);
            Py_DECREF(tmp_subscript_value_103);
            if (tmp_subscript_value_102 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_177);

                exception_lineno = 176;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subvalue_76 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_177, tmp_subscript_value_102);
            Py_DECREF(tmp_expression_value_177);
            Py_DECREF(tmp_subscript_value_102);
            if (tmp_ass_subvalue_76 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 176;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscribed_76 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_76 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_76);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 176;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_ass_subscribed_76 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_76);

                exception_lineno = 176;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscript_76 = mod_consts[152];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_76, tmp_ass_subscript_76, tmp_ass_subvalue_76);
            Py_DECREF(tmp_ass_subscribed_76);
            Py_DECREF(tmp_ass_subvalue_76);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 176;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[153], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            PyObject *tmp_ass_subvalue_77;
            PyObject *tmp_expression_value_180;
            PyObject *tmp_subscript_value_105;
            PyObject *tmp_expression_value_181;
            PyObject *tmp_subscript_value_106;
            PyObject *tmp_tuple_element_82;
            PyObject *tmp_ass_subscribed_77;
            PyObject *tmp_ass_subscript_77;
            tmp_expression_value_180 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[22]);

            if (tmp_expression_value_180 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_180 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_180 == NULL)) {
                        tmp_expression_value_180 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_180 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 177;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_180);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_expression_value_181 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[19]);

            if (tmp_expression_value_181 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_181 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_181 == NULL)) {
                        tmp_expression_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_181 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_180);

                        exception_lineno = 177;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_expression_value_181);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_tuple_element_82 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[46]);

            if (tmp_tuple_element_82 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_82 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_82);
                } else {
                    goto frame_exception_exit_17;
                }
            }

            tmp_subscript_value_106 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_106, 0, tmp_tuple_element_82);
            tmp_tuple_element_82 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[141]);

            if (tmp_tuple_element_82 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[141]);

                    if (unlikely(tmp_tuple_element_82 == NULL)) {
                        tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[141]);
                    }

                    if (tmp_tuple_element_82 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 177;
                        type_description_2 = "o";
                        goto tuple_build_exception_26;
                    }
                    Py_INCREF(tmp_tuple_element_82);
                } else {
                    goto tuple_build_exception_26;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_106, 1, tmp_tuple_element_82);
            goto tuple_build_noexception_26;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_26:;
            Py_DECREF(tmp_expression_value_180);
            Py_DECREF(tmp_expression_value_181);
            Py_DECREF(tmp_subscript_value_106);
            goto frame_exception_exit_17;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_26:;
            tmp_subscript_value_105 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_181, tmp_subscript_value_106);
            Py_DECREF(tmp_expression_value_181);
            Py_DECREF(tmp_subscript_value_106);
            if (tmp_subscript_value_105 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_180);

                exception_lineno = 177;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subvalue_77 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_180, tmp_subscript_value_105);
            Py_DECREF(tmp_expression_value_180);
            Py_DECREF(tmp_subscript_value_105);
            if (tmp_ass_subvalue_77 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 177;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscribed_77 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_77 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_77);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 177;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_ass_subscribed_77 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_77);

                exception_lineno = 177;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_ass_subscript_77 = mod_consts[153];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_77, tmp_ass_subscript_77, tmp_ass_subvalue_77);
            Py_DECREF(tmp_ass_subscribed_77);
            Py_DECREF(tmp_ass_subvalue_77);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 177;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        {
            PyObject *tmp_assign_source_168;
            tmp_assign_source_168 = MAKE_DICT_EMPTY();
            assert(tmp_MediaType$class_creation_1__class_decl_dict == NULL);
            tmp_MediaType$class_creation_1__class_decl_dict = tmp_assign_source_168;
        }
        {
            PyObject *tmp_assign_source_169;
            tmp_assign_source_169 = MAKE_DICT_EMPTY();
            assert(tmp_MediaType$class_creation_1__prepared == NULL);
            tmp_MediaType$class_creation_1__prepared = tmp_assign_source_169;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_MediaType$class_creation_1__prepared);
            tmp_set_locals_26 = tmp_MediaType$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__26_Config_179 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__26_Config_179, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[154];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__26_Config_179, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__26_Config_179, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_170;
            PyObject *tmp_called_value_52;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_83;
            PyObject *tmp_kwargs_value_40;
            tmp_called_value_52 = (PyObject *)&PyType_Type;
            tmp_tuple_element_83 = mod_consts[57];
            tmp_args_value_40 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_83);
            tmp_tuple_element_83 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_83);
            tmp_tuple_element_83 = locals_fastapi$openapi$models$$$class__26_Config_179;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_83);
            CHECK_OBJECT(tmp_MediaType$class_creation_1__class_decl_dict);
            tmp_kwargs_value_40 = tmp_MediaType$class_creation_1__class_decl_dict;
            frame_7c0da8d767a751f27842279ef14aeca7_17->m_frame.f_lineno = 179;
            tmp_assign_source_170 = CALL_FUNCTION(tstate, tmp_called_value_52, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_170 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 179;
                type_description_2 = "o";
                goto try_except_handler_82;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_170;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_dictset_value = outline_25_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_82;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_82:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__26_Config_179);
        locals_fastapi$openapi$models$$$class__26_Config_179 = NULL;
        goto try_return_handler_81;
        // Exception handler code:
        try_except_handler_82:;
        exception_keeper_type_77 = exception_type;
        exception_keeper_value_77 = exception_value;
        exception_keeper_tb_77 = exception_tb;
        exception_keeper_lineno_77 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__26_Config_179);
        locals_fastapi$openapi$models$$$class__26_Config_179 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;
        exception_lineno = exception_keeper_lineno_77;

        goto try_except_handler_81;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_81:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_81:;
        exception_keeper_type_78 = exception_type;
        exception_keeper_value_78 = exception_value;
        exception_keeper_tb_78 = exception_tb;
        exception_keeper_lineno_78 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;
        exception_lineno = exception_keeper_lineno_78;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 179;
        goto try_except_handler_80;
        outline_result_26:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_2 = "o";
            goto try_except_handler_80;
        }
        goto try_end_29;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_MediaType$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_MediaType$class_creation_1__class_decl_dict);
        tmp_MediaType$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_MediaType$class_creation_1__prepared);
        Py_DECREF(tmp_MediaType$class_creation_1__prepared);
        tmp_MediaType$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto frame_exception_exit_17;
        // End of try:
        try_end_29:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_16;
        frame_exception_exit_17:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7c0da8d767a751f27842279ef14aeca7_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7c0da8d767a751f27842279ef14aeca7_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7c0da8d767a751f27842279ef14aeca7_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7c0da8d767a751f27842279ef14aeca7_17,
            type_description_2,
            outline_24_var___class__
        );



        assertFrameObject(frame_7c0da8d767a751f27842279ef14aeca7_17);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_16;
        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_79;
        skip_nested_handling_16:;
        CHECK_OBJECT(tmp_MediaType$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_MediaType$class_creation_1__class_decl_dict);
        tmp_MediaType$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_MediaType$class_creation_1__prepared);
        Py_DECREF(tmp_MediaType$class_creation_1__prepared);
        tmp_MediaType$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_64;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_64 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_64 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 173;

                goto try_except_handler_79;
            }
            if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
                goto branch_yes_47;
            } else {
                goto branch_no_47;
            }
        }
        branch_yes_47:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__25_MediaType_173, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;

            goto try_except_handler_79;
        }
        branch_no_47:;
        {
            PyObject *tmp_assign_source_171;
            PyObject *tmp_called_value_53;
            PyObject *tmp_args_value_41;
            PyObject *tmp_tuple_element_84;
            PyObject *tmp_kwargs_value_41;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_53 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_84 = mod_consts[149];
            tmp_args_value_41 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_84 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_84);
            tmp_tuple_element_84 = locals_fastapi$openapi$models$$$class__25_MediaType_173;
            PyTuple_SET_ITEM0(tmp_args_value_41, 2, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_41 = tmp_class_creation_15__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 173;
            tmp_assign_source_171 = CALL_FUNCTION(tstate, tmp_called_value_53, tmp_args_value_41, tmp_kwargs_value_41);
            Py_DECREF(tmp_args_value_41);
            if (tmp_assign_source_171 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 173;

                goto try_except_handler_79;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_171;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_167 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_167);
        goto try_return_handler_79;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_79:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__25_MediaType_173);
        locals_fastapi$openapi$models$$$class__25_MediaType_173 = NULL;
        goto try_return_handler_78;
        // Exception handler code:
        try_except_handler_79:;
        exception_keeper_type_80 = exception_type;
        exception_keeper_value_80 = exception_value;
        exception_keeper_tb_80 = exception_tb;
        exception_keeper_lineno_80 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__25_MediaType_173);
        locals_fastapi$openapi$models$$$class__25_MediaType_173 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;
        exception_lineno = exception_keeper_lineno_80;

        goto try_except_handler_78;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_78:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_81 = exception_type;
        exception_keeper_value_81 = exception_value;
        exception_keeper_tb_81 = exception_tb;
        exception_keeper_lineno_81 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;
        exception_lineno = exception_keeper_lineno_81;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 173;
        goto try_except_handler_77;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[149], tmp_assign_source_167);
    }
    goto try_end_30;
    // Exception handler code:
    try_except_handler_77:;
    exception_keeper_type_82 = exception_type;
    exception_keeper_value_82 = exception_value;
    exception_keeper_tb_82 = exception_tb;
    exception_keeper_lineno_82 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_82;
    exception_value = exception_keeper_value_82;
    exception_tb = exception_keeper_tb_82;
    exception_lineno = exception_keeper_lineno_82;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_172;
        PyObject *tmp_tuple_element_85;
        tmp_tuple_element_85 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_85 == NULL)) {
            tmp_tuple_element_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_85 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_assign_source_172 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_172, 0, tmp_tuple_element_85);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_172;
    }
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_173 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_173 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_173;
    }
    {
        PyObject *tmp_assign_source_174;
        tmp_assign_source_174 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_174;
    }
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_metaclass_value_16;
        nuitka_bool tmp_condition_result_65;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_182;
        PyObject *tmp_subscript_value_107;
        PyObject *tmp_bases_value_16;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_16 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_condition_result_65 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_65 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_182 = tmp_class_creation_16__bases;
        tmp_subscript_value_107 = mod_consts[15];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_182, tmp_subscript_value_107, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_18:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_16 = tmp_class_creation_16__bases;
        tmp_assign_source_175 = SELECT_METACLASS(tstate, tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_175 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_175;
    }
    {
        bool tmp_condition_result_66;
        PyObject *tmp_expression_value_183;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_183 = tmp_class_creation_16__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_183, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_condition_result_66 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_66 != false) {
            goto branch_yes_48;
        } else {
            goto branch_no_48;
        }
    }
    branch_yes_48:;
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_called_value_54;
        PyObject *tmp_expression_value_184;
        PyObject *tmp_args_value_42;
        PyObject *tmp_tuple_element_86;
        PyObject *tmp_kwargs_value_42;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_184 = tmp_class_creation_16__metaclass;
        tmp_called_value_54 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_184, mod_consts[35]);
        if (tmp_called_value_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_tuple_element_86 = mod_consts[155];
        tmp_args_value_42 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_86);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_86 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_86);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_42 = tmp_class_creation_16__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 183;
        tmp_assign_source_176 = CALL_FUNCTION(tstate, tmp_called_value_54, tmp_args_value_42, tmp_kwargs_value_42);
        Py_DECREF(tmp_called_value_54);
        Py_DECREF(tmp_args_value_42);
        if (tmp_assign_source_176 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_176;
    }
    {
        bool tmp_condition_result_67;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_185;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_185 = tmp_class_creation_16__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_185, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_operand_value_17 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        assert(!(tmp_res == -1));
        tmp_condition_result_67 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_67 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_mod_expr_left_16;
        PyObject *tmp_mod_expr_right_16;
        PyObject *tmp_tuple_element_87;
        PyObject *tmp_expression_value_186;
        PyObject *tmp_name_value_21;
        PyObject *tmp_default_value_16;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_mod_expr_left_16 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_186 = tmp_class_creation_16__metaclass;
        tmp_name_value_21 = mod_consts[38];
        tmp_default_value_16 = mod_consts[39];
        tmp_tuple_element_87 = BUILTIN_GETATTR(tstate, tmp_expression_value_186, tmp_name_value_21, tmp_default_value_16);
        if (tmp_tuple_element_87 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        tmp_mod_expr_right_16 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_187;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_mod_expr_right_16, 0, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_32 = tmp_class_creation_16__prepared;
            tmp_expression_value_187 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_187 == NULL));
            tmp_tuple_element_87 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_187, mod_consts[38]);
            Py_DECREF(tmp_expression_value_187);
            if (tmp_tuple_element_87 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 183;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_16, 1, tmp_tuple_element_87);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_mod_expr_right_16);
        goto try_except_handler_83;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_16, tmp_mod_expr_right_16);
        Py_DECREF(tmp_mod_expr_right_16);
        if (tmp_raise_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_83;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_16;
        exception_lineno = 183;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_83;
    }
    branch_no_49:;
    goto branch_end_48;
    branch_no_48:;
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_177;
    }
    branch_end_48:;
    {
        PyObject *tmp_assign_source_178;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_27 = tmp_class_creation_16__prepared;
            locals_fastapi$openapi$models$$$class__27_ParameterBase_183 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_85;
        }
        tmp_dictset_value = mod_consts[155];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_85;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_85;
        }
        frame_649ab6816638af9825ad768a923fcabc_18 = MAKE_CLASS_FRAME(tstate, codeobj_649ab6816638af9825ad768a923fcabc, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_649ab6816638af9825ad768a923fcabc_18);
        assert(Py_REFCNT(frame_649ab6816638af9825ad768a923fcabc_18) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_78;
            PyObject *tmp_expression_value_188;
            PyObject *tmp_subscript_value_108;
            PyObject *tmp_ass_subscribed_78;
            PyObject *tmp_ass_subscript_78;
            tmp_expression_value_188 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_188 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_188 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_188 == NULL)) {
                        tmp_expression_value_188 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_188 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 184;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_188);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_108 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[46]);

            if (tmp_subscript_value_108 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_108 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_108);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_78 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_188, tmp_subscript_value_108);
            Py_DECREF(tmp_expression_value_188);
            Py_DECREF(tmp_subscript_value_108);
            if (tmp_ass_subvalue_78 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_78 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_78 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_78);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_78 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_78);

                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_78 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_78, tmp_ass_subscript_78, tmp_ass_subvalue_78);
            Py_DECREF(tmp_ass_subscribed_78);
            Py_DECREF(tmp_ass_subvalue_78);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[111], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_79;
            PyObject *tmp_expression_value_189;
            PyObject *tmp_subscript_value_109;
            PyObject *tmp_ass_subscribed_79;
            PyObject *tmp_ass_subscript_79;
            tmp_expression_value_189 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_189 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_189 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_189 == NULL)) {
                        tmp_expression_value_189 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_189 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 185;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_189);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_109 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[86]);

            if (tmp_subscript_value_109 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_109 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_109);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_79 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_189, tmp_subscript_value_109);
            Py_DECREF(tmp_expression_value_189);
            Py_DECREF(tmp_subscript_value_109);
            if (tmp_ass_subvalue_79 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 185;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_79 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_79 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_79);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 185;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_79 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_79);

                exception_lineno = 185;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_79 = mod_consts[111];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_79, tmp_ass_subscript_79, tmp_ass_subvalue_79);
            Py_DECREF(tmp_ass_subscribed_79);
            Py_DECREF(tmp_ass_subvalue_79);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 185;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[129], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_80;
            PyObject *tmp_expression_value_190;
            PyObject *tmp_subscript_value_110;
            PyObject *tmp_ass_subscribed_80;
            PyObject *tmp_ass_subscript_80;
            tmp_expression_value_190 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_190 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_190 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_190 == NULL)) {
                        tmp_expression_value_190 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_190 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 186;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_190);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_110 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[86]);

            if (tmp_subscript_value_110 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_110 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_110);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_80 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_190, tmp_subscript_value_110);
            Py_DECREF(tmp_expression_value_190);
            Py_DECREF(tmp_subscript_value_110);
            if (tmp_ass_subvalue_80 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 186;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_80 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_80 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_80);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 186;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_80 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_80);

                exception_lineno = 186;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_80 = mod_consts[129];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_80, tmp_ass_subscript_80, tmp_ass_subvalue_80);
            Py_DECREF(tmp_ass_subscribed_80);
            Py_DECREF(tmp_ass_subvalue_80);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 186;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[145], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_81;
            PyObject *tmp_expression_value_191;
            PyObject *tmp_subscript_value_111;
            PyObject *tmp_ass_subscribed_81;
            PyObject *tmp_ass_subscript_81;
            tmp_expression_value_191 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_191 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_191 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_191 == NULL)) {
                        tmp_expression_value_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_191 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 188;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_191);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_111 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[46]);

            if (tmp_subscript_value_111 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_111 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_111);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_81 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_191, tmp_subscript_value_111);
            Py_DECREF(tmp_expression_value_191);
            Py_DECREF(tmp_subscript_value_111);
            if (tmp_ass_subvalue_81 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 188;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_81 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_81 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_81);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 188;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_81 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_81);

                exception_lineno = 188;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_81 = mod_consts[145];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_81, tmp_ass_subscript_81, tmp_ass_subvalue_81);
            Py_DECREF(tmp_ass_subscribed_81);
            Py_DECREF(tmp_ass_subvalue_81);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 188;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[146], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_82;
            PyObject *tmp_expression_value_192;
            PyObject *tmp_subscript_value_112;
            PyObject *tmp_ass_subscribed_82;
            PyObject *tmp_ass_subscript_82;
            tmp_expression_value_192 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_192 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_192 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_192 == NULL)) {
                        tmp_expression_value_192 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_192 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 189;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_192);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_112 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[86]);

            if (tmp_subscript_value_112 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_112 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_112);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_82 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_192, tmp_subscript_value_112);
            Py_DECREF(tmp_expression_value_192);
            Py_DECREF(tmp_subscript_value_112);
            if (tmp_ass_subvalue_82 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_82 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_82 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_82);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 189;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_82 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_82);

                exception_lineno = 189;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_82 = mod_consts[146];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_82, tmp_ass_subscript_82, tmp_ass_subvalue_82);
            Py_DECREF(tmp_ass_subscribed_82);
            Py_DECREF(tmp_ass_subvalue_82);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[147], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 190;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_83;
            PyObject *tmp_expression_value_193;
            PyObject *tmp_subscript_value_113;
            PyObject *tmp_ass_subscribed_83;
            PyObject *tmp_ass_subscript_83;
            tmp_expression_value_193 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_193 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_193 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_193 == NULL)) {
                        tmp_expression_value_193 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_193 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 190;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_193);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_113 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[86]);

            if (tmp_subscript_value_113 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_113 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_113);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_83 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_193, tmp_subscript_value_113);
            Py_DECREF(tmp_expression_value_193);
            Py_DECREF(tmp_subscript_value_113);
            if (tmp_ass_subvalue_83 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_83 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_83 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_83);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_83 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_83);

                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_83 = mod_consts[147];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_83, tmp_ass_subscript_83, tmp_ass_subvalue_83);
            Py_DECREF(tmp_ass_subscribed_83);
            Py_DECREF(tmp_ass_subvalue_83);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        {
            PyObject *tmp_called_value_55;
            tmp_called_value_55 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[30]);

            if (tmp_called_value_55 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_55 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_55 == NULL)) {
                        tmp_called_value_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_55 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 191;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_called_value_55);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            frame_649ab6816638af9825ad768a923fcabc_18->m_frame.f_lineno = 191;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_55, &PyTuple_GET_ITEM(mod_consts[150], 0), mod_consts[93]);
            Py_DECREF(tmp_called_value_55);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[151], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        {
            PyObject *tmp_ass_subvalue_84;
            PyObject *tmp_expression_value_194;
            PyObject *tmp_subscript_value_114;
            PyObject *tmp_expression_value_195;
            PyObject *tmp_subscript_value_115;
            PyObject *tmp_tuple_element_88;
            PyObject *tmp_ass_subscribed_84;
            PyObject *tmp_ass_subscript_84;
            tmp_expression_value_194 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_194 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_194 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_194 == NULL)) {
                        tmp_expression_value_194 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_194 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 191;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_194);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_expression_value_195 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[23]);

            if (tmp_expression_value_195 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_195 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_195 == NULL)) {
                        tmp_expression_value_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_195 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_194);

                        exception_lineno = 191;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_195);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_tuple_element_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[91]);

            if (tmp_tuple_element_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_88 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[91]);

                    if (unlikely(tmp_tuple_element_88 == NULL)) {
                        tmp_tuple_element_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
                    }

                    if (tmp_tuple_element_88 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_194);
                        Py_DECREF(tmp_expression_value_195);

                        exception_lineno = 191;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_tuple_element_88);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_115 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_115, 0, tmp_tuple_element_88);
            tmp_tuple_element_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[75]);

            if (tmp_tuple_element_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_88 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_88 == NULL)) {
                        tmp_tuple_element_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_88 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 191;
                        type_description_2 = "o";
                        goto tuple_build_exception_28;
                    }
                    Py_INCREF(tmp_tuple_element_88);
                } else {
                    goto tuple_build_exception_28;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_115, 1, tmp_tuple_element_88);
            goto tuple_build_noexception_28;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_28:;
            Py_DECREF(tmp_expression_value_194);
            Py_DECREF(tmp_expression_value_195);
            Py_DECREF(tmp_subscript_value_115);
            goto frame_exception_exit_18;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_28:;
            tmp_subscript_value_114 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_195, tmp_subscript_value_115);
            Py_DECREF(tmp_expression_value_195);
            Py_DECREF(tmp_subscript_value_115);
            if (tmp_subscript_value_114 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_194);

                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subvalue_84 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_194, tmp_subscript_value_114);
            Py_DECREF(tmp_expression_value_194);
            Py_DECREF(tmp_subscript_value_114);
            if (tmp_ass_subvalue_84 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_84 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_84 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_84);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_84 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_84);

                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_84 = mod_consts[151];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_84, tmp_ass_subscript_84, tmp_ass_subvalue_84);
            Py_DECREF(tmp_ass_subscribed_84);
            Py_DECREF(tmp_ass_subvalue_84);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[128], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_85;
            PyObject *tmp_expression_value_196;
            PyObject *tmp_subscript_value_116;
            PyObject *tmp_ass_subscribed_85;
            PyObject *tmp_ass_subscript_85;
            tmp_expression_value_196 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_196 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_196 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_196 == NULL)) {
                        tmp_expression_value_196 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_196 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 192;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_196);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_116 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[17]);

            if (tmp_subscript_value_116 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_116 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_subscript_value_116 == NULL)) {
                        tmp_subscript_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_subscript_value_116 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_196);

                        exception_lineno = 192;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_subscript_value_116);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_ass_subvalue_85 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_196, tmp_subscript_value_116);
            Py_DECREF(tmp_expression_value_196);
            Py_DECREF(tmp_subscript_value_116);
            if (tmp_ass_subvalue_85 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 192;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_85 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_85 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_85);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 192;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_85 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_85);

                exception_lineno = 192;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_85 = mod_consts[128];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_85, tmp_ass_subscript_85, tmp_ass_subvalue_85);
            Py_DECREF(tmp_ass_subscribed_85);
            Py_DECREF(tmp_ass_subvalue_85);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 192;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[152], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_86;
            PyObject *tmp_expression_value_197;
            PyObject *tmp_subscript_value_117;
            PyObject *tmp_expression_value_198;
            PyObject *tmp_subscript_value_118;
            PyObject *tmp_tuple_element_89;
            PyObject *tmp_ass_subscribed_86;
            PyObject *tmp_ass_subscript_86;
            tmp_expression_value_197 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_197 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_197 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_197 == NULL)) {
                        tmp_expression_value_197 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_197 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 193;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_197);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_expression_value_198 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[19]);

            if (tmp_expression_value_198 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_198 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_198 == NULL)) {
                        tmp_expression_value_198 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_198 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_197);

                        exception_lineno = 193;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_198);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_tuple_element_89 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[46]);

            if (tmp_tuple_element_89 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_89 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_89);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_118 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_199;
                PyObject *tmp_subscript_value_119;
                PyObject *tmp_tuple_element_90;
                PyTuple_SET_ITEM(tmp_subscript_value_118, 0, tmp_tuple_element_89);
                tmp_expression_value_199 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[23]);

                if (tmp_expression_value_199 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_199 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_199 == NULL)) {
                            tmp_expression_value_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_199 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 193;
                            type_description_2 = "o";
                            goto tuple_build_exception_29;
                        }
                        Py_INCREF(tmp_expression_value_199);
                    } else {
                        goto tuple_build_exception_29;
                    }
                }

                tmp_tuple_element_90 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[131]);

                if (tmp_tuple_element_90 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_90 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[131]);

                        if (unlikely(tmp_tuple_element_90 == NULL)) {
                            tmp_tuple_element_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[131]);
                        }

                        if (tmp_tuple_element_90 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_199);

                            exception_lineno = 193;
                            type_description_2 = "o";
                            goto tuple_build_exception_29;
                        }
                        Py_INCREF(tmp_tuple_element_90);
                    } else {
                        goto tuple_build_exception_29;
                    }
                }

                tmp_subscript_value_119 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_119, 0, tmp_tuple_element_90);
                tmp_tuple_element_90 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[75]);

                if (tmp_tuple_element_90 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_90 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_90 == NULL)) {
                            tmp_tuple_element_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_90 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 193;
                            type_description_2 = "o";
                            goto tuple_build_exception_30;
                        }
                        Py_INCREF(tmp_tuple_element_90);
                    } else {
                        goto tuple_build_exception_30;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_119, 1, tmp_tuple_element_90);
                goto tuple_build_noexception_29;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_30:;
                Py_DECREF(tmp_expression_value_199);
                Py_DECREF(tmp_subscript_value_119);
                goto tuple_build_exception_29;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_29:;
                tmp_tuple_element_89 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_199, tmp_subscript_value_119);
                Py_DECREF(tmp_expression_value_199);
                Py_DECREF(tmp_subscript_value_119);
                if (tmp_tuple_element_89 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 193;
                    type_description_2 = "o";
                    goto tuple_build_exception_29;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_118, 1, tmp_tuple_element_89);
            }
            goto tuple_build_noexception_30;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_29:;
            Py_DECREF(tmp_expression_value_197);
            Py_DECREF(tmp_expression_value_198);
            Py_DECREF(tmp_subscript_value_118);
            goto frame_exception_exit_18;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_30:;
            tmp_subscript_value_117 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_198, tmp_subscript_value_118);
            Py_DECREF(tmp_expression_value_198);
            Py_DECREF(tmp_subscript_value_118);
            if (tmp_subscript_value_117 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_197);

                exception_lineno = 193;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subvalue_86 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_197, tmp_subscript_value_117);
            Py_DECREF(tmp_expression_value_197);
            Py_DECREF(tmp_subscript_value_117);
            if (tmp_ass_subvalue_86 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 193;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_86 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_86 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_86);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 193;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_86 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_86);

                exception_lineno = 193;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_86 = mod_consts[152];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_86, tmp_ass_subscript_86, tmp_ass_subvalue_86);
            Py_DECREF(tmp_ass_subscribed_86);
            Py_DECREF(tmp_ass_subvalue_86);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 193;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[156], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            PyObject *tmp_ass_subvalue_87;
            PyObject *tmp_expression_value_200;
            PyObject *tmp_subscript_value_120;
            PyObject *tmp_expression_value_201;
            PyObject *tmp_subscript_value_121;
            PyObject *tmp_tuple_element_91;
            PyObject *tmp_ass_subscribed_87;
            PyObject *tmp_ass_subscript_87;
            tmp_expression_value_200 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[22]);

            if (tmp_expression_value_200 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_200 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_200 == NULL)) {
                        tmp_expression_value_200 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_200 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 195;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_200);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_expression_value_201 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[19]);

            if (tmp_expression_value_201 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_201 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_201 == NULL)) {
                        tmp_expression_value_201 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_201 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_200);

                        exception_lineno = 195;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_expression_value_201);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_tuple_element_91 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[46]);

            if (tmp_tuple_element_91 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_91 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_91);
                } else {
                    goto frame_exception_exit_18;
                }
            }

            tmp_subscript_value_121 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_121, 0, tmp_tuple_element_91);
            tmp_tuple_element_91 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[149]);

            if (tmp_tuple_element_91 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_91 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[149]);

                    if (unlikely(tmp_tuple_element_91 == NULL)) {
                        tmp_tuple_element_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[149]);
                    }

                    if (tmp_tuple_element_91 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 195;
                        type_description_2 = "o";
                        goto tuple_build_exception_31;
                    }
                    Py_INCREF(tmp_tuple_element_91);
                } else {
                    goto tuple_build_exception_31;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_121, 1, tmp_tuple_element_91);
            goto tuple_build_noexception_31;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_31:;
            Py_DECREF(tmp_expression_value_200);
            Py_DECREF(tmp_expression_value_201);
            Py_DECREF(tmp_subscript_value_121);
            goto frame_exception_exit_18;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_31:;
            tmp_subscript_value_120 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_201, tmp_subscript_value_121);
            Py_DECREF(tmp_expression_value_201);
            Py_DECREF(tmp_subscript_value_121);
            if (tmp_subscript_value_120 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_200);

                exception_lineno = 195;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subvalue_87 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_200, tmp_subscript_value_120);
            Py_DECREF(tmp_expression_value_200);
            Py_DECREF(tmp_subscript_value_120);
            if (tmp_ass_subvalue_87 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 195;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscribed_87 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_87 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_87);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 195;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_ass_subscribed_87 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_87);

                exception_lineno = 195;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_ass_subscript_87 = mod_consts[156];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_87, tmp_ass_subscript_87, tmp_ass_subvalue_87);
            Py_DECREF(tmp_ass_subscribed_87);
            Py_DECREF(tmp_ass_subvalue_87);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 195;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        {
            PyObject *tmp_assign_source_179;
            tmp_assign_source_179 = MAKE_DICT_EMPTY();
            assert(tmp_ParameterBase$class_creation_1__class_decl_dict == NULL);
            tmp_ParameterBase$class_creation_1__class_decl_dict = tmp_assign_source_179;
        }
        {
            PyObject *tmp_assign_source_180;
            tmp_assign_source_180 = MAKE_DICT_EMPTY();
            assert(tmp_ParameterBase$class_creation_1__prepared == NULL);
            tmp_ParameterBase$class_creation_1__prepared = tmp_assign_source_180;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_ParameterBase$class_creation_1__prepared);
            tmp_set_locals_28 = tmp_ParameterBase$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__28_Config_197 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__28_Config_197, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[157];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__28_Config_197, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__28_Config_197, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_181;
            PyObject *tmp_called_value_56;
            PyObject *tmp_args_value_43;
            PyObject *tmp_tuple_element_92;
            PyObject *tmp_kwargs_value_43;
            tmp_called_value_56 = (PyObject *)&PyType_Type;
            tmp_tuple_element_92 = mod_consts[57];
            tmp_args_value_43 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_92);
            tmp_tuple_element_92 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_92);
            tmp_tuple_element_92 = locals_fastapi$openapi$models$$$class__28_Config_197;
            PyTuple_SET_ITEM0(tmp_args_value_43, 2, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_ParameterBase$class_creation_1__class_decl_dict);
            tmp_kwargs_value_43 = tmp_ParameterBase$class_creation_1__class_decl_dict;
            frame_649ab6816638af9825ad768a923fcabc_18->m_frame.f_lineno = 197;
            tmp_assign_source_181 = CALL_FUNCTION(tstate, tmp_called_value_56, tmp_args_value_43, tmp_kwargs_value_43);
            Py_DECREF(tmp_args_value_43);
            if (tmp_assign_source_181 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 197;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_181;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_dictset_value = outline_27_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_88;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_88:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__28_Config_197);
        locals_fastapi$openapi$models$$$class__28_Config_197 = NULL;
        goto try_return_handler_87;
        // Exception handler code:
        try_except_handler_88:;
        exception_keeper_type_83 = exception_type;
        exception_keeper_value_83 = exception_value;
        exception_keeper_tb_83 = exception_tb;
        exception_keeper_lineno_83 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__28_Config_197);
        locals_fastapi$openapi$models$$$class__28_Config_197 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;
        exception_lineno = exception_keeper_lineno_83;

        goto try_except_handler_87;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_87:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_87:;
        exception_keeper_type_84 = exception_type;
        exception_keeper_value_84 = exception_value;
        exception_keeper_tb_84 = exception_tb;
        exception_keeper_lineno_84 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;
        exception_lineno = exception_keeper_lineno_84;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 197;
        goto try_except_handler_86;
        outline_result_28:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_2 = "o";
            goto try_except_handler_86;
        }
        goto try_end_31;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_ParameterBase$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ParameterBase$class_creation_1__class_decl_dict);
        tmp_ParameterBase$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ParameterBase$class_creation_1__prepared);
        Py_DECREF(tmp_ParameterBase$class_creation_1__prepared);
        tmp_ParameterBase$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto frame_exception_exit_18;
        // End of try:
        try_end_31:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_17;
        frame_exception_exit_18:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_649ab6816638af9825ad768a923fcabc_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_649ab6816638af9825ad768a923fcabc_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_649ab6816638af9825ad768a923fcabc_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_649ab6816638af9825ad768a923fcabc_18,
            type_description_2,
            outline_26_var___class__
        );



        assertFrameObject(frame_649ab6816638af9825ad768a923fcabc_18);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_17;
        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_85;
        skip_nested_handling_17:;
        CHECK_OBJECT(tmp_ParameterBase$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ParameterBase$class_creation_1__class_decl_dict);
        tmp_ParameterBase$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ParameterBase$class_creation_1__prepared);
        Py_DECREF(tmp_ParameterBase$class_creation_1__prepared);
        tmp_ParameterBase$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_68;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_68 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_68 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 183;

                goto try_except_handler_85;
            }
            if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
                goto branch_yes_50;
            } else {
                goto branch_no_50;
            }
        }
        branch_yes_50:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__27_ParameterBase_183, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;

            goto try_except_handler_85;
        }
        branch_no_50:;
        {
            PyObject *tmp_assign_source_182;
            PyObject *tmp_called_value_57;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_93;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_57 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_93 = mod_consts[155];
            tmp_args_value_44 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_93);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_93 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_93);
            tmp_tuple_element_93 = locals_fastapi$openapi$models$$$class__27_ParameterBase_183;
            PyTuple_SET_ITEM0(tmp_args_value_44, 2, tmp_tuple_element_93);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_44 = tmp_class_creation_16__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 183;
            tmp_assign_source_182 = CALL_FUNCTION(tstate, tmp_called_value_57, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_182 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 183;

                goto try_except_handler_85;
            }
            assert(outline_26_var___class__ == NULL);
            outline_26_var___class__ = tmp_assign_source_182;
        }
        CHECK_OBJECT(outline_26_var___class__);
        tmp_assign_source_178 = outline_26_var___class__;
        Py_INCREF(tmp_assign_source_178);
        goto try_return_handler_85;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_85:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__27_ParameterBase_183);
        locals_fastapi$openapi$models$$$class__27_ParameterBase_183 = NULL;
        goto try_return_handler_84;
        // Exception handler code:
        try_except_handler_85:;
        exception_keeper_type_86 = exception_type;
        exception_keeper_value_86 = exception_value;
        exception_keeper_tb_86 = exception_tb;
        exception_keeper_lineno_86 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__27_ParameterBase_183);
        locals_fastapi$openapi$models$$$class__27_ParameterBase_183 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;
        exception_lineno = exception_keeper_lineno_86;

        goto try_except_handler_84;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_84:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_84:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 183;
        goto try_except_handler_83;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[155], tmp_assign_source_178);
    }
    goto try_end_32;
    // Exception handler code:
    try_except_handler_83:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_keeper_lineno_88 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_88;
    exception_value = exception_keeper_value_88;
    exception_tb = exception_keeper_tb_88;
    exception_lineno = exception_keeper_lineno_88;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_tuple_element_94;
        tmp_tuple_element_94 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[155]);

        if (unlikely(tmp_tuple_element_94 == NULL)) {
            tmp_tuple_element_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[155]);
        }

        if (tmp_tuple_element_94 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_assign_source_183 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_183, 0, tmp_tuple_element_94);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_183;
    }
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_184 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_184 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_184;
    }
    {
        PyObject *tmp_assign_source_185;
        tmp_assign_source_185 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_185;
    }
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_metaclass_value_17;
        nuitka_bool tmp_condition_result_69;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_202;
        PyObject *tmp_subscript_value_122;
        PyObject *tmp_bases_value_17;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_17 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_condition_result_69 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_69 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_202 = tmp_class_creation_17__bases;
        tmp_subscript_value_122 = mod_consts[15];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_202, tmp_subscript_value_122, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        goto condexpr_end_19;
        condexpr_false_19:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_19:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_17 = tmp_class_creation_17__bases;
        tmp_assign_source_186 = SELECT_METACLASS(tstate, tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_186 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_186;
    }
    {
        bool tmp_condition_result_70;
        PyObject *tmp_expression_value_203;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_203 = tmp_class_creation_17__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_203, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_condition_result_70 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_70 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_called_value_58;
        PyObject *tmp_expression_value_204;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_95;
        PyObject *tmp_kwargs_value_45;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_204 = tmp_class_creation_17__metaclass;
        tmp_called_value_58 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_204, mod_consts[35]);
        if (tmp_called_value_58 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_tuple_element_95 = mod_consts[158];
        tmp_args_value_45 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_95);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_95 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_95);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_45 = tmp_class_creation_17__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 201;
        tmp_assign_source_187 = CALL_FUNCTION(tstate, tmp_called_value_58, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_called_value_58);
        Py_DECREF(tmp_args_value_45);
        if (tmp_assign_source_187 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_187;
    }
    {
        bool tmp_condition_result_71;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_205;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_205 = tmp_class_creation_17__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_205, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_operand_value_18 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_71 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_71 != false) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_mod_expr_left_17;
        PyObject *tmp_mod_expr_right_17;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_expression_value_206;
        PyObject *tmp_name_value_22;
        PyObject *tmp_default_value_17;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_mod_expr_left_17 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_206 = tmp_class_creation_17__metaclass;
        tmp_name_value_22 = mod_consts[38];
        tmp_default_value_17 = mod_consts[39];
        tmp_tuple_element_96 = BUILTIN_GETATTR(tstate, tmp_expression_value_206, tmp_name_value_22, tmp_default_value_17);
        if (tmp_tuple_element_96 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        tmp_mod_expr_right_17 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_207;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_mod_expr_right_17, 0, tmp_tuple_element_96);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_34 = tmp_class_creation_17__prepared;
            tmp_expression_value_207 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_207 == NULL));
            tmp_tuple_element_96 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_207, mod_consts[38]);
            Py_DECREF(tmp_expression_value_207);
            if (tmp_tuple_element_96 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto tuple_build_exception_32;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_17, 1, tmp_tuple_element_96);
        }
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_mod_expr_right_17);
        goto try_except_handler_89;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_17, tmp_mod_expr_right_17);
        Py_DECREF(tmp_mod_expr_right_17);
        if (tmp_raise_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_89;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_17;
        exception_lineno = 201;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_89;
    }
    branch_no_52:;
    goto branch_end_51;
    branch_no_51:;
    {
        PyObject *tmp_assign_source_188;
        tmp_assign_source_188 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_188;
    }
    branch_end_51:;
    {
        PyObject *tmp_assign_source_189;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_29 = tmp_class_creation_17__prepared;
            locals_fastapi$openapi$models$$$class__29_Parameter_201 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_91;
        }
        tmp_dictset_value = mod_consts[158];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_91;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_91;
        }
        frame_3c18260b4fc67f6d451803e9ae97a350_19 = MAKE_CLASS_FRAME(tstate, codeobj_3c18260b4fc67f6d451803e9ae97a350, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_3c18260b4fc67f6d451803e9ae97a350_19);
        assert(Py_REFCNT(frame_3c18260b4fc67f6d451803e9ae97a350_19) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_88;
            PyObject *tmp_ass_subscribed_88;
            PyObject *tmp_ass_subscript_88;
            tmp_ass_subvalue_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[46]);

            if (tmp_ass_subvalue_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_88 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_88);
                } else {
                    goto frame_exception_exit_19;
                }
            }

            tmp_ass_subscribed_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_88 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_88);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 202;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }

            if (tmp_ass_subscribed_88 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_88);

                exception_lineno = 202;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_ass_subscript_88 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_88, tmp_ass_subscript_88, tmp_ass_subvalue_88);
            Py_DECREF(tmp_ass_subscribed_88);
            Py_DECREF(tmp_ass_subvalue_88);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 202;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }
        {
            PyObject *tmp_called_value_59;
            tmp_called_value_59 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[30]);

            if (tmp_called_value_59 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_59 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_59 == NULL)) {
                        tmp_called_value_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_59 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 203;
                        type_description_2 = "o";
                        goto frame_exception_exit_19;
                    }
                    Py_INCREF(tmp_called_value_59);
                } else {
                    goto frame_exception_exit_19;
                }
            }

            frame_3c18260b4fc67f6d451803e9ae97a350_19->m_frame.f_lineno = 203;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_59, &PyTuple_GET_ITEM(mod_consts[159], 0), mod_consts[77]);
            Py_DECREF(tmp_called_value_59);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[160], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }
        {
            PyObject *tmp_ass_subvalue_89;
            PyObject *tmp_ass_subscribed_89;
            PyObject *tmp_ass_subscript_89;
            tmp_ass_subvalue_89 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[136]);

            if (tmp_ass_subvalue_89 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_89 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[136]);

                    if (unlikely(tmp_ass_subvalue_89 == NULL)) {
                        tmp_ass_subvalue_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[136]);
                    }

                    if (tmp_ass_subvalue_89 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 203;
                        type_description_2 = "o";
                        goto frame_exception_exit_19;
                    }
                    Py_INCREF(tmp_ass_subvalue_89);
                } else {
                    goto frame_exception_exit_19;
                }
            }

            tmp_ass_subscribed_89 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_89 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_89);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }

            if (tmp_ass_subscribed_89 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_89);

                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_ass_subscript_89 = mod_consts[160];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_89, tmp_ass_subscript_89, tmp_ass_subvalue_89);
            Py_DECREF(tmp_ass_subscribed_89);
            Py_DECREF(tmp_ass_subvalue_89);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_18;
        frame_exception_exit_19:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3c18260b4fc67f6d451803e9ae97a350_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3c18260b4fc67f6d451803e9ae97a350_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3c18260b4fc67f6d451803e9ae97a350_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3c18260b4fc67f6d451803e9ae97a350_19,
            type_description_2,
            outline_28_var___class__
        );



        assertFrameObject(frame_3c18260b4fc67f6d451803e9ae97a350_19);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_18;
        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_91;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_72;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_72 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_72 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_91;
            }
            if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
                goto branch_yes_53;
            } else {
                goto branch_no_53;
            }
        }
        branch_yes_53:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__29_Parameter_201, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_91;
        }
        branch_no_53:;
        {
            PyObject *tmp_assign_source_190;
            PyObject *tmp_called_value_60;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_97;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_60 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_97 = mod_consts[158];
            tmp_args_value_46 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_97);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_97 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_97);
            tmp_tuple_element_97 = locals_fastapi$openapi$models$$$class__29_Parameter_201;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_97);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_17__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 201;
            tmp_assign_source_190 = CALL_FUNCTION(tstate, tmp_called_value_60, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_190 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_91;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_190;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_assign_source_189 = outline_28_var___class__;
        Py_INCREF(tmp_assign_source_189);
        goto try_return_handler_91;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_91:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__29_Parameter_201);
        locals_fastapi$openapi$models$$$class__29_Parameter_201 = NULL;
        goto try_return_handler_90;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_89 = exception_type;
        exception_keeper_value_89 = exception_value;
        exception_keeper_tb_89 = exception_tb;
        exception_keeper_lineno_89 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__29_Parameter_201);
        locals_fastapi$openapi$models$$$class__29_Parameter_201 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;
        exception_lineno = exception_keeper_lineno_89;

        goto try_except_handler_90;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_90:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_90:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 201;
        goto try_except_handler_89;
        outline_result_29:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[158], tmp_assign_source_189);
    }
    goto try_end_33;
    // Exception handler code:
    try_except_handler_89:;
    exception_keeper_type_91 = exception_type;
    exception_keeper_value_91 = exception_value;
    exception_keeper_tb_91 = exception_tb;
    exception_keeper_lineno_91 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_91;
    exception_value = exception_keeper_value_91;
    exception_tb = exception_keeper_tb_91;
    exception_lineno = exception_keeper_lineno_91;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_tuple_element_98;
        tmp_tuple_element_98 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[155]);

        if (unlikely(tmp_tuple_element_98 == NULL)) {
            tmp_tuple_element_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[155]);
        }

        if (tmp_tuple_element_98 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_assign_source_191 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_191, 0, tmp_tuple_element_98);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_191;
    }
    {
        PyObject *tmp_assign_source_192;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_192 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_192 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_192;
    }
    {
        PyObject *tmp_assign_source_193;
        tmp_assign_source_193 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_193;
    }
    {
        PyObject *tmp_assign_source_194;
        PyObject *tmp_metaclass_value_18;
        nuitka_bool tmp_condition_result_73;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_208;
        PyObject *tmp_subscript_value_123;
        PyObject *tmp_bases_value_18;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_18 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_condition_result_73 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_73 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_208 = tmp_class_creation_18__bases;
        tmp_subscript_value_123 = mod_consts[15];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_208, tmp_subscript_value_123, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_20:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_18 = tmp_class_creation_18__bases;
        tmp_assign_source_194 = SELECT_METACLASS(tstate, tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_194 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_194;
    }
    {
        bool tmp_condition_result_74;
        PyObject *tmp_expression_value_209;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_209 = tmp_class_creation_18__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_209, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_condition_result_74 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_74 != false) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_195;
        PyObject *tmp_called_value_61;
        PyObject *tmp_expression_value_210;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_99;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_210 = tmp_class_creation_18__metaclass;
        tmp_called_value_61 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_210, mod_consts[35]);
        if (tmp_called_value_61 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_tuple_element_99 = mod_consts[144];
        tmp_args_value_47 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_99);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_99 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_99);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_18__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 206;
        tmp_assign_source_195 = CALL_FUNCTION(tstate, tmp_called_value_61, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_61);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_195 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_195;
    }
    {
        bool tmp_condition_result_75;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_211;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_211 = tmp_class_creation_18__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_211, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_operand_value_19 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_75 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_75 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_mod_expr_left_18;
        PyObject *tmp_mod_expr_right_18;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_expression_value_212;
        PyObject *tmp_name_value_23;
        PyObject *tmp_default_value_18;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_mod_expr_left_18 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_212 = tmp_class_creation_18__metaclass;
        tmp_name_value_23 = mod_consts[38];
        tmp_default_value_18 = mod_consts[39];
        tmp_tuple_element_100 = BUILTIN_GETATTR(tstate, tmp_expression_value_212, tmp_name_value_23, tmp_default_value_18);
        if (tmp_tuple_element_100 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        tmp_mod_expr_right_18 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_213;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_mod_expr_right_18, 0, tmp_tuple_element_100);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_36 = tmp_class_creation_18__prepared;
            tmp_expression_value_213 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_213 == NULL));
            tmp_tuple_element_100 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_213, mod_consts[38]);
            Py_DECREF(tmp_expression_value_213);
            if (tmp_tuple_element_100 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 206;

                goto tuple_build_exception_33;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_18, 1, tmp_tuple_element_100);
        }
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_mod_expr_right_18);
        goto try_except_handler_92;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_18, tmp_mod_expr_right_18);
        Py_DECREF(tmp_mod_expr_right_18);
        if (tmp_raise_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_92;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_18;
        exception_lineno = 206;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_92;
    }
    branch_no_55:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_196;
        tmp_assign_source_196 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_196;
    }
    branch_end_54:;
    {
        PyObject *tmp_assign_source_197;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_30 = tmp_class_creation_18__prepared;
            locals_fastapi$openapi$models$$$class__30_Header_206 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__30_Header_206, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_94;
        }
        tmp_dictset_value = mod_consts[144];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__30_Header_206, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_94;
        }
        {
            nuitka_bool tmp_condition_result_76;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_76 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_76 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 206;

                goto try_except_handler_94;
            }
            if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
                goto branch_yes_56;
            } else {
                goto branch_no_56;
            }
        }
        branch_yes_56:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__30_Header_206, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_94;
        }
        branch_no_56:;
        {
            PyObject *tmp_assign_source_198;
            PyObject *tmp_called_value_62;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_101;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_62 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_101 = mod_consts[144];
            tmp_args_value_48 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_101);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_101 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_101);
            tmp_tuple_element_101 = locals_fastapi$openapi$models$$$class__30_Header_206;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_101);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_18__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 206;
            tmp_assign_source_198 = CALL_FUNCTION(tstate, tmp_called_value_62, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_198 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 206;

                goto try_except_handler_94;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_198;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_assign_source_197 = outline_29_var___class__;
        Py_INCREF(tmp_assign_source_197);
        goto try_return_handler_94;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_94:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__30_Header_206);
        locals_fastapi$openapi$models$$$class__30_Header_206 = NULL;
        goto try_return_handler_93;
        // Exception handler code:
        try_except_handler_94:;
        exception_keeper_type_92 = exception_type;
        exception_keeper_value_92 = exception_value;
        exception_keeper_tb_92 = exception_tb;
        exception_keeper_lineno_92 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__30_Header_206);
        locals_fastapi$openapi$models$$$class__30_Header_206 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;
        exception_lineno = exception_keeper_lineno_92;

        goto try_except_handler_93;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_93:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_93:;
        exception_keeper_type_93 = exception_type;
        exception_keeper_value_93 = exception_value;
        exception_keeper_tb_93 = exception_tb;
        exception_keeper_lineno_93 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;
        exception_lineno = exception_keeper_lineno_93;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 206;
        goto try_except_handler_92;
        outline_result_30:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[144], tmp_assign_source_197);
    }
    goto try_end_34;
    // Exception handler code:
    try_except_handler_92:;
    exception_keeper_type_94 = exception_type;
    exception_keeper_value_94 = exception_value;
    exception_keeper_tb_94 = exception_tb;
    exception_keeper_lineno_94 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_94;
    exception_value = exception_keeper_value_94;
    exception_tb = exception_keeper_tb_94;
    exception_lineno = exception_keeper_lineno_94;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_199;
        PyObject *tmp_tuple_element_102;
        tmp_tuple_element_102 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_102 == NULL)) {
            tmp_tuple_element_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_102 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_assign_source_199 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_199, 0, tmp_tuple_element_102);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_199;
    }
    {
        PyObject *tmp_assign_source_200;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_200 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_200 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_200;
    }
    {
        PyObject *tmp_assign_source_201;
        tmp_assign_source_201 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_201;
    }
    {
        PyObject *tmp_assign_source_202;
        PyObject *tmp_metaclass_value_19;
        nuitka_bool tmp_condition_result_77;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_214;
        PyObject *tmp_subscript_value_124;
        PyObject *tmp_bases_value_19;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_19 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_condition_result_77 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_214 = tmp_class_creation_19__bases;
        tmp_subscript_value_124 = mod_consts[15];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_214, tmp_subscript_value_124, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        goto condexpr_end_21;
        condexpr_false_21:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_19 = tmp_class_creation_19__bases;
        tmp_assign_source_202 = SELECT_METACLASS(tstate, tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_202 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_202;
    }
    {
        bool tmp_condition_result_78;
        PyObject *tmp_expression_value_215;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_215 = tmp_class_creation_19__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_215, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_condition_result_78 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_78 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    {
        PyObject *tmp_assign_source_203;
        PyObject *tmp_called_value_63;
        PyObject *tmp_expression_value_216;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_103;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_216 = tmp_class_creation_19__metaclass;
        tmp_called_value_63 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_216, mod_consts[35]);
        if (tmp_called_value_63 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_tuple_element_103 = mod_consts[161];
        tmp_args_value_49 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_103);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_103 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_103);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_19__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 210;
        tmp_assign_source_203 = CALL_FUNCTION(tstate, tmp_called_value_63, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_63);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_203 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_203;
    }
    {
        bool tmp_condition_result_79;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_217;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_217 = tmp_class_creation_19__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_217, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_operand_value_20 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        assert(!(tmp_res == -1));
        tmp_condition_result_79 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_79 != false) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_mod_expr_left_19;
        PyObject *tmp_mod_expr_right_19;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_expression_value_218;
        PyObject *tmp_name_value_24;
        PyObject *tmp_default_value_19;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_mod_expr_left_19 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_218 = tmp_class_creation_19__metaclass;
        tmp_name_value_24 = mod_consts[38];
        tmp_default_value_19 = mod_consts[39];
        tmp_tuple_element_104 = BUILTIN_GETATTR(tstate, tmp_expression_value_218, tmp_name_value_24, tmp_default_value_19);
        if (tmp_tuple_element_104 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        tmp_mod_expr_right_19 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_219;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_mod_expr_right_19, 0, tmp_tuple_element_104);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_38 = tmp_class_creation_19__prepared;
            tmp_expression_value_219 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_219 == NULL));
            tmp_tuple_element_104 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_219, mod_consts[38]);
            Py_DECREF(tmp_expression_value_219);
            if (tmp_tuple_element_104 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto tuple_build_exception_34;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_19, 1, tmp_tuple_element_104);
        }
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_mod_expr_right_19);
        goto try_except_handler_95;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_19, tmp_mod_expr_right_19);
        Py_DECREF(tmp_mod_expr_right_19);
        if (tmp_raise_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_95;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_19;
        exception_lineno = 210;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_95;
    }
    branch_no_58:;
    goto branch_end_57;
    branch_no_57:;
    {
        PyObject *tmp_assign_source_204;
        tmp_assign_source_204 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_204;
    }
    branch_end_57:;
    {
        PyObject *tmp_assign_source_205;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_31 = tmp_class_creation_19__prepared;
            locals_fastapi$openapi$models$$$class__31_RequestBody_210 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_97;
        }
        tmp_dictset_value = mod_consts[161];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_97;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_97;
        }
        frame_a288d43541c2ed432369b0388672c0cc_20 = MAKE_CLASS_FRAME(tstate, codeobj_a288d43541c2ed432369b0388672c0cc, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_a288d43541c2ed432369b0388672c0cc_20);
        assert(Py_REFCNT(frame_a288d43541c2ed432369b0388672c0cc_20) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            PyObject *tmp_ass_subvalue_90;
            PyObject *tmp_expression_value_220;
            PyObject *tmp_subscript_value_125;
            PyObject *tmp_ass_subscribed_90;
            PyObject *tmp_ass_subscript_90;
            tmp_expression_value_220 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[22]);

            if (tmp_expression_value_220 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_220 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_220 == NULL)) {
                        tmp_expression_value_220 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_220 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 211;
                        type_description_2 = "o";
                        goto frame_exception_exit_20;
                    }
                    Py_INCREF(tmp_expression_value_220);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_subscript_value_125 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[46]);

            if (tmp_subscript_value_125 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_125 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_125);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_ass_subvalue_90 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_220, tmp_subscript_value_125);
            Py_DECREF(tmp_expression_value_220);
            Py_DECREF(tmp_subscript_value_125);
            if (tmp_ass_subvalue_90 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscribed_90 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_90 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_90);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 211;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_ass_subscribed_90 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_90);

                exception_lineno = 211;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscript_90 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_90, tmp_ass_subscript_90, tmp_ass_subvalue_90);
            Py_DECREF(tmp_ass_subscribed_90);
            Py_DECREF(tmp_ass_subvalue_90);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }
        {
            PyObject *tmp_ass_subvalue_91;
            PyObject *tmp_expression_value_221;
            PyObject *tmp_subscript_value_126;
            PyObject *tmp_tuple_element_105;
            PyObject *tmp_ass_subscribed_91;
            PyObject *tmp_ass_subscript_91;
            tmp_expression_value_221 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[19]);

            if (tmp_expression_value_221 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_221 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_221 == NULL)) {
                        tmp_expression_value_221 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_221 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 212;
                        type_description_2 = "o";
                        goto frame_exception_exit_20;
                    }
                    Py_INCREF(tmp_expression_value_221);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_tuple_element_105 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[46]);

            if (tmp_tuple_element_105 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_105 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_105);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_subscript_value_126 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_126, 0, tmp_tuple_element_105);
            tmp_tuple_element_105 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[149]);

            if (tmp_tuple_element_105 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_105 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[149]);

                    if (unlikely(tmp_tuple_element_105 == NULL)) {
                        tmp_tuple_element_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[149]);
                    }

                    if (tmp_tuple_element_105 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 212;
                        type_description_2 = "o";
                        goto tuple_build_exception_35;
                    }
                    Py_INCREF(tmp_tuple_element_105);
                } else {
                    goto tuple_build_exception_35;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_126, 1, tmp_tuple_element_105);
            goto tuple_build_noexception_35;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_35:;
            Py_DECREF(tmp_expression_value_221);
            Py_DECREF(tmp_subscript_value_126);
            goto frame_exception_exit_20;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_35:;
            tmp_ass_subvalue_91 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_221, tmp_subscript_value_126);
            Py_DECREF(tmp_expression_value_221);
            Py_DECREF(tmp_subscript_value_126);
            if (tmp_ass_subvalue_91 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscribed_91 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_91 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_91);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_ass_subscribed_91 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_91);

                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscript_91 = mod_consts[156];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_91, tmp_ass_subscript_91, tmp_ass_subvalue_91);
            Py_DECREF(tmp_ass_subscribed_91);
            Py_DECREF(tmp_ass_subvalue_91);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[111], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            PyObject *tmp_ass_subvalue_92;
            PyObject *tmp_expression_value_222;
            PyObject *tmp_subscript_value_127;
            PyObject *tmp_ass_subscribed_92;
            PyObject *tmp_ass_subscript_92;
            tmp_expression_value_222 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[22]);

            if (tmp_expression_value_222 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_222 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_222 == NULL)) {
                        tmp_expression_value_222 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_222 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 213;
                        type_description_2 = "o";
                        goto frame_exception_exit_20;
                    }
                    Py_INCREF(tmp_expression_value_222);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_subscript_value_127 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[86]);

            if (tmp_subscript_value_127 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_127 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_127);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_ass_subvalue_92 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_222, tmp_subscript_value_127);
            Py_DECREF(tmp_expression_value_222);
            Py_DECREF(tmp_subscript_value_127);
            if (tmp_ass_subvalue_92 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscribed_92 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_92 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_92);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_ass_subscribed_92 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_92);

                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_ass_subscript_92 = mod_consts[111];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_92, tmp_ass_subscript_92, tmp_ass_subvalue_92);
            Py_DECREF(tmp_ass_subscribed_92);
            Py_DECREF(tmp_ass_subvalue_92);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }
        {
            PyObject *tmp_assign_source_206;
            tmp_assign_source_206 = MAKE_DICT_EMPTY();
            assert(tmp_RequestBody$class_creation_1__class_decl_dict == NULL);
            tmp_RequestBody$class_creation_1__class_decl_dict = tmp_assign_source_206;
        }
        {
            PyObject *tmp_assign_source_207;
            tmp_assign_source_207 = MAKE_DICT_EMPTY();
            assert(tmp_RequestBody$class_creation_1__prepared == NULL);
            tmp_RequestBody$class_creation_1__prepared = tmp_assign_source_207;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_RequestBody$class_creation_1__prepared);
            tmp_set_locals_32 = tmp_RequestBody$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__32_Config_215 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__32_Config_215, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[162];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__32_Config_215, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__32_Config_215, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_208;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_106;
            PyObject *tmp_kwargs_value_50;
            tmp_called_value_64 = (PyObject *)&PyType_Type;
            tmp_tuple_element_106 = mod_consts[57];
            tmp_args_value_50 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_106);
            tmp_tuple_element_106 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_106);
            tmp_tuple_element_106 = locals_fastapi$openapi$models$$$class__32_Config_215;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_RequestBody$class_creation_1__class_decl_dict);
            tmp_kwargs_value_50 = tmp_RequestBody$class_creation_1__class_decl_dict;
            frame_a288d43541c2ed432369b0388672c0cc_20->m_frame.f_lineno = 215;
            tmp_assign_source_208 = CALL_FUNCTION(tstate, tmp_called_value_64, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_208 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 215;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_208;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_dictset_value = outline_31_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_100;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_100:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__32_Config_215);
        locals_fastapi$openapi$models$$$class__32_Config_215 = NULL;
        goto try_return_handler_99;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__32_Config_215);
        locals_fastapi$openapi$models$$$class__32_Config_215 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto try_except_handler_99;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_99:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_99:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 215;
        goto try_except_handler_98;
        outline_result_32:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_2 = "o";
            goto try_except_handler_98;
        }
        goto try_end_35;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_RequestBody$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_RequestBody$class_creation_1__class_decl_dict);
        tmp_RequestBody$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_RequestBody$class_creation_1__prepared);
        Py_DECREF(tmp_RequestBody$class_creation_1__prepared);
        tmp_RequestBody$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto frame_exception_exit_20;
        // End of try:
        try_end_35:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_19;
        frame_exception_exit_20:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a288d43541c2ed432369b0388672c0cc_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a288d43541c2ed432369b0388672c0cc_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a288d43541c2ed432369b0388672c0cc_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a288d43541c2ed432369b0388672c0cc_20,
            type_description_2,
            outline_30_var___class__
        );



        assertFrameObject(frame_a288d43541c2ed432369b0388672c0cc_20);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_19;
        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_97;
        skip_nested_handling_19:;
        CHECK_OBJECT(tmp_RequestBody$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_RequestBody$class_creation_1__class_decl_dict);
        tmp_RequestBody$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_RequestBody$class_creation_1__prepared);
        Py_DECREF(tmp_RequestBody$class_creation_1__prepared);
        tmp_RequestBody$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_80;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_80 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_80 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto try_except_handler_97;
            }
            if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
                goto branch_yes_59;
            } else {
                goto branch_no_59;
            }
        }
        branch_yes_59:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__31_RequestBody_210, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_97;
        }
        branch_no_59:;
        {
            PyObject *tmp_assign_source_209;
            PyObject *tmp_called_value_65;
            PyObject *tmp_args_value_51;
            PyObject *tmp_tuple_element_107;
            PyObject *tmp_kwargs_value_51;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_65 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_107 = mod_consts[161];
            tmp_args_value_51 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_107);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_107 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_107);
            tmp_tuple_element_107 = locals_fastapi$openapi$models$$$class__31_RequestBody_210;
            PyTuple_SET_ITEM0(tmp_args_value_51, 2, tmp_tuple_element_107);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_51 = tmp_class_creation_19__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 210;
            tmp_assign_source_209 = CALL_FUNCTION(tstate, tmp_called_value_65, tmp_args_value_51, tmp_kwargs_value_51);
            Py_DECREF(tmp_args_value_51);
            if (tmp_assign_source_209 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto try_except_handler_97;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_209;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_assign_source_205 = outline_30_var___class__;
        Py_INCREF(tmp_assign_source_205);
        goto try_return_handler_97;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_97:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__31_RequestBody_210);
        locals_fastapi$openapi$models$$$class__31_RequestBody_210 = NULL;
        goto try_return_handler_96;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_98 = exception_type;
        exception_keeper_value_98 = exception_value;
        exception_keeper_tb_98 = exception_tb;
        exception_keeper_lineno_98 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__31_RequestBody_210);
        locals_fastapi$openapi$models$$$class__31_RequestBody_210 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;
        exception_lineno = exception_keeper_lineno_98;

        goto try_except_handler_96;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 210;
        goto try_except_handler_95;
        outline_result_31:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[161], tmp_assign_source_205);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_95:;
    exception_keeper_type_100 = exception_type;
    exception_keeper_value_100 = exception_value;
    exception_keeper_tb_100 = exception_tb;
    exception_keeper_lineno_100 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_100;
    exception_value = exception_keeper_value_100;
    exception_tb = exception_keeper_tb_100;
    exception_lineno = exception_keeper_lineno_100;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_210;
        PyObject *tmp_tuple_element_108;
        tmp_tuple_element_108 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_108 == NULL)) {
            tmp_tuple_element_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_108 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_assign_source_210 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_210, 0, tmp_tuple_element_108);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_210;
    }
    {
        PyObject *tmp_assign_source_211;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_211 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_211 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_211;
    }
    {
        PyObject *tmp_assign_source_212;
        tmp_assign_source_212 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_212;
    }
    {
        PyObject *tmp_assign_source_213;
        PyObject *tmp_metaclass_value_20;
        nuitka_bool tmp_condition_result_81;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_223;
        PyObject *tmp_subscript_value_128;
        PyObject *tmp_bases_value_20;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_20 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_condition_result_81 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_223 = tmp_class_creation_20__bases;
        tmp_subscript_value_128 = mod_consts[15];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_223, tmp_subscript_value_128, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_22:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_20 = tmp_class_creation_20__bases;
        tmp_assign_source_213 = SELECT_METACLASS(tstate, tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_213 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_213;
    }
    {
        bool tmp_condition_result_82;
        PyObject *tmp_expression_value_224;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_224 = tmp_class_creation_20__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_224, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_condition_result_82 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_82 != false) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    {
        PyObject *tmp_assign_source_214;
        PyObject *tmp_called_value_66;
        PyObject *tmp_expression_value_225;
        PyObject *tmp_args_value_52;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_kwargs_value_52;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_225 = tmp_class_creation_20__metaclass;
        tmp_called_value_66 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_225, mod_consts[35]);
        if (tmp_called_value_66 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_tuple_element_109 = mod_consts[163];
        tmp_args_value_52 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_109);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_109 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_109);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_52 = tmp_class_creation_20__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 219;
        tmp_assign_source_214 = CALL_FUNCTION(tstate, tmp_called_value_66, tmp_args_value_52, tmp_kwargs_value_52);
        Py_DECREF(tmp_called_value_66);
        Py_DECREF(tmp_args_value_52);
        if (tmp_assign_source_214 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_214;
    }
    {
        bool tmp_condition_result_83;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_226;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_226 = tmp_class_creation_20__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_226, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_operand_value_21 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_83 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_83 != false) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_mod_expr_left_20;
        PyObject *tmp_mod_expr_right_20;
        PyObject *tmp_tuple_element_110;
        PyObject *tmp_expression_value_227;
        PyObject *tmp_name_value_25;
        PyObject *tmp_default_value_20;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_mod_expr_left_20 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_227 = tmp_class_creation_20__metaclass;
        tmp_name_value_25 = mod_consts[38];
        tmp_default_value_20 = mod_consts[39];
        tmp_tuple_element_110 = BUILTIN_GETATTR(tstate, tmp_expression_value_227, tmp_name_value_25, tmp_default_value_20);
        if (tmp_tuple_element_110 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        tmp_mod_expr_right_20 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_228;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_mod_expr_right_20, 0, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_40 = tmp_class_creation_20__prepared;
            tmp_expression_value_228 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_228 == NULL));
            tmp_tuple_element_110 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_228, mod_consts[38]);
            Py_DECREF(tmp_expression_value_228);
            if (tmp_tuple_element_110 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 219;

                goto tuple_build_exception_36;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_20, 1, tmp_tuple_element_110);
        }
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_mod_expr_right_20);
        goto try_except_handler_101;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_20, tmp_mod_expr_right_20);
        Py_DECREF(tmp_mod_expr_right_20);
        if (tmp_raise_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_101;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_20;
        exception_lineno = 219;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_101;
    }
    branch_no_61:;
    goto branch_end_60;
    branch_no_60:;
    {
        PyObject *tmp_assign_source_215;
        tmp_assign_source_215 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_215;
    }
    branch_end_60:;
    {
        PyObject *tmp_assign_source_216;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_33 = tmp_class_creation_20__prepared;
            locals_fastapi$openapi$models$$$class__33_Link_219 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_103;
        }
        tmp_dictset_value = mod_consts[163];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_103;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_103;
        }
        frame_36d24845ffbb070ee400e99e6440c958_21 = MAKE_CLASS_FRAME(tstate, codeobj_36d24845ffbb070ee400e99e6440c958, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_36d24845ffbb070ee400e99e6440c958_21);
        assert(Py_REFCNT(frame_36d24845ffbb070ee400e99e6440c958_21) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[164], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_93;
            PyObject *tmp_expression_value_229;
            PyObject *tmp_subscript_value_129;
            PyObject *tmp_ass_subscribed_93;
            PyObject *tmp_ass_subscript_93;
            tmp_expression_value_229 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_229 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_229 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_229 == NULL)) {
                        tmp_expression_value_229 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_229 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 220;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_229);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_129 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

            if (tmp_subscript_value_129 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_129 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_129);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_ass_subvalue_93 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_229, tmp_subscript_value_129);
            Py_DECREF(tmp_expression_value_229);
            Py_DECREF(tmp_subscript_value_129);
            if (tmp_ass_subvalue_93 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_93 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_93 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_93);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 220;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_93 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_93);

                exception_lineno = 220;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_93 = mod_consts[164];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_93, tmp_ass_subscript_93, tmp_ass_subvalue_93);
            Py_DECREF(tmp_ass_subscribed_93);
            Py_DECREF(tmp_ass_subvalue_93);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[165], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_94;
            PyObject *tmp_expression_value_230;
            PyObject *tmp_subscript_value_130;
            PyObject *tmp_ass_subscribed_94;
            PyObject *tmp_ass_subscript_94;
            tmp_expression_value_230 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_230 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_230 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_230 == NULL)) {
                        tmp_expression_value_230 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_230 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 221;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_230);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

            if (tmp_subscript_value_130 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_130 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_130);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_ass_subvalue_94 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_230, tmp_subscript_value_130);
            Py_DECREF(tmp_expression_value_230);
            Py_DECREF(tmp_subscript_value_130);
            if (tmp_ass_subvalue_94 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 221;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_94 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_94 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_94);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 221;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_94 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_94);

                exception_lineno = 221;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_94 = mod_consts[165];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_94, tmp_ass_subscript_94, tmp_ass_subvalue_94);
            Py_DECREF(tmp_ass_subscribed_94);
            Py_DECREF(tmp_ass_subvalue_94);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 221;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[166], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_95;
            PyObject *tmp_expression_value_231;
            PyObject *tmp_subscript_value_131;
            PyObject *tmp_expression_value_232;
            PyObject *tmp_subscript_value_132;
            PyObject *tmp_tuple_element_111;
            PyObject *tmp_ass_subscribed_95;
            PyObject *tmp_ass_subscript_95;
            tmp_expression_value_231 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_231 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_231 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_231 == NULL)) {
                        tmp_expression_value_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_231 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 222;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_231);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_expression_value_232 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[19]);

            if (tmp_expression_value_232 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_232 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_232 == NULL)) {
                        tmp_expression_value_232 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_232 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_231);

                        exception_lineno = 222;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_232);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_tuple_element_111 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

            if (tmp_tuple_element_111 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_111 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_111);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_132 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_233;
                PyObject *tmp_subscript_value_133;
                PyObject *tmp_tuple_element_112;
                PyTuple_SET_ITEM(tmp_subscript_value_132, 0, tmp_tuple_element_111);
                tmp_expression_value_233 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[23]);

                if (tmp_expression_value_233 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_233 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_233 == NULL)) {
                            tmp_expression_value_233 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_233 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 222;
                            type_description_2 = "o";
                            goto tuple_build_exception_37;
                        }
                        Py_INCREF(tmp_expression_value_233);
                    } else {
                        goto tuple_build_exception_37;
                    }
                }

                tmp_tuple_element_112 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[17]);

                if (tmp_tuple_element_112 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_112 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                        if (unlikely(tmp_tuple_element_112 == NULL)) {
                            tmp_tuple_element_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                        }

                        if (tmp_tuple_element_112 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_233);

                            exception_lineno = 222;
                            type_description_2 = "o";
                            goto tuple_build_exception_37;
                        }
                        Py_INCREF(tmp_tuple_element_112);
                    } else {
                        goto tuple_build_exception_37;
                    }
                }

                tmp_subscript_value_133 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_133, 0, tmp_tuple_element_112);
                tmp_tuple_element_112 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

                if (tmp_tuple_element_112 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_112 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_tuple_element_112);
                    } else {
                        goto tuple_build_exception_37;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_133, 1, tmp_tuple_element_112);
                tmp_tuple_element_111 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_233, tmp_subscript_value_133);
                Py_DECREF(tmp_expression_value_233);
                Py_DECREF(tmp_subscript_value_133);
                if (tmp_tuple_element_111 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 222;
                    type_description_2 = "o";
                    goto tuple_build_exception_37;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_132, 1, tmp_tuple_element_111);
            }
            goto tuple_build_noexception_37;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_37:;
            Py_DECREF(tmp_expression_value_231);
            Py_DECREF(tmp_expression_value_232);
            Py_DECREF(tmp_subscript_value_132);
            goto frame_exception_exit_21;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_37:;
            tmp_subscript_value_131 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_232, tmp_subscript_value_132);
            Py_DECREF(tmp_expression_value_232);
            Py_DECREF(tmp_subscript_value_132);
            if (tmp_subscript_value_131 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_231);

                exception_lineno = 222;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subvalue_95 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_231, tmp_subscript_value_131);
            Py_DECREF(tmp_expression_value_231);
            Py_DECREF(tmp_subscript_value_131);
            if (tmp_ass_subvalue_95 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_95 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_95 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_95);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 222;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_95 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_95);

                exception_lineno = 222;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_95 = mod_consts[166];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_95, tmp_ass_subscript_95, tmp_ass_subvalue_95);
            Py_DECREF(tmp_ass_subscribed_95);
            Py_DECREF(tmp_ass_subvalue_95);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[167], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_96;
            PyObject *tmp_expression_value_234;
            PyObject *tmp_subscript_value_134;
            PyObject *tmp_expression_value_235;
            PyObject *tmp_subscript_value_135;
            PyObject *tmp_tuple_element_113;
            PyObject *tmp_ass_subscribed_96;
            PyObject *tmp_ass_subscript_96;
            tmp_expression_value_234 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_234 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_234 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_234 == NULL)) {
                        tmp_expression_value_234 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_234 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 223;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_234);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_expression_value_235 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[23]);

            if (tmp_expression_value_235 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_235 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_235 == NULL)) {
                        tmp_expression_value_235 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_235 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_234);

                        exception_lineno = 223;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_235);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_tuple_element_113 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[17]);

            if (tmp_tuple_element_113 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_113 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                    if (unlikely(tmp_tuple_element_113 == NULL)) {
                        tmp_tuple_element_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                    }

                    if (tmp_tuple_element_113 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_234);
                        Py_DECREF(tmp_expression_value_235);

                        exception_lineno = 223;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_tuple_element_113);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_135 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_135, 0, tmp_tuple_element_113);
            tmp_tuple_element_113 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

            if (tmp_tuple_element_113 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_113 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_113);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_135, 1, tmp_tuple_element_113);
            tmp_subscript_value_134 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_235, tmp_subscript_value_135);
            Py_DECREF(tmp_expression_value_235);
            Py_DECREF(tmp_subscript_value_135);
            if (tmp_subscript_value_134 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_234);

                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subvalue_96 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_234, tmp_subscript_value_134);
            Py_DECREF(tmp_expression_value_234);
            Py_DECREF(tmp_subscript_value_134);
            if (tmp_ass_subvalue_96 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_96 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_96 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_96);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_96 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_96);

                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_96 = mod_consts[167];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_96, tmp_ass_subscript_96, tmp_ass_subvalue_96);
            Py_DECREF(tmp_ass_subscribed_96);
            Py_DECREF(tmp_ass_subvalue_96);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 224;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_97;
            PyObject *tmp_expression_value_236;
            PyObject *tmp_subscript_value_136;
            PyObject *tmp_ass_subscribed_97;
            PyObject *tmp_ass_subscript_97;
            tmp_expression_value_236 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_236 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_236 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_236 == NULL)) {
                        tmp_expression_value_236 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_236 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 224;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_236);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_136 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[46]);

            if (tmp_subscript_value_136 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_136 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_136);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_ass_subvalue_97 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_236, tmp_subscript_value_136);
            Py_DECREF(tmp_expression_value_236);
            Py_DECREF(tmp_subscript_value_136);
            if (tmp_ass_subvalue_97 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 224;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_97 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_97 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_97);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 224;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_97 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_97);

                exception_lineno = 224;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_97 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_97, tmp_ass_subscript_97, tmp_ass_subvalue_97);
            Py_DECREF(tmp_ass_subscribed_97);
            Py_DECREF(tmp_ass_subvalue_97);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 224;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[168], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_ass_subvalue_98;
            PyObject *tmp_expression_value_237;
            PyObject *tmp_subscript_value_137;
            PyObject *tmp_ass_subscribed_98;
            PyObject *tmp_ass_subscript_98;
            tmp_expression_value_237 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[22]);

            if (tmp_expression_value_237 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_237 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_237 == NULL)) {
                        tmp_expression_value_237 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_237 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 225;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_expression_value_237);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_subscript_value_137 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[72]);

            if (tmp_subscript_value_137 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_137 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[72]);

                    if (unlikely(tmp_subscript_value_137 == NULL)) {
                        tmp_subscript_value_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[72]);
                    }

                    if (tmp_subscript_value_137 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_237);

                        exception_lineno = 225;
                        type_description_2 = "o";
                        goto frame_exception_exit_21;
                    }
                    Py_INCREF(tmp_subscript_value_137);
                } else {
                    goto frame_exception_exit_21;
                }
            }

            tmp_ass_subvalue_98 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_237, tmp_subscript_value_137);
            Py_DECREF(tmp_expression_value_237);
            Py_DECREF(tmp_subscript_value_137);
            if (tmp_ass_subvalue_98 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 225;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscribed_98 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_98 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_98);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 225;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }

            if (tmp_ass_subscribed_98 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_98);

                exception_lineno = 225;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
            tmp_ass_subscript_98 = mod_consts[168];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_98, tmp_ass_subscript_98, tmp_ass_subvalue_98);
            Py_DECREF(tmp_ass_subscribed_98);
            Py_DECREF(tmp_ass_subvalue_98);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 225;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }
        {
            PyObject *tmp_assign_source_217;
            tmp_assign_source_217 = MAKE_DICT_EMPTY();
            assert(tmp_Link$class_creation_1__class_decl_dict == NULL);
            tmp_Link$class_creation_1__class_decl_dict = tmp_assign_source_217;
        }
        {
            PyObject *tmp_assign_source_218;
            tmp_assign_source_218 = MAKE_DICT_EMPTY();
            assert(tmp_Link$class_creation_1__prepared == NULL);
            tmp_Link$class_creation_1__prepared = tmp_assign_source_218;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_Link$class_creation_1__prepared);
            tmp_set_locals_34 = tmp_Link$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__34_Config_227 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__34_Config_227, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[169];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__34_Config_227, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__34_Config_227, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_219;
            PyObject *tmp_called_value_67;
            PyObject *tmp_args_value_53;
            PyObject *tmp_tuple_element_114;
            PyObject *tmp_kwargs_value_53;
            tmp_called_value_67 = (PyObject *)&PyType_Type;
            tmp_tuple_element_114 = mod_consts[57];
            tmp_args_value_53 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_114);
            tmp_tuple_element_114 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_114);
            tmp_tuple_element_114 = locals_fastapi$openapi$models$$$class__34_Config_227;
            PyTuple_SET_ITEM0(tmp_args_value_53, 2, tmp_tuple_element_114);
            CHECK_OBJECT(tmp_Link$class_creation_1__class_decl_dict);
            tmp_kwargs_value_53 = tmp_Link$class_creation_1__class_decl_dict;
            frame_36d24845ffbb070ee400e99e6440c958_21->m_frame.f_lineno = 227;
            tmp_assign_source_219 = CALL_FUNCTION(tstate, tmp_called_value_67, tmp_args_value_53, tmp_kwargs_value_53);
            Py_DECREF(tmp_args_value_53);
            if (tmp_assign_source_219 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 227;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_219;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_dictset_value = outline_33_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_106;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_106:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__34_Config_227);
        locals_fastapi$openapi$models$$$class__34_Config_227 = NULL;
        goto try_return_handler_105;
        // Exception handler code:
        try_except_handler_106:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__34_Config_227);
        locals_fastapi$openapi$models$$$class__34_Config_227 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto try_except_handler_105;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_105:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_105:;
        exception_keeper_type_102 = exception_type;
        exception_keeper_value_102 = exception_value;
        exception_keeper_tb_102 = exception_tb;
        exception_keeper_lineno_102 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;
        exception_lineno = exception_keeper_lineno_102;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 227;
        goto try_except_handler_104;
        outline_result_34:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_2 = "o";
            goto try_except_handler_104;
        }
        goto try_end_37;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Link$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Link$class_creation_1__class_decl_dict);
        tmp_Link$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Link$class_creation_1__prepared);
        Py_DECREF(tmp_Link$class_creation_1__prepared);
        tmp_Link$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto frame_exception_exit_21;
        // End of try:
        try_end_37:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_20;
        frame_exception_exit_21:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_36d24845ffbb070ee400e99e6440c958_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_36d24845ffbb070ee400e99e6440c958_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_36d24845ffbb070ee400e99e6440c958_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_36d24845ffbb070ee400e99e6440c958_21,
            type_description_2,
            outline_32_var___class__
        );



        assertFrameObject(frame_36d24845ffbb070ee400e99e6440c958_21);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_20;
        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_103;
        skip_nested_handling_20:;
        CHECK_OBJECT(tmp_Link$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Link$class_creation_1__class_decl_dict);
        tmp_Link$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Link$class_creation_1__prepared);
        Py_DECREF(tmp_Link$class_creation_1__prepared);
        tmp_Link$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_84;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_84 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_84 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 219;

                goto try_except_handler_103;
            }
            if (tmp_condition_result_84 == NUITKA_BOOL_TRUE) {
                goto branch_yes_62;
            } else {
                goto branch_no_62;
            }
        }
        branch_yes_62:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__33_Link_219, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;

            goto try_except_handler_103;
        }
        branch_no_62:;
        {
            PyObject *tmp_assign_source_220;
            PyObject *tmp_called_value_68;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_115;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_68 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_115 = mod_consts[163];
            tmp_args_value_54 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_115 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_115);
            tmp_tuple_element_115 = locals_fastapi$openapi$models$$$class__33_Link_219;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_20__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 219;
            tmp_assign_source_220 = CALL_FUNCTION(tstate, tmp_called_value_68, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_220 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 219;

                goto try_except_handler_103;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_220;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_assign_source_216 = outline_32_var___class__;
        Py_INCREF(tmp_assign_source_216);
        goto try_return_handler_103;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_103:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__33_Link_219);
        locals_fastapi$openapi$models$$$class__33_Link_219 = NULL;
        goto try_return_handler_102;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__33_Link_219);
        locals_fastapi$openapi$models$$$class__33_Link_219 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto try_except_handler_102;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 219;
        goto try_except_handler_101;
        outline_result_33:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[163], tmp_assign_source_216);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_101:;
    exception_keeper_type_106 = exception_type;
    exception_keeper_value_106 = exception_value;
    exception_keeper_tb_106 = exception_tb;
    exception_keeper_lineno_106 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_106;
    exception_value = exception_keeper_value_106;
    exception_tb = exception_keeper_tb_106;
    exception_lineno = exception_keeper_lineno_106;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_221;
        PyObject *tmp_tuple_element_116;
        tmp_tuple_element_116 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_116 == NULL)) {
            tmp_tuple_element_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_116 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_assign_source_221 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_221, 0, tmp_tuple_element_116);
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_221;
    }
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_222 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_222 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_222;
    }
    {
        PyObject *tmp_assign_source_223;
        tmp_assign_source_223 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_223;
    }
    {
        PyObject *tmp_assign_source_224;
        PyObject *tmp_metaclass_value_21;
        nuitka_bool tmp_condition_result_85;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_238;
        PyObject *tmp_subscript_value_138;
        PyObject *tmp_bases_value_21;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_21 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_condition_result_85 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_238 = tmp_class_creation_21__bases;
        tmp_subscript_value_138 = mod_consts[15];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_238, tmp_subscript_value_138, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        goto condexpr_end_23;
        condexpr_false_23:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_23:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_21 = tmp_class_creation_21__bases;
        tmp_assign_source_224 = SELECT_METACLASS(tstate, tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_224 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_224;
    }
    {
        bool tmp_condition_result_86;
        PyObject *tmp_expression_value_239;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_239 = tmp_class_creation_21__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_239, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_condition_result_86 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_86 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_assign_source_225;
        PyObject *tmp_called_value_69;
        PyObject *tmp_expression_value_240;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_117;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_240 = tmp_class_creation_21__metaclass;
        tmp_called_value_69 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_240, mod_consts[35]);
        if (tmp_called_value_69 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_tuple_element_117 = mod_consts[170];
        tmp_args_value_55 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_117);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_117 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_117);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_21__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 231;
        tmp_assign_source_225 = CALL_FUNCTION(tstate, tmp_called_value_69, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_69);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_225 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_225;
    }
    {
        bool tmp_condition_result_87;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_241;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_241 = tmp_class_creation_21__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_241, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_operand_value_22 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_87 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_87 != false) {
            goto branch_yes_64;
        } else {
            goto branch_no_64;
        }
    }
    branch_yes_64:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_mod_expr_left_21;
        PyObject *tmp_mod_expr_right_21;
        PyObject *tmp_tuple_element_118;
        PyObject *tmp_expression_value_242;
        PyObject *tmp_name_value_26;
        PyObject *tmp_default_value_21;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_mod_expr_left_21 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_242 = tmp_class_creation_21__metaclass;
        tmp_name_value_26 = mod_consts[38];
        tmp_default_value_21 = mod_consts[39];
        tmp_tuple_element_118 = BUILTIN_GETATTR(tstate, tmp_expression_value_242, tmp_name_value_26, tmp_default_value_21);
        if (tmp_tuple_element_118 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        tmp_mod_expr_right_21 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_243;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_mod_expr_right_21, 0, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_42 = tmp_class_creation_21__prepared;
            tmp_expression_value_243 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_243 == NULL));
            tmp_tuple_element_118 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_243, mod_consts[38]);
            Py_DECREF(tmp_expression_value_243);
            if (tmp_tuple_element_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto tuple_build_exception_38;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_21, 1, tmp_tuple_element_118);
        }
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_mod_expr_right_21);
        goto try_except_handler_107;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_21, tmp_mod_expr_right_21);
        Py_DECREF(tmp_mod_expr_right_21);
        if (tmp_raise_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_107;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_21;
        exception_lineno = 231;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_107;
    }
    branch_no_64:;
    goto branch_end_63;
    branch_no_63:;
    {
        PyObject *tmp_assign_source_226;
        tmp_assign_source_226 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_226;
    }
    branch_end_63:;
    {
        PyObject *tmp_assign_source_227;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_35 = tmp_class_creation_21__prepared;
            locals_fastapi$openapi$models$$$class__35_Response_231 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_109;
        }
        tmp_dictset_value = mod_consts[170];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_109;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_109;
        }
        frame_2f976bc1fc62f51ff41fbd9a05b54602_22 = MAKE_CLASS_FRAME(tstate, codeobj_2f976bc1fc62f51ff41fbd9a05b54602, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_2f976bc1fc62f51ff41fbd9a05b54602_22);
        assert(Py_REFCNT(frame_2f976bc1fc62f51ff41fbd9a05b54602_22) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_99;
            PyObject *tmp_ass_subscribed_99;
            PyObject *tmp_ass_subscript_99;
            tmp_ass_subvalue_99 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[46]);

            if (tmp_ass_subvalue_99 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_99 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_99);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_ass_subscribed_99 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_99 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_99);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 232;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_ass_subscribed_99 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_99);

                exception_lineno = 232;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscript_99 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_99, tmp_ass_subscript_99, tmp_ass_subvalue_99);
            Py_DECREF(tmp_ass_subscribed_99);
            Py_DECREF(tmp_ass_subvalue_99);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 232;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[143], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_ass_subvalue_100;
            PyObject *tmp_expression_value_244;
            PyObject *tmp_subscript_value_139;
            PyObject *tmp_expression_value_245;
            PyObject *tmp_subscript_value_140;
            PyObject *tmp_tuple_element_119;
            PyObject *tmp_ass_subscribed_100;
            PyObject *tmp_ass_subscript_100;
            tmp_expression_value_244 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[22]);

            if (tmp_expression_value_244 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_244 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_244 == NULL)) {
                        tmp_expression_value_244 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_244 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 233;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_244);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_expression_value_245 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[19]);

            if (tmp_expression_value_245 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_245 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_245 == NULL)) {
                        tmp_expression_value_245 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_245 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_244);

                        exception_lineno = 233;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_245);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_tuple_element_119 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[46]);

            if (tmp_tuple_element_119 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_119 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_119);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_subscript_value_140 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_246;
                PyObject *tmp_subscript_value_141;
                PyObject *tmp_tuple_element_120;
                PyTuple_SET_ITEM(tmp_subscript_value_140, 0, tmp_tuple_element_119);
                tmp_expression_value_246 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[23]);

                if (tmp_expression_value_246 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_246 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_246 == NULL)) {
                            tmp_expression_value_246 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_246 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 233;
                            type_description_2 = "o";
                            goto tuple_build_exception_39;
                        }
                        Py_INCREF(tmp_expression_value_246);
                    } else {
                        goto tuple_build_exception_39;
                    }
                }

                tmp_tuple_element_120 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[144]);

                if (tmp_tuple_element_120 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_120 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[144]);

                        if (unlikely(tmp_tuple_element_120 == NULL)) {
                            tmp_tuple_element_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[144]);
                        }

                        if (tmp_tuple_element_120 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_246);

                            exception_lineno = 233;
                            type_description_2 = "o";
                            goto tuple_build_exception_39;
                        }
                        Py_INCREF(tmp_tuple_element_120);
                    } else {
                        goto tuple_build_exception_39;
                    }
                }

                tmp_subscript_value_141 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_141, 0, tmp_tuple_element_120);
                tmp_tuple_element_120 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[75]);

                if (tmp_tuple_element_120 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_120 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_120 == NULL)) {
                            tmp_tuple_element_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_120 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 233;
                            type_description_2 = "o";
                            goto tuple_build_exception_40;
                        }
                        Py_INCREF(tmp_tuple_element_120);
                    } else {
                        goto tuple_build_exception_40;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_141, 1, tmp_tuple_element_120);
                goto tuple_build_noexception_39;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_40:;
                Py_DECREF(tmp_expression_value_246);
                Py_DECREF(tmp_subscript_value_141);
                goto tuple_build_exception_39;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_39:;
                tmp_tuple_element_119 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_246, tmp_subscript_value_141);
                Py_DECREF(tmp_expression_value_246);
                Py_DECREF(tmp_subscript_value_141);
                if (tmp_tuple_element_119 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 233;
                    type_description_2 = "o";
                    goto tuple_build_exception_39;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_140, 1, tmp_tuple_element_119);
            }
            goto tuple_build_noexception_40;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_39:;
            Py_DECREF(tmp_expression_value_244);
            Py_DECREF(tmp_expression_value_245);
            Py_DECREF(tmp_subscript_value_140);
            goto frame_exception_exit_22;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_40:;
            tmp_subscript_value_139 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_245, tmp_subscript_value_140);
            Py_DECREF(tmp_expression_value_245);
            Py_DECREF(tmp_subscript_value_140);
            if (tmp_subscript_value_139 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_244);

                exception_lineno = 233;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subvalue_100 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_244, tmp_subscript_value_139);
            Py_DECREF(tmp_expression_value_244);
            Py_DECREF(tmp_subscript_value_139);
            if (tmp_ass_subvalue_100 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 233;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscribed_100 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_100 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_100);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 233;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_ass_subscribed_100 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_100);

                exception_lineno = 233;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscript_100 = mod_consts[143];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_100, tmp_ass_subscript_100, tmp_ass_subvalue_100);
            Py_DECREF(tmp_ass_subscribed_100);
            Py_DECREF(tmp_ass_subvalue_100);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 233;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[156], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 234;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_ass_subvalue_101;
            PyObject *tmp_expression_value_247;
            PyObject *tmp_subscript_value_142;
            PyObject *tmp_expression_value_248;
            PyObject *tmp_subscript_value_143;
            PyObject *tmp_tuple_element_121;
            PyObject *tmp_ass_subscribed_101;
            PyObject *tmp_ass_subscript_101;
            tmp_expression_value_247 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[22]);

            if (tmp_expression_value_247 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_247 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_247 == NULL)) {
                        tmp_expression_value_247 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_247 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 234;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_247);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_expression_value_248 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[19]);

            if (tmp_expression_value_248 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_248 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_248 == NULL)) {
                        tmp_expression_value_248 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_248 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_247);

                        exception_lineno = 234;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_248);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_tuple_element_121 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[46]);

            if (tmp_tuple_element_121 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_121 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_121);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_subscript_value_143 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_143, 0, tmp_tuple_element_121);
            tmp_tuple_element_121 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[149]);

            if (tmp_tuple_element_121 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_121 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[149]);

                    if (unlikely(tmp_tuple_element_121 == NULL)) {
                        tmp_tuple_element_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[149]);
                    }

                    if (tmp_tuple_element_121 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 234;
                        type_description_2 = "o";
                        goto tuple_build_exception_41;
                    }
                    Py_INCREF(tmp_tuple_element_121);
                } else {
                    goto tuple_build_exception_41;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_143, 1, tmp_tuple_element_121);
            goto tuple_build_noexception_41;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_41:;
            Py_DECREF(tmp_expression_value_247);
            Py_DECREF(tmp_expression_value_248);
            Py_DECREF(tmp_subscript_value_143);
            goto frame_exception_exit_22;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_41:;
            tmp_subscript_value_142 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_248, tmp_subscript_value_143);
            Py_DECREF(tmp_expression_value_248);
            Py_DECREF(tmp_subscript_value_143);
            if (tmp_subscript_value_142 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_247);

                exception_lineno = 234;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subvalue_101 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_247, tmp_subscript_value_142);
            Py_DECREF(tmp_expression_value_247);
            Py_DECREF(tmp_subscript_value_142);
            if (tmp_ass_subvalue_101 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 234;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscribed_101 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_101 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_101);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 234;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_ass_subscribed_101 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_101);

                exception_lineno = 234;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscript_101 = mod_consts[156];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_101, tmp_ass_subscript_101, tmp_ass_subvalue_101);
            Py_DECREF(tmp_ass_subscribed_101);
            Py_DECREF(tmp_ass_subvalue_101);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 234;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[171], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_ass_subvalue_102;
            PyObject *tmp_expression_value_249;
            PyObject *tmp_subscript_value_144;
            PyObject *tmp_expression_value_250;
            PyObject *tmp_subscript_value_145;
            PyObject *tmp_tuple_element_122;
            PyObject *tmp_ass_subscribed_102;
            PyObject *tmp_ass_subscript_102;
            tmp_expression_value_249 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[22]);

            if (tmp_expression_value_249 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_249 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_249 == NULL)) {
                        tmp_expression_value_249 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_249 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 235;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_249);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_expression_value_250 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[19]);

            if (tmp_expression_value_250 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_250 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_250 == NULL)) {
                        tmp_expression_value_250 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_250 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_249);

                        exception_lineno = 235;
                        type_description_2 = "o";
                        goto frame_exception_exit_22;
                    }
                    Py_INCREF(tmp_expression_value_250);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_tuple_element_122 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[46]);

            if (tmp_tuple_element_122 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_122 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_122);
                } else {
                    goto frame_exception_exit_22;
                }
            }

            tmp_subscript_value_145 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_251;
                PyObject *tmp_subscript_value_146;
                PyObject *tmp_tuple_element_123;
                PyTuple_SET_ITEM(tmp_subscript_value_145, 0, tmp_tuple_element_122);
                tmp_expression_value_251 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[23]);

                if (tmp_expression_value_251 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_251 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_251 == NULL)) {
                            tmp_expression_value_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_251 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 235;
                            type_description_2 = "o";
                            goto tuple_build_exception_42;
                        }
                        Py_INCREF(tmp_expression_value_251);
                    } else {
                        goto tuple_build_exception_42;
                    }
                }

                tmp_tuple_element_123 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[163]);

                if (tmp_tuple_element_123 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_123 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[163]);

                        if (unlikely(tmp_tuple_element_123 == NULL)) {
                            tmp_tuple_element_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[163]);
                        }

                        if (tmp_tuple_element_123 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_251);

                            exception_lineno = 235;
                            type_description_2 = "o";
                            goto tuple_build_exception_42;
                        }
                        Py_INCREF(tmp_tuple_element_123);
                    } else {
                        goto tuple_build_exception_42;
                    }
                }

                tmp_subscript_value_146 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_146, 0, tmp_tuple_element_123);
                tmp_tuple_element_123 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[75]);

                if (tmp_tuple_element_123 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_123 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_123 == NULL)) {
                            tmp_tuple_element_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_123 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 235;
                            type_description_2 = "o";
                            goto tuple_build_exception_43;
                        }
                        Py_INCREF(tmp_tuple_element_123);
                    } else {
                        goto tuple_build_exception_43;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_146, 1, tmp_tuple_element_123);
                goto tuple_build_noexception_42;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_43:;
                Py_DECREF(tmp_expression_value_251);
                Py_DECREF(tmp_subscript_value_146);
                goto tuple_build_exception_42;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_42:;
                tmp_tuple_element_122 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_251, tmp_subscript_value_146);
                Py_DECREF(tmp_expression_value_251);
                Py_DECREF(tmp_subscript_value_146);
                if (tmp_tuple_element_122 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 235;
                    type_description_2 = "o";
                    goto tuple_build_exception_42;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_145, 1, tmp_tuple_element_122);
            }
            goto tuple_build_noexception_43;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_42:;
            Py_DECREF(tmp_expression_value_249);
            Py_DECREF(tmp_expression_value_250);
            Py_DECREF(tmp_subscript_value_145);
            goto frame_exception_exit_22;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_43:;
            tmp_subscript_value_144 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_250, tmp_subscript_value_145);
            Py_DECREF(tmp_expression_value_250);
            Py_DECREF(tmp_subscript_value_145);
            if (tmp_subscript_value_144 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_249);

                exception_lineno = 235;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subvalue_102 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_249, tmp_subscript_value_144);
            Py_DECREF(tmp_expression_value_249);
            Py_DECREF(tmp_subscript_value_144);
            if (tmp_ass_subvalue_102 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 235;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscribed_102 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_102 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_102);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 235;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_ass_subscribed_102 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_102);

                exception_lineno = 235;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_ass_subscript_102 = mod_consts[171];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_102, tmp_ass_subscript_102, tmp_ass_subvalue_102);
            Py_DECREF(tmp_ass_subscribed_102);
            Py_DECREF(tmp_ass_subvalue_102);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 235;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            PyObject *tmp_assign_source_228;
            tmp_assign_source_228 = MAKE_DICT_EMPTY();
            assert(tmp_Response$class_creation_1__class_decl_dict == NULL);
            tmp_Response$class_creation_1__class_decl_dict = tmp_assign_source_228;
        }
        {
            PyObject *tmp_assign_source_229;
            tmp_assign_source_229 = MAKE_DICT_EMPTY();
            assert(tmp_Response$class_creation_1__prepared == NULL);
            tmp_Response$class_creation_1__prepared = tmp_assign_source_229;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_Response$class_creation_1__prepared);
            tmp_set_locals_36 = tmp_Response$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__36_Config_237 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__36_Config_237, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[172];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__36_Config_237, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__36_Config_237, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_230;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_124;
            PyObject *tmp_kwargs_value_56;
            tmp_called_value_70 = (PyObject *)&PyType_Type;
            tmp_tuple_element_124 = mod_consts[57];
            tmp_args_value_56 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_124);
            tmp_tuple_element_124 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_124);
            tmp_tuple_element_124 = locals_fastapi$openapi$models$$$class__36_Config_237;
            PyTuple_SET_ITEM0(tmp_args_value_56, 2, tmp_tuple_element_124);
            CHECK_OBJECT(tmp_Response$class_creation_1__class_decl_dict);
            tmp_kwargs_value_56 = tmp_Response$class_creation_1__class_decl_dict;
            frame_2f976bc1fc62f51ff41fbd9a05b54602_22->m_frame.f_lineno = 237;
            tmp_assign_source_230 = CALL_FUNCTION(tstate, tmp_called_value_70, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_230 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 237;
                type_description_2 = "o";
                goto try_except_handler_112;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_230;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_dictset_value = outline_35_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_112;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_112:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__36_Config_237);
        locals_fastapi$openapi$models$$$class__36_Config_237 = NULL;
        goto try_return_handler_111;
        // Exception handler code:
        try_except_handler_112:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__36_Config_237);
        locals_fastapi$openapi$models$$$class__36_Config_237 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto try_except_handler_111;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_111:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_111:;
        exception_keeper_type_108 = exception_type;
        exception_keeper_value_108 = exception_value;
        exception_keeper_tb_108 = exception_tb;
        exception_keeper_lineno_108 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_108;
        exception_value = exception_keeper_value_108;
        exception_tb = exception_keeper_tb_108;
        exception_lineno = exception_keeper_lineno_108;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 237;
        goto try_except_handler_110;
        outline_result_36:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;
            type_description_2 = "o";
            goto try_except_handler_110;
        }
        goto try_end_39;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Response$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Response$class_creation_1__class_decl_dict);
        tmp_Response$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Response$class_creation_1__prepared);
        Py_DECREF(tmp_Response$class_creation_1__prepared);
        tmp_Response$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto frame_exception_exit_22;
        // End of try:
        try_end_39:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_21;
        frame_exception_exit_22:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2f976bc1fc62f51ff41fbd9a05b54602_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2f976bc1fc62f51ff41fbd9a05b54602_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2f976bc1fc62f51ff41fbd9a05b54602_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2f976bc1fc62f51ff41fbd9a05b54602_22,
            type_description_2,
            outline_34_var___class__
        );



        assertFrameObject(frame_2f976bc1fc62f51ff41fbd9a05b54602_22);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_21;
        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_109;
        skip_nested_handling_21:;
        CHECK_OBJECT(tmp_Response$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Response$class_creation_1__class_decl_dict);
        tmp_Response$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Response$class_creation_1__prepared);
        Py_DECREF(tmp_Response$class_creation_1__prepared);
        tmp_Response$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_88;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_22 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_22 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_88 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_88 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto try_except_handler_109;
            }
            if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
                goto branch_yes_65;
            } else {
                goto branch_no_65;
            }
        }
        branch_yes_65:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__35_Response_231, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_109;
        }
        branch_no_65:;
        {
            PyObject *tmp_assign_source_231;
            PyObject *tmp_called_value_71;
            PyObject *tmp_args_value_57;
            PyObject *tmp_tuple_element_125;
            PyObject *tmp_kwargs_value_57;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_71 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_125 = mod_consts[170];
            tmp_args_value_57 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_125 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_125);
            tmp_tuple_element_125 = locals_fastapi$openapi$models$$$class__35_Response_231;
            PyTuple_SET_ITEM0(tmp_args_value_57, 2, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_57 = tmp_class_creation_21__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 231;
            tmp_assign_source_231 = CALL_FUNCTION(tstate, tmp_called_value_71, tmp_args_value_57, tmp_kwargs_value_57);
            Py_DECREF(tmp_args_value_57);
            if (tmp_assign_source_231 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto try_except_handler_109;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_231;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_assign_source_227 = outline_34_var___class__;
        Py_INCREF(tmp_assign_source_227);
        goto try_return_handler_109;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_109:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__35_Response_231);
        locals_fastapi$openapi$models$$$class__35_Response_231 = NULL;
        goto try_return_handler_108;
        // Exception handler code:
        try_except_handler_109:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__35_Response_231);
        locals_fastapi$openapi$models$$$class__35_Response_231 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto try_except_handler_108;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_111 = exception_type;
        exception_keeper_value_111 = exception_value;
        exception_keeper_tb_111 = exception_tb;
        exception_keeper_lineno_111 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;
        exception_lineno = exception_keeper_lineno_111;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 231;
        goto try_except_handler_107;
        outline_result_35:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[170], tmp_assign_source_227);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_107:;
    exception_keeper_type_112 = exception_type;
    exception_keeper_value_112 = exception_value;
    exception_keeper_tb_112 = exception_tb;
    exception_keeper_lineno_112 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_112;
    exception_value = exception_keeper_value_112;
    exception_tb = exception_keeper_tb_112;
    exception_lineno = exception_keeper_lineno_112;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_232;
        PyObject *tmp_tuple_element_126;
        tmp_tuple_element_126 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_126 == NULL)) {
            tmp_tuple_element_126 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_126 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_assign_source_232 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_232, 0, tmp_tuple_element_126);
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_232;
    }
    {
        PyObject *tmp_assign_source_233;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_233 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_233 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_233;
    }
    {
        PyObject *tmp_assign_source_234;
        tmp_assign_source_234 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_234;
    }
    {
        PyObject *tmp_assign_source_235;
        PyObject *tmp_metaclass_value_22;
        nuitka_bool tmp_condition_result_89;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_252;
        PyObject *tmp_subscript_value_147;
        PyObject *tmp_bases_value_22;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_22 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_condition_result_89 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_89 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_252 = tmp_class_creation_22__bases;
        tmp_subscript_value_147 = mod_consts[15];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_252, tmp_subscript_value_147, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_24:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_22 = tmp_class_creation_22__bases;
        tmp_assign_source_235 = SELECT_METACLASS(tstate, tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_235 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_235;
    }
    {
        bool tmp_condition_result_90;
        PyObject *tmp_expression_value_253;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_253 = tmp_class_creation_22__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_253, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_condition_result_90 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_90 != false) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_assign_source_236;
        PyObject *tmp_called_value_72;
        PyObject *tmp_expression_value_254;
        PyObject *tmp_args_value_58;
        PyObject *tmp_tuple_element_127;
        PyObject *tmp_kwargs_value_58;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_254 = tmp_class_creation_22__metaclass;
        tmp_called_value_72 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_254, mod_consts[35]);
        if (tmp_called_value_72 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_tuple_element_127 = mod_consts[173];
        tmp_args_value_58 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_127);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_127 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_127);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_58 = tmp_class_creation_22__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 241;
        tmp_assign_source_236 = CALL_FUNCTION(tstate, tmp_called_value_72, tmp_args_value_58, tmp_kwargs_value_58);
        Py_DECREF(tmp_called_value_72);
        Py_DECREF(tmp_args_value_58);
        if (tmp_assign_source_236 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_236;
    }
    {
        bool tmp_condition_result_91;
        PyObject *tmp_operand_value_23;
        PyObject *tmp_expression_value_255;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_255 = tmp_class_creation_22__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_255, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_operand_value_23 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
        assert(!(tmp_res == -1));
        tmp_condition_result_91 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_91 != false) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_raise_type_23;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_mod_expr_left_22;
        PyObject *tmp_mod_expr_right_22;
        PyObject *tmp_tuple_element_128;
        PyObject *tmp_expression_value_256;
        PyObject *tmp_name_value_27;
        PyObject *tmp_default_value_22;
        tmp_raise_type_23 = PyExc_TypeError;
        tmp_mod_expr_left_22 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_256 = tmp_class_creation_22__metaclass;
        tmp_name_value_27 = mod_consts[38];
        tmp_default_value_22 = mod_consts[39];
        tmp_tuple_element_128 = BUILTIN_GETATTR(tstate, tmp_expression_value_256, tmp_name_value_27, tmp_default_value_22);
        if (tmp_tuple_element_128 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        tmp_mod_expr_right_22 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_257;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_mod_expr_right_22, 0, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_44 = tmp_class_creation_22__prepared;
            tmp_expression_value_257 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_257 == NULL));
            tmp_tuple_element_128 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_257, mod_consts[38]);
            Py_DECREF(tmp_expression_value_257);
            if (tmp_tuple_element_128 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto tuple_build_exception_44;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_22, 1, tmp_tuple_element_128);
        }
        goto tuple_build_noexception_44;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_44:;
        Py_DECREF(tmp_mod_expr_right_22);
        goto try_except_handler_113;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_44:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_22, tmp_mod_expr_right_22);
        Py_DECREF(tmp_mod_expr_right_22);
        if (tmp_raise_value_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_113;
        }
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_value = tmp_raise_value_22;
        exception_lineno = 241;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_113;
    }
    branch_no_67:;
    goto branch_end_66;
    branch_no_66:;
    {
        PyObject *tmp_assign_source_237;
        tmp_assign_source_237 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_237;
    }
    branch_end_66:;
    {
        PyObject *tmp_assign_source_238;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_37 = tmp_class_creation_22__prepared;
            locals_fastapi$openapi$models$$$class__37_Operation_241 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_115;
        }
        tmp_dictset_value = mod_consts[173];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_115;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_115;
        }
        frame_b4b21b132864ee67fe231b7ac3700a34_23 = MAKE_CLASS_FRAME(tstate, codeobj_b4b21b132864ee67fe231b7ac3700a34, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_b4b21b132864ee67fe231b7ac3700a34_23);
        assert(Py_REFCNT(frame_b4b21b132864ee67fe231b7ac3700a34_23) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[174], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_103;
            PyObject *tmp_expression_value_258;
            PyObject *tmp_subscript_value_148;
            PyObject *tmp_expression_value_259;
            PyObject *tmp_subscript_value_149;
            PyObject *tmp_ass_subscribed_103;
            PyObject *tmp_ass_subscript_103;
            tmp_expression_value_258 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_258 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_258 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_258 == NULL)) {
                        tmp_expression_value_258 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_258 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 242;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_258);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_259 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[21]);

            if (tmp_expression_value_259 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_259 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_259 == NULL)) {
                        tmp_expression_value_259 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_259 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_258);

                        exception_lineno = 242;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_259);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_149 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_subscript_value_149 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_149 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_149);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_148 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_259, tmp_subscript_value_149);
            Py_DECREF(tmp_expression_value_259);
            Py_DECREF(tmp_subscript_value_149);
            if (tmp_subscript_value_148 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_258);

                exception_lineno = 242;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_103 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_258, tmp_subscript_value_148);
            Py_DECREF(tmp_expression_value_258);
            Py_DECREF(tmp_subscript_value_148);
            if (tmp_ass_subvalue_103 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 242;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_103 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_103 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_103);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 242;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_103 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_103);

                exception_lineno = 242;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_103 = mod_consts[174];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_103, tmp_ass_subscript_103, tmp_ass_subvalue_103);
            Py_DECREF(tmp_ass_subscribed_103);
            Py_DECREF(tmp_ass_subvalue_103);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 242;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[132], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 243;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_104;
            PyObject *tmp_expression_value_260;
            PyObject *tmp_subscript_value_150;
            PyObject *tmp_ass_subscribed_104;
            PyObject *tmp_ass_subscript_104;
            tmp_expression_value_260 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_260 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_260 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_260 == NULL)) {
                        tmp_expression_value_260 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_260 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 243;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_260);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_150 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_subscript_value_150 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_150 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_150);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_ass_subvalue_104 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_260, tmp_subscript_value_150);
            Py_DECREF(tmp_expression_value_260);
            Py_DECREF(tmp_subscript_value_150);
            if (tmp_ass_subvalue_104 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 243;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_104 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_104 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_104);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 243;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_104 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_104);

                exception_lineno = 243;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_104 = mod_consts[132];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_104, tmp_ass_subscript_104, tmp_ass_subvalue_104);
            Py_DECREF(tmp_ass_subscribed_104);
            Py_DECREF(tmp_ass_subvalue_104);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 243;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_105;
            PyObject *tmp_expression_value_261;
            PyObject *tmp_subscript_value_151;
            PyObject *tmp_ass_subscribed_105;
            PyObject *tmp_ass_subscript_105;
            tmp_expression_value_261 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_261 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_261 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_261 == NULL)) {
                        tmp_expression_value_261 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_261 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 244;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_261);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_151 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_subscript_value_151 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_151 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_151);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_ass_subvalue_105 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_261, tmp_subscript_value_151);
            Py_DECREF(tmp_expression_value_261);
            Py_DECREF(tmp_subscript_value_151);
            if (tmp_ass_subvalue_105 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 244;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_105 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_105 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_105);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 244;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_105 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_105);

                exception_lineno = 244;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_105 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_105, tmp_ass_subscript_105, tmp_ass_subvalue_105);
            Py_DECREF(tmp_ass_subscribed_105);
            Py_DECREF(tmp_ass_subvalue_105);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 244;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[127], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_106;
            PyObject *tmp_expression_value_262;
            PyObject *tmp_subscript_value_152;
            PyObject *tmp_ass_subscribed_106;
            PyObject *tmp_ass_subscript_106;
            tmp_expression_value_262 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_262 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_262 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_262 == NULL)) {
                        tmp_expression_value_262 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_262 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 245;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_262);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_152 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[89]);

            if (tmp_subscript_value_152 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_152 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[89]);

                    if (unlikely(tmp_subscript_value_152 == NULL)) {
                        tmp_subscript_value_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[89]);
                    }

                    if (tmp_subscript_value_152 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_262);

                        exception_lineno = 245;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_subscript_value_152);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_ass_subvalue_106 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_262, tmp_subscript_value_152);
            Py_DECREF(tmp_expression_value_262);
            Py_DECREF(tmp_subscript_value_152);
            if (tmp_ass_subvalue_106 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 245;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_106 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_106 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_106);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 245;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_106 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_106);

                exception_lineno = 245;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_106 = mod_consts[127];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_106, tmp_ass_subscript_106, tmp_ass_subvalue_106);
            Py_DECREF(tmp_ass_subscribed_106);
            Py_DECREF(tmp_ass_subvalue_106);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 245;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[165], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_107;
            PyObject *tmp_expression_value_263;
            PyObject *tmp_subscript_value_153;
            PyObject *tmp_ass_subscribed_107;
            PyObject *tmp_ass_subscript_107;
            tmp_expression_value_263 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_263 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_263 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_263 == NULL)) {
                        tmp_expression_value_263 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_263 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 246;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_263);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_153 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_subscript_value_153 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_153 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_153);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_ass_subvalue_107 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_263, tmp_subscript_value_153);
            Py_DECREF(tmp_expression_value_263);
            Py_DECREF(tmp_subscript_value_153);
            if (tmp_ass_subvalue_107 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 246;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_107 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_107 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_107);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 246;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_107 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_107);

                exception_lineno = 246;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_107 = mod_consts[165];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_107, tmp_ass_subscript_107, tmp_ass_subvalue_107);
            Py_DECREF(tmp_ass_subscribed_107);
            Py_DECREF(tmp_ass_subvalue_107);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 246;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[166], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_108;
            PyObject *tmp_expression_value_264;
            PyObject *tmp_subscript_value_154;
            PyObject *tmp_expression_value_265;
            PyObject *tmp_subscript_value_155;
            PyObject *tmp_expression_value_266;
            PyObject *tmp_subscript_value_156;
            PyObject *tmp_tuple_element_129;
            PyObject *tmp_ass_subscribed_108;
            PyObject *tmp_ass_subscript_108;
            tmp_expression_value_264 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_264 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_264 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_264 == NULL)) {
                        tmp_expression_value_264 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_264 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 247;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_264);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_265 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[21]);

            if (tmp_expression_value_265 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_265 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_265 == NULL)) {
                        tmp_expression_value_265 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_265 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_264);

                        exception_lineno = 247;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_265);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_266 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[23]);

            if (tmp_expression_value_266 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_266 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_266 == NULL)) {
                        tmp_expression_value_266 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_266 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_264);
                        Py_DECREF(tmp_expression_value_265);

                        exception_lineno = 247;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_266);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_tuple_element_129 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[158]);

            if (tmp_tuple_element_129 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_129 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[158]);

                    if (unlikely(tmp_tuple_element_129 == NULL)) {
                        tmp_tuple_element_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[158]);
                    }

                    if (tmp_tuple_element_129 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_264);
                        Py_DECREF(tmp_expression_value_265);
                        Py_DECREF(tmp_expression_value_266);

                        exception_lineno = 247;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_tuple_element_129);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_156 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_156, 0, tmp_tuple_element_129);
            tmp_tuple_element_129 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[75]);

            if (tmp_tuple_element_129 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_129 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_129 == NULL)) {
                        tmp_tuple_element_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_129 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 247;
                        type_description_2 = "o";
                        goto tuple_build_exception_45;
                    }
                    Py_INCREF(tmp_tuple_element_129);
                } else {
                    goto tuple_build_exception_45;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_156, 1, tmp_tuple_element_129);
            goto tuple_build_noexception_45;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_45:;
            Py_DECREF(tmp_expression_value_264);
            Py_DECREF(tmp_expression_value_265);
            Py_DECREF(tmp_expression_value_266);
            Py_DECREF(tmp_subscript_value_156);
            goto frame_exception_exit_23;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_45:;
            tmp_subscript_value_155 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_266, tmp_subscript_value_156);
            Py_DECREF(tmp_expression_value_266);
            Py_DECREF(tmp_subscript_value_156);
            if (tmp_subscript_value_155 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_264);
                Py_DECREF(tmp_expression_value_265);

                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_subscript_value_154 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_265, tmp_subscript_value_155);
            Py_DECREF(tmp_expression_value_265);
            Py_DECREF(tmp_subscript_value_155);
            if (tmp_subscript_value_154 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_264);

                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_108 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_264, tmp_subscript_value_154);
            Py_DECREF(tmp_expression_value_264);
            Py_DECREF(tmp_subscript_value_154);
            if (tmp_ass_subvalue_108 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_108 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_108 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_108);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_108 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_108);

                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_108 = mod_consts[166];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_108, tmp_ass_subscript_108, tmp_ass_subvalue_108);
            Py_DECREF(tmp_ass_subscribed_108);
            Py_DECREF(tmp_ass_subvalue_108);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 247;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[167], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_109;
            PyObject *tmp_expression_value_267;
            PyObject *tmp_subscript_value_157;
            PyObject *tmp_expression_value_268;
            PyObject *tmp_subscript_value_158;
            PyObject *tmp_tuple_element_130;
            PyObject *tmp_ass_subscribed_109;
            PyObject *tmp_ass_subscript_109;
            tmp_expression_value_267 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_267 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_267 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_267 == NULL)) {
                        tmp_expression_value_267 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_267 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 248;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_267);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_268 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[23]);

            if (tmp_expression_value_268 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_268 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_268 == NULL)) {
                        tmp_expression_value_268 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_268 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_267);

                        exception_lineno = 248;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_268);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_tuple_element_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[161]);

            if (tmp_tuple_element_130 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_130 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[161]);

                    if (unlikely(tmp_tuple_element_130 == NULL)) {
                        tmp_tuple_element_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[161]);
                    }

                    if (tmp_tuple_element_130 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_267);
                        Py_DECREF(tmp_expression_value_268);

                        exception_lineno = 248;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_tuple_element_130);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_158 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_158, 0, tmp_tuple_element_130);
            tmp_tuple_element_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[75]);

            if (tmp_tuple_element_130 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_130 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_130 == NULL)) {
                        tmp_tuple_element_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_130 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 248;
                        type_description_2 = "o";
                        goto tuple_build_exception_46;
                    }
                    Py_INCREF(tmp_tuple_element_130);
                } else {
                    goto tuple_build_exception_46;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_158, 1, tmp_tuple_element_130);
            goto tuple_build_noexception_46;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_46:;
            Py_DECREF(tmp_expression_value_267);
            Py_DECREF(tmp_expression_value_268);
            Py_DECREF(tmp_subscript_value_158);
            goto frame_exception_exit_23;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_46:;
            tmp_subscript_value_157 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_268, tmp_subscript_value_158);
            Py_DECREF(tmp_expression_value_268);
            Py_DECREF(tmp_subscript_value_158);
            if (tmp_subscript_value_157 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_267);

                exception_lineno = 248;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_109 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_267, tmp_subscript_value_157);
            Py_DECREF(tmp_expression_value_267);
            Py_DECREF(tmp_subscript_value_157);
            if (tmp_ass_subvalue_109 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 248;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_109 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_109 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_109);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 248;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_109 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_109);

                exception_lineno = 248;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_109 = mod_consts[167];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_109, tmp_ass_subscript_109, tmp_ass_subvalue_109);
            Py_DECREF(tmp_ass_subscribed_109);
            Py_DECREF(tmp_ass_subvalue_109);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 248;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            PyObject *tmp_ass_subvalue_110;
            PyObject *tmp_expression_value_269;
            PyObject *tmp_subscript_value_159;
            PyObject *tmp_tuple_element_131;
            PyObject *tmp_ass_subscribed_110;
            PyObject *tmp_ass_subscript_110;
            tmp_expression_value_269 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[19]);

            if (tmp_expression_value_269 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_269 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_269 == NULL)) {
                        tmp_expression_value_269 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_269 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 250;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_269);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_tuple_element_131 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_tuple_element_131 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_131 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_131);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_159 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_270;
                PyObject *tmp_subscript_value_160;
                PyObject *tmp_tuple_element_132;
                PyTuple_SET_ITEM(tmp_subscript_value_159, 0, tmp_tuple_element_131);
                tmp_expression_value_270 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[23]);

                if (tmp_expression_value_270 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_270 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_270 == NULL)) {
                            tmp_expression_value_270 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_270 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 250;
                            type_description_2 = "o";
                            goto tuple_build_exception_47;
                        }
                        Py_INCREF(tmp_expression_value_270);
                    } else {
                        goto tuple_build_exception_47;
                    }
                }

                tmp_tuple_element_132 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[170]);

                if (tmp_tuple_element_132 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_132 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[170]);

                        if (unlikely(tmp_tuple_element_132 == NULL)) {
                            tmp_tuple_element_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[170]);
                        }

                        if (tmp_tuple_element_132 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_270);

                            exception_lineno = 250;
                            type_description_2 = "o";
                            goto tuple_build_exception_47;
                        }
                        Py_INCREF(tmp_tuple_element_132);
                    } else {
                        goto tuple_build_exception_47;
                    }
                }

                tmp_subscript_value_160 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_160, 0, tmp_tuple_element_132);
                tmp_tuple_element_132 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[17]);

                if (tmp_tuple_element_132 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_132 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                        if (unlikely(tmp_tuple_element_132 == NULL)) {
                            tmp_tuple_element_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                        }

                        if (tmp_tuple_element_132 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 250;
                            type_description_2 = "o";
                            goto tuple_build_exception_48;
                        }
                        Py_INCREF(tmp_tuple_element_132);
                    } else {
                        goto tuple_build_exception_48;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_160, 1, tmp_tuple_element_132);
                goto tuple_build_noexception_47;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_48:;
                Py_DECREF(tmp_expression_value_270);
                Py_DECREF(tmp_subscript_value_160);
                goto tuple_build_exception_47;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_47:;
                tmp_tuple_element_131 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_270, tmp_subscript_value_160);
                Py_DECREF(tmp_expression_value_270);
                Py_DECREF(tmp_subscript_value_160);
                if (tmp_tuple_element_131 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 250;
                    type_description_2 = "o";
                    goto tuple_build_exception_47;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_159, 1, tmp_tuple_element_131);
            }
            goto tuple_build_noexception_48;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_47:;
            Py_DECREF(tmp_expression_value_269);
            Py_DECREF(tmp_subscript_value_159);
            goto frame_exception_exit_23;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_48:;
            tmp_ass_subvalue_110 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_269, tmp_subscript_value_159);
            Py_DECREF(tmp_expression_value_269);
            Py_DECREF(tmp_subscript_value_159);
            if (tmp_ass_subvalue_110 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 250;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_110 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_110 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_110);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 250;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_110 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_110);

                exception_lineno = 250;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_110 = mod_consts[175];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_110, tmp_ass_subscript_110, tmp_ass_subvalue_110);
            Py_DECREF(tmp_ass_subscribed_110);
            Py_DECREF(tmp_ass_subvalue_110);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 250;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[176], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_111;
            PyObject *tmp_expression_value_271;
            PyObject *tmp_subscript_value_161;
            PyObject *tmp_expression_value_272;
            PyObject *tmp_subscript_value_162;
            PyObject *tmp_tuple_element_133;
            PyObject *tmp_ass_subscribed_111;
            PyObject *tmp_ass_subscript_111;
            tmp_expression_value_271 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_271 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_271 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_271 == NULL)) {
                        tmp_expression_value_271 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_271 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 251;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_271);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_272 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[19]);

            if (tmp_expression_value_272 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_272 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_272 == NULL)) {
                        tmp_expression_value_272 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_272 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_271);

                        exception_lineno = 251;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_272);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_tuple_element_133 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_tuple_element_133 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_133 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_133);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_162 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_273;
                PyObject *tmp_subscript_value_163;
                PyObject *tmp_tuple_element_134;
                PyObject *tmp_expression_value_274;
                PyObject *tmp_subscript_value_164;
                PyObject *tmp_tuple_element_135;
                PyTuple_SET_ITEM(tmp_subscript_value_162, 0, tmp_tuple_element_133);
                tmp_expression_value_273 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[23]);

                if (tmp_expression_value_273 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_273 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_273 == NULL)) {
                            tmp_expression_value_273 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_273 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 251;
                            type_description_2 = "o";
                            goto tuple_build_exception_49;
                        }
                        Py_INCREF(tmp_expression_value_273);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_expression_value_274 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[19]);

                if (tmp_expression_value_274 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_274 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                        if (unlikely(tmp_expression_value_274 == NULL)) {
                            tmp_expression_value_274 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                        }

                        if (tmp_expression_value_274 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_273);

                            exception_lineno = 251;
                            type_description_2 = "o";
                            goto tuple_build_exception_49;
                        }
                        Py_INCREF(tmp_expression_value_274);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_tuple_element_135 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

                if (tmp_tuple_element_135 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_135 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_tuple_element_135);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_subscript_value_164 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_164, 0, tmp_tuple_element_135);
                tmp_tuple_element_135 = mod_consts[177];
                PyTuple_SET_ITEM0(tmp_subscript_value_164, 1, tmp_tuple_element_135);
                tmp_tuple_element_134 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_274, tmp_subscript_value_164);
                Py_DECREF(tmp_expression_value_274);
                Py_DECREF(tmp_subscript_value_164);
                if (tmp_tuple_element_134 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_273);

                    exception_lineno = 251;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                tmp_subscript_value_163 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_163, 0, tmp_tuple_element_134);
                tmp_tuple_element_134 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[75]);

                if (tmp_tuple_element_134 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_134 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_134 == NULL)) {
                            tmp_tuple_element_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_134 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 251;
                            type_description_2 = "o";
                            goto tuple_build_exception_50;
                        }
                        Py_INCREF(tmp_tuple_element_134);
                    } else {
                        goto tuple_build_exception_50;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_163, 1, tmp_tuple_element_134);
                goto tuple_build_noexception_49;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_50:;
                Py_DECREF(tmp_expression_value_273);
                Py_DECREF(tmp_subscript_value_163);
                goto tuple_build_exception_49;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_49:;
                tmp_tuple_element_133 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_273, tmp_subscript_value_163);
                Py_DECREF(tmp_expression_value_273);
                Py_DECREF(tmp_subscript_value_163);
                if (tmp_tuple_element_133 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 251;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_162, 1, tmp_tuple_element_133);
            }
            goto tuple_build_noexception_50;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_49:;
            Py_DECREF(tmp_expression_value_271);
            Py_DECREF(tmp_expression_value_272);
            Py_DECREF(tmp_subscript_value_162);
            goto frame_exception_exit_23;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_50:;
            tmp_subscript_value_161 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_272, tmp_subscript_value_162);
            Py_DECREF(tmp_expression_value_272);
            Py_DECREF(tmp_subscript_value_162);
            if (tmp_subscript_value_161 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_271);

                exception_lineno = 251;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_111 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_271, tmp_subscript_value_161);
            Py_DECREF(tmp_expression_value_271);
            Py_DECREF(tmp_subscript_value_161);
            if (tmp_ass_subvalue_111 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 251;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_111 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_111 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_111);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 251;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_111 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_111);

                exception_lineno = 251;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_111 = mod_consts[176];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_111, tmp_ass_subscript_111, tmp_ass_subvalue_111);
            Py_DECREF(tmp_ass_subscribed_111);
            Py_DECREF(tmp_ass_subvalue_111);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 251;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[129], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_112;
            PyObject *tmp_expression_value_275;
            PyObject *tmp_subscript_value_165;
            PyObject *tmp_ass_subscribed_112;
            PyObject *tmp_ass_subscript_112;
            tmp_expression_value_275 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_275 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_275 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_275 == NULL)) {
                        tmp_expression_value_275 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_275 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 252;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_275);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_165 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[86]);

            if (tmp_subscript_value_165 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_165 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_subscript_value_165);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_ass_subvalue_112 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_275, tmp_subscript_value_165);
            Py_DECREF(tmp_expression_value_275);
            Py_DECREF(tmp_subscript_value_165);
            if (tmp_ass_subvalue_112 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 252;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_112 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_112 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_112);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 252;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_112 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_112);

                exception_lineno = 252;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_112 = mod_consts[129];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_112, tmp_ass_subscript_112, tmp_ass_subvalue_112);
            Py_DECREF(tmp_ass_subscribed_112);
            Py_DECREF(tmp_ass_subvalue_112);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 252;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[178], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_113;
            PyObject *tmp_expression_value_276;
            PyObject *tmp_subscript_value_166;
            PyObject *tmp_expression_value_277;
            PyObject *tmp_subscript_value_167;
            PyObject *tmp_expression_value_278;
            PyObject *tmp_subscript_value_168;
            PyObject *tmp_tuple_element_136;
            PyObject *tmp_ass_subscribed_113;
            PyObject *tmp_ass_subscript_113;
            tmp_expression_value_276 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_276 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_276 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_276 == NULL)) {
                        tmp_expression_value_276 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_276 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 253;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_276);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_277 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[21]);

            if (tmp_expression_value_277 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_277 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_277 == NULL)) {
                        tmp_expression_value_277 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_277 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_276);

                        exception_lineno = 253;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_277);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_278 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[19]);

            if (tmp_expression_value_278 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_278 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_278 == NULL)) {
                        tmp_expression_value_278 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_278 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_276);
                        Py_DECREF(tmp_expression_value_277);

                        exception_lineno = 253;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_278);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_tuple_element_136 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

            if (tmp_tuple_element_136 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_136 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_136);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_168 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_279;
                PyObject *tmp_subscript_value_169;
                PyTuple_SET_ITEM(tmp_subscript_value_168, 0, tmp_tuple_element_136);
                tmp_expression_value_279 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[21]);

                if (tmp_expression_value_279 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_279 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                        if (unlikely(tmp_expression_value_279 == NULL)) {
                            tmp_expression_value_279 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                        }

                        if (tmp_expression_value_279 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 253;
                            type_description_2 = "o";
                            goto tuple_build_exception_51;
                        }
                        Py_INCREF(tmp_expression_value_279);
                    } else {
                        goto tuple_build_exception_51;
                    }
                }

                tmp_subscript_value_169 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[46]);

                if (tmp_subscript_value_169 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_subscript_value_169 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_169);
                    } else {
                        goto tuple_build_exception_51;
                    }
                }

                tmp_tuple_element_136 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_279, tmp_subscript_value_169);
                Py_DECREF(tmp_expression_value_279);
                Py_DECREF(tmp_subscript_value_169);
                if (tmp_tuple_element_136 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 253;
                    type_description_2 = "o";
                    goto tuple_build_exception_51;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_168, 1, tmp_tuple_element_136);
            }
            goto tuple_build_noexception_51;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_51:;
            Py_DECREF(tmp_expression_value_276);
            Py_DECREF(tmp_expression_value_277);
            Py_DECREF(tmp_expression_value_278);
            Py_DECREF(tmp_subscript_value_168);
            goto frame_exception_exit_23;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_51:;
            tmp_subscript_value_167 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_278, tmp_subscript_value_168);
            Py_DECREF(tmp_expression_value_278);
            Py_DECREF(tmp_subscript_value_168);
            if (tmp_subscript_value_167 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_276);
                Py_DECREF(tmp_expression_value_277);

                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_subscript_value_166 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_277, tmp_subscript_value_167);
            Py_DECREF(tmp_expression_value_277);
            Py_DECREF(tmp_subscript_value_167);
            if (tmp_subscript_value_166 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_276);

                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_113 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_276, tmp_subscript_value_166);
            Py_DECREF(tmp_expression_value_276);
            Py_DECREF(tmp_subscript_value_166);
            if (tmp_ass_subvalue_113 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_113 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_113 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_113);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_113 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_113);

                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_113 = mod_consts[178];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_113, tmp_ass_subscript_113, tmp_ass_subvalue_113);
            Py_DECREF(tmp_ass_subscribed_113);
            Py_DECREF(tmp_ass_subvalue_113);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 253;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[179], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_ass_subvalue_114;
            PyObject *tmp_expression_value_280;
            PyObject *tmp_subscript_value_170;
            PyObject *tmp_expression_value_281;
            PyObject *tmp_subscript_value_171;
            PyObject *tmp_ass_subscribed_114;
            PyObject *tmp_ass_subscript_114;
            tmp_expression_value_280 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[22]);

            if (tmp_expression_value_280 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_280 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_280 == NULL)) {
                        tmp_expression_value_280 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_280 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 254;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_280);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_expression_value_281 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[21]);

            if (tmp_expression_value_281 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_281 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_281 == NULL)) {
                        tmp_expression_value_281 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_281 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_280);

                        exception_lineno = 254;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_281);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_171 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[72]);

            if (tmp_subscript_value_171 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_171 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[72]);

                    if (unlikely(tmp_subscript_value_171 == NULL)) {
                        tmp_subscript_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[72]);
                    }

                    if (tmp_subscript_value_171 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_280);
                        Py_DECREF(tmp_expression_value_281);

                        exception_lineno = 254;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_subscript_value_171);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_subscript_value_170 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_281, tmp_subscript_value_171);
            Py_DECREF(tmp_expression_value_281);
            Py_DECREF(tmp_subscript_value_171);
            if (tmp_subscript_value_170 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_280);

                exception_lineno = 254;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subvalue_114 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_280, tmp_subscript_value_170);
            Py_DECREF(tmp_expression_value_280);
            Py_DECREF(tmp_subscript_value_170);
            if (tmp_ass_subvalue_114 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 254;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscribed_114 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_114 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_114);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 254;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_ass_subscribed_114 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_114);

                exception_lineno = 254;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_ass_subscript_114 = mod_consts[179];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_114, tmp_ass_subscript_114, tmp_ass_subvalue_114);
            Py_DECREF(tmp_ass_subscribed_114);
            Py_DECREF(tmp_ass_subvalue_114);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 254;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            PyObject *tmp_assign_source_239;
            tmp_assign_source_239 = MAKE_DICT_EMPTY();
            assert(tmp_Operation$class_creation_1__class_decl_dict == NULL);
            tmp_Operation$class_creation_1__class_decl_dict = tmp_assign_source_239;
        }
        {
            PyObject *tmp_assign_source_240;
            tmp_assign_source_240 = MAKE_DICT_EMPTY();
            assert(tmp_Operation$class_creation_1__prepared == NULL);
            tmp_Operation$class_creation_1__prepared = tmp_assign_source_240;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_Operation$class_creation_1__prepared);
            tmp_set_locals_38 = tmp_Operation$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__38_Config_256 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__38_Config_256, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[180];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__38_Config_256, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__38_Config_256, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_241;
            PyObject *tmp_called_value_73;
            PyObject *tmp_args_value_59;
            PyObject *tmp_tuple_element_137;
            PyObject *tmp_kwargs_value_59;
            tmp_called_value_73 = (PyObject *)&PyType_Type;
            tmp_tuple_element_137 = mod_consts[57];
            tmp_args_value_59 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_137);
            tmp_tuple_element_137 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_137);
            tmp_tuple_element_137 = locals_fastapi$openapi$models$$$class__38_Config_256;
            PyTuple_SET_ITEM0(tmp_args_value_59, 2, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_Operation$class_creation_1__class_decl_dict);
            tmp_kwargs_value_59 = tmp_Operation$class_creation_1__class_decl_dict;
            frame_b4b21b132864ee67fe231b7ac3700a34_23->m_frame.f_lineno = 256;
            tmp_assign_source_241 = CALL_FUNCTION(tstate, tmp_called_value_73, tmp_args_value_59, tmp_kwargs_value_59);
            Py_DECREF(tmp_args_value_59);
            if (tmp_assign_source_241 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;
                type_description_2 = "o";
                goto try_except_handler_118;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_241;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_dictset_value = outline_37_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_118;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_118:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__38_Config_256);
        locals_fastapi$openapi$models$$$class__38_Config_256 = NULL;
        goto try_return_handler_117;
        // Exception handler code:
        try_except_handler_118:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__38_Config_256);
        locals_fastapi$openapi$models$$$class__38_Config_256 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto try_except_handler_117;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_117:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_117:;
        exception_keeper_type_114 = exception_type;
        exception_keeper_value_114 = exception_value;
        exception_keeper_tb_114 = exception_tb;
        exception_keeper_lineno_114 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;
        exception_lineno = exception_keeper_lineno_114;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 256;
        goto try_except_handler_116;
        outline_result_38:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;
            type_description_2 = "o";
            goto try_except_handler_116;
        }
        goto try_end_41;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Operation$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Operation$class_creation_1__class_decl_dict);
        tmp_Operation$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Operation$class_creation_1__prepared);
        Py_DECREF(tmp_Operation$class_creation_1__prepared);
        tmp_Operation$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto frame_exception_exit_23;
        // End of try:
        try_end_41:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_22;
        frame_exception_exit_23:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b4b21b132864ee67fe231b7ac3700a34_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b4b21b132864ee67fe231b7ac3700a34_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b4b21b132864ee67fe231b7ac3700a34_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b4b21b132864ee67fe231b7ac3700a34_23,
            type_description_2,
            outline_36_var___class__
        );



        assertFrameObject(frame_b4b21b132864ee67fe231b7ac3700a34_23);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_22;
        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;

        goto try_except_handler_115;
        skip_nested_handling_22:;
        CHECK_OBJECT(tmp_Operation$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Operation$class_creation_1__class_decl_dict);
        tmp_Operation$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Operation$class_creation_1__prepared);
        Py_DECREF(tmp_Operation$class_creation_1__prepared);
        tmp_Operation$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_92;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_23 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_23 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_92 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_92 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto try_except_handler_115;
            }
            if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
                goto branch_yes_68;
            } else {
                goto branch_no_68;
            }
        }
        branch_yes_68:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__37_Operation_241, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_115;
        }
        branch_no_68:;
        {
            PyObject *tmp_assign_source_242;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_138;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_74 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_138 = mod_consts[173];
            tmp_args_value_60 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_138 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_138);
            tmp_tuple_element_138 = locals_fastapi$openapi$models$$$class__37_Operation_241;
            PyTuple_SET_ITEM0(tmp_args_value_60, 2, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_60 = tmp_class_creation_22__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 241;
            tmp_assign_source_242 = CALL_FUNCTION(tstate, tmp_called_value_74, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_242 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto try_except_handler_115;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_242;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_238 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_238);
        goto try_return_handler_115;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_115:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__37_Operation_241);
        locals_fastapi$openapi$models$$$class__37_Operation_241 = NULL;
        goto try_return_handler_114;
        // Exception handler code:
        try_except_handler_115:;
        exception_keeper_type_116 = exception_type;
        exception_keeper_value_116 = exception_value;
        exception_keeper_tb_116 = exception_tb;
        exception_keeper_lineno_116 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__37_Operation_241);
        locals_fastapi$openapi$models$$$class__37_Operation_241 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;
        exception_lineno = exception_keeper_lineno_116;

        goto try_except_handler_114;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_114:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_117 = exception_type;
        exception_keeper_value_117 = exception_value;
        exception_keeper_tb_117 = exception_tb;
        exception_keeper_lineno_117 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;
        exception_lineno = exception_keeper_lineno_117;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 241;
        goto try_except_handler_113;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173], tmp_assign_source_238);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_113:;
    exception_keeper_type_118 = exception_type;
    exception_keeper_value_118 = exception_value;
    exception_keeper_tb_118 = exception_tb;
    exception_keeper_lineno_118 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_118;
    exception_value = exception_keeper_value_118;
    exception_tb = exception_keeper_tb_118;
    exception_lineno = exception_keeper_lineno_118;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_243;
        PyObject *tmp_tuple_element_139;
        tmp_tuple_element_139 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_139 == NULL)) {
            tmp_tuple_element_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_139 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_assign_source_243 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_243, 0, tmp_tuple_element_139);
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_243;
    }
    {
        PyObject *tmp_assign_source_244;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_23 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_23);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_244 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_244 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_244;
    }
    {
        PyObject *tmp_assign_source_245;
        tmp_assign_source_245 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_245;
    }
    {
        PyObject *tmp_assign_source_246;
        PyObject *tmp_metaclass_value_23;
        nuitka_bool tmp_condition_result_93;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_expression_value_282;
        PyObject *tmp_subscript_value_172;
        PyObject *tmp_bases_value_23;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_23 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_condition_result_93 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_93 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_282 = tmp_class_creation_23__bases;
        tmp_subscript_value_172 = mod_consts[15];
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_282, tmp_subscript_value_172, 0);
        if (tmp_type_arg_45 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
        Py_DECREF(tmp_type_arg_45);
        if (tmp_metaclass_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        goto condexpr_end_25;
        condexpr_false_25:;
        tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_23);
        condexpr_end_25:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_23 = tmp_class_creation_23__bases;
        tmp_assign_source_246 = SELECT_METACLASS(tstate, tmp_metaclass_value_23, tmp_bases_value_23);
        Py_DECREF(tmp_metaclass_value_23);
        if (tmp_assign_source_246 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_246;
    }
    {
        bool tmp_condition_result_94;
        PyObject *tmp_expression_value_283;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_283 = tmp_class_creation_23__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_283, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_condition_result_94 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_94 != false) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    {
        PyObject *tmp_assign_source_247;
        PyObject *tmp_called_value_75;
        PyObject *tmp_expression_value_284;
        PyObject *tmp_args_value_61;
        PyObject *tmp_tuple_element_140;
        PyObject *tmp_kwargs_value_61;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_284 = tmp_class_creation_23__metaclass;
        tmp_called_value_75 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_284, mod_consts[35]);
        if (tmp_called_value_75 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_tuple_element_140 = mod_consts[177];
        tmp_args_value_61 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_140 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_61 = tmp_class_creation_23__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 260;
        tmp_assign_source_247 = CALL_FUNCTION(tstate, tmp_called_value_75, tmp_args_value_61, tmp_kwargs_value_61);
        Py_DECREF(tmp_called_value_75);
        Py_DECREF(tmp_args_value_61);
        if (tmp_assign_source_247 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_247;
    }
    {
        bool tmp_condition_result_95;
        PyObject *tmp_operand_value_24;
        PyObject *tmp_expression_value_285;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_285 = tmp_class_creation_23__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_285, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_operand_value_24 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_95 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_95 != false) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_raise_type_24;
        PyObject *tmp_raise_value_23;
        PyObject *tmp_mod_expr_left_23;
        PyObject *tmp_mod_expr_right_23;
        PyObject *tmp_tuple_element_141;
        PyObject *tmp_expression_value_286;
        PyObject *tmp_name_value_28;
        PyObject *tmp_default_value_23;
        tmp_raise_type_24 = PyExc_TypeError;
        tmp_mod_expr_left_23 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_286 = tmp_class_creation_23__metaclass;
        tmp_name_value_28 = mod_consts[38];
        tmp_default_value_23 = mod_consts[39];
        tmp_tuple_element_141 = BUILTIN_GETATTR(tstate, tmp_expression_value_286, tmp_name_value_28, tmp_default_value_23);
        if (tmp_tuple_element_141 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        tmp_mod_expr_right_23 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_287;
            PyObject *tmp_type_arg_46;
            PyTuple_SET_ITEM(tmp_mod_expr_right_23, 0, tmp_tuple_element_141);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_46 = tmp_class_creation_23__prepared;
            tmp_expression_value_287 = BUILTIN_TYPE1(tmp_type_arg_46);
            assert(!(tmp_expression_value_287 == NULL));
            tmp_tuple_element_141 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_287, mod_consts[38]);
            Py_DECREF(tmp_expression_value_287);
            if (tmp_tuple_element_141 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 260;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_23, 1, tmp_tuple_element_141);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_mod_expr_right_23);
        goto try_except_handler_119;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_23, tmp_mod_expr_right_23);
        Py_DECREF(tmp_mod_expr_right_23);
        if (tmp_raise_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_119;
        }
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_value = tmp_raise_value_23;
        exception_lineno = 260;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_119;
    }
    branch_no_70:;
    goto branch_end_69;
    branch_no_69:;
    {
        PyObject *tmp_assign_source_248;
        tmp_assign_source_248 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_248;
    }
    branch_end_69:;
    {
        PyObject *tmp_assign_source_249;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_39 = tmp_class_creation_23__prepared;
            locals_fastapi$openapi$models$$$class__39_PathItem_260 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_121;
        }
        tmp_dictset_value = mod_consts[177];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_121;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_121;
        }
        frame_55289a302310e40cd469f1e1fc6a1aa8_24 = MAKE_CLASS_FRAME(tstate, codeobj_55289a302310e40cd469f1e1fc6a1aa8, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_55289a302310e40cd469f1e1fc6a1aa8_24);
        assert(Py_REFCNT(frame_55289a302310e40cd469f1e1fc6a1aa8_24) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_76;
            tmp_called_value_76 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[30]);

            if (tmp_called_value_76 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_76 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_76 == NULL)) {
                        tmp_called_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_76 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 261;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_called_value_76);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            frame_55289a302310e40cd469f1e1fc6a1aa8_24->m_frame.f_lineno = 261;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_76, &PyTuple_GET_ITEM(mod_consts[92], 0), mod_consts[93]);
            Py_DECREF(tmp_called_value_76);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[78], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        {
            PyObject *tmp_ass_subvalue_115;
            PyObject *tmp_expression_value_288;
            PyObject *tmp_subscript_value_173;
            PyObject *tmp_ass_subscribed_115;
            PyObject *tmp_ass_subscript_115;
            tmp_expression_value_288 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_288 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_288 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_288 == NULL)) {
                        tmp_expression_value_288 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_288 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 261;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_288);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_173 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[46]);

            if (tmp_subscript_value_173 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_173 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_173);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_115 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_288, tmp_subscript_value_173);
            Py_DECREF(tmp_expression_value_288);
            Py_DECREF(tmp_subscript_value_173);
            if (tmp_ass_subvalue_115 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_115 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_115 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_115);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_115 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_115);

                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_115 = mod_consts[78];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_115, tmp_ass_subscript_115, tmp_ass_subvalue_115);
            Py_DECREF(tmp_ass_subscribed_115);
            Py_DECREF(tmp_ass_subvalue_115);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[132], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 262;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_116;
            PyObject *tmp_expression_value_289;
            PyObject *tmp_subscript_value_174;
            PyObject *tmp_ass_subscribed_116;
            PyObject *tmp_ass_subscript_116;
            tmp_expression_value_289 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_289 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_289 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_289 == NULL)) {
                        tmp_expression_value_289 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_289 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 262;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_289);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_174 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[46]);

            if (tmp_subscript_value_174 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_174 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_174);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_116 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_289, tmp_subscript_value_174);
            Py_DECREF(tmp_expression_value_289);
            Py_DECREF(tmp_subscript_value_174);
            if (tmp_ass_subvalue_116 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 262;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_116 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_116 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_116);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 262;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_116 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_116);

                exception_lineno = 262;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_116 = mod_consts[132];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_116, tmp_ass_subscript_116, tmp_ass_subvalue_116);
            Py_DECREF(tmp_ass_subscribed_116);
            Py_DECREF(tmp_ass_subvalue_116);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 262;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_117;
            PyObject *tmp_expression_value_290;
            PyObject *tmp_subscript_value_175;
            PyObject *tmp_ass_subscribed_117;
            PyObject *tmp_ass_subscript_117;
            tmp_expression_value_290 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_290 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_290 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_290 == NULL)) {
                        tmp_expression_value_290 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_290 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 263;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_290);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_175 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[46]);

            if (tmp_subscript_value_175 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_175 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_175);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_117 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_290, tmp_subscript_value_175);
            Py_DECREF(tmp_expression_value_290);
            Py_DECREF(tmp_subscript_value_175);
            if (tmp_ass_subvalue_117 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 263;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_117 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_117 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_117);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 263;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_117 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_117);

                exception_lineno = 263;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_117 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_117, tmp_ass_subscript_117, tmp_ass_subvalue_117);
            Py_DECREF(tmp_ass_subscribed_117);
            Py_DECREF(tmp_ass_subvalue_117);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 263;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[181], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_118;
            PyObject *tmp_expression_value_291;
            PyObject *tmp_subscript_value_176;
            PyObject *tmp_ass_subscribed_118;
            PyObject *tmp_ass_subscript_118;
            tmp_expression_value_291 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_291 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_291 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_291 == NULL)) {
                        tmp_expression_value_291 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_291 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 264;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_291);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_176 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_176 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_176 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_176 == NULL)) {
                        tmp_subscript_value_176 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_176 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_291);

                        exception_lineno = 264;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_176);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_118 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_291, tmp_subscript_value_176);
            Py_DECREF(tmp_expression_value_291);
            Py_DECREF(tmp_subscript_value_176);
            if (tmp_ass_subvalue_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 264;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_118 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_118 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_118);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 264;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_118);

                exception_lineno = 264;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_118 = mod_consts[181];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_118, tmp_ass_subscript_118, tmp_ass_subvalue_118);
            Py_DECREF(tmp_ass_subscribed_118);
            Py_DECREF(tmp_ass_subvalue_118);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 264;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[182], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 265;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_119;
            PyObject *tmp_expression_value_292;
            PyObject *tmp_subscript_value_177;
            PyObject *tmp_ass_subscribed_119;
            PyObject *tmp_ass_subscript_119;
            tmp_expression_value_292 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_292 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_292 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_292 == NULL)) {
                        tmp_expression_value_292 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_292 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 265;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_292);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_177 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_177 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_177 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_177 == NULL)) {
                        tmp_subscript_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_177 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_292);

                        exception_lineno = 265;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_177);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_119 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_292, tmp_subscript_value_177);
            Py_DECREF(tmp_expression_value_292);
            Py_DECREF(tmp_subscript_value_177);
            if (tmp_ass_subvalue_119 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 265;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_119 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_119 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_119);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 265;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_119 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_119);

                exception_lineno = 265;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_119 = mod_consts[182];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_119, tmp_ass_subscript_119, tmp_ass_subvalue_119);
            Py_DECREF(tmp_ass_subscribed_119);
            Py_DECREF(tmp_ass_subvalue_119);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 265;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[183], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_120;
            PyObject *tmp_expression_value_293;
            PyObject *tmp_subscript_value_178;
            PyObject *tmp_ass_subscribed_120;
            PyObject *tmp_ass_subscript_120;
            tmp_expression_value_293 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_293 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_293 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_293 == NULL)) {
                        tmp_expression_value_293 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_293 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 266;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_293);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_178 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_178 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_178 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_178 == NULL)) {
                        tmp_subscript_value_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_178 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_293);

                        exception_lineno = 266;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_178);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_120 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_293, tmp_subscript_value_178);
            Py_DECREF(tmp_expression_value_293);
            Py_DECREF(tmp_subscript_value_178);
            if (tmp_ass_subvalue_120 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 266;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_120 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_120 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_120);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 266;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_120 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_120);

                exception_lineno = 266;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_120 = mod_consts[183];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_120, tmp_ass_subscript_120, tmp_ass_subvalue_120);
            Py_DECREF(tmp_ass_subscribed_120);
            Py_DECREF(tmp_ass_subvalue_120);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 266;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[184], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_121;
            PyObject *tmp_expression_value_294;
            PyObject *tmp_subscript_value_179;
            PyObject *tmp_ass_subscribed_121;
            PyObject *tmp_ass_subscript_121;
            tmp_expression_value_294 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_294 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_294 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_294 == NULL)) {
                        tmp_expression_value_294 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_294 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 267;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_294);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_179 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_179 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_179 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_179 == NULL)) {
                        tmp_subscript_value_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_179 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_294);

                        exception_lineno = 267;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_179);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_121 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_294, tmp_subscript_value_179);
            Py_DECREF(tmp_expression_value_294);
            Py_DECREF(tmp_subscript_value_179);
            if (tmp_ass_subvalue_121 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 267;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_121 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_121 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_121);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 267;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_121 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_121);

                exception_lineno = 267;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_121 = mod_consts[184];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_121, tmp_ass_subscript_121, tmp_ass_subvalue_121);
            Py_DECREF(tmp_ass_subscribed_121);
            Py_DECREF(tmp_ass_subvalue_121);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 267;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[185], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_122;
            PyObject *tmp_expression_value_295;
            PyObject *tmp_subscript_value_180;
            PyObject *tmp_ass_subscribed_122;
            PyObject *tmp_ass_subscript_122;
            tmp_expression_value_295 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_295 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_295 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_295 == NULL)) {
                        tmp_expression_value_295 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_295 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 268;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_295);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_180 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_180 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_180 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_180 == NULL)) {
                        tmp_subscript_value_180 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_180 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_295);

                        exception_lineno = 268;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_180);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_122 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_295, tmp_subscript_value_180);
            Py_DECREF(tmp_expression_value_295);
            Py_DECREF(tmp_subscript_value_180);
            if (tmp_ass_subvalue_122 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 268;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_122 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_122 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_122);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 268;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_122 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_122);

                exception_lineno = 268;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_122 = mod_consts[185];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_122, tmp_ass_subscript_122, tmp_ass_subvalue_122);
            Py_DECREF(tmp_ass_subscribed_122);
            Py_DECREF(tmp_ass_subvalue_122);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 268;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[186], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 269;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_123;
            PyObject *tmp_expression_value_296;
            PyObject *tmp_subscript_value_181;
            PyObject *tmp_ass_subscribed_123;
            PyObject *tmp_ass_subscript_123;
            tmp_expression_value_296 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_296 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_296 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_296 == NULL)) {
                        tmp_expression_value_296 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_296 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 269;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_296);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_181 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_181 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_181 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_181 == NULL)) {
                        tmp_subscript_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_181 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_296);

                        exception_lineno = 269;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_181);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_123 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_296, tmp_subscript_value_181);
            Py_DECREF(tmp_expression_value_296);
            Py_DECREF(tmp_subscript_value_181);
            if (tmp_ass_subvalue_123 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 269;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_123 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_123 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_123);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 269;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_123 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_123);

                exception_lineno = 269;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_123 = mod_consts[186];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_123, tmp_ass_subscript_123, tmp_ass_subvalue_123);
            Py_DECREF(tmp_ass_subscribed_123);
            Py_DECREF(tmp_ass_subvalue_123);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 269;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[187], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 270;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_124;
            PyObject *tmp_expression_value_297;
            PyObject *tmp_subscript_value_182;
            PyObject *tmp_ass_subscribed_124;
            PyObject *tmp_ass_subscript_124;
            tmp_expression_value_297 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_297 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_297 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_297 == NULL)) {
                        tmp_expression_value_297 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_297 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 270;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_297);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_182 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_182 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_182 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_182 == NULL)) {
                        tmp_subscript_value_182 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_182 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_297);

                        exception_lineno = 270;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_182);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_124 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_297, tmp_subscript_value_182);
            Py_DECREF(tmp_expression_value_297);
            Py_DECREF(tmp_subscript_value_182);
            if (tmp_ass_subvalue_124 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_124 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_124 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_124);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_124 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_124);

                exception_lineno = 270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_124 = mod_consts[187];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_124, tmp_ass_subscript_124, tmp_ass_subvalue_124);
            Py_DECREF(tmp_ass_subscribed_124);
            Py_DECREF(tmp_ass_subvalue_124);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[188], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_125;
            PyObject *tmp_expression_value_298;
            PyObject *tmp_subscript_value_183;
            PyObject *tmp_ass_subscribed_125;
            PyObject *tmp_ass_subscript_125;
            tmp_expression_value_298 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_298 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_298 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_298 == NULL)) {
                        tmp_expression_value_298 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_298 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 271;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_298);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_183 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[173]);

            if (tmp_subscript_value_183 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_183 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

                    if (unlikely(tmp_subscript_value_183 == NULL)) {
                        tmp_subscript_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
                    }

                    if (tmp_subscript_value_183 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_298);

                        exception_lineno = 271;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_183);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_ass_subvalue_125 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_298, tmp_subscript_value_183);
            Py_DECREF(tmp_expression_value_298);
            Py_DECREF(tmp_subscript_value_183);
            if (tmp_ass_subvalue_125 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 271;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_125 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_125 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_125);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 271;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_125 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_125);

                exception_lineno = 271;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_125 = mod_consts[188];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_125, tmp_ass_subscript_125, tmp_ass_subvalue_125);
            Py_DECREF(tmp_ass_subscribed_125);
            Py_DECREF(tmp_ass_subvalue_125);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 271;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[179], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_126;
            PyObject *tmp_expression_value_299;
            PyObject *tmp_subscript_value_184;
            PyObject *tmp_expression_value_300;
            PyObject *tmp_subscript_value_185;
            PyObject *tmp_ass_subscribed_126;
            PyObject *tmp_ass_subscript_126;
            tmp_expression_value_299 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_299 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_299 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_299 == NULL)) {
                        tmp_expression_value_299 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_299 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 272;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_299);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_expression_value_300 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[21]);

            if (tmp_expression_value_300 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_300 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_300 == NULL)) {
                        tmp_expression_value_300 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_300 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_299);

                        exception_lineno = 272;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_300);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_185 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[72]);

            if (tmp_subscript_value_185 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_185 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[72]);

                    if (unlikely(tmp_subscript_value_185 == NULL)) {
                        tmp_subscript_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[72]);
                    }

                    if (tmp_subscript_value_185 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_299);
                        Py_DECREF(tmp_expression_value_300);

                        exception_lineno = 272;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_subscript_value_185);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_184 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_300, tmp_subscript_value_185);
            Py_DECREF(tmp_expression_value_300);
            Py_DECREF(tmp_subscript_value_185);
            if (tmp_subscript_value_184 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_299);

                exception_lineno = 272;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subvalue_126 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_299, tmp_subscript_value_184);
            Py_DECREF(tmp_expression_value_299);
            Py_DECREF(tmp_subscript_value_184);
            if (tmp_ass_subvalue_126 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_126 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_126 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_126);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 272;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_126 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_126);

                exception_lineno = 272;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_126 = mod_consts[179];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_126, tmp_ass_subscript_126, tmp_ass_subvalue_126);
            Py_DECREF(tmp_ass_subscribed_126);
            Py_DECREF(tmp_ass_subvalue_126);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[166], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 273;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_ass_subvalue_127;
            PyObject *tmp_expression_value_301;
            PyObject *tmp_subscript_value_186;
            PyObject *tmp_expression_value_302;
            PyObject *tmp_subscript_value_187;
            PyObject *tmp_expression_value_303;
            PyObject *tmp_subscript_value_188;
            PyObject *tmp_tuple_element_142;
            PyObject *tmp_ass_subscribed_127;
            PyObject *tmp_ass_subscript_127;
            tmp_expression_value_301 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[22]);

            if (tmp_expression_value_301 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_301 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_301 == NULL)) {
                        tmp_expression_value_301 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_301 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 273;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_301);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_expression_value_302 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[21]);

            if (tmp_expression_value_302 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_302 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_302 == NULL)) {
                        tmp_expression_value_302 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_302 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_301);

                        exception_lineno = 273;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_302);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_expression_value_303 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[23]);

            if (tmp_expression_value_303 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_303 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                    if (unlikely(tmp_expression_value_303 == NULL)) {
                        tmp_expression_value_303 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                    }

                    if (tmp_expression_value_303 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_301);
                        Py_DECREF(tmp_expression_value_302);

                        exception_lineno = 273;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_303);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_tuple_element_142 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[158]);

            if (tmp_tuple_element_142 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_142 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[158]);

                    if (unlikely(tmp_tuple_element_142 == NULL)) {
                        tmp_tuple_element_142 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[158]);
                    }

                    if (tmp_tuple_element_142 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_301);
                        Py_DECREF(tmp_expression_value_302);
                        Py_DECREF(tmp_expression_value_303);

                        exception_lineno = 273;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_tuple_element_142);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_subscript_value_188 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_188, 0, tmp_tuple_element_142);
            tmp_tuple_element_142 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[75]);

            if (tmp_tuple_element_142 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_142 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_tuple_element_142 == NULL)) {
                        tmp_tuple_element_142 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                    }

                    if (tmp_tuple_element_142 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 273;
                        type_description_2 = "o";
                        goto tuple_build_exception_53;
                    }
                    Py_INCREF(tmp_tuple_element_142);
                } else {
                    goto tuple_build_exception_53;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_188, 1, tmp_tuple_element_142);
            goto tuple_build_noexception_53;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_53:;
            Py_DECREF(tmp_expression_value_301);
            Py_DECREF(tmp_expression_value_302);
            Py_DECREF(tmp_expression_value_303);
            Py_DECREF(tmp_subscript_value_188);
            goto frame_exception_exit_24;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_53:;
            tmp_subscript_value_187 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_303, tmp_subscript_value_188);
            Py_DECREF(tmp_expression_value_303);
            Py_DECREF(tmp_subscript_value_188);
            if (tmp_subscript_value_187 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_301);
                Py_DECREF(tmp_expression_value_302);

                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_subscript_value_186 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_302, tmp_subscript_value_187);
            Py_DECREF(tmp_expression_value_302);
            Py_DECREF(tmp_subscript_value_187);
            if (tmp_subscript_value_186 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_301);

                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subvalue_127 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_301, tmp_subscript_value_186);
            Py_DECREF(tmp_expression_value_301);
            Py_DECREF(tmp_subscript_value_186);
            if (tmp_ass_subvalue_127 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscribed_127 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_127 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_127);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_ass_subscribed_127 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_127);

                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_ass_subscript_127 = mod_consts[166];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_127, tmp_ass_subscript_127, tmp_ass_subvalue_127);
            Py_DECREF(tmp_ass_subscribed_127);
            Py_DECREF(tmp_ass_subvalue_127);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 273;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        {
            PyObject *tmp_assign_source_250;
            tmp_assign_source_250 = MAKE_DICT_EMPTY();
            assert(tmp_PathItem$class_creation_1__class_decl_dict == NULL);
            tmp_PathItem$class_creation_1__class_decl_dict = tmp_assign_source_250;
        }
        {
            PyObject *tmp_assign_source_251;
            tmp_assign_source_251 = MAKE_DICT_EMPTY();
            assert(tmp_PathItem$class_creation_1__prepared == NULL);
            tmp_PathItem$class_creation_1__prepared = tmp_assign_source_251;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_PathItem$class_creation_1__prepared);
            tmp_set_locals_40 = tmp_PathItem$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__40_Config_275 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__40_Config_275, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[189];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__40_Config_275, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__40_Config_275, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_252;
            PyObject *tmp_called_value_77;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_143;
            PyObject *tmp_kwargs_value_62;
            tmp_called_value_77 = (PyObject *)&PyType_Type;
            tmp_tuple_element_143 = mod_consts[57];
            tmp_args_value_62 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_143);
            tmp_tuple_element_143 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_143);
            tmp_tuple_element_143 = locals_fastapi$openapi$models$$$class__40_Config_275;
            PyTuple_SET_ITEM0(tmp_args_value_62, 2, tmp_tuple_element_143);
            CHECK_OBJECT(tmp_PathItem$class_creation_1__class_decl_dict);
            tmp_kwargs_value_62 = tmp_PathItem$class_creation_1__class_decl_dict;
            frame_55289a302310e40cd469f1e1fc6a1aa8_24->m_frame.f_lineno = 275;
            tmp_assign_source_252 = CALL_FUNCTION(tstate, tmp_called_value_77, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_252 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 275;
                type_description_2 = "o";
                goto try_except_handler_124;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_252;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_dictset_value = outline_39_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_124;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_124:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__40_Config_275);
        locals_fastapi$openapi$models$$$class__40_Config_275 = NULL;
        goto try_return_handler_123;
        // Exception handler code:
        try_except_handler_124:;
        exception_keeper_type_119 = exception_type;
        exception_keeper_value_119 = exception_value;
        exception_keeper_tb_119 = exception_tb;
        exception_keeper_lineno_119 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__40_Config_275);
        locals_fastapi$openapi$models$$$class__40_Config_275 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;
        exception_lineno = exception_keeper_lineno_119;

        goto try_except_handler_123;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_123:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_123:;
        exception_keeper_type_120 = exception_type;
        exception_keeper_value_120 = exception_value;
        exception_keeper_tb_120 = exception_tb;
        exception_keeper_lineno_120 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_120;
        exception_value = exception_keeper_value_120;
        exception_tb = exception_keeper_tb_120;
        exception_lineno = exception_keeper_lineno_120;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 275;
        goto try_except_handler_122;
        outline_result_40:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 275;
            type_description_2 = "o";
            goto try_except_handler_122;
        }
        goto try_end_43;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_PathItem$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_PathItem$class_creation_1__class_decl_dict);
        tmp_PathItem$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_PathItem$class_creation_1__prepared);
        Py_DECREF(tmp_PathItem$class_creation_1__prepared);
        tmp_PathItem$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto frame_exception_exit_24;
        // End of try:
        try_end_43:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_23;
        frame_exception_exit_24:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_55289a302310e40cd469f1e1fc6a1aa8_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_55289a302310e40cd469f1e1fc6a1aa8_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_55289a302310e40cd469f1e1fc6a1aa8_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_55289a302310e40cd469f1e1fc6a1aa8_24,
            type_description_2,
            outline_38_var___class__
        );



        assertFrameObject(frame_55289a302310e40cd469f1e1fc6a1aa8_24);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_23;
        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_23:;

        goto try_except_handler_121;
        skip_nested_handling_23:;
        CHECK_OBJECT(tmp_PathItem$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_PathItem$class_creation_1__class_decl_dict);
        tmp_PathItem$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_PathItem$class_creation_1__prepared);
        Py_DECREF(tmp_PathItem$class_creation_1__prepared);
        tmp_PathItem$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_96 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_96 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 260;

                goto try_except_handler_121;
            }
            if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
                goto branch_yes_71;
            } else {
                goto branch_no_71;
            }
        }
        branch_yes_71:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__39_PathItem_260, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;

            goto try_except_handler_121;
        }
        branch_no_71:;
        {
            PyObject *tmp_assign_source_253;
            PyObject *tmp_called_value_78;
            PyObject *tmp_args_value_63;
            PyObject *tmp_tuple_element_144;
            PyObject *tmp_kwargs_value_63;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_78 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_144 = mod_consts[177];
            tmp_args_value_63 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_144);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_144 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_144);
            tmp_tuple_element_144 = locals_fastapi$openapi$models$$$class__39_PathItem_260;
            PyTuple_SET_ITEM0(tmp_args_value_63, 2, tmp_tuple_element_144);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_63 = tmp_class_creation_23__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 260;
            tmp_assign_source_253 = CALL_FUNCTION(tstate, tmp_called_value_78, tmp_args_value_63, tmp_kwargs_value_63);
            Py_DECREF(tmp_args_value_63);
            if (tmp_assign_source_253 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 260;

                goto try_except_handler_121;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_253;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_249 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_249);
        goto try_return_handler_121;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_121:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__39_PathItem_260);
        locals_fastapi$openapi$models$$$class__39_PathItem_260 = NULL;
        goto try_return_handler_120;
        // Exception handler code:
        try_except_handler_121:;
        exception_keeper_type_122 = exception_type;
        exception_keeper_value_122 = exception_value;
        exception_keeper_tb_122 = exception_tb;
        exception_keeper_lineno_122 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__39_PathItem_260);
        locals_fastapi$openapi$models$$$class__39_PathItem_260 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;
        exception_lineno = exception_keeper_lineno_122;

        goto try_except_handler_120;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_120:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_120:;
        exception_keeper_type_123 = exception_type;
        exception_keeper_value_123 = exception_value;
        exception_keeper_tb_123 = exception_tb;
        exception_keeper_lineno_123 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_123;
        exception_value = exception_keeper_value_123;
        exception_tb = exception_keeper_tb_123;
        exception_lineno = exception_keeper_lineno_123;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 260;
        goto try_except_handler_119;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[177], tmp_assign_source_249);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_119:;
    exception_keeper_type_124 = exception_type;
    exception_keeper_value_124 = exception_value;
    exception_keeper_tb_124 = exception_tb;
    exception_keeper_lineno_124 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_124;
    exception_value = exception_keeper_value_124;
    exception_tb = exception_keeper_tb_124;
    exception_lineno = exception_keeper_lineno_124;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_254;
        PyObject *tmp_tuple_element_145;
        tmp_tuple_element_145 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[16]);

        if (unlikely(tmp_tuple_element_145 == NULL)) {
            tmp_tuple_element_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[16]);
        }

        if (tmp_tuple_element_145 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_assign_source_254 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_254, 0, tmp_tuple_element_145);
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_254;
    }
    {
        PyObject *tmp_assign_source_255;
        PyObject *tmp_dircall_arg1_24;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_24 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_24);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
            tmp_assign_source_255 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_255 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_255;
    }
    {
        PyObject *tmp_assign_source_256;
        tmp_assign_source_256 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_256;
    }
    {
        PyObject *tmp_assign_source_257;
        PyObject *tmp_metaclass_value_24;
        nuitka_bool tmp_condition_result_97;
        int tmp_truth_name_24;
        PyObject *tmp_type_arg_47;
        PyObject *tmp_expression_value_304;
        PyObject *tmp_subscript_value_189;
        PyObject *tmp_bases_value_24;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_24 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_condition_result_97 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_304 = tmp_class_creation_24__bases;
        tmp_subscript_value_189 = mod_consts[15];
        tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_304, tmp_subscript_value_189, 0);
        if (tmp_type_arg_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
        Py_DECREF(tmp_type_arg_47);
        if (tmp_metaclass_value_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_24);
        condexpr_end_26:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_24 = tmp_class_creation_24__bases;
        tmp_assign_source_257 = SELECT_METACLASS(tstate, tmp_metaclass_value_24, tmp_bases_value_24);
        Py_DECREF(tmp_metaclass_value_24);
        if (tmp_assign_source_257 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_257;
    }
    {
        bool tmp_condition_result_98;
        PyObject *tmp_expression_value_305;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_305 = tmp_class_creation_24__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_305, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_condition_result_98 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_98 != false) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_assign_source_258;
        PyObject *tmp_called_value_79;
        PyObject *tmp_expression_value_306;
        PyObject *tmp_args_value_64;
        PyObject *tmp_tuple_element_146;
        PyObject *tmp_kwargs_value_64;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_306 = tmp_class_creation_24__metaclass;
        tmp_called_value_79 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_306, mod_consts[35]);
        if (tmp_called_value_79 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_tuple_element_146 = mod_consts[190];
        tmp_args_value_64 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_146);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_146 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_146);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_64 = tmp_class_creation_24__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 279;
        tmp_assign_source_258 = CALL_FUNCTION(tstate, tmp_called_value_79, tmp_args_value_64, tmp_kwargs_value_64);
        Py_DECREF(tmp_called_value_79);
        Py_DECREF(tmp_args_value_64);
        if (tmp_assign_source_258 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_258;
    }
    {
        bool tmp_condition_result_99;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_307;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_307 = tmp_class_creation_24__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_307, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_operand_value_25 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_99 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_99 != false) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_24;
        PyObject *tmp_mod_expr_left_24;
        PyObject *tmp_mod_expr_right_24;
        PyObject *tmp_tuple_element_147;
        PyObject *tmp_expression_value_308;
        PyObject *tmp_name_value_29;
        PyObject *tmp_default_value_24;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_mod_expr_left_24 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_308 = tmp_class_creation_24__metaclass;
        tmp_name_value_29 = mod_consts[38];
        tmp_default_value_24 = mod_consts[39];
        tmp_tuple_element_147 = BUILTIN_GETATTR(tstate, tmp_expression_value_308, tmp_name_value_29, tmp_default_value_24);
        if (tmp_tuple_element_147 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        tmp_mod_expr_right_24 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_309;
            PyObject *tmp_type_arg_48;
            PyTuple_SET_ITEM(tmp_mod_expr_right_24, 0, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_48 = tmp_class_creation_24__prepared;
            tmp_expression_value_309 = BUILTIN_TYPE1(tmp_type_arg_48);
            assert(!(tmp_expression_value_309 == NULL));
            tmp_tuple_element_147 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_309, mod_consts[38]);
            Py_DECREF(tmp_expression_value_309);
            if (tmp_tuple_element_147 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 279;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_24, 1, tmp_tuple_element_147);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_mod_expr_right_24);
        goto try_except_handler_125;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_24, tmp_mod_expr_right_24);
        Py_DECREF(tmp_mod_expr_right_24);
        if (tmp_raise_value_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_125;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_24;
        exception_lineno = 279;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_125;
    }
    branch_no_73:;
    goto branch_end_72;
    branch_no_72:;
    {
        PyObject *tmp_assign_source_259;
        tmp_assign_source_259 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_259;
    }
    branch_end_72:;
    {
        PyObject *tmp_assign_source_260;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_41 = tmp_class_creation_24__prepared;
            locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_127;
        }
        tmp_dictset_value = mod_consts[190];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_127;
        }
        frame_8a02f9a46e545c2ebd896dc5ee13c293_25 = MAKE_CLASS_FRAME(tstate, codeobj_8a02f9a46e545c2ebd896dc5ee13c293, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_8a02f9a46e545c2ebd896dc5ee13c293_25);
        assert(Py_REFCNT(frame_8a02f9a46e545c2ebd896dc5ee13c293_25) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[191];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[191], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }
        tmp_dictset_value = mod_consts[192];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }
        tmp_dictset_value = mod_consts[193];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[193], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }
        tmp_dictset_value = mod_consts[194];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[194], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_24;
        frame_exception_exit_25:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8a02f9a46e545c2ebd896dc5ee13c293_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8a02f9a46e545c2ebd896dc5ee13c293_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8a02f9a46e545c2ebd896dc5ee13c293_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8a02f9a46e545c2ebd896dc5ee13c293_25,
            type_description_2,
            outline_40_var___class__
        );



        assertFrameObject(frame_8a02f9a46e545c2ebd896dc5ee13c293_25);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_24;
        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;

        goto try_except_handler_127;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_100;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_100 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_100 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 279;

                goto try_except_handler_127;
            }
            if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
                goto branch_yes_74;
            } else {
                goto branch_no_74;
            }
        }
        branch_yes_74:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto try_except_handler_127;
        }
        branch_no_74:;
        {
            PyObject *tmp_assign_source_261;
            PyObject *tmp_called_value_80;
            PyObject *tmp_args_value_65;
            PyObject *tmp_tuple_element_148;
            PyObject *tmp_kwargs_value_65;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_80 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_148 = mod_consts[190];
            tmp_args_value_65 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_148);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_148 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_148);
            tmp_tuple_element_148 = locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279;
            PyTuple_SET_ITEM0(tmp_args_value_65, 2, tmp_tuple_element_148);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_65 = tmp_class_creation_24__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 279;
            tmp_assign_source_261 = CALL_FUNCTION(tstate, tmp_called_value_80, tmp_args_value_65, tmp_kwargs_value_65);
            Py_DECREF(tmp_args_value_65);
            if (tmp_assign_source_261 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 279;

                goto try_except_handler_127;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_261;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_260 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_260);
        goto try_return_handler_127;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_127:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279);
        locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279 = NULL;
        goto try_return_handler_126;
        // Exception handler code:
        try_except_handler_127:;
        exception_keeper_type_125 = exception_type;
        exception_keeper_value_125 = exception_value;
        exception_keeper_tb_125 = exception_tb;
        exception_keeper_lineno_125 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279);
        locals_fastapi$openapi$models$$$class__41_SecuritySchemeType_279 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;
        exception_lineno = exception_keeper_lineno_125;

        goto try_except_handler_126;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_126:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_126:;
        exception_keeper_type_126 = exception_type;
        exception_keeper_value_126 = exception_value;
        exception_keeper_tb_126 = exception_tb;
        exception_keeper_lineno_126 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;
        exception_lineno = exception_keeper_lineno_126;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 279;
        goto try_except_handler_125;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190], tmp_assign_source_260);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_125:;
    exception_keeper_type_127 = exception_type;
    exception_keeper_value_127 = exception_value;
    exception_keeper_tb_127 = exception_tb;
    exception_keeper_lineno_127 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_127;
    exception_value = exception_keeper_value_127;
    exception_tb = exception_keeper_tb_127;
    exception_lineno = exception_keeper_lineno_127;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_262;
        PyObject *tmp_tuple_element_149;
        tmp_tuple_element_149 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_149 == NULL)) {
            tmp_tuple_element_149 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_149 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_assign_source_262 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_262, 0, tmp_tuple_element_149);
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_262;
    }
    {
        PyObject *tmp_assign_source_263;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_263 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_263 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_263;
    }
    {
        PyObject *tmp_assign_source_264;
        tmp_assign_source_264 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_264;
    }
    {
        PyObject *tmp_assign_source_265;
        PyObject *tmp_metaclass_value_25;
        nuitka_bool tmp_condition_result_101;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_310;
        PyObject *tmp_subscript_value_190;
        PyObject *tmp_bases_value_25;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_25 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_condition_result_101 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_101 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_310 = tmp_class_creation_25__bases;
        tmp_subscript_value_190 = mod_consts[15];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_310, tmp_subscript_value_190, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        goto condexpr_end_27;
        condexpr_false_27:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_25 = tmp_class_creation_25__bases;
        tmp_assign_source_265 = SELECT_METACLASS(tstate, tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_265 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_265;
    }
    {
        bool tmp_condition_result_102;
        PyObject *tmp_expression_value_311;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_311 = tmp_class_creation_25__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_311, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_condition_result_102 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_102 != false) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_assign_source_266;
        PyObject *tmp_called_value_81;
        PyObject *tmp_expression_value_312;
        PyObject *tmp_args_value_66;
        PyObject *tmp_tuple_element_150;
        PyObject *tmp_kwargs_value_66;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_312 = tmp_class_creation_25__metaclass;
        tmp_called_value_81 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_312, mod_consts[35]);
        if (tmp_called_value_81 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_tuple_element_150 = mod_consts[195];
        tmp_args_value_66 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_150);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_150 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_150);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_66 = tmp_class_creation_25__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 286;
        tmp_assign_source_266 = CALL_FUNCTION(tstate, tmp_called_value_81, tmp_args_value_66, tmp_kwargs_value_66);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_value_66);
        if (tmp_assign_source_266 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_266;
    }
    {
        bool tmp_condition_result_103;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_313;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_313 = tmp_class_creation_25__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_313, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_operand_value_26 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        assert(!(tmp_res == -1));
        tmp_condition_result_103 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_103 != false) {
            goto branch_yes_76;
        } else {
            goto branch_no_76;
        }
    }
    branch_yes_76:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_mod_expr_left_25;
        PyObject *tmp_mod_expr_right_25;
        PyObject *tmp_tuple_element_151;
        PyObject *tmp_expression_value_314;
        PyObject *tmp_name_value_30;
        PyObject *tmp_default_value_25;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_mod_expr_left_25 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_314 = tmp_class_creation_25__metaclass;
        tmp_name_value_30 = mod_consts[38];
        tmp_default_value_25 = mod_consts[39];
        tmp_tuple_element_151 = BUILTIN_GETATTR(tstate, tmp_expression_value_314, tmp_name_value_30, tmp_default_value_25);
        if (tmp_tuple_element_151 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        tmp_mod_expr_right_25 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_315;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_mod_expr_right_25, 0, tmp_tuple_element_151);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_50 = tmp_class_creation_25__prepared;
            tmp_expression_value_315 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_315 == NULL));
            tmp_tuple_element_151 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_315, mod_consts[38]);
            Py_DECREF(tmp_expression_value_315);
            if (tmp_tuple_element_151 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_25, 1, tmp_tuple_element_151);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_mod_expr_right_25);
        goto try_except_handler_128;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_25, tmp_mod_expr_right_25);
        Py_DECREF(tmp_mod_expr_right_25);
        if (tmp_raise_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_128;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_25;
        exception_lineno = 286;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_128;
    }
    branch_no_76:;
    goto branch_end_75;
    branch_no_75:;
    {
        PyObject *tmp_assign_source_267;
        tmp_assign_source_267 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_267;
    }
    branch_end_75:;
    {
        PyObject *tmp_assign_source_268;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_42 = tmp_class_creation_25__prepared;
            locals_fastapi$openapi$models$$$class__42_SecurityBase_286 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_130;
        }
        tmp_dictset_value = mod_consts[195];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_130;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_130;
        }
        frame_80604c164a6135846117777da9201bbb_26 = MAKE_CLASS_FRAME(tstate, codeobj_80604c164a6135846117777da9201bbb, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_80604c164a6135846117777da9201bbb_26);
        assert(Py_REFCNT(frame_80604c164a6135846117777da9201bbb_26) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_82;
            tmp_called_value_82 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[30]);

            if (tmp_called_value_82 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_82 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_82 == NULL)) {
                        tmp_called_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_82 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 287;
                        type_description_2 = "o";
                        goto frame_exception_exit_26;
                    }
                    Py_INCREF(tmp_called_value_82);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            frame_80604c164a6135846117777da9201bbb_26->m_frame.f_lineno = 287;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_82, &PyTuple_GET_ITEM(mod_consts[196], 0), mod_consts[77]);
            Py_DECREF(tmp_called_value_82);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[197], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }
        {
            PyObject *tmp_ass_subvalue_128;
            PyObject *tmp_ass_subscribed_128;
            PyObject *tmp_ass_subscript_128;
            tmp_ass_subvalue_128 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[190]);

            if (tmp_ass_subvalue_128 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_128 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190]);

                    if (unlikely(tmp_ass_subvalue_128 == NULL)) {
                        tmp_ass_subvalue_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[190]);
                    }

                    if (tmp_ass_subvalue_128 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 287;
                        type_description_2 = "o";
                        goto frame_exception_exit_26;
                    }
                    Py_INCREF(tmp_ass_subvalue_128);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            tmp_ass_subscribed_128 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_128 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_128);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 287;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }

            if (tmp_ass_subscribed_128 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_128);

                exception_lineno = 287;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_ass_subscript_128 = mod_consts[197];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_128, tmp_ass_subscript_128, tmp_ass_subvalue_128);
            Py_DECREF(tmp_ass_subscribed_128);
            Py_DECREF(tmp_ass_subvalue_128);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }
        {
            PyObject *tmp_ass_subvalue_129;
            PyObject *tmp_expression_value_316;
            PyObject *tmp_subscript_value_191;
            PyObject *tmp_ass_subscribed_129;
            PyObject *tmp_ass_subscript_129;
            tmp_expression_value_316 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[22]);

            if (tmp_expression_value_316 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_316 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_316 == NULL)) {
                        tmp_expression_value_316 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_316 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 288;
                        type_description_2 = "o";
                        goto frame_exception_exit_26;
                    }
                    Py_INCREF(tmp_expression_value_316);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            tmp_subscript_value_191 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[46]);

            if (tmp_subscript_value_191 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_191 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_191);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            tmp_ass_subvalue_129 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_316, tmp_subscript_value_191);
            Py_DECREF(tmp_expression_value_316);
            Py_DECREF(tmp_subscript_value_191);
            if (tmp_ass_subvalue_129 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 288;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_ass_subscribed_129 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_129 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_129);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 288;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }

            if (tmp_ass_subscribed_129 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_129);

                exception_lineno = 288;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_ass_subscript_129 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_129, tmp_ass_subscript_129, tmp_ass_subvalue_129);
            Py_DECREF(tmp_ass_subscribed_129);
            Py_DECREF(tmp_ass_subvalue_129);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 288;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }
        {
            PyObject *tmp_assign_source_269;
            tmp_assign_source_269 = MAKE_DICT_EMPTY();
            assert(tmp_SecurityBase$class_creation_1__class_decl_dict == NULL);
            tmp_SecurityBase$class_creation_1__class_decl_dict = tmp_assign_source_269;
        }
        {
            PyObject *tmp_assign_source_270;
            tmp_assign_source_270 = MAKE_DICT_EMPTY();
            assert(tmp_SecurityBase$class_creation_1__prepared == NULL);
            tmp_SecurityBase$class_creation_1__prepared = tmp_assign_source_270;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_SecurityBase$class_creation_1__prepared);
            tmp_set_locals_43 = tmp_SecurityBase$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__43_Config_290 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__43_Config_290, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[198];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__43_Config_290, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__43_Config_290, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_271;
            PyObject *tmp_called_value_83;
            PyObject *tmp_args_value_67;
            PyObject *tmp_tuple_element_152;
            PyObject *tmp_kwargs_value_67;
            tmp_called_value_83 = (PyObject *)&PyType_Type;
            tmp_tuple_element_152 = mod_consts[57];
            tmp_args_value_67 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_152);
            tmp_tuple_element_152 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_152);
            tmp_tuple_element_152 = locals_fastapi$openapi$models$$$class__43_Config_290;
            PyTuple_SET_ITEM0(tmp_args_value_67, 2, tmp_tuple_element_152);
            CHECK_OBJECT(tmp_SecurityBase$class_creation_1__class_decl_dict);
            tmp_kwargs_value_67 = tmp_SecurityBase$class_creation_1__class_decl_dict;
            frame_80604c164a6135846117777da9201bbb_26->m_frame.f_lineno = 290;
            tmp_assign_source_271 = CALL_FUNCTION(tstate, tmp_called_value_83, tmp_args_value_67, tmp_kwargs_value_67);
            Py_DECREF(tmp_args_value_67);
            if (tmp_assign_source_271 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 290;
                type_description_2 = "o";
                goto try_except_handler_133;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_271;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_dictset_value = outline_42_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_133;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_133:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__43_Config_290);
        locals_fastapi$openapi$models$$$class__43_Config_290 = NULL;
        goto try_return_handler_132;
        // Exception handler code:
        try_except_handler_133:;
        exception_keeper_type_128 = exception_type;
        exception_keeper_value_128 = exception_value;
        exception_keeper_tb_128 = exception_tb;
        exception_keeper_lineno_128 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__43_Config_290);
        locals_fastapi$openapi$models$$$class__43_Config_290 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;
        exception_lineno = exception_keeper_lineno_128;

        goto try_except_handler_132;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_132:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_132:;
        exception_keeper_type_129 = exception_type;
        exception_keeper_value_129 = exception_value;
        exception_keeper_tb_129 = exception_tb;
        exception_keeper_lineno_129 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;
        exception_lineno = exception_keeper_lineno_129;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 290;
        goto try_except_handler_131;
        outline_result_43:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;
            type_description_2 = "o";
            goto try_except_handler_131;
        }
        goto try_end_46;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_SecurityBase$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_SecurityBase$class_creation_1__class_decl_dict);
        tmp_SecurityBase$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_SecurityBase$class_creation_1__prepared);
        Py_DECREF(tmp_SecurityBase$class_creation_1__prepared);
        tmp_SecurityBase$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto frame_exception_exit_26;
        // End of try:
        try_end_46:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_25;
        frame_exception_exit_26:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_80604c164a6135846117777da9201bbb_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_80604c164a6135846117777da9201bbb_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_80604c164a6135846117777da9201bbb_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_80604c164a6135846117777da9201bbb_26,
            type_description_2,
            outline_41_var___class__
        );



        assertFrameObject(frame_80604c164a6135846117777da9201bbb_26);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_25;
        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_130;
        skip_nested_handling_25:;
        CHECK_OBJECT(tmp_SecurityBase$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_SecurityBase$class_creation_1__class_decl_dict);
        tmp_SecurityBase$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_SecurityBase$class_creation_1__prepared);
        Py_DECREF(tmp_SecurityBase$class_creation_1__prepared);
        tmp_SecurityBase$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_104;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_104 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_104 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto try_except_handler_130;
            }
            if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
                goto branch_yes_77;
            } else {
                goto branch_no_77;
            }
        }
        branch_yes_77:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__42_SecurityBase_286, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_130;
        }
        branch_no_77:;
        {
            PyObject *tmp_assign_source_272;
            PyObject *tmp_called_value_84;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_153;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_84 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_153 = mod_consts[195];
            tmp_args_value_68 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_153);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_153 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_153);
            tmp_tuple_element_153 = locals_fastapi$openapi$models$$$class__42_SecurityBase_286;
            PyTuple_SET_ITEM0(tmp_args_value_68, 2, tmp_tuple_element_153);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_68 = tmp_class_creation_25__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 286;
            tmp_assign_source_272 = CALL_FUNCTION(tstate, tmp_called_value_84, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_272 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto try_except_handler_130;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_272;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_268 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_268);
        goto try_return_handler_130;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_130:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__42_SecurityBase_286);
        locals_fastapi$openapi$models$$$class__42_SecurityBase_286 = NULL;
        goto try_return_handler_129;
        // Exception handler code:
        try_except_handler_130:;
        exception_keeper_type_131 = exception_type;
        exception_keeper_value_131 = exception_value;
        exception_keeper_tb_131 = exception_tb;
        exception_keeper_lineno_131 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__42_SecurityBase_286);
        locals_fastapi$openapi$models$$$class__42_SecurityBase_286 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_131;
        exception_value = exception_keeper_value_131;
        exception_tb = exception_keeper_tb_131;
        exception_lineno = exception_keeper_lineno_131;

        goto try_except_handler_129;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_129:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_129:;
        exception_keeper_type_132 = exception_type;
        exception_keeper_value_132 = exception_value;
        exception_keeper_tb_132 = exception_tb;
        exception_keeper_lineno_132 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_132;
        exception_value = exception_keeper_value_132;
        exception_tb = exception_keeper_tb_132;
        exception_lineno = exception_keeper_lineno_132;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 286;
        goto try_except_handler_128;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[195], tmp_assign_source_268);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_128:;
    exception_keeper_type_133 = exception_type;
    exception_keeper_value_133 = exception_value;
    exception_keeper_tb_133 = exception_tb;
    exception_keeper_lineno_133 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_133;
    exception_value = exception_keeper_value_133;
    exception_tb = exception_keeper_tb_133;
    exception_lineno = exception_keeper_lineno_133;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_273;
        PyObject *tmp_tuple_element_154;
        tmp_tuple_element_154 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[16]);

        if (unlikely(tmp_tuple_element_154 == NULL)) {
            tmp_tuple_element_154 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[16]);
        }

        if (tmp_tuple_element_154 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_assign_source_273 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_273, 0, tmp_tuple_element_154);
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_273;
    }
    {
        PyObject *tmp_assign_source_274;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_274 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_274 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_274;
    }
    {
        PyObject *tmp_assign_source_275;
        tmp_assign_source_275 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_275;
    }
    {
        PyObject *tmp_assign_source_276;
        PyObject *tmp_metaclass_value_26;
        nuitka_bool tmp_condition_result_105;
        int tmp_truth_name_26;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_317;
        PyObject *tmp_subscript_value_192;
        PyObject *tmp_bases_value_26;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_26 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_condition_result_105 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_105 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_317 = tmp_class_creation_26__bases;
        tmp_subscript_value_192 = mod_consts[15];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_317, tmp_subscript_value_192, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_28:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_26 = tmp_class_creation_26__bases;
        tmp_assign_source_276 = SELECT_METACLASS(tstate, tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_276 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_276;
    }
    {
        bool tmp_condition_result_106;
        PyObject *tmp_expression_value_318;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_318 = tmp_class_creation_26__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_318, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_condition_result_106 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_106 != false) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_277;
        PyObject *tmp_called_value_85;
        PyObject *tmp_expression_value_319;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_155;
        PyObject *tmp_kwargs_value_69;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_319 = tmp_class_creation_26__metaclass;
        tmp_called_value_85 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_319, mod_consts[35]);
        if (tmp_called_value_85 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_tuple_element_155 = mod_consts[199];
        tmp_args_value_69 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_155);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_155 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_155);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_69 = tmp_class_creation_26__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 294;
        tmp_assign_source_277 = CALL_FUNCTION(tstate, tmp_called_value_85, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_called_value_85);
        Py_DECREF(tmp_args_value_69);
        if (tmp_assign_source_277 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_277;
    }
    {
        bool tmp_condition_result_107;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_320;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_320 = tmp_class_creation_26__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_320, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_operand_value_27 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_107 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_107 != false) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_mod_expr_left_26;
        PyObject *tmp_mod_expr_right_26;
        PyObject *tmp_tuple_element_156;
        PyObject *tmp_expression_value_321;
        PyObject *tmp_name_value_31;
        PyObject *tmp_default_value_26;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_mod_expr_left_26 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_321 = tmp_class_creation_26__metaclass;
        tmp_name_value_31 = mod_consts[38];
        tmp_default_value_26 = mod_consts[39];
        tmp_tuple_element_156 = BUILTIN_GETATTR(tstate, tmp_expression_value_321, tmp_name_value_31, tmp_default_value_26);
        if (tmp_tuple_element_156 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        tmp_mod_expr_right_26 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_322;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_mod_expr_right_26, 0, tmp_tuple_element_156);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_52 = tmp_class_creation_26__prepared;
            tmp_expression_value_322 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_322 == NULL));
            tmp_tuple_element_156 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_322, mod_consts[38]);
            Py_DECREF(tmp_expression_value_322);
            if (tmp_tuple_element_156 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 294;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_26, 1, tmp_tuple_element_156);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_mod_expr_right_26);
        goto try_except_handler_134;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_26, tmp_mod_expr_right_26);
        Py_DECREF(tmp_mod_expr_right_26);
        if (tmp_raise_value_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_134;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_26;
        exception_lineno = 294;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_134;
    }
    branch_no_79:;
    goto branch_end_78;
    branch_no_78:;
    {
        PyObject *tmp_assign_source_278;
        tmp_assign_source_278 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_278;
    }
    branch_end_78:;
    {
        PyObject *tmp_assign_source_279;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_44 = tmp_class_creation_26__prepared;
            locals_fastapi$openapi$models$$$class__44_APIKeyIn_294 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_136;
        }
        tmp_dictset_value = mod_consts[199];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_136;
        }
        frame_e86f088703b54923e512c46648737853_27 = MAKE_CLASS_FRAME(tstate, codeobj_e86f088703b54923e512c46648737853, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e86f088703b54923e512c46648737853_27);
        assert(Py_REFCNT(frame_e86f088703b54923e512c46648737853_27) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[137];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[137], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        tmp_dictset_value = mod_consts[138];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[138], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        tmp_dictset_value = mod_consts[140];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[140], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_26;
        frame_exception_exit_27:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e86f088703b54923e512c46648737853_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e86f088703b54923e512c46648737853_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e86f088703b54923e512c46648737853_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e86f088703b54923e512c46648737853_27,
            type_description_2,
            outline_43_var___class__
        );



        assertFrameObject(frame_e86f088703b54923e512c46648737853_27);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_26;
        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_136;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_108 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_108 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 294;

                goto try_except_handler_136;
            }
            if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
                goto branch_yes_80;
            } else {
                goto branch_no_80;
            }
        }
        branch_yes_80:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;

            goto try_except_handler_136;
        }
        branch_no_80:;
        {
            PyObject *tmp_assign_source_280;
            PyObject *tmp_called_value_86;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_157;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_86 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_157 = mod_consts[199];
            tmp_args_value_70 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_157);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_157 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_157);
            tmp_tuple_element_157 = locals_fastapi$openapi$models$$$class__44_APIKeyIn_294;
            PyTuple_SET_ITEM0(tmp_args_value_70, 2, tmp_tuple_element_157);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_70 = tmp_class_creation_26__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 294;
            tmp_assign_source_280 = CALL_FUNCTION(tstate, tmp_called_value_86, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_280 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 294;

                goto try_except_handler_136;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_280;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_279 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_279);
        goto try_return_handler_136;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_136:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294);
        locals_fastapi$openapi$models$$$class__44_APIKeyIn_294 = NULL;
        goto try_return_handler_135;
        // Exception handler code:
        try_except_handler_136:;
        exception_keeper_type_134 = exception_type;
        exception_keeper_value_134 = exception_value;
        exception_keeper_tb_134 = exception_tb;
        exception_keeper_lineno_134 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__44_APIKeyIn_294);
        locals_fastapi$openapi$models$$$class__44_APIKeyIn_294 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;
        exception_lineno = exception_keeper_lineno_134;

        goto try_except_handler_135;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_135:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_135:;
        exception_keeper_type_135 = exception_type;
        exception_keeper_value_135 = exception_value;
        exception_keeper_tb_135 = exception_tb;
        exception_keeper_lineno_135 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_135;
        exception_value = exception_keeper_value_135;
        exception_tb = exception_keeper_tb_135;
        exception_lineno = exception_keeper_lineno_135;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 294;
        goto try_except_handler_134;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[199], tmp_assign_source_279);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_134:;
    exception_keeper_type_136 = exception_type;
    exception_keeper_value_136 = exception_value;
    exception_keeper_tb_136 = exception_tb;
    exception_keeper_lineno_136 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_136;
    exception_value = exception_keeper_value_136;
    exception_tb = exception_keeper_tb_136;
    exception_lineno = exception_keeper_lineno_136;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_281;
        PyObject *tmp_tuple_element_158;
        tmp_tuple_element_158 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[195]);

        if (unlikely(tmp_tuple_element_158 == NULL)) {
            tmp_tuple_element_158 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[195]);
        }

        if (tmp_tuple_element_158 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_assign_source_281 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_281, 0, tmp_tuple_element_158);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_281;
    }
    {
        PyObject *tmp_assign_source_282;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_282 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_282 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_282;
    }
    {
        PyObject *tmp_assign_source_283;
        tmp_assign_source_283 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_283;
    }
    {
        PyObject *tmp_assign_source_284;
        PyObject *tmp_metaclass_value_27;
        nuitka_bool tmp_condition_result_109;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_323;
        PyObject *tmp_subscript_value_193;
        PyObject *tmp_bases_value_27;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_27 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_condition_result_109 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_109 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_323 = tmp_class_creation_27__bases;
        tmp_subscript_value_193 = mod_consts[15];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_323, tmp_subscript_value_193, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        goto condexpr_end_29;
        condexpr_false_29:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_27 = tmp_class_creation_27__bases;
        tmp_assign_source_284 = SELECT_METACLASS(tstate, tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_284 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_284;
    }
    {
        bool tmp_condition_result_110;
        PyObject *tmp_expression_value_324;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_324 = tmp_class_creation_27__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_324, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_condition_result_110 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_110 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    {
        PyObject *tmp_assign_source_285;
        PyObject *tmp_called_value_87;
        PyObject *tmp_expression_value_325;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_159;
        PyObject *tmp_kwargs_value_71;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_325 = tmp_class_creation_27__metaclass;
        tmp_called_value_87 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_325, mod_consts[35]);
        if (tmp_called_value_87 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_tuple_element_159 = mod_consts[200];
        tmp_args_value_71 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_159);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_159 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_159);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_71 = tmp_class_creation_27__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 300;
        tmp_assign_source_285 = CALL_FUNCTION(tstate, tmp_called_value_87, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_called_value_87);
        Py_DECREF(tmp_args_value_71);
        if (tmp_assign_source_285 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_285;
    }
    {
        bool tmp_condition_result_111;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_326;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_326 = tmp_class_creation_27__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_326, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_operand_value_28 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_111 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_111 != false) {
            goto branch_yes_82;
        } else {
            goto branch_no_82;
        }
    }
    branch_yes_82:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_mod_expr_left_27;
        PyObject *tmp_mod_expr_right_27;
        PyObject *tmp_tuple_element_160;
        PyObject *tmp_expression_value_327;
        PyObject *tmp_name_value_32;
        PyObject *tmp_default_value_27;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_mod_expr_left_27 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_327 = tmp_class_creation_27__metaclass;
        tmp_name_value_32 = mod_consts[38];
        tmp_default_value_27 = mod_consts[39];
        tmp_tuple_element_160 = BUILTIN_GETATTR(tstate, tmp_expression_value_327, tmp_name_value_32, tmp_default_value_27);
        if (tmp_tuple_element_160 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        tmp_mod_expr_right_27 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_328;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_mod_expr_right_27, 0, tmp_tuple_element_160);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_54 = tmp_class_creation_27__prepared;
            tmp_expression_value_328 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_328 == NULL));
            tmp_tuple_element_160 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_328, mod_consts[38]);
            Py_DECREF(tmp_expression_value_328);
            if (tmp_tuple_element_160 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_27, 1, tmp_tuple_element_160);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_mod_expr_right_27);
        goto try_except_handler_137;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_27, tmp_mod_expr_right_27);
        Py_DECREF(tmp_mod_expr_right_27);
        if (tmp_raise_value_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_137;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_27;
        exception_lineno = 300;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_137;
    }
    branch_no_82:;
    goto branch_end_81;
    branch_no_81:;
    {
        PyObject *tmp_assign_source_286;
        tmp_assign_source_286 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_286;
    }
    branch_end_81:;
    {
        PyObject *tmp_assign_source_287;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_45 = tmp_class_creation_27__prepared;
            locals_fastapi$openapi$models$$$class__45_APIKey_300 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_139;
        }
        tmp_dictset_value = mod_consts[200];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_139;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_139;
        }
        frame_cd8f5a24c7697b1506cb744a260b29e0_28 = MAKE_CLASS_FRAME(tstate, codeobj_cd8f5a24c7697b1506cb744a260b29e0, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_cd8f5a24c7697b1506cb744a260b29e0_28);
        assert(Py_REFCNT(frame_cd8f5a24c7697b1506cb744a260b29e0_28) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_161;
            PyObject *tmp_expression_value_329;
            PyObject *tmp_kwargs_value_72;
            tmp_called_value_88 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[30]);

            if (tmp_called_value_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_88 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_88 == NULL)) {
                        tmp_called_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_88 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 301;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_called_value_88);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_expression_value_329 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[190]);

            if (tmp_expression_value_329 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_329 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190]);

                    if (unlikely(tmp_expression_value_329 == NULL)) {
                        tmp_expression_value_329 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[190]);
                    }

                    if (tmp_expression_value_329 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_88);

                        exception_lineno = 301;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_expression_value_329);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_tuple_element_161 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_329, mod_consts[191]);
            Py_DECREF(tmp_expression_value_329);
            if (tmp_tuple_element_161 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_88);

                exception_lineno = 301;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_args_value_72 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_args_value_72, 0, tmp_tuple_element_161);
            tmp_kwargs_value_72 = DICT_COPY(mod_consts[201]);
            frame_cd8f5a24c7697b1506cb744a260b29e0_28->m_frame.f_lineno = 301;
            tmp_dictset_value = CALL_FUNCTION(tstate, tmp_called_value_88, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_args_value_72);
            Py_DECREF(tmp_kwargs_value_72);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 301;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[197], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 301;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        {
            PyObject *tmp_called_value_89;
            tmp_called_value_89 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[30]);

            if (tmp_called_value_89 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_89 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_89 == NULL)) {
                        tmp_called_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_89 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 302;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_called_value_89);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            frame_cd8f5a24c7697b1506cb744a260b29e0_28->m_frame.f_lineno = 302;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_89, &PyTuple_GET_ITEM(mod_consts[159], 0), mod_consts[77]);
            Py_DECREF(tmp_called_value_89);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[160], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        {
            PyObject *tmp_ass_subvalue_130;
            PyObject *tmp_ass_subscribed_130;
            PyObject *tmp_ass_subscript_130;
            tmp_ass_subvalue_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[199]);

            if (tmp_ass_subvalue_130 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_130 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[199]);

                    if (unlikely(tmp_ass_subvalue_130 == NULL)) {
                        tmp_ass_subvalue_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
                    }

                    if (tmp_ass_subvalue_130 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 302;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_ass_subvalue_130);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_ass_subscribed_130 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_130 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_130);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 302;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }

            if (tmp_ass_subscribed_130 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_130);

                exception_lineno = 302;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_ass_subscript_130 = mod_consts[160];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_130, tmp_ass_subscript_130, tmp_ass_subvalue_130);
            Py_DECREF(tmp_ass_subscribed_130);
            Py_DECREF(tmp_ass_subvalue_130);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        {
            PyObject *tmp_ass_subvalue_131;
            PyObject *tmp_ass_subscribed_131;
            PyObject *tmp_ass_subscript_131;
            tmp_ass_subvalue_131 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[46]);

            if (tmp_ass_subvalue_131 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_131 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_131);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_ass_subscribed_131 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_131 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_131);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 303;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }

            if (tmp_ass_subscribed_131 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_131);

                exception_lineno = 303;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_ass_subscript_131 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_131, tmp_ass_subscript_131, tmp_ass_subvalue_131);
            Py_DECREF(tmp_ass_subscribed_131);
            Py_DECREF(tmp_ass_subvalue_131);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 303;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_27;
        frame_exception_exit_28:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_cd8f5a24c7697b1506cb744a260b29e0_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_cd8f5a24c7697b1506cb744a260b29e0_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_cd8f5a24c7697b1506cb744a260b29e0_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_cd8f5a24c7697b1506cb744a260b29e0_28,
            type_description_2,
            outline_44_var___class__
        );



        assertFrameObject(frame_cd8f5a24c7697b1506cb744a260b29e0_28);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_27;
        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_139;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_112;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_28 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_28 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_112 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_112 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_139;
            }
            if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
                goto branch_yes_83;
            } else {
                goto branch_no_83;
            }
        }
        branch_yes_83:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__45_APIKey_300, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_139;
        }
        branch_no_83:;
        {
            PyObject *tmp_assign_source_288;
            PyObject *tmp_called_value_90;
            PyObject *tmp_args_value_73;
            PyObject *tmp_tuple_element_162;
            PyObject *tmp_kwargs_value_73;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_90 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_162 = mod_consts[200];
            tmp_args_value_73 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_162 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_162);
            tmp_tuple_element_162 = locals_fastapi$openapi$models$$$class__45_APIKey_300;
            PyTuple_SET_ITEM0(tmp_args_value_73, 2, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_73 = tmp_class_creation_27__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 300;
            tmp_assign_source_288 = CALL_FUNCTION(tstate, tmp_called_value_90, tmp_args_value_73, tmp_kwargs_value_73);
            Py_DECREF(tmp_args_value_73);
            if (tmp_assign_source_288 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_139;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_288;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_287 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_287);
        goto try_return_handler_139;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_139:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__45_APIKey_300);
        locals_fastapi$openapi$models$$$class__45_APIKey_300 = NULL;
        goto try_return_handler_138;
        // Exception handler code:
        try_except_handler_139:;
        exception_keeper_type_137 = exception_type;
        exception_keeper_value_137 = exception_value;
        exception_keeper_tb_137 = exception_tb;
        exception_keeper_lineno_137 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__45_APIKey_300);
        locals_fastapi$openapi$models$$$class__45_APIKey_300 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;
        exception_lineno = exception_keeper_lineno_137;

        goto try_except_handler_138;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_138:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_138:;
        exception_keeper_type_138 = exception_type;
        exception_keeper_value_138 = exception_value;
        exception_keeper_tb_138 = exception_tb;
        exception_keeper_lineno_138 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_138;
        exception_value = exception_keeper_value_138;
        exception_tb = exception_keeper_tb_138;
        exception_lineno = exception_keeper_lineno_138;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 300;
        goto try_except_handler_137;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[200], tmp_assign_source_287);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_137:;
    exception_keeper_type_139 = exception_type;
    exception_keeper_value_139 = exception_value;
    exception_keeper_tb_139 = exception_tb;
    exception_keeper_lineno_139 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_139;
    exception_value = exception_keeper_value_139;
    exception_tb = exception_keeper_tb_139;
    exception_lineno = exception_keeper_lineno_139;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_289;
        PyObject *tmp_tuple_element_163;
        tmp_tuple_element_163 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[195]);

        if (unlikely(tmp_tuple_element_163 == NULL)) {
            tmp_tuple_element_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[195]);
        }

        if (tmp_tuple_element_163 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_assign_source_289 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_289, 0, tmp_tuple_element_163);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_289;
    }
    {
        PyObject *tmp_assign_source_290;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_290 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_290 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_290;
    }
    {
        PyObject *tmp_assign_source_291;
        tmp_assign_source_291 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_291;
    }
    {
        PyObject *tmp_assign_source_292;
        PyObject *tmp_metaclass_value_28;
        nuitka_bool tmp_condition_result_113;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_330;
        PyObject *tmp_subscript_value_194;
        PyObject *tmp_bases_value_28;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_28 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_condition_result_113 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_113 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_330 = tmp_class_creation_28__bases;
        tmp_subscript_value_194 = mod_consts[15];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_330, tmp_subscript_value_194, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_30:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_28 = tmp_class_creation_28__bases;
        tmp_assign_source_292 = SELECT_METACLASS(tstate, tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_292 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_292;
    }
    {
        bool tmp_condition_result_114;
        PyObject *tmp_expression_value_331;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_331 = tmp_class_creation_28__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_331, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_condition_result_114 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_114 != false) {
            goto branch_yes_84;
        } else {
            goto branch_no_84;
        }
    }
    branch_yes_84:;
    {
        PyObject *tmp_assign_source_293;
        PyObject *tmp_called_value_91;
        PyObject *tmp_expression_value_332;
        PyObject *tmp_args_value_74;
        PyObject *tmp_tuple_element_164;
        PyObject *tmp_kwargs_value_74;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_332 = tmp_class_creation_28__metaclass;
        tmp_called_value_91 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_332, mod_consts[35]);
        if (tmp_called_value_91 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_tuple_element_164 = mod_consts[202];
        tmp_args_value_74 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_164 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_74 = tmp_class_creation_28__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 306;
        tmp_assign_source_293 = CALL_FUNCTION(tstate, tmp_called_value_91, tmp_args_value_74, tmp_kwargs_value_74);
        Py_DECREF(tmp_called_value_91);
        Py_DECREF(tmp_args_value_74);
        if (tmp_assign_source_293 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_293;
    }
    {
        bool tmp_condition_result_115;
        PyObject *tmp_operand_value_29;
        PyObject *tmp_expression_value_333;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_333 = tmp_class_creation_28__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_333, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_operand_value_29 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
        assert(!(tmp_res == -1));
        tmp_condition_result_115 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_115 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    {
        PyObject *tmp_raise_type_29;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_mod_expr_left_28;
        PyObject *tmp_mod_expr_right_28;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_expression_value_334;
        PyObject *tmp_name_value_33;
        PyObject *tmp_default_value_28;
        tmp_raise_type_29 = PyExc_TypeError;
        tmp_mod_expr_left_28 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_334 = tmp_class_creation_28__metaclass;
        tmp_name_value_33 = mod_consts[38];
        tmp_default_value_28 = mod_consts[39];
        tmp_tuple_element_165 = BUILTIN_GETATTR(tstate, tmp_expression_value_334, tmp_name_value_33, tmp_default_value_28);
        if (tmp_tuple_element_165 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        tmp_mod_expr_right_28 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_335;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_mod_expr_right_28, 0, tmp_tuple_element_165);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_56 = tmp_class_creation_28__prepared;
            tmp_expression_value_335 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_335 == NULL));
            tmp_tuple_element_165 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_335, mod_consts[38]);
            Py_DECREF(tmp_expression_value_335);
            if (tmp_tuple_element_165 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 306;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_28, 1, tmp_tuple_element_165);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_mod_expr_right_28);
        goto try_except_handler_140;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_28, tmp_mod_expr_right_28);
        Py_DECREF(tmp_mod_expr_right_28);
        if (tmp_raise_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_140;
        }
        exception_type = tmp_raise_type_29;
        Py_INCREF(tmp_raise_type_29);
        exception_value = tmp_raise_value_28;
        exception_lineno = 306;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_140;
    }
    branch_no_85:;
    goto branch_end_84;
    branch_no_84:;
    {
        PyObject *tmp_assign_source_294;
        tmp_assign_source_294 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_294;
    }
    branch_end_84:;
    {
        PyObject *tmp_assign_source_295;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_46 = tmp_class_creation_28__prepared;
            locals_fastapi$openapi$models$$$class__46_HTTPBase_306 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_142;
        }
        tmp_dictset_value = mod_consts[202];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_142;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_142;
        }
        frame_9d522d71dee56bd424bbdb7f1efece26_29 = MAKE_CLASS_FRAME(tstate, codeobj_9d522d71dee56bd424bbdb7f1efece26, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_9d522d71dee56bd424bbdb7f1efece26_29);
        assert(Py_REFCNT(frame_9d522d71dee56bd424bbdb7f1efece26_29) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_92;
            PyObject *tmp_args_value_75;
            PyObject *tmp_tuple_element_166;
            PyObject *tmp_expression_value_336;
            PyObject *tmp_kwargs_value_75;
            tmp_called_value_92 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[30]);

            if (tmp_called_value_92 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_92 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_92 == NULL)) {
                        tmp_called_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_92 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 307;
                        type_description_2 = "o";
                        goto frame_exception_exit_29;
                    }
                    Py_INCREF(tmp_called_value_92);
                } else {
                    goto frame_exception_exit_29;
                }
            }

            tmp_expression_value_336 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[190]);

            if (tmp_expression_value_336 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_336 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190]);

                    if (unlikely(tmp_expression_value_336 == NULL)) {
                        tmp_expression_value_336 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[190]);
                    }

                    if (tmp_expression_value_336 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_92);

                        exception_lineno = 307;
                        type_description_2 = "o";
                        goto frame_exception_exit_29;
                    }
                    Py_INCREF(tmp_expression_value_336);
                } else {
                    goto frame_exception_exit_29;
                }
            }

            tmp_tuple_element_166 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_336, mod_consts[192]);
            Py_DECREF(tmp_expression_value_336);
            if (tmp_tuple_element_166 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_92);

                exception_lineno = 307;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_args_value_75 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_args_value_75, 0, tmp_tuple_element_166);
            tmp_kwargs_value_75 = DICT_COPY(mod_consts[201]);
            frame_9d522d71dee56bd424bbdb7f1efece26_29->m_frame.f_lineno = 307;
            tmp_dictset_value = CALL_FUNCTION(tstate, tmp_called_value_92, tmp_args_value_75, tmp_kwargs_value_75);
            Py_DECREF(tmp_called_value_92);
            Py_DECREF(tmp_args_value_75);
            Py_DECREF(tmp_kwargs_value_75);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 307;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[197], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 307;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            PyObject *tmp_ass_subvalue_132;
            PyObject *tmp_ass_subscribed_132;
            PyObject *tmp_ass_subscript_132;
            tmp_ass_subvalue_132 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[46]);

            if (tmp_ass_subvalue_132 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_132 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_132);
                } else {
                    goto frame_exception_exit_29;
                }
            }

            tmp_ass_subscribed_132 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_132 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_132);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 308;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_ass_subscribed_132 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_132);

                exception_lineno = 308;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_ass_subscript_132 = mod_consts[203];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_132, tmp_ass_subscript_132, tmp_ass_subvalue_132);
            Py_DECREF(tmp_ass_subscribed_132);
            Py_DECREF(tmp_ass_subvalue_132);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_28;
        frame_exception_exit_29:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9d522d71dee56bd424bbdb7f1efece26_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9d522d71dee56bd424bbdb7f1efece26_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9d522d71dee56bd424bbdb7f1efece26_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9d522d71dee56bd424bbdb7f1efece26_29,
            type_description_2,
            outline_45_var___class__
        );



        assertFrameObject(frame_9d522d71dee56bd424bbdb7f1efece26_29);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_28;
        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;

        goto try_except_handler_142;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_116;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_29 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_29 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_116 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_116 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 306;

                goto try_except_handler_142;
            }
            if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
                goto branch_yes_86;
            } else {
                goto branch_no_86;
            }
        }
        branch_yes_86:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__46_HTTPBase_306, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;

            goto try_except_handler_142;
        }
        branch_no_86:;
        {
            PyObject *tmp_assign_source_296;
            PyObject *tmp_called_value_93;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_167;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_93 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_167 = mod_consts[202];
            tmp_args_value_76 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_167);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_167 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_167);
            tmp_tuple_element_167 = locals_fastapi$openapi$models$$$class__46_HTTPBase_306;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_167);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_28__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 306;
            tmp_assign_source_296 = CALL_FUNCTION(tstate, tmp_called_value_93, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_296 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 306;

                goto try_except_handler_142;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_296;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_295 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_295);
        goto try_return_handler_142;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_142:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__46_HTTPBase_306);
        locals_fastapi$openapi$models$$$class__46_HTTPBase_306 = NULL;
        goto try_return_handler_141;
        // Exception handler code:
        try_except_handler_142:;
        exception_keeper_type_140 = exception_type;
        exception_keeper_value_140 = exception_value;
        exception_keeper_tb_140 = exception_tb;
        exception_keeper_lineno_140 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__46_HTTPBase_306);
        locals_fastapi$openapi$models$$$class__46_HTTPBase_306 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;
        exception_lineno = exception_keeper_lineno_140;

        goto try_except_handler_141;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_141:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_141:;
        exception_keeper_type_141 = exception_type;
        exception_keeper_value_141 = exception_value;
        exception_keeper_tb_141 = exception_tb;
        exception_keeper_lineno_141 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_141;
        exception_value = exception_keeper_value_141;
        exception_tb = exception_keeper_tb_141;
        exception_lineno = exception_keeper_lineno_141;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 306;
        goto try_except_handler_140;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[202], tmp_assign_source_295);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_140:;
    exception_keeper_type_142 = exception_type;
    exception_keeper_value_142 = exception_value;
    exception_keeper_tb_142 = exception_tb;
    exception_keeper_lineno_142 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_142;
    exception_value = exception_keeper_value_142;
    exception_tb = exception_keeper_tb_142;
    exception_lineno = exception_keeper_lineno_142;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_297;
        PyObject *tmp_tuple_element_168;
        tmp_tuple_element_168 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[202]);

        if (unlikely(tmp_tuple_element_168 == NULL)) {
            tmp_tuple_element_168 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[202]);
        }

        if (tmp_tuple_element_168 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_assign_source_297 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_297, 0, tmp_tuple_element_168);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_297;
    }
    {
        PyObject *tmp_assign_source_298;
        PyObject *tmp_dircall_arg1_29;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_29 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_29);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
            tmp_assign_source_298 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_298 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_298;
    }
    {
        PyObject *tmp_assign_source_299;
        tmp_assign_source_299 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_299;
    }
    {
        PyObject *tmp_assign_source_300;
        PyObject *tmp_metaclass_value_29;
        nuitka_bool tmp_condition_result_117;
        int tmp_truth_name_29;
        PyObject *tmp_type_arg_57;
        PyObject *tmp_expression_value_337;
        PyObject *tmp_subscript_value_195;
        PyObject *tmp_bases_value_29;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_29 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_condition_result_117 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_117 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_337 = tmp_class_creation_29__bases;
        tmp_subscript_value_195 = mod_consts[15];
        tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_337, tmp_subscript_value_195, 0);
        if (tmp_type_arg_57 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
        Py_DECREF(tmp_type_arg_57);
        if (tmp_metaclass_value_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        goto condexpr_end_31;
        condexpr_false_31:;
        tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_29);
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_29 = tmp_class_creation_29__bases;
        tmp_assign_source_300 = SELECT_METACLASS(tstate, tmp_metaclass_value_29, tmp_bases_value_29);
        Py_DECREF(tmp_metaclass_value_29);
        if (tmp_assign_source_300 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_300;
    }
    {
        bool tmp_condition_result_118;
        PyObject *tmp_expression_value_338;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_338 = tmp_class_creation_29__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_338, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_condition_result_118 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_118 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_assign_source_301;
        PyObject *tmp_called_value_94;
        PyObject *tmp_expression_value_339;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_339 = tmp_class_creation_29__metaclass;
        tmp_called_value_94 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_339, mod_consts[35]);
        if (tmp_called_value_94 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_tuple_element_169 = mod_consts[204];
        tmp_args_value_77 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_169);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_169 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_169);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_29__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 311;
        tmp_assign_source_301 = CALL_FUNCTION(tstate, tmp_called_value_94, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_94);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_301 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_301;
    }
    {
        bool tmp_condition_result_119;
        PyObject *tmp_operand_value_30;
        PyObject *tmp_expression_value_340;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_340 = tmp_class_creation_29__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_340, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_operand_value_30 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_119 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_119 != false) {
            goto branch_yes_88;
        } else {
            goto branch_no_88;
        }
    }
    branch_yes_88:;
    {
        PyObject *tmp_raise_type_30;
        PyObject *tmp_raise_value_29;
        PyObject *tmp_mod_expr_left_29;
        PyObject *tmp_mod_expr_right_29;
        PyObject *tmp_tuple_element_170;
        PyObject *tmp_expression_value_341;
        PyObject *tmp_name_value_34;
        PyObject *tmp_default_value_29;
        tmp_raise_type_30 = PyExc_TypeError;
        tmp_mod_expr_left_29 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_341 = tmp_class_creation_29__metaclass;
        tmp_name_value_34 = mod_consts[38];
        tmp_default_value_29 = mod_consts[39];
        tmp_tuple_element_170 = BUILTIN_GETATTR(tstate, tmp_expression_value_341, tmp_name_value_34, tmp_default_value_29);
        if (tmp_tuple_element_170 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        tmp_mod_expr_right_29 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_342;
            PyObject *tmp_type_arg_58;
            PyTuple_SET_ITEM(tmp_mod_expr_right_29, 0, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_58 = tmp_class_creation_29__prepared;
            tmp_expression_value_342 = BUILTIN_TYPE1(tmp_type_arg_58);
            assert(!(tmp_expression_value_342 == NULL));
            tmp_tuple_element_170 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_342, mod_consts[38]);
            Py_DECREF(tmp_expression_value_342);
            if (tmp_tuple_element_170 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 311;

                goto tuple_build_exception_59;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_29, 1, tmp_tuple_element_170);
        }
        goto tuple_build_noexception_59;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_59:;
        Py_DECREF(tmp_mod_expr_right_29);
        goto try_except_handler_143;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_59:;
        tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_29, tmp_mod_expr_right_29);
        Py_DECREF(tmp_mod_expr_right_29);
        if (tmp_raise_value_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_143;
        }
        exception_type = tmp_raise_type_30;
        Py_INCREF(tmp_raise_type_30);
        exception_value = tmp_raise_value_29;
        exception_lineno = 311;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_143;
    }
    branch_no_88:;
    goto branch_end_87;
    branch_no_87:;
    {
        PyObject *tmp_assign_source_302;
        tmp_assign_source_302 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_302;
    }
    branch_end_87:;
    {
        PyObject *tmp_assign_source_303;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_47 = tmp_class_creation_29__prepared;
            locals_fastapi$openapi$models$$$class__47_HTTPBearer_311 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_145;
        }
        tmp_dictset_value = mod_consts[204];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_145;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_145;
        }
        frame_66f1e88fbde6db268b6a0d193fb8b6f0_30 = MAKE_CLASS_FRAME(tstate, codeobj_66f1e88fbde6db268b6a0d193fb8b6f0, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_66f1e88fbde6db268b6a0d193fb8b6f0_30);
        assert(Py_REFCNT(frame_66f1e88fbde6db268b6a0d193fb8b6f0_30) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[205];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[203], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 312;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[206], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        {
            PyObject *tmp_ass_subvalue_133;
            PyObject *tmp_expression_value_343;
            PyObject *tmp_subscript_value_196;
            PyObject *tmp_ass_subscribed_133;
            PyObject *tmp_ass_subscript_133;
            tmp_expression_value_343 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[22]);

            if (tmp_expression_value_343 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_343 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_343 == NULL)) {
                        tmp_expression_value_343 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_343 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 313;
                        type_description_2 = "o";
                        goto frame_exception_exit_30;
                    }
                    Py_INCREF(tmp_expression_value_343);
                } else {
                    goto frame_exception_exit_30;
                }
            }

            tmp_subscript_value_196 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[46]);

            if (tmp_subscript_value_196 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_196 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_196);
                } else {
                    goto frame_exception_exit_30;
                }
            }

            tmp_ass_subvalue_133 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_343, tmp_subscript_value_196);
            Py_DECREF(tmp_expression_value_343);
            Py_DECREF(tmp_subscript_value_196);
            if (tmp_ass_subvalue_133 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 313;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_ass_subscribed_133 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_133 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_133);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 313;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_ass_subscribed_133 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_133);

                exception_lineno = 313;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_ass_subscript_133 = mod_consts[206];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_133, tmp_ass_subscript_133, tmp_ass_subvalue_133);
            Py_DECREF(tmp_ass_subscribed_133);
            Py_DECREF(tmp_ass_subvalue_133);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 313;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_29;
        frame_exception_exit_30:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_66f1e88fbde6db268b6a0d193fb8b6f0_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_66f1e88fbde6db268b6a0d193fb8b6f0_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_66f1e88fbde6db268b6a0d193fb8b6f0_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_66f1e88fbde6db268b6a0d193fb8b6f0_30,
            type_description_2,
            outline_46_var___class__
        );



        assertFrameObject(frame_66f1e88fbde6db268b6a0d193fb8b6f0_30);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_29;
        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_29:;

        goto try_except_handler_145;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_120;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_30 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_30 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_120 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_120 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 311;

                goto try_except_handler_145;
            }
            if (tmp_condition_result_120 == NUITKA_BOOL_TRUE) {
                goto branch_yes_89;
            } else {
                goto branch_no_89;
            }
        }
        branch_yes_89:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;

            goto try_except_handler_145;
        }
        branch_no_89:;
        {
            PyObject *tmp_assign_source_304;
            PyObject *tmp_called_value_95;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_171;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_95 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_171 = mod_consts[204];
            tmp_args_value_78 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_171);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_171 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_171);
            tmp_tuple_element_171 = locals_fastapi$openapi$models$$$class__47_HTTPBearer_311;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_171);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_29__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 311;
            tmp_assign_source_304 = CALL_FUNCTION(tstate, tmp_called_value_95, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_304 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 311;

                goto try_except_handler_145;
            }
            assert(outline_46_var___class__ == NULL);
            outline_46_var___class__ = tmp_assign_source_304;
        }
        CHECK_OBJECT(outline_46_var___class__);
        tmp_assign_source_303 = outline_46_var___class__;
        Py_INCREF(tmp_assign_source_303);
        goto try_return_handler_145;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_145:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311);
        locals_fastapi$openapi$models$$$class__47_HTTPBearer_311 = NULL;
        goto try_return_handler_144;
        // Exception handler code:
        try_except_handler_145:;
        exception_keeper_type_143 = exception_type;
        exception_keeper_value_143 = exception_value;
        exception_keeper_tb_143 = exception_tb;
        exception_keeper_lineno_143 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__47_HTTPBearer_311);
        locals_fastapi$openapi$models$$$class__47_HTTPBearer_311 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;
        exception_lineno = exception_keeper_lineno_143;

        goto try_except_handler_144;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_144:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_144:;
        exception_keeper_type_144 = exception_type;
        exception_keeper_value_144 = exception_value;
        exception_keeper_tb_144 = exception_tb;
        exception_keeper_lineno_144 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_144;
        exception_value = exception_keeper_value_144;
        exception_tb = exception_keeper_tb_144;
        exception_lineno = exception_keeper_lineno_144;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 311;
        goto try_except_handler_143;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[204], tmp_assign_source_303);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_143:;
    exception_keeper_type_145 = exception_type;
    exception_keeper_value_145 = exception_value;
    exception_keeper_tb_145 = exception_tb;
    exception_keeper_lineno_145 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_145;
    exception_value = exception_keeper_value_145;
    exception_tb = exception_keeper_tb_145;
    exception_lineno = exception_keeper_lineno_145;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_305;
        PyObject *tmp_tuple_element_172;
        tmp_tuple_element_172 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_172 == NULL)) {
            tmp_tuple_element_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_172 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_assign_source_305 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_305, 0, tmp_tuple_element_172);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_305;
    }
    {
        PyObject *tmp_assign_source_306;
        PyObject *tmp_dircall_arg1_30;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_30 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_30);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
            tmp_assign_source_306 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_306 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_306;
    }
    {
        PyObject *tmp_assign_source_307;
        tmp_assign_source_307 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_307;
    }
    {
        PyObject *tmp_assign_source_308;
        PyObject *tmp_metaclass_value_30;
        nuitka_bool tmp_condition_result_121;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_59;
        PyObject *tmp_expression_value_344;
        PyObject *tmp_subscript_value_197;
        PyObject *tmp_bases_value_30;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_30 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_condition_result_121 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_121 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_344 = tmp_class_creation_30__bases;
        tmp_subscript_value_197 = mod_consts[15];
        tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_344, tmp_subscript_value_197, 0);
        if (tmp_type_arg_59 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
        Py_DECREF(tmp_type_arg_59);
        if (tmp_metaclass_value_30 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_30);
        condexpr_end_32:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_30 = tmp_class_creation_30__bases;
        tmp_assign_source_308 = SELECT_METACLASS(tstate, tmp_metaclass_value_30, tmp_bases_value_30);
        Py_DECREF(tmp_metaclass_value_30);
        if (tmp_assign_source_308 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_308;
    }
    {
        bool tmp_condition_result_122;
        PyObject *tmp_expression_value_345;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_345 = tmp_class_creation_30__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_345, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_condition_result_122 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_122 != false) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_309;
        PyObject *tmp_called_value_96;
        PyObject *tmp_expression_value_346;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_346 = tmp_class_creation_30__metaclass;
        tmp_called_value_96 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_346, mod_consts[35]);
        if (tmp_called_value_96 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_tuple_element_173 = mod_consts[207];
        tmp_args_value_79 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_173);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_173 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_173);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_30__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 316;
        tmp_assign_source_309 = CALL_FUNCTION(tstate, tmp_called_value_96, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_96);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_309 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_309;
    }
    {
        bool tmp_condition_result_123;
        PyObject *tmp_operand_value_31;
        PyObject *tmp_expression_value_347;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_347 = tmp_class_creation_30__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_347, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_operand_value_31 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_123 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_123 != false) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_raise_type_31;
        PyObject *tmp_raise_value_30;
        PyObject *tmp_mod_expr_left_30;
        PyObject *tmp_mod_expr_right_30;
        PyObject *tmp_tuple_element_174;
        PyObject *tmp_expression_value_348;
        PyObject *tmp_name_value_35;
        PyObject *tmp_default_value_30;
        tmp_raise_type_31 = PyExc_TypeError;
        tmp_mod_expr_left_30 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_348 = tmp_class_creation_30__metaclass;
        tmp_name_value_35 = mod_consts[38];
        tmp_default_value_30 = mod_consts[39];
        tmp_tuple_element_174 = BUILTIN_GETATTR(tstate, tmp_expression_value_348, tmp_name_value_35, tmp_default_value_30);
        if (tmp_tuple_element_174 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        tmp_mod_expr_right_30 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_349;
            PyObject *tmp_type_arg_60;
            PyTuple_SET_ITEM(tmp_mod_expr_right_30, 0, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_60 = tmp_class_creation_30__prepared;
            tmp_expression_value_349 = BUILTIN_TYPE1(tmp_type_arg_60);
            assert(!(tmp_expression_value_349 == NULL));
            tmp_tuple_element_174 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_349, mod_consts[38]);
            Py_DECREF(tmp_expression_value_349);
            if (tmp_tuple_element_174 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_30, 1, tmp_tuple_element_174);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_mod_expr_right_30);
        goto try_except_handler_146;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_30, tmp_mod_expr_right_30);
        Py_DECREF(tmp_mod_expr_right_30);
        if (tmp_raise_value_30 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_146;
        }
        exception_type = tmp_raise_type_31;
        Py_INCREF(tmp_raise_type_31);
        exception_value = tmp_raise_value_30;
        exception_lineno = 316;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_146;
    }
    branch_no_91:;
    goto branch_end_90;
    branch_no_90:;
    {
        PyObject *tmp_assign_source_310;
        tmp_assign_source_310 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_310;
    }
    branch_end_90:;
    {
        PyObject *tmp_assign_source_311;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_48 = tmp_class_creation_30__prepared;
            locals_fastapi$openapi$models$$$class__48_OAuthFlow_316 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_148;
        }
        tmp_dictset_value = mod_consts[207];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_148;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_148;
        }
        frame_295fd3f79bafc9c9498eacbf20742a0e_31 = MAKE_CLASS_FRAME(tstate, codeobj_295fd3f79bafc9c9498eacbf20742a0e, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_295fd3f79bafc9c9498eacbf20742a0e_31);
        assert(Py_REFCNT(frame_295fd3f79bafc9c9498eacbf20742a0e_31) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[208], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }
        {
            PyObject *tmp_ass_subvalue_134;
            PyObject *tmp_expression_value_350;
            PyObject *tmp_subscript_value_198;
            PyObject *tmp_ass_subscribed_134;
            PyObject *tmp_ass_subscript_134;
            tmp_expression_value_350 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[22]);

            if (tmp_expression_value_350 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_350 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_350 == NULL)) {
                        tmp_expression_value_350 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_350 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 317;
                        type_description_2 = "o";
                        goto frame_exception_exit_31;
                    }
                    Py_INCREF(tmp_expression_value_350);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            tmp_subscript_value_198 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[46]);

            if (tmp_subscript_value_198 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_198 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_198);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            tmp_ass_subvalue_134 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_350, tmp_subscript_value_198);
            Py_DECREF(tmp_expression_value_350);
            Py_DECREF(tmp_subscript_value_198);
            if (tmp_ass_subvalue_134 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 317;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
            tmp_ass_subscribed_134 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_134 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_134);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 317;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }

            if (tmp_ass_subscribed_134 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_134);

                exception_lineno = 317;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
            tmp_ass_subscript_134 = mod_consts[208];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_134, tmp_ass_subscript_134, tmp_ass_subvalue_134);
            Py_DECREF(tmp_ass_subscribed_134);
            Py_DECREF(tmp_ass_subvalue_134);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 317;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[209], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 318;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }
        {
            PyObject *tmp_ass_subvalue_135;
            PyObject *tmp_expression_value_351;
            PyObject *tmp_subscript_value_199;
            PyObject *tmp_tuple_element_175;
            PyObject *tmp_ass_subscribed_135;
            PyObject *tmp_ass_subscript_135;
            tmp_expression_value_351 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[19]);

            if (tmp_expression_value_351 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_351 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_351 == NULL)) {
                        tmp_expression_value_351 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_351 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 318;
                        type_description_2 = "o";
                        goto frame_exception_exit_31;
                    }
                    Py_INCREF(tmp_expression_value_351);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            tmp_tuple_element_175 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[46]);

            if (tmp_tuple_element_175 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_175 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_175);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            tmp_subscript_value_199 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM(tmp_subscript_value_199, 0, tmp_tuple_element_175);
            tmp_tuple_element_175 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[46]);

            if (tmp_tuple_element_175 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_175 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_175);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            PyTuple_SET_ITEM(tmp_subscript_value_199, 1, tmp_tuple_element_175);
            tmp_ass_subvalue_135 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_351, tmp_subscript_value_199);
            Py_DECREF(tmp_expression_value_351);
            Py_DECREF(tmp_subscript_value_199);
            if (tmp_ass_subvalue_135 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 318;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
            tmp_ass_subscribed_135 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_135 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_135);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 318;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }

            if (tmp_ass_subscribed_135 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_135);

                exception_lineno = 318;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
            tmp_ass_subscript_135 = mod_consts[209];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_135, tmp_ass_subscript_135, tmp_ass_subvalue_135);
            Py_DECREF(tmp_ass_subscribed_135);
            Py_DECREF(tmp_ass_subvalue_135);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 318;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
        }
        {
            PyObject *tmp_assign_source_312;
            tmp_assign_source_312 = MAKE_DICT_EMPTY();
            assert(tmp_OAuthFlow$class_creation_1__class_decl_dict == NULL);
            tmp_OAuthFlow$class_creation_1__class_decl_dict = tmp_assign_source_312;
        }
        {
            PyObject *tmp_assign_source_313;
            tmp_assign_source_313 = MAKE_DICT_EMPTY();
            assert(tmp_OAuthFlow$class_creation_1__prepared == NULL);
            tmp_OAuthFlow$class_creation_1__prepared = tmp_assign_source_313;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__prepared);
            tmp_set_locals_49 = tmp_OAuthFlow$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__49_Config_320 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__49_Config_320, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[210];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__49_Config_320, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__49_Config_320, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_314;
            PyObject *tmp_called_value_97;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_176;
            PyObject *tmp_kwargs_value_80;
            tmp_called_value_97 = (PyObject *)&PyType_Type;
            tmp_tuple_element_176 = mod_consts[57];
            tmp_args_value_80 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_176);
            tmp_tuple_element_176 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_176);
            tmp_tuple_element_176 = locals_fastapi$openapi$models$$$class__49_Config_320;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_176);
            CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__class_decl_dict);
            tmp_kwargs_value_80 = tmp_OAuthFlow$class_creation_1__class_decl_dict;
            frame_295fd3f79bafc9c9498eacbf20742a0e_31->m_frame.f_lineno = 320;
            tmp_assign_source_314 = CALL_FUNCTION(tstate, tmp_called_value_97, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_314 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto try_except_handler_151;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_314;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_dictset_value = outline_48_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_151;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_151:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__49_Config_320);
        locals_fastapi$openapi$models$$$class__49_Config_320 = NULL;
        goto try_return_handler_150;
        // Exception handler code:
        try_except_handler_151:;
        exception_keeper_type_146 = exception_type;
        exception_keeper_value_146 = exception_value;
        exception_keeper_tb_146 = exception_tb;
        exception_keeper_lineno_146 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__49_Config_320);
        locals_fastapi$openapi$models$$$class__49_Config_320 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;
        exception_lineno = exception_keeper_lineno_146;

        goto try_except_handler_150;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_150:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_150:;
        exception_keeper_type_147 = exception_type;
        exception_keeper_value_147 = exception_value;
        exception_keeper_tb_147 = exception_tb;
        exception_keeper_lineno_147 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_147;
        exception_value = exception_keeper_value_147;
        exception_tb = exception_keeper_tb_147;
        exception_lineno = exception_keeper_lineno_147;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 320;
        goto try_except_handler_149;
        outline_result_49:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;
            type_description_2 = "o";
            goto try_except_handler_149;
        }
        goto try_end_52;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OAuthFlow$class_creation_1__class_decl_dict);
        tmp_OAuthFlow$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__prepared);
        Py_DECREF(tmp_OAuthFlow$class_creation_1__prepared);
        tmp_OAuthFlow$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto frame_exception_exit_31;
        // End of try:
        try_end_52:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_30;
        frame_exception_exit_31:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_295fd3f79bafc9c9498eacbf20742a0e_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_295fd3f79bafc9c9498eacbf20742a0e_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_295fd3f79bafc9c9498eacbf20742a0e_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_295fd3f79bafc9c9498eacbf20742a0e_31,
            type_description_2,
            outline_47_var___class__
        );



        assertFrameObject(frame_295fd3f79bafc9c9498eacbf20742a0e_31);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_30;
        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_30:;

        goto try_except_handler_148;
        skip_nested_handling_30:;
        CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OAuthFlow$class_creation_1__class_decl_dict);
        tmp_OAuthFlow$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OAuthFlow$class_creation_1__prepared);
        Py_DECREF(tmp_OAuthFlow$class_creation_1__prepared);
        tmp_OAuthFlow$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_124;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_31 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_31 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_124 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_124 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto try_except_handler_148;
            }
            if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
                goto branch_yes_92;
            } else {
                goto branch_no_92;
            }
        }
        branch_yes_92:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_148;
        }
        branch_no_92:;
        {
            PyObject *tmp_assign_source_315;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_value_81;
            PyObject *tmp_tuple_element_177;
            PyObject *tmp_kwargs_value_81;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_98 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_177 = mod_consts[207];
            tmp_args_value_81 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_177 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_177);
            tmp_tuple_element_177 = locals_fastapi$openapi$models$$$class__48_OAuthFlow_316;
            PyTuple_SET_ITEM0(tmp_args_value_81, 2, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_81 = tmp_class_creation_30__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 316;
            tmp_assign_source_315 = CALL_FUNCTION(tstate, tmp_called_value_98, tmp_args_value_81, tmp_kwargs_value_81);
            Py_DECREF(tmp_args_value_81);
            if (tmp_assign_source_315 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto try_except_handler_148;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_315;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_311 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_311);
        goto try_return_handler_148;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_148:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316);
        locals_fastapi$openapi$models$$$class__48_OAuthFlow_316 = NULL;
        goto try_return_handler_147;
        // Exception handler code:
        try_except_handler_148:;
        exception_keeper_type_149 = exception_type;
        exception_keeper_value_149 = exception_value;
        exception_keeper_tb_149 = exception_tb;
        exception_keeper_lineno_149 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__48_OAuthFlow_316);
        locals_fastapi$openapi$models$$$class__48_OAuthFlow_316 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_149;
        exception_value = exception_keeper_value_149;
        exception_tb = exception_keeper_tb_149;
        exception_lineno = exception_keeper_lineno_149;

        goto try_except_handler_147;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_147:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_147:;
        exception_keeper_type_150 = exception_type;
        exception_keeper_value_150 = exception_value;
        exception_keeper_tb_150 = exception_tb;
        exception_keeper_lineno_150 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_150;
        exception_value = exception_keeper_value_150;
        exception_tb = exception_keeper_tb_150;
        exception_lineno = exception_keeper_lineno_150;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 316;
        goto try_except_handler_146;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[207], tmp_assign_source_311);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_146:;
    exception_keeper_type_151 = exception_type;
    exception_keeper_value_151 = exception_value;
    exception_keeper_tb_151 = exception_tb;
    exception_keeper_lineno_151 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_151;
    exception_value = exception_keeper_value_151;
    exception_tb = exception_keeper_tb_151;
    exception_lineno = exception_keeper_lineno_151;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_316;
        PyObject *tmp_tuple_element_178;
        tmp_tuple_element_178 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[207]);

        if (unlikely(tmp_tuple_element_178 == NULL)) {
            tmp_tuple_element_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[207]);
        }

        if (tmp_tuple_element_178 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_assign_source_316 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_316, 0, tmp_tuple_element_178);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_316;
    }
    {
        PyObject *tmp_assign_source_317;
        PyObject *tmp_dircall_arg1_31;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_31 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_31);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
            tmp_assign_source_317 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_317 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_317;
    }
    {
        PyObject *tmp_assign_source_318;
        tmp_assign_source_318 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_318;
    }
    {
        PyObject *tmp_assign_source_319;
        PyObject *tmp_metaclass_value_31;
        nuitka_bool tmp_condition_result_125;
        int tmp_truth_name_31;
        PyObject *tmp_type_arg_61;
        PyObject *tmp_expression_value_352;
        PyObject *tmp_subscript_value_200;
        PyObject *tmp_bases_value_31;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_31 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_condition_result_125 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_125 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_352 = tmp_class_creation_31__bases;
        tmp_subscript_value_200 = mod_consts[15];
        tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_352, tmp_subscript_value_200, 0);
        if (tmp_type_arg_61 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
        Py_DECREF(tmp_type_arg_61);
        if (tmp_metaclass_value_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        goto condexpr_end_33;
        condexpr_false_33:;
        tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_31);
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_31 = tmp_class_creation_31__bases;
        tmp_assign_source_319 = SELECT_METACLASS(tstate, tmp_metaclass_value_31, tmp_bases_value_31);
        Py_DECREF(tmp_metaclass_value_31);
        if (tmp_assign_source_319 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_319;
    }
    {
        bool tmp_condition_result_126;
        PyObject *tmp_expression_value_353;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_353 = tmp_class_creation_31__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_353, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_condition_result_126 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_126 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    {
        PyObject *tmp_assign_source_320;
        PyObject *tmp_called_value_99;
        PyObject *tmp_expression_value_354;
        PyObject *tmp_args_value_82;
        PyObject *tmp_tuple_element_179;
        PyObject *tmp_kwargs_value_82;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_354 = tmp_class_creation_31__metaclass;
        tmp_called_value_99 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_354, mod_consts[35]);
        if (tmp_called_value_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_tuple_element_179 = mod_consts[211];
        tmp_args_value_82 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_179);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_179 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_179);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_82 = tmp_class_creation_31__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 324;
        tmp_assign_source_320 = CALL_FUNCTION(tstate, tmp_called_value_99, tmp_args_value_82, tmp_kwargs_value_82);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_value_82);
        if (tmp_assign_source_320 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_320;
    }
    {
        bool tmp_condition_result_127;
        PyObject *tmp_operand_value_32;
        PyObject *tmp_expression_value_355;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_355 = tmp_class_creation_31__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_355, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_operand_value_32 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
        assert(!(tmp_res == -1));
        tmp_condition_result_127 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_127 != false) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        PyObject *tmp_raise_type_32;
        PyObject *tmp_raise_value_31;
        PyObject *tmp_mod_expr_left_31;
        PyObject *tmp_mod_expr_right_31;
        PyObject *tmp_tuple_element_180;
        PyObject *tmp_expression_value_356;
        PyObject *tmp_name_value_36;
        PyObject *tmp_default_value_31;
        tmp_raise_type_32 = PyExc_TypeError;
        tmp_mod_expr_left_31 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_356 = tmp_class_creation_31__metaclass;
        tmp_name_value_36 = mod_consts[38];
        tmp_default_value_31 = mod_consts[39];
        tmp_tuple_element_180 = BUILTIN_GETATTR(tstate, tmp_expression_value_356, tmp_name_value_36, tmp_default_value_31);
        if (tmp_tuple_element_180 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        tmp_mod_expr_right_31 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_357;
            PyObject *tmp_type_arg_62;
            PyTuple_SET_ITEM(tmp_mod_expr_right_31, 0, tmp_tuple_element_180);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_62 = tmp_class_creation_31__prepared;
            tmp_expression_value_357 = BUILTIN_TYPE1(tmp_type_arg_62);
            assert(!(tmp_expression_value_357 == NULL));
            tmp_tuple_element_180 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_357, mod_consts[38]);
            Py_DECREF(tmp_expression_value_357);
            if (tmp_tuple_element_180 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto tuple_build_exception_61;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_31, 1, tmp_tuple_element_180);
        }
        goto tuple_build_noexception_61;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_61:;
        Py_DECREF(tmp_mod_expr_right_31);
        goto try_except_handler_152;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_61:;
        tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_31, tmp_mod_expr_right_31);
        Py_DECREF(tmp_mod_expr_right_31);
        if (tmp_raise_value_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_152;
        }
        exception_type = tmp_raise_type_32;
        Py_INCREF(tmp_raise_type_32);
        exception_value = tmp_raise_value_31;
        exception_lineno = 324;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_152;
    }
    branch_no_94:;
    goto branch_end_93;
    branch_no_93:;
    {
        PyObject *tmp_assign_source_321;
        tmp_assign_source_321 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_321;
    }
    branch_end_93:;
    {
        PyObject *tmp_assign_source_322;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_50 = tmp_class_creation_31__prepared;
            locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_154;
        }
        tmp_dictset_value = mod_consts[211];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_154;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_154;
        }
        frame_21a2dc32c6852624402bab4898d21ddf_32 = MAKE_CLASS_FRAME(tstate, codeobj_21a2dc32c6852624402bab4898d21ddf, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_21a2dc32c6852624402bab4898d21ddf_32);
        assert(Py_REFCNT(frame_21a2dc32c6852624402bab4898d21ddf_32) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_136;
            PyObject *tmp_ass_subscribed_136;
            PyObject *tmp_ass_subscript_136;
            tmp_ass_subvalue_136 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[46]);

            if (tmp_ass_subvalue_136 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_136 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_136);
                } else {
                    goto frame_exception_exit_32;
                }
            }

            tmp_ass_subscribed_136 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_136 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_136);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 325;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }

            if (tmp_ass_subscribed_136 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_136);

                exception_lineno = 325;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            tmp_ass_subscript_136 = mod_consts[212];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_136, tmp_ass_subscript_136, tmp_ass_subvalue_136);
            Py_DECREF(tmp_ass_subscribed_136);
            Py_DECREF(tmp_ass_subvalue_136);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 325;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_31;
        frame_exception_exit_32:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_21a2dc32c6852624402bab4898d21ddf_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_21a2dc32c6852624402bab4898d21ddf_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_21a2dc32c6852624402bab4898d21ddf_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_21a2dc32c6852624402bab4898d21ddf_32,
            type_description_2,
            outline_49_var___class__
        );



        assertFrameObject(frame_21a2dc32c6852624402bab4898d21ddf_32);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_31;
        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_31:;

        goto try_except_handler_154;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_128;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_32 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_32 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_128 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_128 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto try_except_handler_154;
            }
            if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
                goto branch_yes_95;
            } else {
                goto branch_no_95;
            }
        }
        branch_yes_95:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_154;
        }
        branch_no_95:;
        {
            PyObject *tmp_assign_source_323;
            PyObject *tmp_called_value_100;
            PyObject *tmp_args_value_83;
            PyObject *tmp_tuple_element_181;
            PyObject *tmp_kwargs_value_83;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_100 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_181 = mod_consts[211];
            tmp_args_value_83 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_181 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_181);
            tmp_tuple_element_181 = locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324;
            PyTuple_SET_ITEM0(tmp_args_value_83, 2, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_83 = tmp_class_creation_31__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 324;
            tmp_assign_source_323 = CALL_FUNCTION(tstate, tmp_called_value_100, tmp_args_value_83, tmp_kwargs_value_83);
            Py_DECREF(tmp_args_value_83);
            if (tmp_assign_source_323 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto try_except_handler_154;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_323;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_322 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_322);
        goto try_return_handler_154;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_154:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324);
        locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324 = NULL;
        goto try_return_handler_153;
        // Exception handler code:
        try_except_handler_154:;
        exception_keeper_type_152 = exception_type;
        exception_keeper_value_152 = exception_value;
        exception_keeper_tb_152 = exception_tb;
        exception_keeper_lineno_152 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324);
        locals_fastapi$openapi$models$$$class__50_OAuthFlowImplicit_324 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;
        exception_lineno = exception_keeper_lineno_152;

        goto try_except_handler_153;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_153:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_153:;
        exception_keeper_type_153 = exception_type;
        exception_keeper_value_153 = exception_value;
        exception_keeper_tb_153 = exception_tb;
        exception_keeper_lineno_153 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_153;
        exception_value = exception_keeper_value_153;
        exception_tb = exception_keeper_tb_153;
        exception_lineno = exception_keeper_lineno_153;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 324;
        goto try_except_handler_152;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[211], tmp_assign_source_322);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_152:;
    exception_keeper_type_154 = exception_type;
    exception_keeper_value_154 = exception_value;
    exception_keeper_tb_154 = exception_tb;
    exception_keeper_lineno_154 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_154;
    exception_value = exception_keeper_value_154;
    exception_tb = exception_keeper_tb_154;
    exception_lineno = exception_keeper_lineno_154;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_324;
        PyObject *tmp_tuple_element_182;
        tmp_tuple_element_182 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[207]);

        if (unlikely(tmp_tuple_element_182 == NULL)) {
            tmp_tuple_element_182 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[207]);
        }

        if (tmp_tuple_element_182 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_assign_source_324 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_324, 0, tmp_tuple_element_182);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_324;
    }
    {
        PyObject *tmp_assign_source_325;
        PyObject *tmp_dircall_arg1_32;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_32 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_32);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
            tmp_assign_source_325 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_325 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_325;
    }
    {
        PyObject *tmp_assign_source_326;
        tmp_assign_source_326 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_326;
    }
    {
        PyObject *tmp_assign_source_327;
        PyObject *tmp_metaclass_value_32;
        nuitka_bool tmp_condition_result_129;
        int tmp_truth_name_32;
        PyObject *tmp_type_arg_63;
        PyObject *tmp_expression_value_358;
        PyObject *tmp_subscript_value_201;
        PyObject *tmp_bases_value_32;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_32 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_32 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_condition_result_129 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_129 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_34;
        } else {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_358 = tmp_class_creation_32__bases;
        tmp_subscript_value_201 = mod_consts[15];
        tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_358, tmp_subscript_value_201, 0);
        if (tmp_type_arg_63 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
        Py_DECREF(tmp_type_arg_63);
        if (tmp_metaclass_value_32 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_32);
        condexpr_end_34:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_32 = tmp_class_creation_32__bases;
        tmp_assign_source_327 = SELECT_METACLASS(tstate, tmp_metaclass_value_32, tmp_bases_value_32);
        Py_DECREF(tmp_metaclass_value_32);
        if (tmp_assign_source_327 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_327;
    }
    {
        bool tmp_condition_result_130;
        PyObject *tmp_expression_value_359;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_359 = tmp_class_creation_32__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_359, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_condition_result_130 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_130 != false) {
            goto branch_yes_96;
        } else {
            goto branch_no_96;
        }
    }
    branch_yes_96:;
    {
        PyObject *tmp_assign_source_328;
        PyObject *tmp_called_value_101;
        PyObject *tmp_expression_value_360;
        PyObject *tmp_args_value_84;
        PyObject *tmp_tuple_element_183;
        PyObject *tmp_kwargs_value_84;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_360 = tmp_class_creation_32__metaclass;
        tmp_called_value_101 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_360, mod_consts[35]);
        if (tmp_called_value_101 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_tuple_element_183 = mod_consts[213];
        tmp_args_value_84 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_183);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_183 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_183);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_84 = tmp_class_creation_32__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 328;
        tmp_assign_source_328 = CALL_FUNCTION(tstate, tmp_called_value_101, tmp_args_value_84, tmp_kwargs_value_84);
        Py_DECREF(tmp_called_value_101);
        Py_DECREF(tmp_args_value_84);
        if (tmp_assign_source_328 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_328;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_operand_value_33;
        PyObject *tmp_expression_value_361;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_361 = tmp_class_creation_32__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_361, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_operand_value_33 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_131 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    {
        PyObject *tmp_raise_type_33;
        PyObject *tmp_raise_value_32;
        PyObject *tmp_mod_expr_left_32;
        PyObject *tmp_mod_expr_right_32;
        PyObject *tmp_tuple_element_184;
        PyObject *tmp_expression_value_362;
        PyObject *tmp_name_value_37;
        PyObject *tmp_default_value_32;
        tmp_raise_type_33 = PyExc_TypeError;
        tmp_mod_expr_left_32 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_362 = tmp_class_creation_32__metaclass;
        tmp_name_value_37 = mod_consts[38];
        tmp_default_value_32 = mod_consts[39];
        tmp_tuple_element_184 = BUILTIN_GETATTR(tstate, tmp_expression_value_362, tmp_name_value_37, tmp_default_value_32);
        if (tmp_tuple_element_184 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        tmp_mod_expr_right_32 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_363;
            PyObject *tmp_type_arg_64;
            PyTuple_SET_ITEM(tmp_mod_expr_right_32, 0, tmp_tuple_element_184);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_64 = tmp_class_creation_32__prepared;
            tmp_expression_value_363 = BUILTIN_TYPE1(tmp_type_arg_64);
            assert(!(tmp_expression_value_363 == NULL));
            tmp_tuple_element_184 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_363, mod_consts[38]);
            Py_DECREF(tmp_expression_value_363);
            if (tmp_tuple_element_184 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto tuple_build_exception_62;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_32, 1, tmp_tuple_element_184);
        }
        goto tuple_build_noexception_62;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_62:;
        Py_DECREF(tmp_mod_expr_right_32);
        goto try_except_handler_155;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_62:;
        tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_32, tmp_mod_expr_right_32);
        Py_DECREF(tmp_mod_expr_right_32);
        if (tmp_raise_value_32 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_155;
        }
        exception_type = tmp_raise_type_33;
        Py_INCREF(tmp_raise_type_33);
        exception_value = tmp_raise_value_32;
        exception_lineno = 328;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_155;
    }
    branch_no_97:;
    goto branch_end_96;
    branch_no_96:;
    {
        PyObject *tmp_assign_source_329;
        tmp_assign_source_329 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_329;
    }
    branch_end_96:;
    {
        PyObject *tmp_assign_source_330;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_51 = tmp_class_creation_32__prepared;
            locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_157;
        }
        tmp_dictset_value = mod_consts[213];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_157;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_157;
        }
        frame_7036a73a4b1dc9d00155f5ec6292a40a_33 = MAKE_CLASS_FRAME(tstate, codeobj_7036a73a4b1dc9d00155f5ec6292a40a, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_7036a73a4b1dc9d00155f5ec6292a40a_33);
        assert(Py_REFCNT(frame_7036a73a4b1dc9d00155f5ec6292a40a_33) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_137;
            PyObject *tmp_ass_subscribed_137;
            PyObject *tmp_ass_subscript_137;
            tmp_ass_subvalue_137 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[46]);

            if (tmp_ass_subvalue_137 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_137 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_137);
                } else {
                    goto frame_exception_exit_33;
                }
            }

            tmp_ass_subscribed_137 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_137 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_137);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 329;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }

            if (tmp_ass_subscribed_137 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_137);

                exception_lineno = 329;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            tmp_ass_subscript_137 = mod_consts[214];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_137, tmp_ass_subscript_137, tmp_ass_subvalue_137);
            Py_DECREF(tmp_ass_subscribed_137);
            Py_DECREF(tmp_ass_subvalue_137);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 329;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_32;
        frame_exception_exit_33:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7036a73a4b1dc9d00155f5ec6292a40a_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7036a73a4b1dc9d00155f5ec6292a40a_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7036a73a4b1dc9d00155f5ec6292a40a_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7036a73a4b1dc9d00155f5ec6292a40a_33,
            type_description_2,
            outline_50_var___class__
        );



        assertFrameObject(frame_7036a73a4b1dc9d00155f5ec6292a40a_33);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_32;
        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_32:;

        goto try_except_handler_157;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_33 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_33 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_132 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_132 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto try_except_handler_157;
            }
            if (tmp_condition_result_132 == NUITKA_BOOL_TRUE) {
                goto branch_yes_98;
            } else {
                goto branch_no_98;
            }
        }
        branch_yes_98:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_157;
        }
        branch_no_98:;
        {
            PyObject *tmp_assign_source_331;
            PyObject *tmp_called_value_102;
            PyObject *tmp_args_value_85;
            PyObject *tmp_tuple_element_185;
            PyObject *tmp_kwargs_value_85;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_102 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_185 = mod_consts[213];
            tmp_args_value_85 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_185 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_185);
            tmp_tuple_element_185 = locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328;
            PyTuple_SET_ITEM0(tmp_args_value_85, 2, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_85 = tmp_class_creation_32__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 328;
            tmp_assign_source_331 = CALL_FUNCTION(tstate, tmp_called_value_102, tmp_args_value_85, tmp_kwargs_value_85);
            Py_DECREF(tmp_args_value_85);
            if (tmp_assign_source_331 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto try_except_handler_157;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_331;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_330 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_330);
        goto try_return_handler_157;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_157:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328);
        locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328 = NULL;
        goto try_return_handler_156;
        // Exception handler code:
        try_except_handler_157:;
        exception_keeper_type_155 = exception_type;
        exception_keeper_value_155 = exception_value;
        exception_keeper_tb_155 = exception_tb;
        exception_keeper_lineno_155 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328);
        locals_fastapi$openapi$models$$$class__51_OAuthFlowPassword_328 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;
        exception_lineno = exception_keeper_lineno_155;

        goto try_except_handler_156;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_156:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_156:;
        exception_keeper_type_156 = exception_type;
        exception_keeper_value_156 = exception_value;
        exception_keeper_tb_156 = exception_tb;
        exception_keeper_lineno_156 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_156;
        exception_value = exception_keeper_value_156;
        exception_tb = exception_keeper_tb_156;
        exception_lineno = exception_keeper_lineno_156;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 328;
        goto try_except_handler_155;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[213], tmp_assign_source_330);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_155:;
    exception_keeper_type_157 = exception_type;
    exception_keeper_value_157 = exception_value;
    exception_keeper_tb_157 = exception_tb;
    exception_keeper_lineno_157 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_157;
    exception_value = exception_keeper_value_157;
    exception_tb = exception_keeper_tb_157;
    exception_lineno = exception_keeper_lineno_157;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_332;
        PyObject *tmp_tuple_element_186;
        tmp_tuple_element_186 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[207]);

        if (unlikely(tmp_tuple_element_186 == NULL)) {
            tmp_tuple_element_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[207]);
        }

        if (tmp_tuple_element_186 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_assign_source_332 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_332, 0, tmp_tuple_element_186);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_332;
    }
    {
        PyObject *tmp_assign_source_333;
        PyObject *tmp_dircall_arg1_33;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_33 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_33);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
            tmp_assign_source_333 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_333 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_333;
    }
    {
        PyObject *tmp_assign_source_334;
        tmp_assign_source_334 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_334;
    }
    {
        PyObject *tmp_assign_source_335;
        PyObject *tmp_metaclass_value_33;
        nuitka_bool tmp_condition_result_133;
        int tmp_truth_name_33;
        PyObject *tmp_type_arg_65;
        PyObject *tmp_expression_value_364;
        PyObject *tmp_subscript_value_202;
        PyObject *tmp_bases_value_33;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_33 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_condition_result_133 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_133 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_364 = tmp_class_creation_33__bases;
        tmp_subscript_value_202 = mod_consts[15];
        tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_364, tmp_subscript_value_202, 0);
        if (tmp_type_arg_65 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
        Py_DECREF(tmp_type_arg_65);
        if (tmp_metaclass_value_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        goto condexpr_end_35;
        condexpr_false_35:;
        tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_33);
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_33 = tmp_class_creation_33__bases;
        tmp_assign_source_335 = SELECT_METACLASS(tstate, tmp_metaclass_value_33, tmp_bases_value_33);
        Py_DECREF(tmp_metaclass_value_33);
        if (tmp_assign_source_335 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_335;
    }
    {
        bool tmp_condition_result_134;
        PyObject *tmp_expression_value_365;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_365 = tmp_class_creation_33__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_365, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_condition_result_134 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_134 != false) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_assign_source_336;
        PyObject *tmp_called_value_103;
        PyObject *tmp_expression_value_366;
        PyObject *tmp_args_value_86;
        PyObject *tmp_tuple_element_187;
        PyObject *tmp_kwargs_value_86;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_366 = tmp_class_creation_33__metaclass;
        tmp_called_value_103 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_366, mod_consts[35]);
        if (tmp_called_value_103 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_tuple_element_187 = mod_consts[215];
        tmp_args_value_86 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_187);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_187 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_187);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_86 = tmp_class_creation_33__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 332;
        tmp_assign_source_336 = CALL_FUNCTION(tstate, tmp_called_value_103, tmp_args_value_86, tmp_kwargs_value_86);
        Py_DECREF(tmp_called_value_103);
        Py_DECREF(tmp_args_value_86);
        if (tmp_assign_source_336 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_336;
    }
    {
        bool tmp_condition_result_135;
        PyObject *tmp_operand_value_34;
        PyObject *tmp_expression_value_367;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_367 = tmp_class_creation_33__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_367, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_operand_value_34 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_135 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_135 != false) {
            goto branch_yes_100;
        } else {
            goto branch_no_100;
        }
    }
    branch_yes_100:;
    {
        PyObject *tmp_raise_type_34;
        PyObject *tmp_raise_value_33;
        PyObject *tmp_mod_expr_left_33;
        PyObject *tmp_mod_expr_right_33;
        PyObject *tmp_tuple_element_188;
        PyObject *tmp_expression_value_368;
        PyObject *tmp_name_value_38;
        PyObject *tmp_default_value_33;
        tmp_raise_type_34 = PyExc_TypeError;
        tmp_mod_expr_left_33 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_368 = tmp_class_creation_33__metaclass;
        tmp_name_value_38 = mod_consts[38];
        tmp_default_value_33 = mod_consts[39];
        tmp_tuple_element_188 = BUILTIN_GETATTR(tstate, tmp_expression_value_368, tmp_name_value_38, tmp_default_value_33);
        if (tmp_tuple_element_188 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        tmp_mod_expr_right_33 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_369;
            PyObject *tmp_type_arg_66;
            PyTuple_SET_ITEM(tmp_mod_expr_right_33, 0, tmp_tuple_element_188);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_66 = tmp_class_creation_33__prepared;
            tmp_expression_value_369 = BUILTIN_TYPE1(tmp_type_arg_66);
            assert(!(tmp_expression_value_369 == NULL));
            tmp_tuple_element_188 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_369, mod_consts[38]);
            Py_DECREF(tmp_expression_value_369);
            if (tmp_tuple_element_188 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto tuple_build_exception_63;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_33, 1, tmp_tuple_element_188);
        }
        goto tuple_build_noexception_63;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_63:;
        Py_DECREF(tmp_mod_expr_right_33);
        goto try_except_handler_158;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_63:;
        tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_33, tmp_mod_expr_right_33);
        Py_DECREF(tmp_mod_expr_right_33);
        if (tmp_raise_value_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_158;
        }
        exception_type = tmp_raise_type_34;
        Py_INCREF(tmp_raise_type_34);
        exception_value = tmp_raise_value_33;
        exception_lineno = 332;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_158;
    }
    branch_no_100:;
    goto branch_end_99;
    branch_no_99:;
    {
        PyObject *tmp_assign_source_337;
        tmp_assign_source_337 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_337;
    }
    branch_end_99:;
    {
        PyObject *tmp_assign_source_338;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_52 = tmp_class_creation_33__prepared;
            locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_160;
        }
        tmp_dictset_value = mod_consts[215];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_160;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_160;
        }
        frame_ebadb7363bdb9a15988de8b91424d005_34 = MAKE_CLASS_FRAME(tstate, codeobj_ebadb7363bdb9a15988de8b91424d005, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_ebadb7363bdb9a15988de8b91424d005_34);
        assert(Py_REFCNT(frame_ebadb7363bdb9a15988de8b91424d005_34) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_138;
            PyObject *tmp_ass_subscribed_138;
            PyObject *tmp_ass_subscript_138;
            tmp_ass_subvalue_138 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[46]);

            if (tmp_ass_subvalue_138 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_138 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_138);
                } else {
                    goto frame_exception_exit_34;
                }
            }

            tmp_ass_subscribed_138 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_138 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_138);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 333;
                type_description_2 = "o";
                goto frame_exception_exit_34;
            }

            if (tmp_ass_subscribed_138 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_138);

                exception_lineno = 333;
                type_description_2 = "o";
                goto frame_exception_exit_34;
            }
            tmp_ass_subscript_138 = mod_consts[214];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_138, tmp_ass_subscript_138, tmp_ass_subvalue_138);
            Py_DECREF(tmp_ass_subscribed_138);
            Py_DECREF(tmp_ass_subvalue_138);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 333;
                type_description_2 = "o";
                goto frame_exception_exit_34;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_33;
        frame_exception_exit_34:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ebadb7363bdb9a15988de8b91424d005_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ebadb7363bdb9a15988de8b91424d005_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ebadb7363bdb9a15988de8b91424d005_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ebadb7363bdb9a15988de8b91424d005_34,
            type_description_2,
            outline_51_var___class__
        );



        assertFrameObject(frame_ebadb7363bdb9a15988de8b91424d005_34);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_33;
        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_33:;

        goto try_except_handler_160;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_136;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_34 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_34 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_136 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_136 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_160;
            }
            if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
                goto branch_yes_101;
            } else {
                goto branch_no_101;
            }
        }
        branch_yes_101:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_160;
        }
        branch_no_101:;
        {
            PyObject *tmp_assign_source_339;
            PyObject *tmp_called_value_104;
            PyObject *tmp_args_value_87;
            PyObject *tmp_tuple_element_189;
            PyObject *tmp_kwargs_value_87;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_104 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_189 = mod_consts[215];
            tmp_args_value_87 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_189 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_189);
            tmp_tuple_element_189 = locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332;
            PyTuple_SET_ITEM0(tmp_args_value_87, 2, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_87 = tmp_class_creation_33__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 332;
            tmp_assign_source_339 = CALL_FUNCTION(tstate, tmp_called_value_104, tmp_args_value_87, tmp_kwargs_value_87);
            Py_DECREF(tmp_args_value_87);
            if (tmp_assign_source_339 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_160;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_339;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_338 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_338);
        goto try_return_handler_160;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_160:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332);
        locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332 = NULL;
        goto try_return_handler_159;
        // Exception handler code:
        try_except_handler_160:;
        exception_keeper_type_158 = exception_type;
        exception_keeper_value_158 = exception_value;
        exception_keeper_tb_158 = exception_tb;
        exception_keeper_lineno_158 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332);
        locals_fastapi$openapi$models$$$class__52_OAuthFlowClientCredentials_332 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_158;
        exception_value = exception_keeper_value_158;
        exception_tb = exception_keeper_tb_158;
        exception_lineno = exception_keeper_lineno_158;

        goto try_except_handler_159;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_159:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_159:;
        exception_keeper_type_159 = exception_type;
        exception_keeper_value_159 = exception_value;
        exception_keeper_tb_159 = exception_tb;
        exception_keeper_lineno_159 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_159;
        exception_value = exception_keeper_value_159;
        exception_tb = exception_keeper_tb_159;
        exception_lineno = exception_keeper_lineno_159;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 332;
        goto try_except_handler_158;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[215], tmp_assign_source_338);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_158:;
    exception_keeper_type_160 = exception_type;
    exception_keeper_value_160 = exception_value;
    exception_keeper_tb_160 = exception_tb;
    exception_keeper_lineno_160 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_160;
    exception_value = exception_keeper_value_160;
    exception_tb = exception_keeper_tb_160;
    exception_lineno = exception_keeper_lineno_160;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_340;
        PyObject *tmp_tuple_element_190;
        tmp_tuple_element_190 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[207]);

        if (unlikely(tmp_tuple_element_190 == NULL)) {
            tmp_tuple_element_190 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[207]);
        }

        if (tmp_tuple_element_190 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_assign_source_340 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_340, 0, tmp_tuple_element_190);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_340;
    }
    {
        PyObject *tmp_assign_source_341;
        PyObject *tmp_dircall_arg1_34;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_34 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_34);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
            tmp_assign_source_341 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_341 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_341;
    }
    {
        PyObject *tmp_assign_source_342;
        tmp_assign_source_342 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_342;
    }
    {
        PyObject *tmp_assign_source_343;
        PyObject *tmp_metaclass_value_34;
        nuitka_bool tmp_condition_result_137;
        int tmp_truth_name_34;
        PyObject *tmp_type_arg_67;
        PyObject *tmp_expression_value_370;
        PyObject *tmp_subscript_value_203;
        PyObject *tmp_bases_value_34;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_34 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_34 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_condition_result_137 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_137 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_370 = tmp_class_creation_34__bases;
        tmp_subscript_value_203 = mod_consts[15];
        tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_370, tmp_subscript_value_203, 0);
        if (tmp_type_arg_67 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
        Py_DECREF(tmp_type_arg_67);
        if (tmp_metaclass_value_34 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_34);
        condexpr_end_36:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_34 = tmp_class_creation_34__bases;
        tmp_assign_source_343 = SELECT_METACLASS(tstate, tmp_metaclass_value_34, tmp_bases_value_34);
        Py_DECREF(tmp_metaclass_value_34);
        if (tmp_assign_source_343 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_343;
    }
    {
        bool tmp_condition_result_138;
        PyObject *tmp_expression_value_371;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_371 = tmp_class_creation_34__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_371, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_condition_result_138 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_138 != false) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        PyObject *tmp_assign_source_344;
        PyObject *tmp_called_value_105;
        PyObject *tmp_expression_value_372;
        PyObject *tmp_args_value_88;
        PyObject *tmp_tuple_element_191;
        PyObject *tmp_kwargs_value_88;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_372 = tmp_class_creation_34__metaclass;
        tmp_called_value_105 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_372, mod_consts[35]);
        if (tmp_called_value_105 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_tuple_element_191 = mod_consts[216];
        tmp_args_value_88 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_191);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_191 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_191);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_88 = tmp_class_creation_34__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 336;
        tmp_assign_source_344 = CALL_FUNCTION(tstate, tmp_called_value_105, tmp_args_value_88, tmp_kwargs_value_88);
        Py_DECREF(tmp_called_value_105);
        Py_DECREF(tmp_args_value_88);
        if (tmp_assign_source_344 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_344;
    }
    {
        bool tmp_condition_result_139;
        PyObject *tmp_operand_value_35;
        PyObject *tmp_expression_value_373;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_373 = tmp_class_creation_34__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_373, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_operand_value_35 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
        assert(!(tmp_res == -1));
        tmp_condition_result_139 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_139 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_raise_type_35;
        PyObject *tmp_raise_value_34;
        PyObject *tmp_mod_expr_left_34;
        PyObject *tmp_mod_expr_right_34;
        PyObject *tmp_tuple_element_192;
        PyObject *tmp_expression_value_374;
        PyObject *tmp_name_value_39;
        PyObject *tmp_default_value_34;
        tmp_raise_type_35 = PyExc_TypeError;
        tmp_mod_expr_left_34 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_374 = tmp_class_creation_34__metaclass;
        tmp_name_value_39 = mod_consts[38];
        tmp_default_value_34 = mod_consts[39];
        tmp_tuple_element_192 = BUILTIN_GETATTR(tstate, tmp_expression_value_374, tmp_name_value_39, tmp_default_value_34);
        if (tmp_tuple_element_192 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        tmp_mod_expr_right_34 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_375;
            PyObject *tmp_type_arg_68;
            PyTuple_SET_ITEM(tmp_mod_expr_right_34, 0, tmp_tuple_element_192);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_68 = tmp_class_creation_34__prepared;
            tmp_expression_value_375 = BUILTIN_TYPE1(tmp_type_arg_68);
            assert(!(tmp_expression_value_375 == NULL));
            tmp_tuple_element_192 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_375, mod_consts[38]);
            Py_DECREF(tmp_expression_value_375);
            if (tmp_tuple_element_192 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_34, 1, tmp_tuple_element_192);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_mod_expr_right_34);
        goto try_except_handler_161;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_34, tmp_mod_expr_right_34);
        Py_DECREF(tmp_mod_expr_right_34);
        if (tmp_raise_value_34 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_161;
        }
        exception_type = tmp_raise_type_35;
        Py_INCREF(tmp_raise_type_35);
        exception_value = tmp_raise_value_34;
        exception_lineno = 336;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_161;
    }
    branch_no_103:;
    goto branch_end_102;
    branch_no_102:;
    {
        PyObject *tmp_assign_source_345;
        tmp_assign_source_345 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_345;
    }
    branch_end_102:;
    {
        PyObject *tmp_assign_source_346;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_53 = tmp_class_creation_34__prepared;
            locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_163;
        }
        tmp_dictset_value = mod_consts[216];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_163;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_163;
        }
        frame_40c1bbe8ed4ce3289e98e17510f17d65_35 = MAKE_CLASS_FRAME(tstate, codeobj_40c1bbe8ed4ce3289e98e17510f17d65, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_40c1bbe8ed4ce3289e98e17510f17d65_35);
        assert(Py_REFCNT(frame_40c1bbe8ed4ce3289e98e17510f17d65_35) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_139;
            PyObject *tmp_ass_subscribed_139;
            PyObject *tmp_ass_subscript_139;
            tmp_ass_subvalue_139 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[46]);

            if (tmp_ass_subvalue_139 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_139 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_139);
                } else {
                    goto frame_exception_exit_35;
                }
            }

            tmp_ass_subscribed_139 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_139 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_139);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 337;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }

            if (tmp_ass_subscribed_139 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_139);

                exception_lineno = 337;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }
            tmp_ass_subscript_139 = mod_consts[212];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_139, tmp_ass_subscript_139, tmp_ass_subvalue_139);
            Py_DECREF(tmp_ass_subscribed_139);
            Py_DECREF(tmp_ass_subvalue_139);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 337;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }
        }
        {
            PyObject *tmp_ass_subvalue_140;
            PyObject *tmp_ass_subscribed_140;
            PyObject *tmp_ass_subscript_140;
            tmp_ass_subvalue_140 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[46]);

            if (tmp_ass_subvalue_140 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_140 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_140);
                } else {
                    goto frame_exception_exit_35;
                }
            }

            tmp_ass_subscribed_140 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_140 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_140);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 338;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }

            if (tmp_ass_subscribed_140 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_140);

                exception_lineno = 338;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }
            tmp_ass_subscript_140 = mod_consts[214];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_140, tmp_ass_subscript_140, tmp_ass_subvalue_140);
            Py_DECREF(tmp_ass_subscribed_140);
            Py_DECREF(tmp_ass_subvalue_140);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 338;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_34;
        frame_exception_exit_35:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_40c1bbe8ed4ce3289e98e17510f17d65_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_40c1bbe8ed4ce3289e98e17510f17d65_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_40c1bbe8ed4ce3289e98e17510f17d65_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_40c1bbe8ed4ce3289e98e17510f17d65_35,
            type_description_2,
            outline_52_var___class__
        );



        assertFrameObject(frame_40c1bbe8ed4ce3289e98e17510f17d65_35);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_34;
        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_163;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_140;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_35 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_35 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_140 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_140 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto try_except_handler_163;
            }
            if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
                goto branch_yes_104;
            } else {
                goto branch_no_104;
            }
        }
        branch_yes_104:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_163;
        }
        branch_no_104:;
        {
            PyObject *tmp_assign_source_347;
            PyObject *tmp_called_value_106;
            PyObject *tmp_args_value_89;
            PyObject *tmp_tuple_element_193;
            PyObject *tmp_kwargs_value_89;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_106 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_193 = mod_consts[216];
            tmp_args_value_89 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_193 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_193);
            tmp_tuple_element_193 = locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336;
            PyTuple_SET_ITEM0(tmp_args_value_89, 2, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_89 = tmp_class_creation_34__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 336;
            tmp_assign_source_347 = CALL_FUNCTION(tstate, tmp_called_value_106, tmp_args_value_89, tmp_kwargs_value_89);
            Py_DECREF(tmp_args_value_89);
            if (tmp_assign_source_347 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto try_except_handler_163;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_347;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_346 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_346);
        goto try_return_handler_163;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_163:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336);
        locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336 = NULL;
        goto try_return_handler_162;
        // Exception handler code:
        try_except_handler_163:;
        exception_keeper_type_161 = exception_type;
        exception_keeper_value_161 = exception_value;
        exception_keeper_tb_161 = exception_tb;
        exception_keeper_lineno_161 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336);
        locals_fastapi$openapi$models$$$class__53_OAuthFlowAuthorizationCode_336 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_161;
        exception_value = exception_keeper_value_161;
        exception_tb = exception_keeper_tb_161;
        exception_lineno = exception_keeper_lineno_161;

        goto try_except_handler_162;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_162:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_162:;
        exception_keeper_type_162 = exception_type;
        exception_keeper_value_162 = exception_value;
        exception_keeper_tb_162 = exception_tb;
        exception_keeper_lineno_162 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_162;
        exception_value = exception_keeper_value_162;
        exception_tb = exception_keeper_tb_162;
        exception_lineno = exception_keeper_lineno_162;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 336;
        goto try_except_handler_161;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[216], tmp_assign_source_346);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_161:;
    exception_keeper_type_163 = exception_type;
    exception_keeper_value_163 = exception_value;
    exception_keeper_tb_163 = exception_tb;
    exception_keeper_lineno_163 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_163;
    exception_value = exception_keeper_value_163;
    exception_tb = exception_keeper_tb_163;
    exception_lineno = exception_keeper_lineno_163;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_348;
        PyObject *tmp_tuple_element_194;
        tmp_tuple_element_194 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_194 == NULL)) {
            tmp_tuple_element_194 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_194 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_assign_source_348 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_348, 0, tmp_tuple_element_194);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_348;
    }
    {
        PyObject *tmp_assign_source_349;
        PyObject *tmp_dircall_arg1_35;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_35 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_35);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
            tmp_assign_source_349 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_349 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_349;
    }
    {
        PyObject *tmp_assign_source_350;
        tmp_assign_source_350 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_350;
    }
    {
        PyObject *tmp_assign_source_351;
        PyObject *tmp_metaclass_value_35;
        nuitka_bool tmp_condition_result_141;
        int tmp_truth_name_35;
        PyObject *tmp_type_arg_69;
        PyObject *tmp_expression_value_376;
        PyObject *tmp_subscript_value_204;
        PyObject *tmp_bases_value_35;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_35 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_35 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_condition_result_141 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_141 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_376 = tmp_class_creation_35__bases;
        tmp_subscript_value_204 = mod_consts[15];
        tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_376, tmp_subscript_value_204, 0);
        if (tmp_type_arg_69 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
        Py_DECREF(tmp_type_arg_69);
        if (tmp_metaclass_value_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        goto condexpr_end_37;
        condexpr_false_37:;
        tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_35);
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_35 = tmp_class_creation_35__bases;
        tmp_assign_source_351 = SELECT_METACLASS(tstate, tmp_metaclass_value_35, tmp_bases_value_35);
        Py_DECREF(tmp_metaclass_value_35);
        if (tmp_assign_source_351 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_351;
    }
    {
        bool tmp_condition_result_142;
        PyObject *tmp_expression_value_377;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_377 = tmp_class_creation_35__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_377, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_condition_result_142 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_142 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    {
        PyObject *tmp_assign_source_352;
        PyObject *tmp_called_value_107;
        PyObject *tmp_expression_value_378;
        PyObject *tmp_args_value_90;
        PyObject *tmp_tuple_element_195;
        PyObject *tmp_kwargs_value_90;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_378 = tmp_class_creation_35__metaclass;
        tmp_called_value_107 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_378, mod_consts[35]);
        if (tmp_called_value_107 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_tuple_element_195 = mod_consts[217];
        tmp_args_value_90 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_195);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_195 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_195);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_90 = tmp_class_creation_35__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 341;
        tmp_assign_source_352 = CALL_FUNCTION(tstate, tmp_called_value_107, tmp_args_value_90, tmp_kwargs_value_90);
        Py_DECREF(tmp_called_value_107);
        Py_DECREF(tmp_args_value_90);
        if (tmp_assign_source_352 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_352;
    }
    {
        bool tmp_condition_result_143;
        PyObject *tmp_operand_value_36;
        PyObject *tmp_expression_value_379;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_379 = tmp_class_creation_35__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_379, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_operand_value_36 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_143 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_143 != false) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_raise_type_36;
        PyObject *tmp_raise_value_35;
        PyObject *tmp_mod_expr_left_35;
        PyObject *tmp_mod_expr_right_35;
        PyObject *tmp_tuple_element_196;
        PyObject *tmp_expression_value_380;
        PyObject *tmp_name_value_40;
        PyObject *tmp_default_value_35;
        tmp_raise_type_36 = PyExc_TypeError;
        tmp_mod_expr_left_35 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_380 = tmp_class_creation_35__metaclass;
        tmp_name_value_40 = mod_consts[38];
        tmp_default_value_35 = mod_consts[39];
        tmp_tuple_element_196 = BUILTIN_GETATTR(tstate, tmp_expression_value_380, tmp_name_value_40, tmp_default_value_35);
        if (tmp_tuple_element_196 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        tmp_mod_expr_right_35 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_381;
            PyObject *tmp_type_arg_70;
            PyTuple_SET_ITEM(tmp_mod_expr_right_35, 0, tmp_tuple_element_196);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_70 = tmp_class_creation_35__prepared;
            tmp_expression_value_381 = BUILTIN_TYPE1(tmp_type_arg_70);
            assert(!(tmp_expression_value_381 == NULL));
            tmp_tuple_element_196 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_381, mod_consts[38]);
            Py_DECREF(tmp_expression_value_381);
            if (tmp_tuple_element_196 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto tuple_build_exception_65;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_35, 1, tmp_tuple_element_196);
        }
        goto tuple_build_noexception_65;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_65:;
        Py_DECREF(tmp_mod_expr_right_35);
        goto try_except_handler_164;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_65:;
        tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_35, tmp_mod_expr_right_35);
        Py_DECREF(tmp_mod_expr_right_35);
        if (tmp_raise_value_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_164;
        }
        exception_type = tmp_raise_type_36;
        Py_INCREF(tmp_raise_type_36);
        exception_value = tmp_raise_value_35;
        exception_lineno = 341;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_164;
    }
    branch_no_106:;
    goto branch_end_105;
    branch_no_105:;
    {
        PyObject *tmp_assign_source_353;
        tmp_assign_source_353 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_353;
    }
    branch_end_105:;
    {
        PyObject *tmp_assign_source_354;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_54 = tmp_class_creation_35__prepared;
            locals_fastapi$openapi$models$$$class__54_OAuthFlows_341 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_166;
        }
        tmp_dictset_value = mod_consts[217];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_166;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_166;
        }
        frame_e49298b42ee48632b79c94cf0b931db0_36 = MAKE_CLASS_FRAME(tstate, codeobj_e49298b42ee48632b79c94cf0b931db0, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e49298b42ee48632b79c94cf0b931db0_36);
        assert(Py_REFCNT(frame_e49298b42ee48632b79c94cf0b931db0_36) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[218], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 342;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }
        {
            PyObject *tmp_ass_subvalue_141;
            PyObject *tmp_expression_value_382;
            PyObject *tmp_subscript_value_205;
            PyObject *tmp_ass_subscribed_141;
            PyObject *tmp_ass_subscript_141;
            tmp_expression_value_382 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[22]);

            if (tmp_expression_value_382 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_382 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_382 == NULL)) {
                        tmp_expression_value_382 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_382 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 342;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_expression_value_382);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_subscript_value_205 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[211]);

            if (tmp_subscript_value_205 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_205 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[211]);

                    if (unlikely(tmp_subscript_value_205 == NULL)) {
                        tmp_subscript_value_205 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[211]);
                    }

                    if (tmp_subscript_value_205 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_382);

                        exception_lineno = 342;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_subscript_value_205);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_ass_subvalue_141 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_382, tmp_subscript_value_205);
            Py_DECREF(tmp_expression_value_382);
            Py_DECREF(tmp_subscript_value_205);
            if (tmp_ass_subvalue_141 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscribed_141 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_141 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_141);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }

            if (tmp_ass_subscribed_141 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_141);

                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscript_141 = mod_consts[218];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_141, tmp_ass_subscript_141, tmp_ass_subvalue_141);
            Py_DECREF(tmp_ass_subscribed_141);
            Py_DECREF(tmp_ass_subvalue_141);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[219], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }
        {
            PyObject *tmp_ass_subvalue_142;
            PyObject *tmp_expression_value_383;
            PyObject *tmp_subscript_value_206;
            PyObject *tmp_ass_subscribed_142;
            PyObject *tmp_ass_subscript_142;
            tmp_expression_value_383 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[22]);

            if (tmp_expression_value_383 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_383 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_383 == NULL)) {
                        tmp_expression_value_383 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_383 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 343;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_expression_value_383);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_subscript_value_206 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[213]);

            if (tmp_subscript_value_206 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_206 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[213]);

                    if (unlikely(tmp_subscript_value_206 == NULL)) {
                        tmp_subscript_value_206 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[213]);
                    }

                    if (tmp_subscript_value_206 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_383);

                        exception_lineno = 343;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_subscript_value_206);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_ass_subvalue_142 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_383, tmp_subscript_value_206);
            Py_DECREF(tmp_expression_value_383);
            Py_DECREF(tmp_subscript_value_206);
            if (tmp_ass_subvalue_142 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscribed_142 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_142 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_142);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }

            if (tmp_ass_subscribed_142 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_142);

                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscript_142 = mod_consts[219];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_142, tmp_ass_subscript_142, tmp_ass_subvalue_142);
            Py_DECREF(tmp_ass_subscribed_142);
            Py_DECREF(tmp_ass_subvalue_142);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[220], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }
        {
            PyObject *tmp_ass_subvalue_143;
            PyObject *tmp_expression_value_384;
            PyObject *tmp_subscript_value_207;
            PyObject *tmp_ass_subscribed_143;
            PyObject *tmp_ass_subscript_143;
            tmp_expression_value_384 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[22]);

            if (tmp_expression_value_384 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_384 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_384 == NULL)) {
                        tmp_expression_value_384 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_384 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 344;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_expression_value_384);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_subscript_value_207 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[215]);

            if (tmp_subscript_value_207 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_207 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[215]);

                    if (unlikely(tmp_subscript_value_207 == NULL)) {
                        tmp_subscript_value_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[215]);
                    }

                    if (tmp_subscript_value_207 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_384);

                        exception_lineno = 344;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_subscript_value_207);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_ass_subvalue_143 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_384, tmp_subscript_value_207);
            Py_DECREF(tmp_expression_value_384);
            Py_DECREF(tmp_subscript_value_207);
            if (tmp_ass_subvalue_143 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 344;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscribed_143 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_143 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_143);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 344;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }

            if (tmp_ass_subscribed_143 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_143);

                exception_lineno = 344;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscript_143 = mod_consts[220];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_143, tmp_ass_subscript_143, tmp_ass_subvalue_143);
            Py_DECREF(tmp_ass_subscribed_143);
            Py_DECREF(tmp_ass_subvalue_143);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 344;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[221], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }
        {
            PyObject *tmp_ass_subvalue_144;
            PyObject *tmp_expression_value_385;
            PyObject *tmp_subscript_value_208;
            PyObject *tmp_ass_subscribed_144;
            PyObject *tmp_ass_subscript_144;
            tmp_expression_value_385 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[22]);

            if (tmp_expression_value_385 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_385 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_385 == NULL)) {
                        tmp_expression_value_385 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_385 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 345;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_expression_value_385);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_subscript_value_208 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[216]);

            if (tmp_subscript_value_208 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_208 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[216]);

                    if (unlikely(tmp_subscript_value_208 == NULL)) {
                        tmp_subscript_value_208 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[216]);
                    }

                    if (tmp_subscript_value_208 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_385);

                        exception_lineno = 345;
                        type_description_2 = "o";
                        goto frame_exception_exit_36;
                    }
                    Py_INCREF(tmp_subscript_value_208);
                } else {
                    goto frame_exception_exit_36;
                }
            }

            tmp_ass_subvalue_144 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_385, tmp_subscript_value_208);
            Py_DECREF(tmp_expression_value_385);
            Py_DECREF(tmp_subscript_value_208);
            if (tmp_ass_subvalue_144 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 345;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscribed_144 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_144 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_144);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 345;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }

            if (tmp_ass_subscribed_144 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_144);

                exception_lineno = 345;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
            tmp_ass_subscript_144 = mod_consts[221];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_144, tmp_ass_subscript_144, tmp_ass_subvalue_144);
            Py_DECREF(tmp_ass_subscribed_144);
            Py_DECREF(tmp_ass_subvalue_144);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 345;
                type_description_2 = "o";
                goto frame_exception_exit_36;
            }
        }
        {
            PyObject *tmp_assign_source_355;
            tmp_assign_source_355 = MAKE_DICT_EMPTY();
            assert(tmp_OAuthFlows$class_creation_1__class_decl_dict == NULL);
            tmp_OAuthFlows$class_creation_1__class_decl_dict = tmp_assign_source_355;
        }
        {
            PyObject *tmp_assign_source_356;
            tmp_assign_source_356 = MAKE_DICT_EMPTY();
            assert(tmp_OAuthFlows$class_creation_1__prepared == NULL);
            tmp_OAuthFlows$class_creation_1__prepared = tmp_assign_source_356;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__prepared);
            tmp_set_locals_55 = tmp_OAuthFlows$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__55_Config_347 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__55_Config_347, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[222];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__55_Config_347, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__55_Config_347, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_357;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_91;
            PyObject *tmp_tuple_element_197;
            PyObject *tmp_kwargs_value_91;
            tmp_called_value_108 = (PyObject *)&PyType_Type;
            tmp_tuple_element_197 = mod_consts[57];
            tmp_args_value_91 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_197);
            tmp_tuple_element_197 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_197);
            tmp_tuple_element_197 = locals_fastapi$openapi$models$$$class__55_Config_347;
            PyTuple_SET_ITEM0(tmp_args_value_91, 2, tmp_tuple_element_197);
            CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__class_decl_dict);
            tmp_kwargs_value_91 = tmp_OAuthFlows$class_creation_1__class_decl_dict;
            frame_e49298b42ee48632b79c94cf0b931db0_36->m_frame.f_lineno = 347;
            tmp_assign_source_357 = CALL_FUNCTION(tstate, tmp_called_value_108, tmp_args_value_91, tmp_kwargs_value_91);
            Py_DECREF(tmp_args_value_91);
            if (tmp_assign_source_357 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;
                type_description_2 = "o";
                goto try_except_handler_169;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_357;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_dictset_value = outline_54_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_169;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_169:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__55_Config_347);
        locals_fastapi$openapi$models$$$class__55_Config_347 = NULL;
        goto try_return_handler_168;
        // Exception handler code:
        try_except_handler_169:;
        exception_keeper_type_164 = exception_type;
        exception_keeper_value_164 = exception_value;
        exception_keeper_tb_164 = exception_tb;
        exception_keeper_lineno_164 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__55_Config_347);
        locals_fastapi$openapi$models$$$class__55_Config_347 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_164;
        exception_value = exception_keeper_value_164;
        exception_tb = exception_keeper_tb_164;
        exception_lineno = exception_keeper_lineno_164;

        goto try_except_handler_168;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_168:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_168:;
        exception_keeper_type_165 = exception_type;
        exception_keeper_value_165 = exception_value;
        exception_keeper_tb_165 = exception_tb;
        exception_keeper_lineno_165 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_165;
        exception_value = exception_keeper_value_165;
        exception_tb = exception_keeper_tb_165;
        exception_lineno = exception_keeper_lineno_165;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 347;
        goto try_except_handler_167;
        outline_result_55:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;
            type_description_2 = "o";
            goto try_except_handler_167;
        }
        goto try_end_58;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OAuthFlows$class_creation_1__class_decl_dict);
        tmp_OAuthFlows$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__prepared);
        Py_DECREF(tmp_OAuthFlows$class_creation_1__prepared);
        tmp_OAuthFlows$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto frame_exception_exit_36;
        // End of try:
        try_end_58:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_35;
        frame_exception_exit_36:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e49298b42ee48632b79c94cf0b931db0_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e49298b42ee48632b79c94cf0b931db0_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e49298b42ee48632b79c94cf0b931db0_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e49298b42ee48632b79c94cf0b931db0_36,
            type_description_2,
            outline_53_var___class__
        );



        assertFrameObject(frame_e49298b42ee48632b79c94cf0b931db0_36);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_35;
        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_166;
        skip_nested_handling_35:;
        CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OAuthFlows$class_creation_1__class_decl_dict);
        tmp_OAuthFlows$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OAuthFlows$class_creation_1__prepared);
        Py_DECREF(tmp_OAuthFlows$class_creation_1__prepared);
        tmp_OAuthFlows$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_144 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_144 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto try_except_handler_166;
            }
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto branch_yes_107;
            } else {
                goto branch_no_107;
            }
        }
        branch_yes_107:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_166;
        }
        branch_no_107:;
        {
            PyObject *tmp_assign_source_358;
            PyObject *tmp_called_value_109;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_198;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_109 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_198 = mod_consts[217];
            tmp_args_value_92 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_198 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_198);
            tmp_tuple_element_198 = locals_fastapi$openapi$models$$$class__54_OAuthFlows_341;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_35__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 341;
            tmp_assign_source_358 = CALL_FUNCTION(tstate, tmp_called_value_109, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_358 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto try_except_handler_166;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_358;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_354 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_354);
        goto try_return_handler_166;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_166:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341);
        locals_fastapi$openapi$models$$$class__54_OAuthFlows_341 = NULL;
        goto try_return_handler_165;
        // Exception handler code:
        try_except_handler_166:;
        exception_keeper_type_167 = exception_type;
        exception_keeper_value_167 = exception_value;
        exception_keeper_tb_167 = exception_tb;
        exception_keeper_lineno_167 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__54_OAuthFlows_341);
        locals_fastapi$openapi$models$$$class__54_OAuthFlows_341 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_167;
        exception_value = exception_keeper_value_167;
        exception_tb = exception_keeper_tb_167;
        exception_lineno = exception_keeper_lineno_167;

        goto try_except_handler_165;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_165:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_165:;
        exception_keeper_type_168 = exception_type;
        exception_keeper_value_168 = exception_value;
        exception_keeper_tb_168 = exception_tb;
        exception_keeper_lineno_168 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_168;
        exception_value = exception_keeper_value_168;
        exception_tb = exception_keeper_tb_168;
        exception_lineno = exception_keeper_lineno_168;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 341;
        goto try_except_handler_164;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[217], tmp_assign_source_354);
    }
    goto try_end_59;
    // Exception handler code:
    try_except_handler_164:;
    exception_keeper_type_169 = exception_type;
    exception_keeper_value_169 = exception_value;
    exception_keeper_tb_169 = exception_tb;
    exception_keeper_lineno_169 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_169;
    exception_value = exception_keeper_value_169;
    exception_tb = exception_keeper_tb_169;
    exception_lineno = exception_keeper_lineno_169;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_359;
        PyObject *tmp_tuple_element_199;
        tmp_tuple_element_199 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[195]);

        if (unlikely(tmp_tuple_element_199 == NULL)) {
            tmp_tuple_element_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[195]);
        }

        if (tmp_tuple_element_199 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_assign_source_359 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_359, 0, tmp_tuple_element_199);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_359;
    }
    {
        PyObject *tmp_assign_source_360;
        PyObject *tmp_dircall_arg1_36;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_36 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_36);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
            tmp_assign_source_360 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_360 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_360;
    }
    {
        PyObject *tmp_assign_source_361;
        tmp_assign_source_361 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_361;
    }
    {
        PyObject *tmp_assign_source_362;
        PyObject *tmp_metaclass_value_36;
        nuitka_bool tmp_condition_result_145;
        int tmp_truth_name_36;
        PyObject *tmp_type_arg_71;
        PyObject *tmp_expression_value_386;
        PyObject *tmp_subscript_value_209;
        PyObject *tmp_bases_value_36;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_36 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_condition_result_145 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_145 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_386 = tmp_class_creation_36__bases;
        tmp_subscript_value_209 = mod_consts[15];
        tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_386, tmp_subscript_value_209, 0);
        if (tmp_type_arg_71 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
        Py_DECREF(tmp_type_arg_71);
        if (tmp_metaclass_value_36 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_36);
        condexpr_end_38:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_36 = tmp_class_creation_36__bases;
        tmp_assign_source_362 = SELECT_METACLASS(tstate, tmp_metaclass_value_36, tmp_bases_value_36);
        Py_DECREF(tmp_metaclass_value_36);
        if (tmp_assign_source_362 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_362;
    }
    {
        bool tmp_condition_result_146;
        PyObject *tmp_expression_value_387;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_387 = tmp_class_creation_36__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_387, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_condition_result_146 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_146 != false) {
            goto branch_yes_108;
        } else {
            goto branch_no_108;
        }
    }
    branch_yes_108:;
    {
        PyObject *tmp_assign_source_363;
        PyObject *tmp_called_value_110;
        PyObject *tmp_expression_value_388;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_200;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_388 = tmp_class_creation_36__metaclass;
        tmp_called_value_110 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_388, mod_consts[35]);
        if (tmp_called_value_110 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_tuple_element_200 = mod_consts[223];
        tmp_args_value_93 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_200 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_36__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 351;
        tmp_assign_source_363 = CALL_FUNCTION(tstate, tmp_called_value_110, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_110);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_363 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_363;
    }
    {
        bool tmp_condition_result_147;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_389;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_389 = tmp_class_creation_36__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_389, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_operand_value_37 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_147 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_147 != false) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_36;
        PyObject *tmp_mod_expr_left_36;
        PyObject *tmp_mod_expr_right_36;
        PyObject *tmp_tuple_element_201;
        PyObject *tmp_expression_value_390;
        PyObject *tmp_name_value_41;
        PyObject *tmp_default_value_36;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_mod_expr_left_36 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_390 = tmp_class_creation_36__metaclass;
        tmp_name_value_41 = mod_consts[38];
        tmp_default_value_36 = mod_consts[39];
        tmp_tuple_element_201 = BUILTIN_GETATTR(tstate, tmp_expression_value_390, tmp_name_value_41, tmp_default_value_36);
        if (tmp_tuple_element_201 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        tmp_mod_expr_right_36 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_391;
            PyObject *tmp_type_arg_72;
            PyTuple_SET_ITEM(tmp_mod_expr_right_36, 0, tmp_tuple_element_201);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_72 = tmp_class_creation_36__prepared;
            tmp_expression_value_391 = BUILTIN_TYPE1(tmp_type_arg_72);
            assert(!(tmp_expression_value_391 == NULL));
            tmp_tuple_element_201 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_391, mod_consts[38]);
            Py_DECREF(tmp_expression_value_391);
            if (tmp_tuple_element_201 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 351;

                goto tuple_build_exception_66;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_36, 1, tmp_tuple_element_201);
        }
        goto tuple_build_noexception_66;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_66:;
        Py_DECREF(tmp_mod_expr_right_36);
        goto try_except_handler_170;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_66:;
        tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_36, tmp_mod_expr_right_36);
        Py_DECREF(tmp_mod_expr_right_36);
        if (tmp_raise_value_36 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_170;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_36;
        exception_lineno = 351;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_170;
    }
    branch_no_109:;
    goto branch_end_108;
    branch_no_108:;
    {
        PyObject *tmp_assign_source_364;
        tmp_assign_source_364 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_364;
    }
    branch_end_108:;
    {
        PyObject *tmp_assign_source_365;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_56 = tmp_class_creation_36__prepared;
            locals_fastapi$openapi$models$$$class__56_OAuth2_351 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_172;
        }
        tmp_dictset_value = mod_consts[223];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_172;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_172;
        }
        frame_369256e42dfc35a9b57cd00cd0030dc3_37 = MAKE_CLASS_FRAME(tstate, codeobj_369256e42dfc35a9b57cd00cd0030dc3, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_369256e42dfc35a9b57cd00cd0030dc3_37);
        assert(Py_REFCNT(frame_369256e42dfc35a9b57cd00cd0030dc3_37) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_111;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_202;
            PyObject *tmp_expression_value_392;
            PyObject *tmp_kwargs_value_94;
            tmp_called_value_111 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[30]);

            if (tmp_called_value_111 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_111 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_111 == NULL)) {
                        tmp_called_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_111 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 352;
                        type_description_2 = "o";
                        goto frame_exception_exit_37;
                    }
                    Py_INCREF(tmp_called_value_111);
                } else {
                    goto frame_exception_exit_37;
                }
            }

            tmp_expression_value_392 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[190]);

            if (tmp_expression_value_392 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_392 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190]);

                    if (unlikely(tmp_expression_value_392 == NULL)) {
                        tmp_expression_value_392 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[190]);
                    }

                    if (tmp_expression_value_392 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_111);

                        exception_lineno = 352;
                        type_description_2 = "o";
                        goto frame_exception_exit_37;
                    }
                    Py_INCREF(tmp_expression_value_392);
                } else {
                    goto frame_exception_exit_37;
                }
            }

            tmp_tuple_element_202 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_392, mod_consts[193]);
            Py_DECREF(tmp_expression_value_392);
            if (tmp_tuple_element_202 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_111);

                exception_lineno = 352;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }
            tmp_args_value_94 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_args_value_94, 0, tmp_tuple_element_202);
            tmp_kwargs_value_94 = DICT_COPY(mod_consts[201]);
            frame_369256e42dfc35a9b57cd00cd0030dc3_37->m_frame.f_lineno = 352;
            tmp_dictset_value = CALL_FUNCTION(tstate, tmp_called_value_111, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_called_value_111);
            Py_DECREF(tmp_args_value_94);
            Py_DECREF(tmp_kwargs_value_94);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 352;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[197], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 352;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }
        }
        {
            PyObject *tmp_ass_subvalue_145;
            PyObject *tmp_ass_subscribed_145;
            PyObject *tmp_ass_subscript_145;
            tmp_ass_subvalue_145 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[217]);

            if (tmp_ass_subvalue_145 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_145 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[217]);

                    if (unlikely(tmp_ass_subvalue_145 == NULL)) {
                        tmp_ass_subvalue_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[217]);
                    }

                    if (tmp_ass_subvalue_145 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 353;
                        type_description_2 = "o";
                        goto frame_exception_exit_37;
                    }
                    Py_INCREF(tmp_ass_subvalue_145);
                } else {
                    goto frame_exception_exit_37;
                }
            }

            tmp_ass_subscribed_145 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_145 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_145);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 353;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }

            if (tmp_ass_subscribed_145 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_145);

                exception_lineno = 353;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }
            tmp_ass_subscript_145 = mod_consts[224];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_145, tmp_ass_subscript_145, tmp_ass_subvalue_145);
            Py_DECREF(tmp_ass_subscribed_145);
            Py_DECREF(tmp_ass_subvalue_145);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 353;
                type_description_2 = "o";
                goto frame_exception_exit_37;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_36;
        frame_exception_exit_37:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_369256e42dfc35a9b57cd00cd0030dc3_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_369256e42dfc35a9b57cd00cd0030dc3_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_369256e42dfc35a9b57cd00cd0030dc3_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_369256e42dfc35a9b57cd00cd0030dc3_37,
            type_description_2,
            outline_55_var___class__
        );



        assertFrameObject(frame_369256e42dfc35a9b57cd00cd0030dc3_37);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_36;
        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_172;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_148;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_148 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_148 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 351;

                goto try_except_handler_172;
            }
            if (tmp_condition_result_148 == NUITKA_BOOL_TRUE) {
                goto branch_yes_110;
            } else {
                goto branch_no_110;
            }
        }
        branch_yes_110:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__56_OAuth2_351, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;

            goto try_except_handler_172;
        }
        branch_no_110:;
        {
            PyObject *tmp_assign_source_366;
            PyObject *tmp_called_value_112;
            PyObject *tmp_args_value_95;
            PyObject *tmp_tuple_element_203;
            PyObject *tmp_kwargs_value_95;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_112 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_203 = mod_consts[223];
            tmp_args_value_95 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_203);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_203 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_203);
            tmp_tuple_element_203 = locals_fastapi$openapi$models$$$class__56_OAuth2_351;
            PyTuple_SET_ITEM0(tmp_args_value_95, 2, tmp_tuple_element_203);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_95 = tmp_class_creation_36__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 351;
            tmp_assign_source_366 = CALL_FUNCTION(tstate, tmp_called_value_112, tmp_args_value_95, tmp_kwargs_value_95);
            Py_DECREF(tmp_args_value_95);
            if (tmp_assign_source_366 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 351;

                goto try_except_handler_172;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_366;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_365 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_365);
        goto try_return_handler_172;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_172:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__56_OAuth2_351);
        locals_fastapi$openapi$models$$$class__56_OAuth2_351 = NULL;
        goto try_return_handler_171;
        // Exception handler code:
        try_except_handler_172:;
        exception_keeper_type_170 = exception_type;
        exception_keeper_value_170 = exception_value;
        exception_keeper_tb_170 = exception_tb;
        exception_keeper_lineno_170 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__56_OAuth2_351);
        locals_fastapi$openapi$models$$$class__56_OAuth2_351 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_170;
        exception_value = exception_keeper_value_170;
        exception_tb = exception_keeper_tb_170;
        exception_lineno = exception_keeper_lineno_170;

        goto try_except_handler_171;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_171:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_171:;
        exception_keeper_type_171 = exception_type;
        exception_keeper_value_171 = exception_value;
        exception_keeper_tb_171 = exception_tb;
        exception_keeper_lineno_171 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_171;
        exception_value = exception_keeper_value_171;
        exception_tb = exception_keeper_tb_171;
        exception_lineno = exception_keeper_lineno_171;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 351;
        goto try_except_handler_170;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[223], tmp_assign_source_365);
    }
    goto try_end_60;
    // Exception handler code:
    try_except_handler_170:;
    exception_keeper_type_172 = exception_type;
    exception_keeper_value_172 = exception_value;
    exception_keeper_tb_172 = exception_tb;
    exception_keeper_lineno_172 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_172;
    exception_value = exception_keeper_value_172;
    exception_tb = exception_keeper_tb_172;
    exception_lineno = exception_keeper_lineno_172;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_367;
        PyObject *tmp_tuple_element_204;
        tmp_tuple_element_204 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[195]);

        if (unlikely(tmp_tuple_element_204 == NULL)) {
            tmp_tuple_element_204 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[195]);
        }

        if (tmp_tuple_element_204 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_assign_source_367 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_367, 0, tmp_tuple_element_204);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_367;
    }
    {
        PyObject *tmp_assign_source_368;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_368 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_368 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_368;
    }
    {
        PyObject *tmp_assign_source_369;
        tmp_assign_source_369 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_369;
    }
    {
        PyObject *tmp_assign_source_370;
        PyObject *tmp_metaclass_value_37;
        nuitka_bool tmp_condition_result_149;
        int tmp_truth_name_37;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_393;
        PyObject *tmp_subscript_value_210;
        PyObject *tmp_bases_value_37;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_37 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_condition_result_149 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_149 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_393 = tmp_class_creation_37__bases;
        tmp_subscript_value_210 = mod_consts[15];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_393, tmp_subscript_value_210, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        goto condexpr_end_39;
        condexpr_false_39:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_37 = tmp_class_creation_37__bases;
        tmp_assign_source_370 = SELECT_METACLASS(tstate, tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_370 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_370;
    }
    {
        bool tmp_condition_result_150;
        PyObject *tmp_expression_value_394;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_394 = tmp_class_creation_37__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_394, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_condition_result_150 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_150 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_assign_source_371;
        PyObject *tmp_called_value_113;
        PyObject *tmp_expression_value_395;
        PyObject *tmp_args_value_96;
        PyObject *tmp_tuple_element_205;
        PyObject *tmp_kwargs_value_96;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_395 = tmp_class_creation_37__metaclass;
        tmp_called_value_113 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_395, mod_consts[35]);
        if (tmp_called_value_113 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_tuple_element_205 = mod_consts[225];
        tmp_args_value_96 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_205);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_205 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_205);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_96 = tmp_class_creation_37__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 356;
        tmp_assign_source_371 = CALL_FUNCTION(tstate, tmp_called_value_113, tmp_args_value_96, tmp_kwargs_value_96);
        Py_DECREF(tmp_called_value_113);
        Py_DECREF(tmp_args_value_96);
        if (tmp_assign_source_371 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_371;
    }
    {
        bool tmp_condition_result_151;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_396;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_396 = tmp_class_creation_37__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_396, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_operand_value_38 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        assert(!(tmp_res == -1));
        tmp_condition_result_151 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_151 != false) {
            goto branch_yes_112;
        } else {
            goto branch_no_112;
        }
    }
    branch_yes_112:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_mod_expr_left_37;
        PyObject *tmp_mod_expr_right_37;
        PyObject *tmp_tuple_element_206;
        PyObject *tmp_expression_value_397;
        PyObject *tmp_name_value_42;
        PyObject *tmp_default_value_37;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_mod_expr_left_37 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_397 = tmp_class_creation_37__metaclass;
        tmp_name_value_42 = mod_consts[38];
        tmp_default_value_37 = mod_consts[39];
        tmp_tuple_element_206 = BUILTIN_GETATTR(tstate, tmp_expression_value_397, tmp_name_value_42, tmp_default_value_37);
        if (tmp_tuple_element_206 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        tmp_mod_expr_right_37 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_398;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_mod_expr_right_37, 0, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_74 = tmp_class_creation_37__prepared;
            tmp_expression_value_398 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_398 == NULL));
            tmp_tuple_element_206 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_398, mod_consts[38]);
            Py_DECREF(tmp_expression_value_398);
            if (tmp_tuple_element_206 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto tuple_build_exception_67;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_37, 1, tmp_tuple_element_206);
        }
        goto tuple_build_noexception_67;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_67:;
        Py_DECREF(tmp_mod_expr_right_37);
        goto try_except_handler_173;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_67:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_37, tmp_mod_expr_right_37);
        Py_DECREF(tmp_mod_expr_right_37);
        if (tmp_raise_value_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_173;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_37;
        exception_lineno = 356;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_173;
    }
    branch_no_112:;
    goto branch_end_111;
    branch_no_111:;
    {
        PyObject *tmp_assign_source_372;
        tmp_assign_source_372 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_372;
    }
    branch_end_111:;
    {
        PyObject *tmp_assign_source_373;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_57 = tmp_class_creation_37__prepared;
            locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_175;
        }
        tmp_dictset_value = mod_consts[225];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_175;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_175;
        }
        frame_ab97e3b19146bc7dc8df1f07630e7e1b_38 = MAKE_CLASS_FRAME(tstate, codeobj_ab97e3b19146bc7dc8df1f07630e7e1b, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_ab97e3b19146bc7dc8df1f07630e7e1b_38);
        assert(Py_REFCNT(frame_ab97e3b19146bc7dc8df1f07630e7e1b_38) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_value_97;
            PyObject *tmp_tuple_element_207;
            PyObject *tmp_expression_value_399;
            PyObject *tmp_kwargs_value_97;
            tmp_called_value_114 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[30]);

            if (tmp_called_value_114 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_114 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[30]);

                    if (unlikely(tmp_called_value_114 == NULL)) {
                        tmp_called_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[30]);
                    }

                    if (tmp_called_value_114 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 357;
                        type_description_2 = "o";
                        goto frame_exception_exit_38;
                    }
                    Py_INCREF(tmp_called_value_114);
                } else {
                    goto frame_exception_exit_38;
                }
            }

            tmp_expression_value_399 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[190]);

            if (tmp_expression_value_399 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_399 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[190]);

                    if (unlikely(tmp_expression_value_399 == NULL)) {
                        tmp_expression_value_399 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[190]);
                    }

                    if (tmp_expression_value_399 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_114);

                        exception_lineno = 357;
                        type_description_2 = "o";
                        goto frame_exception_exit_38;
                    }
                    Py_INCREF(tmp_expression_value_399);
                } else {
                    goto frame_exception_exit_38;
                }
            }

            tmp_tuple_element_207 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_399, mod_consts[194]);
            Py_DECREF(tmp_expression_value_399);
            if (tmp_tuple_element_207 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_114);

                exception_lineno = 357;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }
            tmp_args_value_97 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_args_value_97, 0, tmp_tuple_element_207);
            tmp_kwargs_value_97 = DICT_COPY(mod_consts[201]);
            frame_ab97e3b19146bc7dc8df1f07630e7e1b_38->m_frame.f_lineno = 357;
            tmp_dictset_value = CALL_FUNCTION(tstate, tmp_called_value_114, tmp_args_value_97, tmp_kwargs_value_97);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_args_value_97);
            Py_DECREF(tmp_kwargs_value_97);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 357;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }
            tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[197], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 357;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }
        }
        {
            PyObject *tmp_ass_subvalue_146;
            PyObject *tmp_ass_subscribed_146;
            PyObject *tmp_ass_subscript_146;
            tmp_ass_subvalue_146 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[46]);

            if (tmp_ass_subvalue_146 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_146 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_146);
                } else {
                    goto frame_exception_exit_38;
                }
            }

            tmp_ass_subscribed_146 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_146 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_146);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 358;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }

            if (tmp_ass_subscribed_146 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_146);

                exception_lineno = 358;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }
            tmp_ass_subscript_146 = mod_consts[226];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_146, tmp_ass_subscript_146, tmp_ass_subvalue_146);
            Py_DECREF(tmp_ass_subscribed_146);
            Py_DECREF(tmp_ass_subvalue_146);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 358;
                type_description_2 = "o";
                goto frame_exception_exit_38;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_37;
        frame_exception_exit_38:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ab97e3b19146bc7dc8df1f07630e7e1b_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ab97e3b19146bc7dc8df1f07630e7e1b_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ab97e3b19146bc7dc8df1f07630e7e1b_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ab97e3b19146bc7dc8df1f07630e7e1b_38,
            type_description_2,
            outline_56_var___class__
        );



        assertFrameObject(frame_ab97e3b19146bc7dc8df1f07630e7e1b_38);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_37;
        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_175;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_152;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_152 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_152 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_175;
            }
            if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
                goto branch_yes_113;
            } else {
                goto branch_no_113;
            }
        }
        branch_yes_113:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_175;
        }
        branch_no_113:;
        {
            PyObject *tmp_assign_source_374;
            PyObject *tmp_called_value_115;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_208;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_115 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_208 = mod_consts[225];
            tmp_args_value_98 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_208);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_208 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_208);
            tmp_tuple_element_208 = locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_208);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_37__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 356;
            tmp_assign_source_374 = CALL_FUNCTION(tstate, tmp_called_value_115, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_374 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_175;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_374;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_373 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_373);
        goto try_return_handler_175;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_175:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356);
        locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356 = NULL;
        goto try_return_handler_174;
        // Exception handler code:
        try_except_handler_175:;
        exception_keeper_type_173 = exception_type;
        exception_keeper_value_173 = exception_value;
        exception_keeper_tb_173 = exception_tb;
        exception_keeper_lineno_173 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356);
        locals_fastapi$openapi$models$$$class__57_OpenIdConnect_356 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_173;
        exception_value = exception_keeper_value_173;
        exception_tb = exception_keeper_tb_173;
        exception_lineno = exception_keeper_lineno_173;

        goto try_except_handler_174;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_174:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_174:;
        exception_keeper_type_174 = exception_type;
        exception_keeper_value_174 = exception_value;
        exception_keeper_tb_174 = exception_tb;
        exception_keeper_lineno_174 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_174;
        exception_value = exception_keeper_value_174;
        exception_tb = exception_keeper_tb_174;
        exception_lineno = exception_keeper_lineno_174;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 356;
        goto try_except_handler_173;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[225], tmp_assign_source_373);
    }
    goto try_end_61;
    // Exception handler code:
    try_except_handler_173:;
    exception_keeper_type_175 = exception_type;
    exception_keeper_value_175 = exception_value;
    exception_keeper_tb_175 = exception_tb;
    exception_keeper_lineno_175 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_175;
    exception_value = exception_keeper_value_175;
    exception_tb = exception_keeper_tb_175;
    exception_lineno = exception_keeper_lineno_175;

    goto frame_exception_exit_1;
    // End of try:
    try_end_61:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    {
        PyObject *tmp_assign_source_375;
        PyObject *tmp_expression_value_400;
        PyObject *tmp_subscript_value_211;
        PyObject *tmp_tuple_element_209;
        tmp_expression_value_400 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

        if (unlikely(tmp_expression_value_400 == NULL)) {
            tmp_expression_value_400 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
        }

        if (tmp_expression_value_400 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[200]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[200]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto frame_exception_exit_1;
        }
        tmp_subscript_value_211 = MAKE_TUPLE_EMPTY(5);
        PyTuple_SET_ITEM0(tmp_subscript_value_211, 0, tmp_tuple_element_209);
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[202]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[202]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto tuple_build_exception_68;
        }
        PyTuple_SET_ITEM0(tmp_subscript_value_211, 1, tmp_tuple_element_209);
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[223]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[223]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto tuple_build_exception_68;
        }
        PyTuple_SET_ITEM0(tmp_subscript_value_211, 2, tmp_tuple_element_209);
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[225]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[225]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto tuple_build_exception_68;
        }
        PyTuple_SET_ITEM0(tmp_subscript_value_211, 3, tmp_tuple_element_209);
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[204]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[204]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto tuple_build_exception_68;
        }
        PyTuple_SET_ITEM0(tmp_subscript_value_211, 4, tmp_tuple_element_209);
        goto tuple_build_noexception_68;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_68:;
        Py_DECREF(tmp_subscript_value_211);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_68:;
        tmp_assign_source_375 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_400, tmp_subscript_value_211);
        Py_DECREF(tmp_subscript_value_211);
        if (tmp_assign_source_375 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[227], tmp_assign_source_375);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_376;
        PyObject *tmp_tuple_element_210;
        tmp_tuple_element_210 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_210 == NULL)) {
            tmp_tuple_element_210 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_210 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_assign_source_376 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_376, 0, tmp_tuple_element_210);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_376;
    }
    {
        PyObject *tmp_assign_source_377;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_377 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_377 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_377;
    }
    {
        PyObject *tmp_assign_source_378;
        tmp_assign_source_378 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_378;
    }
    {
        PyObject *tmp_assign_source_379;
        PyObject *tmp_metaclass_value_38;
        nuitka_bool tmp_condition_result_153;
        int tmp_truth_name_38;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_401;
        PyObject *tmp_subscript_value_212;
        PyObject *tmp_bases_value_38;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_38 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_condition_result_153 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_153 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_401 = tmp_class_creation_38__bases;
        tmp_subscript_value_212 = mod_consts[15];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_401, tmp_subscript_value_212, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_40:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_38 = tmp_class_creation_38__bases;
        tmp_assign_source_379 = SELECT_METACLASS(tstate, tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_379 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_379;
    }
    {
        bool tmp_condition_result_154;
        PyObject *tmp_expression_value_402;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_402 = tmp_class_creation_38__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_402, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_condition_result_154 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_154 != false) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_assign_source_380;
        PyObject *tmp_called_value_116;
        PyObject *tmp_expression_value_403;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_211;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_403 = tmp_class_creation_38__metaclass;
        tmp_called_value_116 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_403, mod_consts[35]);
        if (tmp_called_value_116 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_tuple_element_211 = mod_consts[228];
        tmp_args_value_99 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_211);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_211 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_211);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_38__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 364;
        tmp_assign_source_380 = CALL_FUNCTION(tstate, tmp_called_value_116, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_116);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_380 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_380;
    }
    {
        bool tmp_condition_result_155;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_404;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_404 = tmp_class_creation_38__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_404, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_operand_value_39 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_155 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_155 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_mod_expr_left_38;
        PyObject *tmp_mod_expr_right_38;
        PyObject *tmp_tuple_element_212;
        PyObject *tmp_expression_value_405;
        PyObject *tmp_name_value_43;
        PyObject *tmp_default_value_38;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_mod_expr_left_38 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_405 = tmp_class_creation_38__metaclass;
        tmp_name_value_43 = mod_consts[38];
        tmp_default_value_38 = mod_consts[39];
        tmp_tuple_element_212 = BUILTIN_GETATTR(tstate, tmp_expression_value_405, tmp_name_value_43, tmp_default_value_38);
        if (tmp_tuple_element_212 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        tmp_mod_expr_right_38 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_406;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_mod_expr_right_38, 0, tmp_tuple_element_212);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_76 = tmp_class_creation_38__prepared;
            tmp_expression_value_406 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_406 == NULL));
            tmp_tuple_element_212 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_406, mod_consts[38]);
            Py_DECREF(tmp_expression_value_406);
            if (tmp_tuple_element_212 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto tuple_build_exception_69;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_38, 1, tmp_tuple_element_212);
        }
        goto tuple_build_noexception_69;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_69:;
        Py_DECREF(tmp_mod_expr_right_38);
        goto try_except_handler_176;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_69:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_38, tmp_mod_expr_right_38);
        Py_DECREF(tmp_mod_expr_right_38);
        if (tmp_raise_value_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_176;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_38;
        exception_lineno = 364;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_176;
    }
    branch_no_115:;
    goto branch_end_114;
    branch_no_114:;
    {
        PyObject *tmp_assign_source_381;
        tmp_assign_source_381 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_381;
    }
    branch_end_114:;
    {
        PyObject *tmp_assign_source_382;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_58 = tmp_class_creation_38__prepared;
            locals_fastapi$openapi$models$$$class__58_Components_364 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_178;
        }
        tmp_dictset_value = mod_consts[228];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_178;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_178;
        }
        frame_05284d199480ca0080b8ce2833da5f62_39 = MAKE_CLASS_FRAME(tstate, codeobj_05284d199480ca0080b8ce2833da5f62, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_05284d199480ca0080b8ce2833da5f62_39);
        assert(Py_REFCNT(frame_05284d199480ca0080b8ce2833da5f62_39) == 2);

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[229], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_147;
            PyObject *tmp_expression_value_407;
            PyObject *tmp_subscript_value_213;
            PyObject *tmp_expression_value_408;
            PyObject *tmp_subscript_value_214;
            PyObject *tmp_tuple_element_213;
            PyObject *tmp_ass_subscribed_147;
            PyObject *tmp_ass_subscript_147;
            tmp_expression_value_407 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_407 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_407 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_407 == NULL)) {
                        tmp_expression_value_407 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_407 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 365;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_407);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_408 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_408 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_408 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_408 == NULL)) {
                        tmp_expression_value_408 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_408 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_407);

                        exception_lineno = 365;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_408);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_213 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_213 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_213 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_213);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_214 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_409;
                PyObject *tmp_subscript_value_215;
                PyObject *tmp_tuple_element_214;
                PyTuple_SET_ITEM(tmp_subscript_value_214, 0, tmp_tuple_element_213);
                tmp_expression_value_409 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_409 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_409 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_409 == NULL)) {
                            tmp_expression_value_409 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_409 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 365;
                            type_description_2 = "o";
                            goto tuple_build_exception_70;
                        }
                        Py_INCREF(tmp_expression_value_409);
                    } else {
                        goto tuple_build_exception_70;
                    }
                }

                tmp_tuple_element_214 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[91]);

                if (tmp_tuple_element_214 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_214 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[91]);

                        if (unlikely(tmp_tuple_element_214 == NULL)) {
                            tmp_tuple_element_214 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
                        }

                        if (tmp_tuple_element_214 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_409);

                            exception_lineno = 365;
                            type_description_2 = "o";
                            goto tuple_build_exception_70;
                        }
                        Py_INCREF(tmp_tuple_element_214);
                    } else {
                        goto tuple_build_exception_70;
                    }
                }

                tmp_subscript_value_215 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_215, 0, tmp_tuple_element_214);
                tmp_tuple_element_214 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_214 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_214 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_214 == NULL)) {
                            tmp_tuple_element_214 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_214 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 365;
                            type_description_2 = "o";
                            goto tuple_build_exception_71;
                        }
                        Py_INCREF(tmp_tuple_element_214);
                    } else {
                        goto tuple_build_exception_71;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_215, 1, tmp_tuple_element_214);
                goto tuple_build_noexception_70;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_71:;
                Py_DECREF(tmp_expression_value_409);
                Py_DECREF(tmp_subscript_value_215);
                goto tuple_build_exception_70;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_70:;
                tmp_tuple_element_213 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_409, tmp_subscript_value_215);
                Py_DECREF(tmp_expression_value_409);
                Py_DECREF(tmp_subscript_value_215);
                if (tmp_tuple_element_213 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 365;
                    type_description_2 = "o";
                    goto tuple_build_exception_70;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_214, 1, tmp_tuple_element_213);
            }
            goto tuple_build_noexception_71;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_70:;
            Py_DECREF(tmp_expression_value_407);
            Py_DECREF(tmp_expression_value_408);
            Py_DECREF(tmp_subscript_value_214);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_71:;
            tmp_subscript_value_213 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_408, tmp_subscript_value_214);
            Py_DECREF(tmp_expression_value_408);
            Py_DECREF(tmp_subscript_value_214);
            if (tmp_subscript_value_213 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_407);

                exception_lineno = 365;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_147 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_407, tmp_subscript_value_213);
            Py_DECREF(tmp_expression_value_407);
            Py_DECREF(tmp_subscript_value_213);
            if (tmp_ass_subvalue_147 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 365;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_147 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_147 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_147);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 365;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_147 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_147);

                exception_lineno = 365;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_147 = mod_consts[229];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_147, tmp_ass_subscript_147, tmp_ass_subvalue_147);
            Py_DECREF(tmp_ass_subscribed_147);
            Py_DECREF(tmp_ass_subvalue_147);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 365;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[175], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 366;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_148;
            PyObject *tmp_expression_value_410;
            PyObject *tmp_subscript_value_216;
            PyObject *tmp_expression_value_411;
            PyObject *tmp_subscript_value_217;
            PyObject *tmp_tuple_element_215;
            PyObject *tmp_ass_subscribed_148;
            PyObject *tmp_ass_subscript_148;
            tmp_expression_value_410 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_410 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_410 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_410 == NULL)) {
                        tmp_expression_value_410 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_410 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 366;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_410);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_411 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_411 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_411 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_411 == NULL)) {
                        tmp_expression_value_411 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_411 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_410);

                        exception_lineno = 366;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_411);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_215 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_215 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_215 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_215);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_217 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_412;
                PyObject *tmp_subscript_value_218;
                PyObject *tmp_tuple_element_216;
                PyTuple_SET_ITEM(tmp_subscript_value_217, 0, tmp_tuple_element_215);
                tmp_expression_value_412 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_412 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_412 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_412 == NULL)) {
                            tmp_expression_value_412 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_412 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 366;
                            type_description_2 = "o";
                            goto tuple_build_exception_72;
                        }
                        Py_INCREF(tmp_expression_value_412);
                    } else {
                        goto tuple_build_exception_72;
                    }
                }

                tmp_tuple_element_216 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[170]);

                if (tmp_tuple_element_216 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_216 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[170]);

                        if (unlikely(tmp_tuple_element_216 == NULL)) {
                            tmp_tuple_element_216 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[170]);
                        }

                        if (tmp_tuple_element_216 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_412);

                            exception_lineno = 366;
                            type_description_2 = "o";
                            goto tuple_build_exception_72;
                        }
                        Py_INCREF(tmp_tuple_element_216);
                    } else {
                        goto tuple_build_exception_72;
                    }
                }

                tmp_subscript_value_218 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_218, 0, tmp_tuple_element_216);
                tmp_tuple_element_216 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_216 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_216 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_216 == NULL)) {
                            tmp_tuple_element_216 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_216 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 366;
                            type_description_2 = "o";
                            goto tuple_build_exception_73;
                        }
                        Py_INCREF(tmp_tuple_element_216);
                    } else {
                        goto tuple_build_exception_73;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_218, 1, tmp_tuple_element_216);
                goto tuple_build_noexception_72;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_73:;
                Py_DECREF(tmp_expression_value_412);
                Py_DECREF(tmp_subscript_value_218);
                goto tuple_build_exception_72;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_72:;
                tmp_tuple_element_215 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_412, tmp_subscript_value_218);
                Py_DECREF(tmp_expression_value_412);
                Py_DECREF(tmp_subscript_value_218);
                if (tmp_tuple_element_215 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 366;
                    type_description_2 = "o";
                    goto tuple_build_exception_72;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_217, 1, tmp_tuple_element_215);
            }
            goto tuple_build_noexception_73;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_72:;
            Py_DECREF(tmp_expression_value_410);
            Py_DECREF(tmp_expression_value_411);
            Py_DECREF(tmp_subscript_value_217);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_73:;
            tmp_subscript_value_216 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_411, tmp_subscript_value_217);
            Py_DECREF(tmp_expression_value_411);
            Py_DECREF(tmp_subscript_value_217);
            if (tmp_subscript_value_216 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_410);

                exception_lineno = 366;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_148 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_410, tmp_subscript_value_216);
            Py_DECREF(tmp_expression_value_410);
            Py_DECREF(tmp_subscript_value_216);
            if (tmp_ass_subvalue_148 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 366;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_148 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_148 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_148);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 366;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_148 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_148);

                exception_lineno = 366;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_148 = mod_consts[175];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_148, tmp_ass_subscript_148, tmp_ass_subvalue_148);
            Py_DECREF(tmp_ass_subscribed_148);
            Py_DECREF(tmp_ass_subvalue_148);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 366;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[166], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 367;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_149;
            PyObject *tmp_expression_value_413;
            PyObject *tmp_subscript_value_219;
            PyObject *tmp_expression_value_414;
            PyObject *tmp_subscript_value_220;
            PyObject *tmp_tuple_element_217;
            PyObject *tmp_ass_subscribed_149;
            PyObject *tmp_ass_subscript_149;
            tmp_expression_value_413 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_413 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_413 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_413 == NULL)) {
                        tmp_expression_value_413 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_413 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 367;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_413);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_414 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_414 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_414 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_414 == NULL)) {
                        tmp_expression_value_414 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_414 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_413);

                        exception_lineno = 367;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_414);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_217 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_217 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_217 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_217);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_220 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_415;
                PyObject *tmp_subscript_value_221;
                PyObject *tmp_tuple_element_218;
                PyTuple_SET_ITEM(tmp_subscript_value_220, 0, tmp_tuple_element_217);
                tmp_expression_value_415 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_415 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_415 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_415 == NULL)) {
                            tmp_expression_value_415 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_415 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 367;
                            type_description_2 = "o";
                            goto tuple_build_exception_74;
                        }
                        Py_INCREF(tmp_expression_value_415);
                    } else {
                        goto tuple_build_exception_74;
                    }
                }

                tmp_tuple_element_218 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[158]);

                if (tmp_tuple_element_218 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_218 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[158]);

                        if (unlikely(tmp_tuple_element_218 == NULL)) {
                            tmp_tuple_element_218 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[158]);
                        }

                        if (tmp_tuple_element_218 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_415);

                            exception_lineno = 367;
                            type_description_2 = "o";
                            goto tuple_build_exception_74;
                        }
                        Py_INCREF(tmp_tuple_element_218);
                    } else {
                        goto tuple_build_exception_74;
                    }
                }

                tmp_subscript_value_221 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_221, 0, tmp_tuple_element_218);
                tmp_tuple_element_218 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_218 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_218 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_218 == NULL)) {
                            tmp_tuple_element_218 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_218 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 367;
                            type_description_2 = "o";
                            goto tuple_build_exception_75;
                        }
                        Py_INCREF(tmp_tuple_element_218);
                    } else {
                        goto tuple_build_exception_75;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_221, 1, tmp_tuple_element_218);
                goto tuple_build_noexception_74;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_75:;
                Py_DECREF(tmp_expression_value_415);
                Py_DECREF(tmp_subscript_value_221);
                goto tuple_build_exception_74;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_74:;
                tmp_tuple_element_217 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_415, tmp_subscript_value_221);
                Py_DECREF(tmp_expression_value_415);
                Py_DECREF(tmp_subscript_value_221);
                if (tmp_tuple_element_217 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 367;
                    type_description_2 = "o";
                    goto tuple_build_exception_74;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_220, 1, tmp_tuple_element_217);
            }
            goto tuple_build_noexception_75;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_74:;
            Py_DECREF(tmp_expression_value_413);
            Py_DECREF(tmp_expression_value_414);
            Py_DECREF(tmp_subscript_value_220);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_75:;
            tmp_subscript_value_219 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_414, tmp_subscript_value_220);
            Py_DECREF(tmp_expression_value_414);
            Py_DECREF(tmp_subscript_value_220);
            if (tmp_subscript_value_219 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_413);

                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_149 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_413, tmp_subscript_value_219);
            Py_DECREF(tmp_expression_value_413);
            Py_DECREF(tmp_subscript_value_219);
            if (tmp_ass_subvalue_149 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_149 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_149 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_149);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_149 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_149);

                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_149 = mod_consts[166];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_149, tmp_ass_subscript_149, tmp_ass_subvalue_149);
            Py_DECREF(tmp_ass_subscribed_149);
            Py_DECREF(tmp_ass_subvalue_149);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[152], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_150;
            PyObject *tmp_expression_value_416;
            PyObject *tmp_subscript_value_222;
            PyObject *tmp_expression_value_417;
            PyObject *tmp_subscript_value_223;
            PyObject *tmp_tuple_element_219;
            PyObject *tmp_ass_subscribed_150;
            PyObject *tmp_ass_subscript_150;
            tmp_expression_value_416 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_416 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_416 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_416 == NULL)) {
                        tmp_expression_value_416 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_416 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 368;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_416);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_417 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_417 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_417 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_417 == NULL)) {
                        tmp_expression_value_417 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_417 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_416);

                        exception_lineno = 368;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_417);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_219 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_219 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_219 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_219);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_223 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_418;
                PyObject *tmp_subscript_value_224;
                PyObject *tmp_tuple_element_220;
                PyTuple_SET_ITEM(tmp_subscript_value_223, 0, tmp_tuple_element_219);
                tmp_expression_value_418 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_418 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_418 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_418 == NULL)) {
                            tmp_expression_value_418 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_418 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 368;
                            type_description_2 = "o";
                            goto tuple_build_exception_76;
                        }
                        Py_INCREF(tmp_expression_value_418);
                    } else {
                        goto tuple_build_exception_76;
                    }
                }

                tmp_tuple_element_220 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[131]);

                if (tmp_tuple_element_220 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_220 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[131]);

                        if (unlikely(tmp_tuple_element_220 == NULL)) {
                            tmp_tuple_element_220 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[131]);
                        }

                        if (tmp_tuple_element_220 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_418);

                            exception_lineno = 368;
                            type_description_2 = "o";
                            goto tuple_build_exception_76;
                        }
                        Py_INCREF(tmp_tuple_element_220);
                    } else {
                        goto tuple_build_exception_76;
                    }
                }

                tmp_subscript_value_224 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_224, 0, tmp_tuple_element_220);
                tmp_tuple_element_220 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_220 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_220 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_220 == NULL)) {
                            tmp_tuple_element_220 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_220 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 368;
                            type_description_2 = "o";
                            goto tuple_build_exception_77;
                        }
                        Py_INCREF(tmp_tuple_element_220);
                    } else {
                        goto tuple_build_exception_77;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_224, 1, tmp_tuple_element_220);
                goto tuple_build_noexception_76;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_77:;
                Py_DECREF(tmp_expression_value_418);
                Py_DECREF(tmp_subscript_value_224);
                goto tuple_build_exception_76;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_76:;
                tmp_tuple_element_219 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_418, tmp_subscript_value_224);
                Py_DECREF(tmp_expression_value_418);
                Py_DECREF(tmp_subscript_value_224);
                if (tmp_tuple_element_219 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 368;
                    type_description_2 = "o";
                    goto tuple_build_exception_76;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_223, 1, tmp_tuple_element_219);
            }
            goto tuple_build_noexception_77;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_76:;
            Py_DECREF(tmp_expression_value_416);
            Py_DECREF(tmp_expression_value_417);
            Py_DECREF(tmp_subscript_value_223);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_77:;
            tmp_subscript_value_222 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_417, tmp_subscript_value_223);
            Py_DECREF(tmp_expression_value_417);
            Py_DECREF(tmp_subscript_value_223);
            if (tmp_subscript_value_222 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_416);

                exception_lineno = 368;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_150 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_416, tmp_subscript_value_222);
            Py_DECREF(tmp_expression_value_416);
            Py_DECREF(tmp_subscript_value_222);
            if (tmp_ass_subvalue_150 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 368;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_150 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_150 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_150);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 368;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_150 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_150);

                exception_lineno = 368;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_150 = mod_consts[152];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_150, tmp_ass_subscript_150, tmp_ass_subvalue_150);
            Py_DECREF(tmp_ass_subscribed_150);
            Py_DECREF(tmp_ass_subvalue_150);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 368;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[230], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_151;
            PyObject *tmp_expression_value_419;
            PyObject *tmp_subscript_value_225;
            PyObject *tmp_expression_value_420;
            PyObject *tmp_subscript_value_226;
            PyObject *tmp_tuple_element_221;
            PyObject *tmp_ass_subscribed_151;
            PyObject *tmp_ass_subscript_151;
            tmp_expression_value_419 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_419 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_419 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_419 == NULL)) {
                        tmp_expression_value_419 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_419 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 369;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_419);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_420 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_420 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_420 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_420 == NULL)) {
                        tmp_expression_value_420 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_420 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_419);

                        exception_lineno = 369;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_420);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_221 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_221 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_221 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_221);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_226 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_421;
                PyObject *tmp_subscript_value_227;
                PyObject *tmp_tuple_element_222;
                PyTuple_SET_ITEM(tmp_subscript_value_226, 0, tmp_tuple_element_221);
                tmp_expression_value_421 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_421 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_421 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_421 == NULL)) {
                            tmp_expression_value_421 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_421 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 369;
                            type_description_2 = "o";
                            goto tuple_build_exception_78;
                        }
                        Py_INCREF(tmp_expression_value_421);
                    } else {
                        goto tuple_build_exception_78;
                    }
                }

                tmp_tuple_element_222 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[161]);

                if (tmp_tuple_element_222 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_222 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[161]);

                        if (unlikely(tmp_tuple_element_222 == NULL)) {
                            tmp_tuple_element_222 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[161]);
                        }

                        if (tmp_tuple_element_222 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_421);

                            exception_lineno = 369;
                            type_description_2 = "o";
                            goto tuple_build_exception_78;
                        }
                        Py_INCREF(tmp_tuple_element_222);
                    } else {
                        goto tuple_build_exception_78;
                    }
                }

                tmp_subscript_value_227 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_227, 0, tmp_tuple_element_222);
                tmp_tuple_element_222 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_222 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_222 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_222 == NULL)) {
                            tmp_tuple_element_222 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_222 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 369;
                            type_description_2 = "o";
                            goto tuple_build_exception_79;
                        }
                        Py_INCREF(tmp_tuple_element_222);
                    } else {
                        goto tuple_build_exception_79;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_227, 1, tmp_tuple_element_222);
                goto tuple_build_noexception_78;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_79:;
                Py_DECREF(tmp_expression_value_421);
                Py_DECREF(tmp_subscript_value_227);
                goto tuple_build_exception_78;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_78:;
                tmp_tuple_element_221 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_421, tmp_subscript_value_227);
                Py_DECREF(tmp_expression_value_421);
                Py_DECREF(tmp_subscript_value_227);
                if (tmp_tuple_element_221 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 369;
                    type_description_2 = "o";
                    goto tuple_build_exception_78;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_226, 1, tmp_tuple_element_221);
            }
            goto tuple_build_noexception_79;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_78:;
            Py_DECREF(tmp_expression_value_419);
            Py_DECREF(tmp_expression_value_420);
            Py_DECREF(tmp_subscript_value_226);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_79:;
            tmp_subscript_value_225 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_420, tmp_subscript_value_226);
            Py_DECREF(tmp_expression_value_420);
            Py_DECREF(tmp_subscript_value_226);
            if (tmp_subscript_value_225 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_419);

                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_151 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_419, tmp_subscript_value_225);
            Py_DECREF(tmp_expression_value_419);
            Py_DECREF(tmp_subscript_value_225);
            if (tmp_ass_subvalue_151 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_151 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_151 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_151);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_151 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_151);

                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_151 = mod_consts[230];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_151, tmp_ass_subscript_151, tmp_ass_subvalue_151);
            Py_DECREF(tmp_ass_subscribed_151);
            Py_DECREF(tmp_ass_subvalue_151);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[143], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 370;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_152;
            PyObject *tmp_expression_value_422;
            PyObject *tmp_subscript_value_228;
            PyObject *tmp_expression_value_423;
            PyObject *tmp_subscript_value_229;
            PyObject *tmp_tuple_element_223;
            PyObject *tmp_ass_subscribed_152;
            PyObject *tmp_ass_subscript_152;
            tmp_expression_value_422 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_422 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_422 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_422 == NULL)) {
                        tmp_expression_value_422 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_422 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 370;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_422);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_423 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_423 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_423 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_423 == NULL)) {
                        tmp_expression_value_423 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_423 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_422);

                        exception_lineno = 370;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_423);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_223 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_223 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_223 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_223);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_229 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_424;
                PyObject *tmp_subscript_value_230;
                PyObject *tmp_tuple_element_224;
                PyTuple_SET_ITEM(tmp_subscript_value_229, 0, tmp_tuple_element_223);
                tmp_expression_value_424 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_424 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_424 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_424 == NULL)) {
                            tmp_expression_value_424 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_424 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 370;
                            type_description_2 = "o";
                            goto tuple_build_exception_80;
                        }
                        Py_INCREF(tmp_expression_value_424);
                    } else {
                        goto tuple_build_exception_80;
                    }
                }

                tmp_tuple_element_224 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[144]);

                if (tmp_tuple_element_224 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_224 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[144]);

                        if (unlikely(tmp_tuple_element_224 == NULL)) {
                            tmp_tuple_element_224 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[144]);
                        }

                        if (tmp_tuple_element_224 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_424);

                            exception_lineno = 370;
                            type_description_2 = "o";
                            goto tuple_build_exception_80;
                        }
                        Py_INCREF(tmp_tuple_element_224);
                    } else {
                        goto tuple_build_exception_80;
                    }
                }

                tmp_subscript_value_230 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_230, 0, tmp_tuple_element_224);
                tmp_tuple_element_224 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_224 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_224 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_224 == NULL)) {
                            tmp_tuple_element_224 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_224 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 370;
                            type_description_2 = "o";
                            goto tuple_build_exception_81;
                        }
                        Py_INCREF(tmp_tuple_element_224);
                    } else {
                        goto tuple_build_exception_81;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_230, 1, tmp_tuple_element_224);
                goto tuple_build_noexception_80;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_81:;
                Py_DECREF(tmp_expression_value_424);
                Py_DECREF(tmp_subscript_value_230);
                goto tuple_build_exception_80;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_80:;
                tmp_tuple_element_223 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_424, tmp_subscript_value_230);
                Py_DECREF(tmp_expression_value_424);
                Py_DECREF(tmp_subscript_value_230);
                if (tmp_tuple_element_223 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 370;
                    type_description_2 = "o";
                    goto tuple_build_exception_80;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_229, 1, tmp_tuple_element_223);
            }
            goto tuple_build_noexception_81;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_80:;
            Py_DECREF(tmp_expression_value_422);
            Py_DECREF(tmp_expression_value_423);
            Py_DECREF(tmp_subscript_value_229);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_81:;
            tmp_subscript_value_228 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_423, tmp_subscript_value_229);
            Py_DECREF(tmp_expression_value_423);
            Py_DECREF(tmp_subscript_value_229);
            if (tmp_subscript_value_228 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_422);

                exception_lineno = 370;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_152 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_422, tmp_subscript_value_228);
            Py_DECREF(tmp_expression_value_422);
            Py_DECREF(tmp_subscript_value_228);
            if (tmp_ass_subvalue_152 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 370;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_152 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_152 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_152);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 370;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_152 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_152);

                exception_lineno = 370;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_152 = mod_consts[143];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_152, tmp_ass_subscript_152, tmp_ass_subvalue_152);
            Py_DECREF(tmp_ass_subscribed_152);
            Py_DECREF(tmp_ass_subvalue_152);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 370;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[231], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 371;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_153;
            PyObject *tmp_expression_value_425;
            PyObject *tmp_subscript_value_231;
            PyObject *tmp_expression_value_426;
            PyObject *tmp_subscript_value_232;
            PyObject *tmp_tuple_element_225;
            PyObject *tmp_ass_subscribed_153;
            PyObject *tmp_ass_subscript_153;
            tmp_expression_value_425 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_425 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_425 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_425 == NULL)) {
                        tmp_expression_value_425 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_425 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 371;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_425);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_426 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_426 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_426 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_426 == NULL)) {
                        tmp_expression_value_426 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_426 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_425);

                        exception_lineno = 371;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_426);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_225 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_225 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_225 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_225);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_232 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_427;
                PyObject *tmp_subscript_value_233;
                PyObject *tmp_tuple_element_226;
                PyTuple_SET_ITEM(tmp_subscript_value_232, 0, tmp_tuple_element_225);
                tmp_expression_value_427 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_427 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_427 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_427 == NULL)) {
                            tmp_expression_value_427 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_427 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 371;
                            type_description_2 = "o";
                            goto tuple_build_exception_82;
                        }
                        Py_INCREF(tmp_expression_value_427);
                    } else {
                        goto tuple_build_exception_82;
                    }
                }

                tmp_tuple_element_226 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[227]);

                if (tmp_tuple_element_226 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_226 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[227]);

                        if (unlikely(tmp_tuple_element_226 == NULL)) {
                            tmp_tuple_element_226 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[227]);
                        }

                        if (tmp_tuple_element_226 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_427);

                            exception_lineno = 371;
                            type_description_2 = "o";
                            goto tuple_build_exception_82;
                        }
                        Py_INCREF(tmp_tuple_element_226);
                    } else {
                        goto tuple_build_exception_82;
                    }
                }

                tmp_subscript_value_233 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_233, 0, tmp_tuple_element_226);
                tmp_tuple_element_226 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_226 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_226 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_226 == NULL)) {
                            tmp_tuple_element_226 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_226 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 371;
                            type_description_2 = "o";
                            goto tuple_build_exception_83;
                        }
                        Py_INCREF(tmp_tuple_element_226);
                    } else {
                        goto tuple_build_exception_83;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_233, 1, tmp_tuple_element_226);
                goto tuple_build_noexception_82;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_83:;
                Py_DECREF(tmp_expression_value_427);
                Py_DECREF(tmp_subscript_value_233);
                goto tuple_build_exception_82;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_82:;
                tmp_tuple_element_225 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_427, tmp_subscript_value_233);
                Py_DECREF(tmp_expression_value_427);
                Py_DECREF(tmp_subscript_value_233);
                if (tmp_tuple_element_225 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 371;
                    type_description_2 = "o";
                    goto tuple_build_exception_82;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_232, 1, tmp_tuple_element_225);
            }
            goto tuple_build_noexception_83;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_82:;
            Py_DECREF(tmp_expression_value_425);
            Py_DECREF(tmp_expression_value_426);
            Py_DECREF(tmp_subscript_value_232);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_83:;
            tmp_subscript_value_231 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_426, tmp_subscript_value_232);
            Py_DECREF(tmp_expression_value_426);
            Py_DECREF(tmp_subscript_value_232);
            if (tmp_subscript_value_231 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_425);

                exception_lineno = 371;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_153 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_425, tmp_subscript_value_231);
            Py_DECREF(tmp_expression_value_425);
            Py_DECREF(tmp_subscript_value_231);
            if (tmp_ass_subvalue_153 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 371;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_153 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_153 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_153);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 371;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_153 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_153);

                exception_lineno = 371;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_153 = mod_consts[231];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_153, tmp_ass_subscript_153, tmp_ass_subvalue_153);
            Py_DECREF(tmp_ass_subscribed_153);
            Py_DECREF(tmp_ass_subvalue_153);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 371;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[171], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 372;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_154;
            PyObject *tmp_expression_value_428;
            PyObject *tmp_subscript_value_234;
            PyObject *tmp_expression_value_429;
            PyObject *tmp_subscript_value_235;
            PyObject *tmp_tuple_element_227;
            PyObject *tmp_ass_subscribed_154;
            PyObject *tmp_ass_subscript_154;
            tmp_expression_value_428 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_428 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_428 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_428 == NULL)) {
                        tmp_expression_value_428 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_428 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 372;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_428);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_429 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_429 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_429 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_429 == NULL)) {
                        tmp_expression_value_429 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_429 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_428);

                        exception_lineno = 372;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_429);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_227 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_227 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_227 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_227);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_235 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_430;
                PyObject *tmp_subscript_value_236;
                PyObject *tmp_tuple_element_228;
                PyTuple_SET_ITEM(tmp_subscript_value_235, 0, tmp_tuple_element_227);
                tmp_expression_value_430 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_430 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_430 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_430 == NULL)) {
                            tmp_expression_value_430 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_430 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 372;
                            type_description_2 = "o";
                            goto tuple_build_exception_84;
                        }
                        Py_INCREF(tmp_expression_value_430);
                    } else {
                        goto tuple_build_exception_84;
                    }
                }

                tmp_tuple_element_228 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[163]);

                if (tmp_tuple_element_228 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_228 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[163]);

                        if (unlikely(tmp_tuple_element_228 == NULL)) {
                            tmp_tuple_element_228 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[163]);
                        }

                        if (tmp_tuple_element_228 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_430);

                            exception_lineno = 372;
                            type_description_2 = "o";
                            goto tuple_build_exception_84;
                        }
                        Py_INCREF(tmp_tuple_element_228);
                    } else {
                        goto tuple_build_exception_84;
                    }
                }

                tmp_subscript_value_236 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_236, 0, tmp_tuple_element_228);
                tmp_tuple_element_228 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_228 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_228 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_228 == NULL)) {
                            tmp_tuple_element_228 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_228 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 372;
                            type_description_2 = "o";
                            goto tuple_build_exception_85;
                        }
                        Py_INCREF(tmp_tuple_element_228);
                    } else {
                        goto tuple_build_exception_85;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_236, 1, tmp_tuple_element_228);
                goto tuple_build_noexception_84;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_85:;
                Py_DECREF(tmp_expression_value_430);
                Py_DECREF(tmp_subscript_value_236);
                goto tuple_build_exception_84;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_84:;
                tmp_tuple_element_227 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_430, tmp_subscript_value_236);
                Py_DECREF(tmp_expression_value_430);
                Py_DECREF(tmp_subscript_value_236);
                if (tmp_tuple_element_227 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 372;
                    type_description_2 = "o";
                    goto tuple_build_exception_84;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_235, 1, tmp_tuple_element_227);
            }
            goto tuple_build_noexception_85;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_84:;
            Py_DECREF(tmp_expression_value_428);
            Py_DECREF(tmp_expression_value_429);
            Py_DECREF(tmp_subscript_value_235);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_85:;
            tmp_subscript_value_234 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_429, tmp_subscript_value_235);
            Py_DECREF(tmp_expression_value_429);
            Py_DECREF(tmp_subscript_value_235);
            if (tmp_subscript_value_234 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_428);

                exception_lineno = 372;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_154 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_428, tmp_subscript_value_234);
            Py_DECREF(tmp_expression_value_428);
            Py_DECREF(tmp_subscript_value_234);
            if (tmp_ass_subvalue_154 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 372;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_154 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_154 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_154);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 372;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_154 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_154);

                exception_lineno = 372;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_154 = mod_consts[171];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_154, tmp_ass_subscript_154, tmp_ass_subvalue_154);
            Py_DECREF(tmp_ass_subscribed_154);
            Py_DECREF(tmp_ass_subvalue_154);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 372;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[176], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 374;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }
        {
            PyObject *tmp_ass_subvalue_155;
            PyObject *tmp_expression_value_431;
            PyObject *tmp_subscript_value_237;
            PyObject *tmp_expression_value_432;
            PyObject *tmp_subscript_value_238;
            PyObject *tmp_tuple_element_229;
            PyObject *tmp_ass_subscribed_155;
            PyObject *tmp_ass_subscript_155;
            tmp_expression_value_431 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[22]);

            if (tmp_expression_value_431 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_431 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_431 == NULL)) {
                        tmp_expression_value_431 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_431 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 374;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_431);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_expression_value_432 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

            if (tmp_expression_value_432 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_432 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_432 == NULL)) {
                        tmp_expression_value_432 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_432 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_431);

                        exception_lineno = 374;
                        type_description_2 = "o";
                        goto frame_exception_exit_39;
                    }
                    Py_INCREF(tmp_expression_value_432);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_tuple_element_229 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

            if (tmp_tuple_element_229 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_229 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_229);
                } else {
                    goto frame_exception_exit_39;
                }
            }

            tmp_subscript_value_238 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_433;
                PyObject *tmp_subscript_value_239;
                PyObject *tmp_tuple_element_230;
                PyObject *tmp_expression_value_434;
                PyObject *tmp_subscript_value_240;
                PyObject *tmp_tuple_element_231;
                PyTuple_SET_ITEM(tmp_subscript_value_238, 0, tmp_tuple_element_229);
                tmp_expression_value_433 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[23]);

                if (tmp_expression_value_433 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_433 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_433 == NULL)) {
                            tmp_expression_value_433 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_433 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 374;
                            type_description_2 = "o";
                            goto tuple_build_exception_86;
                        }
                        Py_INCREF(tmp_expression_value_433);
                    } else {
                        goto tuple_build_exception_86;
                    }
                }

                tmp_expression_value_434 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[19]);

                if (tmp_expression_value_434 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_434 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                        if (unlikely(tmp_expression_value_434 == NULL)) {
                            tmp_expression_value_434 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                        }

                        if (tmp_expression_value_434 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_433);

                            exception_lineno = 374;
                            type_description_2 = "o";
                            goto tuple_build_exception_86;
                        }
                        Py_INCREF(tmp_expression_value_434);
                    } else {
                        goto tuple_build_exception_86;
                    }
                }

                tmp_tuple_element_231 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[46]);

                if (tmp_tuple_element_231 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_231 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_tuple_element_231);
                    } else {
                        goto tuple_build_exception_86;
                    }
                }

                tmp_subscript_value_240 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_240, 0, tmp_tuple_element_231);
                tmp_tuple_element_231 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[177]);

                if (tmp_tuple_element_231 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_231 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[177]);

                        if (unlikely(tmp_tuple_element_231 == NULL)) {
                            tmp_tuple_element_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[177]);
                        }

                        if (tmp_tuple_element_231 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 374;
                            type_description_2 = "o";
                            goto tuple_build_exception_87;
                        }
                        Py_INCREF(tmp_tuple_element_231);
                    } else {
                        goto tuple_build_exception_87;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_240, 1, tmp_tuple_element_231);
                goto tuple_build_noexception_86;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_87:;
                Py_DECREF(tmp_expression_value_433);
                Py_DECREF(tmp_expression_value_434);
                Py_DECREF(tmp_subscript_value_240);
                goto tuple_build_exception_86;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_86:;
                tmp_tuple_element_230 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_434, tmp_subscript_value_240);
                Py_DECREF(tmp_expression_value_434);
                Py_DECREF(tmp_subscript_value_240);
                if (tmp_tuple_element_230 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_433);

                    exception_lineno = 374;
                    type_description_2 = "o";
                    goto tuple_build_exception_86;
                }
                tmp_subscript_value_239 = MAKE_TUPLE_EMPTY(3);
                PyTuple_SET_ITEM(tmp_subscript_value_239, 0, tmp_tuple_element_230);
                tmp_tuple_element_230 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[75]);

                if (tmp_tuple_element_230 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_230 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[75]);

                        if (unlikely(tmp_tuple_element_230 == NULL)) {
                            tmp_tuple_element_230 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[75]);
                        }

                        if (tmp_tuple_element_230 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 374;
                            type_description_2 = "o";
                            goto tuple_build_exception_88;
                        }
                        Py_INCREF(tmp_tuple_element_230);
                    } else {
                        goto tuple_build_exception_88;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_239, 1, tmp_tuple_element_230);
                tmp_tuple_element_230 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[17]);

                if (tmp_tuple_element_230 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_230 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                        if (unlikely(tmp_tuple_element_230 == NULL)) {
                            tmp_tuple_element_230 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                        }

                        if (tmp_tuple_element_230 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 374;
                            type_description_2 = "o";
                            goto tuple_build_exception_88;
                        }
                        Py_INCREF(tmp_tuple_element_230);
                    } else {
                        goto tuple_build_exception_88;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_239, 2, tmp_tuple_element_230);
                goto tuple_build_noexception_87;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_88:;
                Py_DECREF(tmp_expression_value_433);
                Py_DECREF(tmp_subscript_value_239);
                goto tuple_build_exception_86;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_87:;
                tmp_tuple_element_229 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_433, tmp_subscript_value_239);
                Py_DECREF(tmp_expression_value_433);
                Py_DECREF(tmp_subscript_value_239);
                if (tmp_tuple_element_229 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 374;
                    type_description_2 = "o";
                    goto tuple_build_exception_86;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_238, 1, tmp_tuple_element_229);
            }
            goto tuple_build_noexception_88;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_86:;
            Py_DECREF(tmp_expression_value_431);
            Py_DECREF(tmp_expression_value_432);
            Py_DECREF(tmp_subscript_value_238);
            goto frame_exception_exit_39;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_88:;
            tmp_subscript_value_237 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_432, tmp_subscript_value_238);
            Py_DECREF(tmp_expression_value_432);
            Py_DECREF(tmp_subscript_value_238);
            if (tmp_subscript_value_237 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_431);

                exception_lineno = 374;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subvalue_155 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_431, tmp_subscript_value_237);
            Py_DECREF(tmp_expression_value_431);
            Py_DECREF(tmp_subscript_value_237);
            if (tmp_ass_subvalue_155 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 374;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscribed_155 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_155 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_155);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 374;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }

            if (tmp_ass_subscribed_155 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_155);

                exception_lineno = 374;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
            tmp_ass_subscript_155 = mod_consts[176];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_155, tmp_ass_subscript_155, tmp_ass_subvalue_155);
            Py_DECREF(tmp_ass_subscribed_155);
            Py_DECREF(tmp_ass_subvalue_155);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 374;
                type_description_2 = "o";
                goto frame_exception_exit_39;
            }
        }
        {
            PyObject *tmp_assign_source_383;
            tmp_assign_source_383 = MAKE_DICT_EMPTY();
            assert(tmp_Components$class_creation_1__class_decl_dict == NULL);
            tmp_Components$class_creation_1__class_decl_dict = tmp_assign_source_383;
        }
        {
            PyObject *tmp_assign_source_384;
            tmp_assign_source_384 = MAKE_DICT_EMPTY();
            assert(tmp_Components$class_creation_1__prepared == NULL);
            tmp_Components$class_creation_1__prepared = tmp_assign_source_384;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_59;
            CHECK_OBJECT(tmp_Components$class_creation_1__prepared);
            tmp_set_locals_59 = tmp_Components$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__59_Config_376 = tmp_set_locals_59;
            Py_INCREF(tmp_set_locals_59);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__59_Config_376, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[232];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__59_Config_376, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__59_Config_376, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_385;
            PyObject *tmp_called_value_117;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_232;
            PyObject *tmp_kwargs_value_100;
            tmp_called_value_117 = (PyObject *)&PyType_Type;
            tmp_tuple_element_232 = mod_consts[57];
            tmp_args_value_100 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_232);
            tmp_tuple_element_232 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_232);
            tmp_tuple_element_232 = locals_fastapi$openapi$models$$$class__59_Config_376;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_232);
            CHECK_OBJECT(tmp_Components$class_creation_1__class_decl_dict);
            tmp_kwargs_value_100 = tmp_Components$class_creation_1__class_decl_dict;
            frame_05284d199480ca0080b8ce2833da5f62_39->m_frame.f_lineno = 376;
            tmp_assign_source_385 = CALL_FUNCTION(tstate, tmp_called_value_117, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_385 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 376;
                type_description_2 = "o";
                goto try_except_handler_181;
            }
            assert(outline_58_var___class__ == NULL);
            outline_58_var___class__ = tmp_assign_source_385;
        }
        CHECK_OBJECT(outline_58_var___class__);
        tmp_dictset_value = outline_58_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_181;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_181:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__59_Config_376);
        locals_fastapi$openapi$models$$$class__59_Config_376 = NULL;
        goto try_return_handler_180;
        // Exception handler code:
        try_except_handler_181:;
        exception_keeper_type_176 = exception_type;
        exception_keeper_value_176 = exception_value;
        exception_keeper_tb_176 = exception_tb;
        exception_keeper_lineno_176 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__59_Config_376);
        locals_fastapi$openapi$models$$$class__59_Config_376 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_176;
        exception_value = exception_keeper_value_176;
        exception_tb = exception_keeper_tb_176;
        exception_lineno = exception_keeper_lineno_176;

        goto try_except_handler_180;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_180:;
        CHECK_OBJECT(outline_58_var___class__);
        Py_DECREF(outline_58_var___class__);
        outline_58_var___class__ = NULL;
        goto outline_result_59;
        // Exception handler code:
        try_except_handler_180:;
        exception_keeper_type_177 = exception_type;
        exception_keeper_value_177 = exception_value;
        exception_keeper_tb_177 = exception_tb;
        exception_keeper_lineno_177 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_177;
        exception_value = exception_keeper_value_177;
        exception_tb = exception_keeper_tb_177;
        exception_lineno = exception_keeper_lineno_177;

        goto outline_exception_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_59:;
        exception_lineno = 376;
        goto try_except_handler_179;
        outline_result_59:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 376;
            type_description_2 = "o";
            goto try_except_handler_179;
        }
        goto try_end_62;
        // Exception handler code:
        try_except_handler_179:;
        exception_keeper_type_178 = exception_type;
        exception_keeper_value_178 = exception_value;
        exception_keeper_tb_178 = exception_tb;
        exception_keeper_lineno_178 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Components$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Components$class_creation_1__class_decl_dict);
        tmp_Components$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Components$class_creation_1__prepared);
        Py_DECREF(tmp_Components$class_creation_1__prepared);
        tmp_Components$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_178;
        exception_value = exception_keeper_value_178;
        exception_tb = exception_keeper_tb_178;
        exception_lineno = exception_keeper_lineno_178;

        goto frame_exception_exit_39;
        // End of try:
        try_end_62:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_38;
        frame_exception_exit_39:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_05284d199480ca0080b8ce2833da5f62_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_05284d199480ca0080b8ce2833da5f62_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_05284d199480ca0080b8ce2833da5f62_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_05284d199480ca0080b8ce2833da5f62_39,
            type_description_2,
            outline_57_var___class__
        );



        assertFrameObject(frame_05284d199480ca0080b8ce2833da5f62_39);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_38;
        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_178;
        skip_nested_handling_38:;
        CHECK_OBJECT(tmp_Components$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Components$class_creation_1__class_decl_dict);
        tmp_Components$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Components$class_creation_1__prepared);
        Py_DECREF(tmp_Components$class_creation_1__prepared);
        tmp_Components$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_156;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_156 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_156 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_178;
            }
            if (tmp_condition_result_156 == NUITKA_BOOL_TRUE) {
                goto branch_yes_116;
            } else {
                goto branch_no_116;
            }
        }
        branch_yes_116:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__58_Components_364, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_178;
        }
        branch_no_116:;
        {
            PyObject *tmp_assign_source_386;
            PyObject *tmp_called_value_118;
            PyObject *tmp_args_value_101;
            PyObject *tmp_tuple_element_233;
            PyObject *tmp_kwargs_value_101;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_118 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_233 = mod_consts[228];
            tmp_args_value_101 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_233 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_233);
            tmp_tuple_element_233 = locals_fastapi$openapi$models$$$class__58_Components_364;
            PyTuple_SET_ITEM0(tmp_args_value_101, 2, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_101 = tmp_class_creation_38__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 364;
            tmp_assign_source_386 = CALL_FUNCTION(tstate, tmp_called_value_118, tmp_args_value_101, tmp_kwargs_value_101);
            Py_DECREF(tmp_args_value_101);
            if (tmp_assign_source_386 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_178;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_386;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_assign_source_382 = outline_57_var___class__;
        Py_INCREF(tmp_assign_source_382);
        goto try_return_handler_178;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_178:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__58_Components_364);
        locals_fastapi$openapi$models$$$class__58_Components_364 = NULL;
        goto try_return_handler_177;
        // Exception handler code:
        try_except_handler_178:;
        exception_keeper_type_179 = exception_type;
        exception_keeper_value_179 = exception_value;
        exception_keeper_tb_179 = exception_tb;
        exception_keeper_lineno_179 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__58_Components_364);
        locals_fastapi$openapi$models$$$class__58_Components_364 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_179;
        exception_value = exception_keeper_value_179;
        exception_tb = exception_keeper_tb_179;
        exception_lineno = exception_keeper_lineno_179;

        goto try_except_handler_177;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_177:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_177:;
        exception_keeper_type_180 = exception_type;
        exception_keeper_value_180 = exception_value;
        exception_keeper_tb_180 = exception_tb;
        exception_keeper_lineno_180 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_180;
        exception_value = exception_keeper_value_180;
        exception_tb = exception_keeper_tb_180;
        exception_lineno = exception_keeper_lineno_180;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 364;
        goto try_except_handler_176;
        outline_result_58:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[228], tmp_assign_source_382);
    }
    goto try_end_63;
    // Exception handler code:
    try_except_handler_176:;
    exception_keeper_type_181 = exception_type;
    exception_keeper_value_181 = exception_value;
    exception_keeper_tb_181 = exception_tb;
    exception_keeper_lineno_181 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_181;
    exception_value = exception_keeper_value_181;
    exception_tb = exception_keeper_tb_181;
    exception_lineno = exception_keeper_lineno_181;

    goto frame_exception_exit_1;
    // End of try:
    try_end_63:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_387;
        PyObject *tmp_tuple_element_234;
        tmp_tuple_element_234 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_234 == NULL)) {
            tmp_tuple_element_234 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_234 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_assign_source_387 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_387, 0, tmp_tuple_element_234);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_387;
    }
    {
        PyObject *tmp_assign_source_388;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_388 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_388 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_388;
    }
    {
        PyObject *tmp_assign_source_389;
        tmp_assign_source_389 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_389;
    }
    {
        PyObject *tmp_assign_source_390;
        PyObject *tmp_metaclass_value_39;
        nuitka_bool tmp_condition_result_157;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_435;
        PyObject *tmp_subscript_value_241;
        PyObject *tmp_bases_value_39;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_39 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_condition_result_157 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_157 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_41;
        } else {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_435 = tmp_class_creation_39__bases;
        tmp_subscript_value_241 = mod_consts[15];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_435, tmp_subscript_value_241, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        goto condexpr_end_41;
        condexpr_false_41:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_41:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_39 = tmp_class_creation_39__bases;
        tmp_assign_source_390 = SELECT_METACLASS(tstate, tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_390 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_390;
    }
    {
        bool tmp_condition_result_158;
        PyObject *tmp_expression_value_436;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_436 = tmp_class_creation_39__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_436, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_condition_result_158 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_158 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    {
        PyObject *tmp_assign_source_391;
        PyObject *tmp_called_value_119;
        PyObject *tmp_expression_value_437;
        PyObject *tmp_args_value_102;
        PyObject *tmp_tuple_element_235;
        PyObject *tmp_kwargs_value_102;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_437 = tmp_class_creation_39__metaclass;
        tmp_called_value_119 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_437, mod_consts[35]);
        if (tmp_called_value_119 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_tuple_element_235 = mod_consts[233];
        tmp_args_value_102 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_235);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_235 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_235);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_102 = tmp_class_creation_39__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 380;
        tmp_assign_source_391 = CALL_FUNCTION(tstate, tmp_called_value_119, tmp_args_value_102, tmp_kwargs_value_102);
        Py_DECREF(tmp_called_value_119);
        Py_DECREF(tmp_args_value_102);
        if (tmp_assign_source_391 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_391;
    }
    {
        bool tmp_condition_result_159;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_438;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_438 = tmp_class_creation_39__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_438, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_operand_value_40 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_159 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_159 != false) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_mod_expr_left_39;
        PyObject *tmp_mod_expr_right_39;
        PyObject *tmp_tuple_element_236;
        PyObject *tmp_expression_value_439;
        PyObject *tmp_name_value_44;
        PyObject *tmp_default_value_39;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_mod_expr_left_39 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_439 = tmp_class_creation_39__metaclass;
        tmp_name_value_44 = mod_consts[38];
        tmp_default_value_39 = mod_consts[39];
        tmp_tuple_element_236 = BUILTIN_GETATTR(tstate, tmp_expression_value_439, tmp_name_value_44, tmp_default_value_39);
        if (tmp_tuple_element_236 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        tmp_mod_expr_right_39 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_440;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_mod_expr_right_39, 0, tmp_tuple_element_236);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_78 = tmp_class_creation_39__prepared;
            tmp_expression_value_440 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_440 == NULL));
            tmp_tuple_element_236 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_440, mod_consts[38]);
            Py_DECREF(tmp_expression_value_440);
            if (tmp_tuple_element_236 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 380;

                goto tuple_build_exception_89;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_39, 1, tmp_tuple_element_236);
        }
        goto tuple_build_noexception_89;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_89:;
        Py_DECREF(tmp_mod_expr_right_39);
        goto try_except_handler_182;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_89:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_39, tmp_mod_expr_right_39);
        Py_DECREF(tmp_mod_expr_right_39);
        if (tmp_raise_value_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_182;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_39;
        exception_lineno = 380;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_182;
    }
    branch_no_118:;
    goto branch_end_117;
    branch_no_117:;
    {
        PyObject *tmp_assign_source_392;
        tmp_assign_source_392 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_392;
    }
    branch_end_117:;
    {
        PyObject *tmp_assign_source_393;
        {
            PyObject *tmp_set_locals_60;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_60 = tmp_class_creation_39__prepared;
            locals_fastapi$openapi$models$$$class__60_Tag_380 = tmp_set_locals_60;
            Py_INCREF(tmp_set_locals_60);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_184;
        }
        tmp_dictset_value = mod_consts[233];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_184;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_184;
        }
        frame_594e973395c34fbbae2605a54f71f300_40 = MAKE_CLASS_FRAME(tstate, codeobj_594e973395c34fbbae2605a54f71f300, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_594e973395c34fbbae2605a54f71f300_40);
        assert(Py_REFCNT(frame_594e973395c34fbbae2605a54f71f300_40) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_156;
            PyObject *tmp_ass_subscribed_156;
            PyObject *tmp_ass_subscript_156;
            tmp_ass_subvalue_156 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[46]);

            if (tmp_ass_subvalue_156 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_156 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_156);
                } else {
                    goto frame_exception_exit_40;
                }
            }

            tmp_ass_subscribed_156 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_156 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_156);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 381;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }

            if (tmp_ass_subscribed_156 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_156);

                exception_lineno = 381;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
            tmp_ass_subscript_156 = mod_consts[51];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_156, tmp_ass_subscript_156, tmp_ass_subvalue_156);
            Py_DECREF(tmp_ass_subscribed_156);
            Py_DECREF(tmp_ass_subvalue_156);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 381;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[63], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 382;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }
        {
            PyObject *tmp_ass_subvalue_157;
            PyObject *tmp_expression_value_441;
            PyObject *tmp_subscript_value_242;
            PyObject *tmp_ass_subscribed_157;
            PyObject *tmp_ass_subscript_157;
            tmp_expression_value_441 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[22]);

            if (tmp_expression_value_441 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_441 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_441 == NULL)) {
                        tmp_expression_value_441 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_441 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 382;
                        type_description_2 = "o";
                        goto frame_exception_exit_40;
                    }
                    Py_INCREF(tmp_expression_value_441);
                } else {
                    goto frame_exception_exit_40;
                }
            }

            tmp_subscript_value_242 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[46]);

            if (tmp_subscript_value_242 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_242 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_subscript_value_242);
                } else {
                    goto frame_exception_exit_40;
                }
            }

            tmp_ass_subvalue_157 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_441, tmp_subscript_value_242);
            Py_DECREF(tmp_expression_value_441);
            Py_DECREF(tmp_subscript_value_242);
            if (tmp_ass_subvalue_157 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
            tmp_ass_subscribed_157 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_157 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_157);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 382;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }

            if (tmp_ass_subscribed_157 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_157);

                exception_lineno = 382;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
            tmp_ass_subscript_157 = mod_consts[63];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_157, tmp_ass_subscript_157, tmp_ass_subvalue_157);
            Py_DECREF(tmp_ass_subscribed_157);
            Py_DECREF(tmp_ass_subvalue_157);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[127], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 383;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }
        {
            PyObject *tmp_ass_subvalue_158;
            PyObject *tmp_expression_value_442;
            PyObject *tmp_subscript_value_243;
            PyObject *tmp_ass_subscribed_158;
            PyObject *tmp_ass_subscript_158;
            tmp_expression_value_442 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[22]);

            if (tmp_expression_value_442 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_442 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_442 == NULL)) {
                        tmp_expression_value_442 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_442 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 383;
                        type_description_2 = "o";
                        goto frame_exception_exit_40;
                    }
                    Py_INCREF(tmp_expression_value_442);
                } else {
                    goto frame_exception_exit_40;
                }
            }

            tmp_subscript_value_243 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[89]);

            if (tmp_subscript_value_243 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_243 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[89]);

                    if (unlikely(tmp_subscript_value_243 == NULL)) {
                        tmp_subscript_value_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[89]);
                    }

                    if (tmp_subscript_value_243 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_442);

                        exception_lineno = 383;
                        type_description_2 = "o";
                        goto frame_exception_exit_40;
                    }
                    Py_INCREF(tmp_subscript_value_243);
                } else {
                    goto frame_exception_exit_40;
                }
            }

            tmp_ass_subvalue_158 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_442, tmp_subscript_value_243);
            Py_DECREF(tmp_expression_value_442);
            Py_DECREF(tmp_subscript_value_243);
            if (tmp_ass_subvalue_158 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 383;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
            tmp_ass_subscribed_158 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_158 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_158);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 383;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }

            if (tmp_ass_subscribed_158 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_158);

                exception_lineno = 383;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
            tmp_ass_subscript_158 = mod_consts[127];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_158, tmp_ass_subscript_158, tmp_ass_subvalue_158);
            Py_DECREF(tmp_ass_subscribed_158);
            Py_DECREF(tmp_ass_subvalue_158);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 383;
                type_description_2 = "o";
                goto frame_exception_exit_40;
            }
        }
        {
            PyObject *tmp_assign_source_394;
            tmp_assign_source_394 = MAKE_DICT_EMPTY();
            assert(tmp_Tag$class_creation_1__class_decl_dict == NULL);
            tmp_Tag$class_creation_1__class_decl_dict = tmp_assign_source_394;
        }
        {
            PyObject *tmp_assign_source_395;
            tmp_assign_source_395 = MAKE_DICT_EMPTY();
            assert(tmp_Tag$class_creation_1__prepared == NULL);
            tmp_Tag$class_creation_1__prepared = tmp_assign_source_395;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_61;
            CHECK_OBJECT(tmp_Tag$class_creation_1__prepared);
            tmp_set_locals_61 = tmp_Tag$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__61_Config_385 = tmp_set_locals_61;
            Py_INCREF(tmp_set_locals_61);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__61_Config_385, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[234];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__61_Config_385, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__61_Config_385, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_396;
            PyObject *tmp_called_value_120;
            PyObject *tmp_args_value_103;
            PyObject *tmp_tuple_element_237;
            PyObject *tmp_kwargs_value_103;
            tmp_called_value_120 = (PyObject *)&PyType_Type;
            tmp_tuple_element_237 = mod_consts[57];
            tmp_args_value_103 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_237);
            tmp_tuple_element_237 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_237);
            tmp_tuple_element_237 = locals_fastapi$openapi$models$$$class__61_Config_385;
            PyTuple_SET_ITEM0(tmp_args_value_103, 2, tmp_tuple_element_237);
            CHECK_OBJECT(tmp_Tag$class_creation_1__class_decl_dict);
            tmp_kwargs_value_103 = tmp_Tag$class_creation_1__class_decl_dict;
            frame_594e973395c34fbbae2605a54f71f300_40->m_frame.f_lineno = 385;
            tmp_assign_source_396 = CALL_FUNCTION(tstate, tmp_called_value_120, tmp_args_value_103, tmp_kwargs_value_103);
            Py_DECREF(tmp_args_value_103);
            if (tmp_assign_source_396 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 385;
                type_description_2 = "o";
                goto try_except_handler_187;
            }
            assert(outline_60_var___class__ == NULL);
            outline_60_var___class__ = tmp_assign_source_396;
        }
        CHECK_OBJECT(outline_60_var___class__);
        tmp_dictset_value = outline_60_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_187;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_187:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__61_Config_385);
        locals_fastapi$openapi$models$$$class__61_Config_385 = NULL;
        goto try_return_handler_186;
        // Exception handler code:
        try_except_handler_187:;
        exception_keeper_type_182 = exception_type;
        exception_keeper_value_182 = exception_value;
        exception_keeper_tb_182 = exception_tb;
        exception_keeper_lineno_182 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__61_Config_385);
        locals_fastapi$openapi$models$$$class__61_Config_385 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_182;
        exception_value = exception_keeper_value_182;
        exception_tb = exception_keeper_tb_182;
        exception_lineno = exception_keeper_lineno_182;

        goto try_except_handler_186;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_186:;
        CHECK_OBJECT(outline_60_var___class__);
        Py_DECREF(outline_60_var___class__);
        outline_60_var___class__ = NULL;
        goto outline_result_61;
        // Exception handler code:
        try_except_handler_186:;
        exception_keeper_type_183 = exception_type;
        exception_keeper_value_183 = exception_value;
        exception_keeper_tb_183 = exception_tb;
        exception_keeper_lineno_183 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_183;
        exception_value = exception_keeper_value_183;
        exception_tb = exception_keeper_tb_183;
        exception_lineno = exception_keeper_lineno_183;

        goto outline_exception_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_61:;
        exception_lineno = 385;
        goto try_except_handler_185;
        outline_result_61:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_2 = "o";
            goto try_except_handler_185;
        }
        goto try_end_64;
        // Exception handler code:
        try_except_handler_185:;
        exception_keeper_type_184 = exception_type;
        exception_keeper_value_184 = exception_value;
        exception_keeper_tb_184 = exception_tb;
        exception_keeper_lineno_184 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Tag$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Tag$class_creation_1__class_decl_dict);
        tmp_Tag$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Tag$class_creation_1__prepared);
        Py_DECREF(tmp_Tag$class_creation_1__prepared);
        tmp_Tag$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_184;
        exception_value = exception_keeper_value_184;
        exception_tb = exception_keeper_tb_184;
        exception_lineno = exception_keeper_lineno_184;

        goto frame_exception_exit_40;
        // End of try:
        try_end_64:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_39;
        frame_exception_exit_40:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_594e973395c34fbbae2605a54f71f300_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_594e973395c34fbbae2605a54f71f300_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_594e973395c34fbbae2605a54f71f300_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_594e973395c34fbbae2605a54f71f300_40,
            type_description_2,
            outline_59_var___class__
        );



        assertFrameObject(frame_594e973395c34fbbae2605a54f71f300_40);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_39;
        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_184;
        skip_nested_handling_39:;
        CHECK_OBJECT(tmp_Tag$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Tag$class_creation_1__class_decl_dict);
        tmp_Tag$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Tag$class_creation_1__prepared);
        Py_DECREF(tmp_Tag$class_creation_1__prepared);
        tmp_Tag$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_160;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_160 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_160 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 380;

                goto try_except_handler_184;
            }
            if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
                goto branch_yes_119;
            } else {
                goto branch_no_119;
            }
        }
        branch_yes_119:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__60_Tag_380, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;

            goto try_except_handler_184;
        }
        branch_no_119:;
        {
            PyObject *tmp_assign_source_397;
            PyObject *tmp_called_value_121;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_238;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_121 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_238 = mod_consts[233];
            tmp_args_value_104 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_238 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_238);
            tmp_tuple_element_238 = locals_fastapi$openapi$models$$$class__60_Tag_380;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_39__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 380;
            tmp_assign_source_397 = CALL_FUNCTION(tstate, tmp_called_value_121, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_397 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 380;

                goto try_except_handler_184;
            }
            assert(outline_59_var___class__ == NULL);
            outline_59_var___class__ = tmp_assign_source_397;
        }
        CHECK_OBJECT(outline_59_var___class__);
        tmp_assign_source_393 = outline_59_var___class__;
        Py_INCREF(tmp_assign_source_393);
        goto try_return_handler_184;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_184:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__60_Tag_380);
        locals_fastapi$openapi$models$$$class__60_Tag_380 = NULL;
        goto try_return_handler_183;
        // Exception handler code:
        try_except_handler_184:;
        exception_keeper_type_185 = exception_type;
        exception_keeper_value_185 = exception_value;
        exception_keeper_tb_185 = exception_tb;
        exception_keeper_lineno_185 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__60_Tag_380);
        locals_fastapi$openapi$models$$$class__60_Tag_380 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_185;
        exception_value = exception_keeper_value_185;
        exception_tb = exception_keeper_tb_185;
        exception_lineno = exception_keeper_lineno_185;

        goto try_except_handler_183;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_183:;
        CHECK_OBJECT(outline_59_var___class__);
        Py_DECREF(outline_59_var___class__);
        outline_59_var___class__ = NULL;
        goto outline_result_60;
        // Exception handler code:
        try_except_handler_183:;
        exception_keeper_type_186 = exception_type;
        exception_keeper_value_186 = exception_value;
        exception_keeper_tb_186 = exception_tb;
        exception_keeper_lineno_186 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_186;
        exception_value = exception_keeper_value_186;
        exception_tb = exception_keeper_tb_186;
        exception_lineno = exception_keeper_lineno_186;

        goto outline_exception_60;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_60:;
        exception_lineno = 380;
        goto try_except_handler_182;
        outline_result_60:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[233], tmp_assign_source_393);
    }
    goto try_end_65;
    // Exception handler code:
    try_except_handler_182:;
    exception_keeper_type_187 = exception_type;
    exception_keeper_value_187 = exception_value;
    exception_keeper_tb_187 = exception_tb;
    exception_keeper_lineno_187 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_187;
    exception_value = exception_keeper_value_187;
    exception_tb = exception_keeper_tb_187;
    exception_lineno = exception_keeper_lineno_187;

    goto frame_exception_exit_1;
    // End of try:
    try_end_65:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_398;
        PyObject *tmp_tuple_element_239;
        tmp_tuple_element_239 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_tuple_element_239 == NULL)) {
            tmp_tuple_element_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[29]);
        }

        if (tmp_tuple_element_239 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_assign_source_398 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_398, 0, tmp_tuple_element_239);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_398;
    }
    {
        PyObject *tmp_assign_source_399;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_399 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_399 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_399;
    }
    {
        PyObject *tmp_assign_source_400;
        tmp_assign_source_400 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_400;
    }
    {
        PyObject *tmp_assign_source_401;
        PyObject *tmp_metaclass_value_40;
        nuitka_bool tmp_condition_result_161;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_443;
        PyObject *tmp_subscript_value_244;
        PyObject *tmp_bases_value_40;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_40 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_condition_result_161 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_161 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_42;
        } else {
            goto condexpr_false_42;
        }
        condexpr_true_42:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_443 = tmp_class_creation_40__bases;
        tmp_subscript_value_244 = mod_consts[15];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_443, tmp_subscript_value_244, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        goto condexpr_end_42;
        condexpr_false_42:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_42:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_40 = tmp_class_creation_40__bases;
        tmp_assign_source_401 = SELECT_METACLASS(tstate, tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_401 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_401;
    }
    {
        bool tmp_condition_result_162;
        PyObject *tmp_expression_value_444;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_444 = tmp_class_creation_40__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_444, mod_consts[35]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_condition_result_162 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_162 != false) {
            goto branch_yes_120;
        } else {
            goto branch_no_120;
        }
    }
    branch_yes_120:;
    {
        PyObject *tmp_assign_source_402;
        PyObject *tmp_called_value_122;
        PyObject *tmp_expression_value_445;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_240;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_445 = tmp_class_creation_40__metaclass;
        tmp_called_value_122 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_445, mod_consts[35]);
        if (tmp_called_value_122 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_tuple_element_240 = mod_consts[235];
        tmp_args_value_105 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_240 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_40__class_decl_dict;
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 389;
        tmp_assign_source_402 = CALL_FUNCTION(tstate, tmp_called_value_122, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_122);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_402 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_402;
    }
    {
        bool tmp_condition_result_163;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_446;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_446 = tmp_class_creation_40__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_446, mod_consts[36]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_operand_value_41 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        assert(!(tmp_res == -1));
        tmp_condition_result_163 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_163 != false) {
            goto branch_yes_121;
        } else {
            goto branch_no_121;
        }
    }
    branch_yes_121:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_mod_expr_left_40;
        PyObject *tmp_mod_expr_right_40;
        PyObject *tmp_tuple_element_241;
        PyObject *tmp_expression_value_447;
        PyObject *tmp_name_value_45;
        PyObject *tmp_default_value_40;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_mod_expr_left_40 = mod_consts[37];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_447 = tmp_class_creation_40__metaclass;
        tmp_name_value_45 = mod_consts[38];
        tmp_default_value_40 = mod_consts[39];
        tmp_tuple_element_241 = BUILTIN_GETATTR(tstate, tmp_expression_value_447, tmp_name_value_45, tmp_default_value_40);
        if (tmp_tuple_element_241 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        tmp_mod_expr_right_40 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_448;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_mod_expr_right_40, 0, tmp_tuple_element_241);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_80 = tmp_class_creation_40__prepared;
            tmp_expression_value_448 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_448 == NULL));
            tmp_tuple_element_241 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_448, mod_consts[38]);
            Py_DECREF(tmp_expression_value_448);
            if (tmp_tuple_element_241 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto tuple_build_exception_90;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_40, 1, tmp_tuple_element_241);
        }
        goto tuple_build_noexception_90;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_90:;
        Py_DECREF(tmp_mod_expr_right_40);
        goto try_except_handler_188;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_90:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_40, tmp_mod_expr_right_40);
        Py_DECREF(tmp_mod_expr_right_40);
        if (tmp_raise_value_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_188;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_40;
        exception_lineno = 389;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_188;
    }
    branch_no_121:;
    goto branch_end_120;
    branch_no_120:;
    {
        PyObject *tmp_assign_source_403;
        tmp_assign_source_403 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_403;
    }
    branch_end_120:;
    {
        PyObject *tmp_assign_source_404;
        {
            PyObject *tmp_set_locals_62;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_62 = tmp_class_creation_40__prepared;
            locals_fastapi$openapi$models$$$class__62_OpenAPI_389 = tmp_set_locals_62;
            Py_INCREF(tmp_set_locals_62);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[41], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_190;
        }
        tmp_dictset_value = mod_consts[235];
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[42], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_190;
        }
        tmp_dictset_value = MAKE_DICT_EMPTY();
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_190;
        }
        frame_62b5706d1793d4f1b37c75c20a94c727_41 = MAKE_CLASS_FRAME(tstate, codeobj_62b5706d1793d4f1b37c75c20a94c727, module_fastapi$openapi$models, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_62b5706d1793d4f1b37c75c20a94c727_41);
        assert(Py_REFCNT(frame_62b5706d1793d4f1b37c75c20a94c727_41) == 2);

        // Framed code:
        {
            PyObject *tmp_ass_subvalue_159;
            PyObject *tmp_ass_subscribed_159;
            PyObject *tmp_ass_subscript_159;
            tmp_ass_subvalue_159 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[46]);

            if (tmp_ass_subvalue_159 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_159 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_ass_subvalue_159);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_ass_subscribed_159 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_159 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_159);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_159 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_159);

                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_159 = mod_consts[236];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_159, tmp_ass_subscript_159, tmp_ass_subvalue_159);
            Py_DECREF(tmp_ass_subscribed_159);
            Py_DECREF(tmp_ass_subvalue_159);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        {
            PyObject *tmp_ass_subvalue_160;
            PyObject *tmp_ass_subscribed_160;
            PyObject *tmp_ass_subscript_160;
            tmp_ass_subvalue_160 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[61]);

            if (tmp_ass_subvalue_160 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_ass_subvalue_160 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[61]);

                    if (unlikely(tmp_ass_subvalue_160 == NULL)) {
                        tmp_ass_subvalue_160 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[61]);
                    }

                    if (tmp_ass_subvalue_160 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 391;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_ass_subvalue_160);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_ass_subscribed_160 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_160 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_160);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_160 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_160);

                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_160 = mod_consts[237];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_160, tmp_ass_subscript_160, tmp_ass_subvalue_160);
            Py_DECREF(tmp_ass_subscribed_160);
            Py_DECREF(tmp_ass_subvalue_160);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[179], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        {
            PyObject *tmp_ass_subvalue_161;
            PyObject *tmp_expression_value_449;
            PyObject *tmp_subscript_value_245;
            PyObject *tmp_expression_value_450;
            PyObject *tmp_subscript_value_246;
            PyObject *tmp_ass_subscribed_161;
            PyObject *tmp_ass_subscript_161;
            tmp_expression_value_449 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[22]);

            if (tmp_expression_value_449 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_449 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_449 == NULL)) {
                        tmp_expression_value_449 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_449 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 392;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_449);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_expression_value_450 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[21]);

            if (tmp_expression_value_450 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_450 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_450 == NULL)) {
                        tmp_expression_value_450 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_450 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_449);

                        exception_lineno = 392;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_450);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_246 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[72]);

            if (tmp_subscript_value_246 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_246 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[72]);

                    if (unlikely(tmp_subscript_value_246 == NULL)) {
                        tmp_subscript_value_246 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[72]);
                    }

                    if (tmp_subscript_value_246 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_449);
                        Py_DECREF(tmp_expression_value_450);

                        exception_lineno = 392;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_subscript_value_246);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_245 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_450, tmp_subscript_value_246);
            Py_DECREF(tmp_expression_value_450);
            Py_DECREF(tmp_subscript_value_246);
            if (tmp_subscript_value_245 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_449);

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subvalue_161 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_449, tmp_subscript_value_245);
            Py_DECREF(tmp_expression_value_449);
            Py_DECREF(tmp_subscript_value_245);
            if (tmp_ass_subvalue_161 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_161 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_161 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_161);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_161 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_161);

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_161 = mod_consts[179];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_161, tmp_ass_subscript_161, tmp_ass_subvalue_161);
            Py_DECREF(tmp_ass_subscribed_161);
            Py_DECREF(tmp_ass_subvalue_161);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        {
            PyObject *tmp_ass_subvalue_162;
            PyObject *tmp_expression_value_451;
            PyObject *tmp_subscript_value_247;
            PyObject *tmp_tuple_element_242;
            PyObject *tmp_ass_subscribed_162;
            PyObject *tmp_ass_subscript_162;
            tmp_expression_value_451 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[19]);

            if (tmp_expression_value_451 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_451 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_451 == NULL)) {
                        tmp_expression_value_451 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_451 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 394;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_451);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_tuple_element_242 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[46]);

            if (tmp_tuple_element_242 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_242 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_242);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_247 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_452;
                PyObject *tmp_subscript_value_248;
                PyObject *tmp_tuple_element_243;
                PyTuple_SET_ITEM(tmp_subscript_value_247, 0, tmp_tuple_element_242);
                tmp_expression_value_452 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[23]);

                if (tmp_expression_value_452 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_452 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[23]);

                        if (unlikely(tmp_expression_value_452 == NULL)) {
                            tmp_expression_value_452 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[23]);
                        }

                        if (tmp_expression_value_452 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 394;
                            type_description_2 = "o";
                            goto tuple_build_exception_91;
                        }
                        Py_INCREF(tmp_expression_value_452);
                    } else {
                        goto tuple_build_exception_91;
                    }
                }

                tmp_tuple_element_243 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[177]);

                if (tmp_tuple_element_243 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_243 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[177]);

                        if (unlikely(tmp_tuple_element_243 == NULL)) {
                            tmp_tuple_element_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[177]);
                        }

                        if (tmp_tuple_element_243 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_452);

                            exception_lineno = 394;
                            type_description_2 = "o";
                            goto tuple_build_exception_91;
                        }
                        Py_INCREF(tmp_tuple_element_243);
                    } else {
                        goto tuple_build_exception_91;
                    }
                }

                tmp_subscript_value_248 = MAKE_TUPLE_EMPTY(2);
                PyTuple_SET_ITEM(tmp_subscript_value_248, 0, tmp_tuple_element_243);
                tmp_tuple_element_243 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[17]);

                if (tmp_tuple_element_243 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_tuple_element_243 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[17]);

                        if (unlikely(tmp_tuple_element_243 == NULL)) {
                            tmp_tuple_element_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[17]);
                        }

                        if (tmp_tuple_element_243 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 394;
                            type_description_2 = "o";
                            goto tuple_build_exception_92;
                        }
                        Py_INCREF(tmp_tuple_element_243);
                    } else {
                        goto tuple_build_exception_92;
                    }
                }

                PyTuple_SET_ITEM(tmp_subscript_value_248, 1, tmp_tuple_element_243);
                goto tuple_build_noexception_91;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_92:;
                Py_DECREF(tmp_expression_value_452);
                Py_DECREF(tmp_subscript_value_248);
                goto tuple_build_exception_91;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_91:;
                tmp_tuple_element_242 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_452, tmp_subscript_value_248);
                Py_DECREF(tmp_expression_value_452);
                Py_DECREF(tmp_subscript_value_248);
                if (tmp_tuple_element_242 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 394;
                    type_description_2 = "o";
                    goto tuple_build_exception_91;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_247, 1, tmp_tuple_element_242);
            }
            goto tuple_build_noexception_92;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_91:;
            Py_DECREF(tmp_expression_value_451);
            Py_DECREF(tmp_subscript_value_247);
            goto frame_exception_exit_41;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_92:;
            tmp_ass_subvalue_162 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_451, tmp_subscript_value_247);
            Py_DECREF(tmp_expression_value_451);
            Py_DECREF(tmp_subscript_value_247);
            if (tmp_ass_subvalue_162 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_162 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_162 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_162);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_162 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_162);

                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_162 = mod_consts[238];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_162, tmp_ass_subscript_162, tmp_ass_subvalue_162);
            Py_DECREF(tmp_ass_subscribed_162);
            Py_DECREF(tmp_ass_subvalue_162);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[239], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        {
            PyObject *tmp_ass_subvalue_163;
            PyObject *tmp_expression_value_453;
            PyObject *tmp_subscript_value_249;
            PyObject *tmp_ass_subscribed_163;
            PyObject *tmp_ass_subscript_163;
            tmp_expression_value_453 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[22]);

            if (tmp_expression_value_453 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_453 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_453 == NULL)) {
                        tmp_expression_value_453 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_453 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 395;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_453);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_249 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[228]);

            if (tmp_subscript_value_249 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_249 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[228]);

                    if (unlikely(tmp_subscript_value_249 == NULL)) {
                        tmp_subscript_value_249 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[228]);
                    }

                    if (tmp_subscript_value_249 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_453);

                        exception_lineno = 395;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_subscript_value_249);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_ass_subvalue_163 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_453, tmp_subscript_value_249);
            Py_DECREF(tmp_expression_value_453);
            Py_DECREF(tmp_subscript_value_249);
            if (tmp_ass_subvalue_163 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_163 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_163 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_163);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_163 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_163);

                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_163 = mod_consts[239];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_163, tmp_ass_subscript_163, tmp_ass_subvalue_163);
            Py_DECREF(tmp_ass_subscribed_163);
            Py_DECREF(tmp_ass_subvalue_163);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[178], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        {
            PyObject *tmp_ass_subvalue_164;
            PyObject *tmp_expression_value_454;
            PyObject *tmp_subscript_value_250;
            PyObject *tmp_expression_value_455;
            PyObject *tmp_subscript_value_251;
            PyObject *tmp_expression_value_456;
            PyObject *tmp_subscript_value_252;
            PyObject *tmp_tuple_element_244;
            PyObject *tmp_ass_subscribed_164;
            PyObject *tmp_ass_subscript_164;
            tmp_expression_value_454 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[22]);

            if (tmp_expression_value_454 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_454 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_454 == NULL)) {
                        tmp_expression_value_454 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_454 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 396;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_454);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_expression_value_455 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[21]);

            if (tmp_expression_value_455 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_455 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_455 == NULL)) {
                        tmp_expression_value_455 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_455 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_454);

                        exception_lineno = 396;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_455);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_expression_value_456 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[19]);

            if (tmp_expression_value_456 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_456 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[19]);

                    if (unlikely(tmp_expression_value_456 == NULL)) {
                        tmp_expression_value_456 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
                    }

                    if (tmp_expression_value_456 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_454);
                        Py_DECREF(tmp_expression_value_455);

                        exception_lineno = 396;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_456);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_tuple_element_244 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[46]);

            if (tmp_tuple_element_244 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_244 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_tuple_element_244);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_252 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_457;
                PyObject *tmp_subscript_value_253;
                PyTuple_SET_ITEM(tmp_subscript_value_252, 0, tmp_tuple_element_244);
                tmp_expression_value_457 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[21]);

                if (tmp_expression_value_457 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_457 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                        if (unlikely(tmp_expression_value_457 == NULL)) {
                            tmp_expression_value_457 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                        }

                        if (tmp_expression_value_457 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 396;
                            type_description_2 = "o";
                            goto tuple_build_exception_93;
                        }
                        Py_INCREF(tmp_expression_value_457);
                    } else {
                        goto tuple_build_exception_93;
                    }
                }

                tmp_subscript_value_253 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[46]);

                if (tmp_subscript_value_253 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_subscript_value_253 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_253);
                    } else {
                        goto tuple_build_exception_93;
                    }
                }

                tmp_tuple_element_244 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_457, tmp_subscript_value_253);
                Py_DECREF(tmp_expression_value_457);
                Py_DECREF(tmp_subscript_value_253);
                if (tmp_tuple_element_244 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_2 = "o";
                    goto tuple_build_exception_93;
                }
                PyTuple_SET_ITEM(tmp_subscript_value_252, 1, tmp_tuple_element_244);
            }
            goto tuple_build_noexception_93;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_93:;
            Py_DECREF(tmp_expression_value_454);
            Py_DECREF(tmp_expression_value_455);
            Py_DECREF(tmp_expression_value_456);
            Py_DECREF(tmp_subscript_value_252);
            goto frame_exception_exit_41;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_93:;
            tmp_subscript_value_251 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_456, tmp_subscript_value_252);
            Py_DECREF(tmp_expression_value_456);
            Py_DECREF(tmp_subscript_value_252);
            if (tmp_subscript_value_251 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_454);
                Py_DECREF(tmp_expression_value_455);

                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_subscript_value_250 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_455, tmp_subscript_value_251);
            Py_DECREF(tmp_expression_value_455);
            Py_DECREF(tmp_subscript_value_251);
            if (tmp_subscript_value_250 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_454);

                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subvalue_164 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_454, tmp_subscript_value_250);
            Py_DECREF(tmp_expression_value_454);
            Py_DECREF(tmp_subscript_value_250);
            if (tmp_ass_subvalue_164 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_164 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_164 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_164);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_164 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_164);

                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_164 = mod_consts[178];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_164, tmp_ass_subscript_164, tmp_ass_subvalue_164);
            Py_DECREF(tmp_ass_subscribed_164);
            Py_DECREF(tmp_ass_subvalue_164);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[174], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        {
            PyObject *tmp_ass_subvalue_165;
            PyObject *tmp_expression_value_458;
            PyObject *tmp_subscript_value_254;
            PyObject *tmp_expression_value_459;
            PyObject *tmp_subscript_value_255;
            PyObject *tmp_ass_subscribed_165;
            PyObject *tmp_ass_subscript_165;
            tmp_expression_value_458 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[22]);

            if (tmp_expression_value_458 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_458 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_458 == NULL)) {
                        tmp_expression_value_458 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_458 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 397;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_458);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_expression_value_459 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[21]);

            if (tmp_expression_value_459 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_459 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[21]);

                    if (unlikely(tmp_expression_value_459 == NULL)) {
                        tmp_expression_value_459 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[21]);
                    }

                    if (tmp_expression_value_459 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_458);

                        exception_lineno = 397;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_459);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_255 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[233]);

            if (tmp_subscript_value_255 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_255 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[233]);

                    if (unlikely(tmp_subscript_value_255 == NULL)) {
                        tmp_subscript_value_255 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[233]);
                    }

                    if (tmp_subscript_value_255 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_458);
                        Py_DECREF(tmp_expression_value_459);

                        exception_lineno = 397;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_subscript_value_255);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_254 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_459, tmp_subscript_value_255);
            Py_DECREF(tmp_expression_value_459);
            Py_DECREF(tmp_subscript_value_255);
            if (tmp_subscript_value_254 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_expression_value_458);

                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subvalue_165 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_458, tmp_subscript_value_254);
            Py_DECREF(tmp_expression_value_458);
            Py_DECREF(tmp_subscript_value_254);
            if (tmp_ass_subvalue_165 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_165 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_165 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_165);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_165 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_165);

                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_165 = mod_consts[174];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_165, tmp_ass_subscript_165, tmp_ass_subvalue_165);
            Py_DECREF(tmp_ass_subscribed_165);
            Py_DECREF(tmp_ass_subvalue_165);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[127], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        {
            PyObject *tmp_ass_subvalue_166;
            PyObject *tmp_expression_value_460;
            PyObject *tmp_subscript_value_256;
            PyObject *tmp_ass_subscribed_166;
            PyObject *tmp_ass_subscript_166;
            tmp_expression_value_460 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[22]);

            if (tmp_expression_value_460 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_460 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[22]);

                    if (unlikely(tmp_expression_value_460 == NULL)) {
                        tmp_expression_value_460 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[22]);
                    }

                    if (tmp_expression_value_460 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 398;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_expression_value_460);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_subscript_value_256 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[89]);

            if (tmp_subscript_value_256 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_subscript_value_256 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[89]);

                    if (unlikely(tmp_subscript_value_256 == NULL)) {
                        tmp_subscript_value_256 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[89]);
                    }

                    if (tmp_subscript_value_256 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_expression_value_460);

                        exception_lineno = 398;
                        type_description_2 = "o";
                        goto frame_exception_exit_41;
                    }
                    Py_INCREF(tmp_subscript_value_256);
                } else {
                    goto frame_exception_exit_41;
                }
            }

            tmp_ass_subvalue_166 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_460, tmp_subscript_value_256);
            Py_DECREF(tmp_expression_value_460);
            Py_DECREF(tmp_subscript_value_256);
            if (tmp_ass_subvalue_166 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscribed_166 = PyObject_GetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[50]);

            if (unlikely(tmp_ass_subscribed_166 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {
                Py_DECREF(tmp_ass_subvalue_166);
                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[50]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }

            if (tmp_ass_subscribed_166 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_166);

                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
            tmp_ass_subscript_166 = mod_consts[127];
            tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_166, tmp_ass_subscript_166, tmp_ass_subvalue_166);
            Py_DECREF(tmp_ass_subscribed_166);
            Py_DECREF(tmp_ass_subvalue_166);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_41;
            }
        }
        {
            PyObject *tmp_assign_source_405;
            tmp_assign_source_405 = MAKE_DICT_EMPTY();
            assert(tmp_OpenAPI$class_creation_1__class_decl_dict == NULL);
            tmp_OpenAPI$class_creation_1__class_decl_dict = tmp_assign_source_405;
        }
        {
            PyObject *tmp_assign_source_406;
            tmp_assign_source_406 = MAKE_DICT_EMPTY();
            assert(tmp_OpenAPI$class_creation_1__prepared == NULL);
            tmp_OpenAPI$class_creation_1__prepared = tmp_assign_source_406;
        }
        // Tried code:
        {
            PyObject *tmp_set_locals_63;
            CHECK_OBJECT(tmp_OpenAPI$class_creation_1__prepared);
            tmp_set_locals_63 = tmp_OpenAPI$class_creation_1__prepared;
            locals_fastapi$openapi$models$$$class__63_Config_400 = tmp_set_locals_63;
            Py_INCREF(tmp_set_locals_63);
        }
        tmp_dictset_value = mod_consts[40];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__63_Config_400, mod_consts[41], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[240];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__63_Config_400, mod_consts[42], tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyDict_SetItem(locals_fastapi$openapi$models$$$class__63_Config_400, mod_consts[56], tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_407;
            PyObject *tmp_called_value_123;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_245;
            PyObject *tmp_kwargs_value_106;
            tmp_called_value_123 = (PyObject *)&PyType_Type;
            tmp_tuple_element_245 = mod_consts[57];
            tmp_args_value_106 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_245);
            tmp_tuple_element_245 = mod_consts[58];
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_245);
            tmp_tuple_element_245 = locals_fastapi$openapi$models$$$class__63_Config_400;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_245);
            CHECK_OBJECT(tmp_OpenAPI$class_creation_1__class_decl_dict);
            tmp_kwargs_value_106 = tmp_OpenAPI$class_creation_1__class_decl_dict;
            frame_62b5706d1793d4f1b37c75c20a94c727_41->m_frame.f_lineno = 400;
            tmp_assign_source_407 = CALL_FUNCTION(tstate, tmp_called_value_123, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_407 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 400;
                type_description_2 = "o";
                goto try_except_handler_193;
            }
            assert(outline_62_var___class__ == NULL);
            outline_62_var___class__ = tmp_assign_source_407;
        }
        CHECK_OBJECT(outline_62_var___class__);
        tmp_dictset_value = outline_62_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_193;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_193:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__63_Config_400);
        locals_fastapi$openapi$models$$$class__63_Config_400 = NULL;
        goto try_return_handler_192;
        // Exception handler code:
        try_except_handler_193:;
        exception_keeper_type_188 = exception_type;
        exception_keeper_value_188 = exception_value;
        exception_keeper_tb_188 = exception_tb;
        exception_keeper_lineno_188 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__63_Config_400);
        locals_fastapi$openapi$models$$$class__63_Config_400 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_188;
        exception_value = exception_keeper_value_188;
        exception_tb = exception_keeper_tb_188;
        exception_lineno = exception_keeper_lineno_188;

        goto try_except_handler_192;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_192:;
        CHECK_OBJECT(outline_62_var___class__);
        Py_DECREF(outline_62_var___class__);
        outline_62_var___class__ = NULL;
        goto outline_result_63;
        // Exception handler code:
        try_except_handler_192:;
        exception_keeper_type_189 = exception_type;
        exception_keeper_value_189 = exception_value;
        exception_keeper_tb_189 = exception_tb;
        exception_keeper_lineno_189 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_189;
        exception_value = exception_keeper_value_189;
        exception_tb = exception_keeper_tb_189;
        exception_lineno = exception_keeper_lineno_189;

        goto outline_exception_63;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_63:;
        exception_lineno = 400;
        goto try_except_handler_191;
        outline_result_63:;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[57], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;
            type_description_2 = "o";
            goto try_except_handler_191;
        }
        goto try_end_66;
        // Exception handler code:
        try_except_handler_191:;
        exception_keeper_type_190 = exception_type;
        exception_keeper_value_190 = exception_value;
        exception_keeper_tb_190 = exception_tb;
        exception_keeper_lineno_190 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_OpenAPI$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OpenAPI$class_creation_1__class_decl_dict);
        tmp_OpenAPI$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OpenAPI$class_creation_1__prepared);
        Py_DECREF(tmp_OpenAPI$class_creation_1__prepared);
        tmp_OpenAPI$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_190;
        exception_value = exception_keeper_value_190;
        exception_tb = exception_keeper_tb_190;
        exception_lineno = exception_keeper_lineno_190;

        goto frame_exception_exit_41;
        // End of try:
        try_end_66:;


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_40;
        frame_exception_exit_41:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_62b5706d1793d4f1b37c75c20a94c727_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_62b5706d1793d4f1b37c75c20a94c727_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_62b5706d1793d4f1b37c75c20a94c727_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_62b5706d1793d4f1b37c75c20a94c727_41,
            type_description_2,
            outline_61_var___class__
        );



        assertFrameObject(frame_62b5706d1793d4f1b37c75c20a94c727_41);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_40;
        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_190;
        skip_nested_handling_40:;
        CHECK_OBJECT(tmp_OpenAPI$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_OpenAPI$class_creation_1__class_decl_dict);
        tmp_OpenAPI$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_OpenAPI$class_creation_1__prepared);
        Py_DECREF(tmp_OpenAPI$class_creation_1__prepared);
        tmp_OpenAPI$class_creation_1__prepared = NULL;
        {
            nuitka_bool tmp_condition_result_164;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_164 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_164 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto try_except_handler_190;
            }
            if (tmp_condition_result_164 == NUITKA_BOOL_TRUE) {
                goto branch_yes_122;
            } else {
                goto branch_no_122;
            }
        }
        branch_yes_122:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_fastapi$openapi$models$$$class__62_OpenAPI_389, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_190;
        }
        branch_no_122:;
        {
            PyObject *tmp_assign_source_408;
            PyObject *tmp_called_value_124;
            PyObject *tmp_args_value_107;
            PyObject *tmp_tuple_element_246;
            PyObject *tmp_kwargs_value_107;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_124 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_246 = mod_consts[235];
            tmp_args_value_107 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_246 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_246);
            tmp_tuple_element_246 = locals_fastapi$openapi$models$$$class__62_OpenAPI_389;
            PyTuple_SET_ITEM0(tmp_args_value_107, 2, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_107 = tmp_class_creation_40__class_decl_dict;
            frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 389;
            tmp_assign_source_408 = CALL_FUNCTION(tstate, tmp_called_value_124, tmp_args_value_107, tmp_kwargs_value_107);
            Py_DECREF(tmp_args_value_107);
            if (tmp_assign_source_408 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto try_except_handler_190;
            }
            assert(outline_61_var___class__ == NULL);
            outline_61_var___class__ = tmp_assign_source_408;
        }
        CHECK_OBJECT(outline_61_var___class__);
        tmp_assign_source_404 = outline_61_var___class__;
        Py_INCREF(tmp_assign_source_404);
        goto try_return_handler_190;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_190:;
        Py_DECREF(locals_fastapi$openapi$models$$$class__62_OpenAPI_389);
        locals_fastapi$openapi$models$$$class__62_OpenAPI_389 = NULL;
        goto try_return_handler_189;
        // Exception handler code:
        try_except_handler_190:;
        exception_keeper_type_191 = exception_type;
        exception_keeper_value_191 = exception_value;
        exception_keeper_tb_191 = exception_tb;
        exception_keeper_lineno_191 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_fastapi$openapi$models$$$class__62_OpenAPI_389);
        locals_fastapi$openapi$models$$$class__62_OpenAPI_389 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_191;
        exception_value = exception_keeper_value_191;
        exception_tb = exception_keeper_tb_191;
        exception_lineno = exception_keeper_lineno_191;

        goto try_except_handler_189;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_189:;
        CHECK_OBJECT(outline_61_var___class__);
        Py_DECREF(outline_61_var___class__);
        outline_61_var___class__ = NULL;
        goto outline_result_62;
        // Exception handler code:
        try_except_handler_189:;
        exception_keeper_type_192 = exception_type;
        exception_keeper_value_192 = exception_value;
        exception_keeper_tb_192 = exception_tb;
        exception_keeper_lineno_192 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_192;
        exception_value = exception_keeper_value_192;
        exception_tb = exception_keeper_tb_192;
        exception_lineno = exception_keeper_lineno_192;

        goto outline_exception_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_62:;
        exception_lineno = 389;
        goto try_except_handler_188;
        outline_result_62:;
        UPDATE_STRING_DICT1(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[235], tmp_assign_source_404);
    }
    goto try_end_67;
    // Exception handler code:
    try_except_handler_188:;
    exception_keeper_type_193 = exception_type;
    exception_keeper_value_193 = exception_value;
    exception_keeper_tb_193 = exception_tb;
    exception_keeper_lineno_193 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_193;
    exception_value = exception_keeper_value_193;
    exception_tb = exception_keeper_tb_193;
    exception_lineno = exception_keeper_lineno_193;

    goto frame_exception_exit_1;
    // End of try:
    try_end_67:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[91]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto frame_exception_exit_1;
        }
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 404;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_1, mod_consts[241]);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[173]);

        if (unlikely(tmp_called_instance_2 == NULL)) {
            tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[173]);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;

            goto frame_exception_exit_1;
        }
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 405;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_2, mod_consts[241]);
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)mod_consts[141]);

        if (unlikely(tmp_called_instance_3 == NULL)) {
            tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[141]);
        }

        if (tmp_called_instance_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 406;

            goto frame_exception_exit_1;
        }
        frame_06fea91e0e513f4a51ced046994fa1f1->m_frame.f_lineno = 406;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_3, mod_consts[241]);
        if (tmp_call_result_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 406;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_41;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_06fea91e0e513f4a51ced046994fa1f1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_06fea91e0e513f4a51ced046994fa1f1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_06fea91e0e513f4a51ced046994fa1f1, exception_lineno);
    }



    assertFrameObject(frame_06fea91e0e513f4a51ced046994fa1f1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_41:;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("fastapi.openapi.models", false);

    Py_INCREF(module_fastapi$openapi$models);
    return module_fastapi$openapi$models;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_fastapi$openapi$models, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(tstate, module_name);
        }
    }
#endif
    PGO_onModuleExit("fastapi$openapi$models", false);

    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);
    return NULL;
}
