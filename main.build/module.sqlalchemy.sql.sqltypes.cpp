/* Generated code for Python module 'sqlalchemy.sql.sqltypes'
 * created by Nuitka version 1.8.4
 *
 * This code is in part copyright 2023 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_sqlalchemy$sql$sqltypes" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_sqlalchemy$sql$sqltypes;
PyDictObject *moduledict_sqlalchemy$sql$sqltypes;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[895];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[895];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(PyThreadState *tstate) {
    if (constants_created == false) {
        loadConstantsBlob(tstate, &mod_consts[0], UNTRANSLATE("sqlalchemy.sql.sqltypes"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 895; i++) {
            mod_consts_hash[i] = DEEP_HASH(tstate, mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(PyThreadState *tstate) {
    createModuleConstants(tstate);
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_sqlalchemy$sql$sqltypes(PyThreadState *tstate) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 895; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(tstate, mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_26fa4d68edd53df5057cfb170821d414;
static PyCodeObject *codeobj_a2b2d3ce4f7ea74f31f84a13f2693fb3;
static PyCodeObject *codeobj_5a65c1f3cd718045aeca683403e1dc91;
static PyCodeObject *codeobj_1aee6cd68ba24b711b0f9bedf3986f58;
static PyCodeObject *codeobj_091b6b548a57da5064965fa8688ac505;
static PyCodeObject *codeobj_ebb156a6494af1a2b90ffe41aca76ade;
static PyCodeObject *codeobj_00fd667e5f00277515915ec46fe4428c;
static PyCodeObject *codeobj_939d93e6e8558ba0251076c1f17301ee;
static PyCodeObject *codeobj_85e67b94f7bca4a3b2dfb333a43fc3c5;
static PyCodeObject *codeobj_868a81aa74d6b5d9a95205292210ecdc;
static PyCodeObject *codeobj_34d08d8a15c465efbfb1fc847c832d1c;
static PyCodeObject *codeobj_4555bb417febc5f1629be12ff210a7df;
static PyCodeObject *codeobj_e762a9c8047516daa4dceddc9f2e5957;
static PyCodeObject *codeobj_9f1d76f2c17e00828ed93f00ad49345e;
static PyCodeObject *codeobj_2e9b49da47d6b813f3dd71d96927e452;
static PyCodeObject *codeobj_ba366a441b50a6232c0aa6e461f23fbe;
static PyCodeObject *codeobj_3166cd2ac67daff286dcc8c5c35c8827;
static PyCodeObject *codeobj_f28e91ec0caa03e3b8b0d624a94edb1c;
static PyCodeObject *codeobj_42fa80d98bcdd6e31d1d8dfb0e674a65;
static PyCodeObject *codeobj_1080cb4523efb9e11c011fbeef244b79;
static PyCodeObject *codeobj_5473aa3463cee3c896f5c80a7480a46b;
static PyCodeObject *codeobj_2fa6fbda509a409a63f59dfdaf2a6a5f;
static PyCodeObject *codeobj_41e824f3ef0fb094cf721c44af492978;
static PyCodeObject *codeobj_733436556b4801d5a2c36025fb0cf1c6;
static PyCodeObject *codeobj_c33964dacf05de3b8e27bb7381d65481;
static PyCodeObject *codeobj_d1322356761a4f091d578e3e4d3ef86d;
static PyCodeObject *codeobj_e52dd4ad0daaa8166caadb00c935fe40;
static PyCodeObject *codeobj_740032a89ce339f80c267509d81f7b0c;
static PyCodeObject *codeobj_a2597828719d4625ef239a03f74439c9;
static PyCodeObject *codeobj_6b334b8e84140766ea2a2c48e4cc6da8;
static PyCodeObject *codeobj_90429f579f65edfed5bb20042f4d56bb;
static PyCodeObject *codeobj_22d8b375575a4d8b7105af74825d9603;
static PyCodeObject *codeobj_92e0acdc6a2b51632727ea04a42f7c95;
static PyCodeObject *codeobj_617178a6477bb261ad5c1f7f5ed099af;
static PyCodeObject *codeobj_f8f3ab6c748eca6533ae055e87cb8240;
static PyCodeObject *codeobj_94afccca9abf825c4a97ad1a236cd068;
static PyCodeObject *codeobj_4a23c22cbf9d2dca9b11ab750b5dea0b;
static PyCodeObject *codeobj_efb6aa783c8a63761ab6fb473645f613;
static PyCodeObject *codeobj_9da7d3048fabb152669b327b244fe974;
static PyCodeObject *codeobj_93ab42ae09729d32d6aad62ca2b84cc0;
static PyCodeObject *codeobj_39df2453d6fb60af2ea62ec656d9cbf3;
static PyCodeObject *codeobj_7e74b4770480c918562fcc5293ddb28e;
static PyCodeObject *codeobj_59cb959a308297ac8b18f492da0a1a46;
static PyCodeObject *codeobj_62856119e973c2139b9d90410c2122c0;
static PyCodeObject *codeobj_54943b13ceda71184ed82a93ac937d21;
static PyCodeObject *codeobj_197892e6e6e68e40d8fdf1bb40b8d4f4;
static PyCodeObject *codeobj_e67aba58ee7cffc472020a4e437023ab;
static PyCodeObject *codeobj_10cc212bc35c1c061cff66148cbcde29;
static PyCodeObject *codeobj_dfe327ff5836e31b39a8ce11fee836fe;
static PyCodeObject *codeobj_d446368a098e659ab1ad32b845c5299e;
static PyCodeObject *codeobj_7e0a7e2812bb27d237297241fe6989c6;
static PyCodeObject *codeobj_b5e1e0d46725f66c0a5f4cafc203c477;
static PyCodeObject *codeobj_25ef1ebb07b4b0baf1f559d5ed63b11e;
static PyCodeObject *codeobj_86aba5b77bc70fc0ed4ba448dadf0054;
static PyCodeObject *codeobj_d0c7b8998b645ef155c09c24d41e5bbb;
static PyCodeObject *codeobj_9a7cdf8be051611b6ce58ab21d3dd9a5;
static PyCodeObject *codeobj_97502711f14333c2557dbb4ac6c98933;
static PyCodeObject *codeobj_1c8e3afcf516b03fba3866eb8e1f7215;
static PyCodeObject *codeobj_6525230dd834556a5ea96a0e502bf46d;
static PyCodeObject *codeobj_75f2c57f48de7f65993f72e91d187b17;
static PyCodeObject *codeobj_ed7f1a1f30dd734ccfa6346aa5e09b35;
static PyCodeObject *codeobj_3fe76aec9f860e46bc4bad5ada88bb0e;
static PyCodeObject *codeobj_860cf24a015df29d396f8849325256e4;
static PyCodeObject *codeobj_22b369a7fb61d52c4d40da6b0fdc21f6;
static PyCodeObject *codeobj_dcb37d94f9a080ffee69d985b8473940;
static PyCodeObject *codeobj_a5a5d3a8e5e34ea07914ff3f7c20caf8;
static PyCodeObject *codeobj_1655a926b88f18b8542168ff4f71938a;
static PyCodeObject *codeobj_78b5c1ad9da27cdab09b61f7c9361a93;
static PyCodeObject *codeobj_8d044b6d5bdc619673cd83ddf539ea55;
static PyCodeObject *codeobj_b63fa63511e0c7b1860a52cdcec45410;
static PyCodeObject *codeobj_c393e91cad8d39e54440e418e4d538f0;
static PyCodeObject *codeobj_e1977a2d725d12c80b7a6caec89fcb30;
static PyCodeObject *codeobj_8e8c704bd4c8e39012c18136e28302b7;
static PyCodeObject *codeobj_3e4700fbfee0bd27ddc1ad9b6731a22f;
static PyCodeObject *codeobj_d07f871351a6331152b640082eb89314;
static PyCodeObject *codeobj_c42814ac89cf306358687927a567e483;
static PyCodeObject *codeobj_4514be1da557df83c2179ee33fc04bab;
static PyCodeObject *codeobj_5a1c82eeba4d41bbbc3db728e2b9fc59;
static PyCodeObject *codeobj_a5939a4eef8c8ee9294d69c356867bd8;
static PyCodeObject *codeobj_d2110d52561d4de5270328393e2cb4b1;
static PyCodeObject *codeobj_a0596b116f73cc11f051908d5fa496da;
static PyCodeObject *codeobj_b2a3f80dafa6a38c0c69d24b7fb74477;
static PyCodeObject *codeobj_a02ff683c856ba0c34c2d0de709d74ff;
static PyCodeObject *codeobj_478fae5cd16153931042b88bcec7603f;
static PyCodeObject *codeobj_a8aa4c3dc6bd2eff6b80e65163c43831;
static PyCodeObject *codeobj_5f4143dc7b59fc9c50b113a344e804ba;
static PyCodeObject *codeobj_84049f62abc4b0f6cc3d4bd7098c0c6a;
static PyCodeObject *codeobj_cdfb914b415cf1ef72774c8db4c1354d;
static PyCodeObject *codeobj_393c24de29e5f4b7b8173a52b5c6dcc5;
static PyCodeObject *codeobj_796bc91f48f21302ef5b98f3e2483489;
static PyCodeObject *codeobj_7f9e4ec31fee00f805cf32752e1ce6c8;
static PyCodeObject *codeobj_dc1e0116e02385bb6a0ea34ac06059f5;
static PyCodeObject *codeobj_90751710920b713440bdd9e6d3e2a077;
static PyCodeObject *codeobj_86a1f7ec69966cfa18ae1dc28bfa13bc;
static PyCodeObject *codeobj_40c6e27348719cb4c5f6f001c46c47ef;
static PyCodeObject *codeobj_6fa4a9c9a50f89ccbaee717d3548f2f6;
static PyCodeObject *codeobj_5bfb01a900fbcd37cf78a54badbcbde7;
static PyCodeObject *codeobj_0cd02c703c2775b783b9936a6f233d17;
static PyCodeObject *codeobj_505a0502bdbab04f3824c3172764fcb4;
static PyCodeObject *codeobj_cdb3081bdb2c85b909f6c4371f372e59;
static PyCodeObject *codeobj_02ec6092a6bf216df402ff29d2a09867;
static PyCodeObject *codeobj_c6bfd50df88620f32c9bc73248327de1;
static PyCodeObject *codeobj_d84c754abc2f7c3ad9b602eba74790db;
static PyCodeObject *codeobj_5e4811336afcb0cee41bc6eba05d5af8;
static PyCodeObject *codeobj_a29865fc3b7ccc8eed358a41946fb965;
static PyCodeObject *codeobj_d185872fd6ef313ec30a6b47c7b89cae;
static PyCodeObject *codeobj_178b92a44f6a739969990d16fed758a7;
static PyCodeObject *codeobj_39d02b762a7fc89ec42128877d4654af;
static PyCodeObject *codeobj_f3390662c8b7527db73baa51a692cb82;
static PyCodeObject *codeobj_4841414b091159f12e20ecd242a5db74;
static PyCodeObject *codeobj_7a96f11fc9841aac6ac44ac3480f50e1;
static PyCodeObject *codeobj_e5f411581a210eef805ca44376d6ff8b;
static PyCodeObject *codeobj_81bdd4839efb4ca8cab2fe7d7122470a;
static PyCodeObject *codeobj_02fa2f175ce00e86181c18b5a06b2be0;
static PyCodeObject *codeobj_02b24c1aab36b85538788780cbf29e07;
static PyCodeObject *codeobj_0a4371321ab570fbf59be00f80d01c5c;
static PyCodeObject *codeobj_c1907f39d5011cfd95726a22afbb3938;
static PyCodeObject *codeobj_5aae064b1d2797cd804c1de082b29707;
static PyCodeObject *codeobj_4681de3a5744db5c28af0c5006b60e40;
static PyCodeObject *codeobj_8a94126259a5bafcedf7747a5b8d5ea2;
static PyCodeObject *codeobj_626f15039653823855dba21445a737d7;
static PyCodeObject *codeobj_df4f9203137722432f20a7a5cd8dfb73;
static PyCodeObject *codeobj_2bd8805a9cbc7c13e67d737734aa3c69;
static PyCodeObject *codeobj_69cd121a9e7915ea43e980bbfb781ba4;
static PyCodeObject *codeobj_f414fb9bff05b417e46eb6ca0a8948ab;
static PyCodeObject *codeobj_a4dd06c35d8f54f5659d4efa77c645c1;
static PyCodeObject *codeobj_3d2504df643f6ba03cabb0b24161160e;
static PyCodeObject *codeobj_64325d5ac57f07f17109e61bac531e7f;
static PyCodeObject *codeobj_b22349e9e011fdb2b0cebbc3975c6387;
static PyCodeObject *codeobj_321bf2361f1cad4f3c4c9cdf8ae84a4e;
static PyCodeObject *codeobj_b50eb69544daac7f0e728d4497ab5937;
static PyCodeObject *codeobj_63e12dc9752003f7d1300b5a9d89f566;
static PyCodeObject *codeobj_85bac47e1cf9d36e40522f790bb6cd9b;
static PyCodeObject *codeobj_ac0eb5cbdd92fdd006b83a9501c373a9;
static PyCodeObject *codeobj_4b54e7eeebef5e85e49e3f73839abe7c;
static PyCodeObject *codeobj_11bd9f031662eaa94875136629728aed;
static PyCodeObject *codeobj_cbcbdb2d9e8a5fff79198c7cbe25ed04;
static PyCodeObject *codeobj_9023f34f84e0bc2d0766715b99f9fe92;
static PyCodeObject *codeobj_4deb6907a9a8f405f85fccb5a2026138;
static PyCodeObject *codeobj_7fc04a05e029d491257a3400bd5674b4;
static PyCodeObject *codeobj_7b3379ea232c1f0da5bc581a8f2d9590;
static PyCodeObject *codeobj_e2920da790812d701aed1f6e299c3c2a;
static PyCodeObject *codeobj_c95f74067ff2a26745a69ed5731ef0fd;
static PyCodeObject *codeobj_6efcc9144f44aeed5f25c6da94d7dd38;
static PyCodeObject *codeobj_6b2fdf7acf092486e60e6c4b91bdaacf;
static PyCodeObject *codeobj_62a491413e6803ba136fa56eec053539;
static PyCodeObject *codeobj_7dc3a592a8957d237412cb3869c0d59b;
static PyCodeObject *codeobj_455d8e1951d4354fb0c6cb4f4898fd69;
static PyCodeObject *codeobj_ab3bac6d0f6858d8ca356e1508aeb2ac;
static PyCodeObject *codeobj_cadc8843633297c77a83550476c5c68a;
static PyCodeObject *codeobj_7c5e81347f01a63cc0bbd6a2d986e9c2;
static PyCodeObject *codeobj_8f8e59509cf5dd0cddb84c2d22b10dcf;
static PyCodeObject *codeobj_224fee5ca0b2f3cfd3d9a5506ec239c9;
static PyCodeObject *codeobj_bd11c465c1627b66dd527f313d4aa38c;
static PyCodeObject *codeobj_0732f29a10e86e4e06372e913782245e;
static PyCodeObject *codeobj_292e8eb9852aff9ad1415c867443ca42;
static PyCodeObject *codeobj_75cf377c5b151e45160341e104f8347e;
static PyCodeObject *codeobj_8cfd97f2a77ecbb2eb909335286de10f;
static PyCodeObject *codeobj_93e99cc8c06c3e9cd8797bb4bad6c276;
static PyCodeObject *codeobj_8f0b7592959ec998dbe0a36a0203ad7d;
static PyCodeObject *codeobj_a99c26bd90c6e071d11f1c9eda1ed2ee;
static PyCodeObject *codeobj_bf1332a160020718f67323f49b22daa3;
static PyCodeObject *codeobj_0fe5e2c0f3336234e4fbd21c3649d9bc;
static PyCodeObject *codeobj_1e198664f2a4d9e82bdc48cdfa9a8f98;
static PyCodeObject *codeobj_a687d194a42d00f5eedb208b2958bc38;
static PyCodeObject *codeobj_e6768e8b750571560d72b619871f854e;
static PyCodeObject *codeobj_6cd175b6d8dd8eef0a3f5ec634733de5;
static PyCodeObject *codeobj_82e5fd204f296fa27f96d394a9996049;
static PyCodeObject *codeobj_3393bab199aa606260cd83eafb7e60ef;
static PyCodeObject *codeobj_1cee837fc0e901460db4f0b3537764a9;
static PyCodeObject *codeobj_70b6465292cb8ebb4d90aed986b2aa6d;
static PyCodeObject *codeobj_15e6a851de498da4e983cb66c2336097;
static PyCodeObject *codeobj_71d3edc0c658b2c8714cd3518a82d2c5;
static PyCodeObject *codeobj_4d6276086e7db92556476b843c7fa67e;
static PyCodeObject *codeobj_66deec90162bc4753df4cc6dd0001d3c;
static PyCodeObject *codeobj_bf8473661f9b4d7ef6a26aeeae2ba020;
static PyCodeObject *codeobj_db2e478b6344ee42179a20a08cdbb810;
static PyCodeObject *codeobj_5952bea9da3dc287ee9548270dd9ecec;
static PyCodeObject *codeobj_65bb6e806379f2ff318d16ee827a2a54;
static PyCodeObject *codeobj_d7d5c03789b25fdfe7cbb4bef3712422;
static PyCodeObject *codeobj_140f11ffc232bba79a75d39fd9201206;
static PyCodeObject *codeobj_8b1c9324b2f9a74c36720b12fbd8f5ac;
static PyCodeObject *codeobj_f6f16776ae2cb762341ba3c5b6c326c2;
static PyCodeObject *codeobj_d2e311dba25391f084fb5587bbee1e49;
static PyCodeObject *codeobj_312ec13661de5345d0571398b3ebdcd9;
static PyCodeObject *codeobj_7c00a8e6535b4fa75995a2f65b4780db;
static PyCodeObject *codeobj_19739b43823e27c5ca08a9fce0ba67b9;
static PyCodeObject *codeobj_39fef5748edb71876d93470d3a219c62;
static PyCodeObject *codeobj_1576acc756b228012430cc5020f20e50;
static PyCodeObject *codeobj_f302782f2887664f0f81e60fcde974ef;
static PyCodeObject *codeobj_7e98211beaef94e3ce7422d68cfdf4d1;
static PyCodeObject *codeobj_6870cd705409694c096203ac688e3f94;
static PyCodeObject *codeobj_a38c5228ea1ec6397f512a1e33be6501;
static PyCodeObject *codeobj_bf146a3bd02941452c10a750e761f313;
static PyCodeObject *codeobj_5d56852e46eecf9b918918c8d7c7b596;
static PyCodeObject *codeobj_46b25776bd4ddeac141a592a403be131;
static PyCodeObject *codeobj_a9e09639978136bffb6206c45567ff7a;
static PyCodeObject *codeobj_e0a7f1e932becaa154a831e9269c7eea;
static PyCodeObject *codeobj_ee71dbf6059dd4350596c729cfc0a259;
static PyCodeObject *codeobj_bf7f434d5ab0377974a5101ca9ba0d53;
static PyCodeObject *codeobj_7c593997b229d4af744026257e566d69;
static PyCodeObject *codeobj_1ad717ec8074da851881b8d6d8645881;
static PyCodeObject *codeobj_9601272f9d86ca9675bd31bee69e315f;
static PyCodeObject *codeobj_a38ad2f71667eefaa00c91b2468061ee;
static PyCodeObject *codeobj_002ac1bda8a7625b09e4ebcb81cb326b;
static PyCodeObject *codeobj_b0447968372817314d0c8957939bd266;
static PyCodeObject *codeobj_a4ec031d95526921a392dd91aa716a6f;
static PyCodeObject *codeobj_5c02dabc9065dccb18307f68bd111e12;
static PyCodeObject *codeobj_0f190e1c4a7897b2194aead67fb41b94;
static PyCodeObject *codeobj_cdf30f2e8523063925753c74ebf0993b;
static PyCodeObject *codeobj_661fb462b301535964bfb2f673f127da;
static PyCodeObject *codeobj_c39aad65e86349b425603ac858b36a6c;
static PyCodeObject *codeobj_ee1ad9b19df039d69a22fe4948e9cc29;
static PyCodeObject *codeobj_9ded2a4e9b5137410534666c16be1ee5;
static PyCodeObject *codeobj_7678b2e07fbc7a4f387d6c0cc758d75e;
static PyCodeObject *codeobj_8dc7b1bcd27b6dac4b7e5756844aedbd;
static PyCodeObject *codeobj_496e29032d090222c1a58f3ff80d8907;
static PyCodeObject *codeobj_46351f3dea9566bcf08fe0dc8a4cd561;
static PyCodeObject *codeobj_5c72b10f9b4b51ccf6a0f605a349415b;
static PyCodeObject *codeobj_95e372e15f3eab876275a166a45fc0ec;
static PyCodeObject *codeobj_72a1c19d21e6be035c14bc845019e8bb;
static PyCodeObject *codeobj_9bec7a53c683d8412a7dcbbec48f400e;
static PyCodeObject *codeobj_e330aca6bb85180dba8461a0a1940a85;
static PyCodeObject *codeobj_854fb67416f05a7dd402e05f0c3fad95;
static PyCodeObject *codeobj_8bea2ad013daff045879b53916208b19;
static PyCodeObject *codeobj_38c1873b26339ac722accf1443101653;
static PyCodeObject *codeobj_1ae91670e9c7411c62634f9d9b1cedf9;
static PyCodeObject *codeobj_1906085cade7eb0c9b887fc6048b75da;
static PyCodeObject *codeobj_edbbfc1e8b4d64da3fa598f7fda58c7d;
static PyCodeObject *codeobj_8fd9daf5853e0e821c3f286896028af7;
static PyCodeObject *codeobj_a902ceab51ee1c72b73341439a122c1a;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[781]); CHECK_OBJECT(module_filename_obj);
    codeobj_26fa4d68edd53df5057cfb170821d414 = MAKE_CODE_OBJECT(module_filename_obj, 1566, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[211], mod_consts[211], mod_consts[782], NULL, 1, 0, 0);
    codeobj_a2b2d3ce4f7ea74f31f84a13f2693fb3 = MAKE_CODE_OBJECT(module_filename_obj, 1507, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[211], mod_consts[211], mod_consts[783], mod_consts[784], 1, 0, 0);
    codeobj_5a65c1f3cd718045aeca683403e1dc91 = MAKE_CODE_OBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[785], mod_consts[785], NULL, NULL, 0, 0, 0);
    codeobj_1aee6cd68ba24b711b0f9bedf3986f58 = MAKE_CODE_OBJECT(module_filename_obj, 2690, CO_NOFREE, mod_consts[169], mod_consts[169], mod_consts[784], NULL, 0, 0, 0);
    codeobj_091b6b548a57da5064965fa8688ac505 = MAKE_CODE_OBJECT(module_filename_obj, 3107, CO_NOFREE, mod_consts[728], mod_consts[728], mod_consts[784], NULL, 0, 0, 0);
    codeobj_ebb156a6494af1a2b90ffe41aca76ade = MAKE_CODE_OBJECT(module_filename_obj, 3217, CO_NOFREE, mod_consts[126], mod_consts[126], mod_consts[784], NULL, 0, 0, 0);
    codeobj_00fd667e5f00277515915ec46fe4428c = MAKE_CODE_OBJECT(module_filename_obj, 3210, CO_NOFREE, mod_consts[750], mod_consts[750], mod_consts[784], NULL, 0, 0, 0);
    codeobj_939d93e6e8558ba0251076c1f17301ee = MAKE_CODE_OBJECT(module_filename_obj, 3231, CO_NOFREE, mod_consts[755], mod_consts[755], mod_consts[784], NULL, 0, 0, 0);
    codeobj_85e67b94f7bca4a3b2dfb333a43fc3c5 = MAKE_CODE_OBJECT(module_filename_obj, 576, CO_NOFREE, mod_consts[517], mod_consts[517], mod_consts[784], NULL, 0, 0, 0);
    codeobj_868a81aa74d6b5d9a95205292210ecdc = MAKE_CODE_OBJECT(module_filename_obj, 1888, CO_NOFREE, mod_consts[322], mod_consts[322], mod_consts[784], NULL, 0, 0, 0);
    codeobj_34d08d8a15c465efbfb1fc847c832d1c = MAKE_CODE_OBJECT(module_filename_obj, 3196, CO_NOFREE, mod_consts[746], mod_consts[746], mod_consts[784], NULL, 0, 0, 0);
    codeobj_4555bb417febc5f1629be12ff210a7df = MAKE_CODE_OBJECT(module_filename_obj, 3172, CO_NOFREE, mod_consts[740], mod_consts[740], mod_consts[784], NULL, 0, 0, 0);
    codeobj_e762a9c8047516daa4dceddc9f2e5957 = MAKE_CODE_OBJECT(module_filename_obj, 61, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_9f1d76f2c17e00828ed93f00ad49345e = MAKE_CODE_OBJECT(module_filename_obj, 84, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_2e9b49da47d6b813f3dd71d96927e452 = MAKE_CODE_OBJECT(module_filename_obj, 109, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_ba366a441b50a6232c0aa6e461f23fbe = MAKE_CODE_OBJECT(module_filename_obj, 1636, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_3166cd2ac67daff286dcc8c5c35c8827 = MAKE_CODE_OBJECT(module_filename_obj, 2489, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_f28e91ec0caa03e3b8b0d624a94edb1c = MAKE_CODE_OBJECT(module_filename_obj, 2817, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_42fa80d98bcdd6e31d1d8dfb0e674a65 = MAKE_CODE_OBJECT(module_filename_obj, 3272, CO_NOFREE, mod_consts[9], mod_consts[9], mod_consts[784], NULL, 0, 0, 0);
    codeobj_1080cb4523efb9e11c011fbeef244b79 = MAKE_CODE_OBJECT(module_filename_obj, 79, CO_NOFREE, mod_consts[8], mod_consts[8], mod_consts[784], NULL, 0, 0, 0);
    codeobj_5473aa3463cee3c896f5c80a7480a46b = MAKE_CODE_OBJECT(module_filename_obj, 3151, CO_NOFREE, mod_consts[734], mod_consts[734], mod_consts[784], NULL, 0, 0, 0);
    codeobj_2fa6fbda509a409a63f59dfdaf2a6a5f = MAKE_CODE_OBJECT(module_filename_obj, 3144, CO_NOFREE, mod_consts[104], mod_consts[104], mod_consts[784], NULL, 0, 0, 0);
    codeobj_41e824f3ef0fb094cf721c44af492978 = MAKE_CODE_OBJECT(module_filename_obj, 3083, CO_NOFREE, mod_consts[721], mod_consts[721], mod_consts[784], NULL, 0, 0, 0);
    codeobj_733436556b4801d5a2c36025fb0cf1c6 = MAKE_CODE_OBJECT(module_filename_obj, 874, CO_NOFREE, mod_consts[76], mod_consts[76], mod_consts[784], NULL, 0, 0, 0);
    codeobj_c33964dacf05de3b8e27bb7381d65481 = MAKE_CODE_OBJECT(module_filename_obj, 812, CO_NOFREE, mod_consts[109], mod_consts[109], mod_consts[784], NULL, 0, 0, 0);
    codeobj_d1322356761a4f091d578e3e4d3ef86d = MAKE_CODE_OBJECT(module_filename_obj, 1235, CO_NOFREE, mod_consts[199], mod_consts[199], mod_consts[784], NULL, 0, 0, 0);
    codeobj_e52dd4ad0daaa8166caadb00c935fe40 = MAKE_CODE_OBJECT(module_filename_obj, 3069, CO_NOFREE, mod_consts[717], mod_consts[717], mod_consts[784], NULL, 0, 0, 0);
    codeobj_740032a89ce339f80c267509d81f7b0c = MAKE_CODE_OBJECT(module_filename_obj, 757, CO_NOFREE, mod_consts[329], mod_consts[329], mod_consts[784], NULL, 0, 0, 0);
    codeobj_a2597828719d4625ef239a03f74439c9 = MAKE_CODE_OBJECT(module_filename_obj, 3090, CO_NOFREE, mod_consts[723], mod_consts[723], mod_consts[784], NULL, 0, 0, 0);
    codeobj_6b334b8e84140766ea2a2c48e4cc6da8 = MAKE_CODE_OBJECT(module_filename_obj, 99, CO_NOFREE, mod_consts[468], mod_consts[468], mod_consts[784], NULL, 0, 0, 0);
    codeobj_90429f579f65edfed5bb20042f4d56bb = MAKE_CODE_OBJECT(module_filename_obj, 524, CO_NOFREE, mod_consts[77], mod_consts[77], mod_consts[784], NULL, 0, 0, 0);
    codeobj_22d8b375575a4d8b7105af74825d9603 = MAKE_CODE_OBJECT(module_filename_obj, 2042, CO_NOFREE, mod_consts[80], mod_consts[80], mod_consts[784], NULL, 0, 0, 0);
    codeobj_92e0acdc6a2b51632727ea04a42f7c95 = MAKE_CODE_OBJECT(module_filename_obj, 2138, CO_NOFREE, mod_consts[315], mod_consts[315], mod_consts[784], NULL, 0, 0, 0);
    codeobj_617178a6477bb261ad5c1f7f5ed099af = MAKE_CODE_OBJECT(module_filename_obj, 2419, CO_NOFREE, mod_consts[658], mod_consts[658], mod_consts[784], NULL, 0, 0, 0);
    codeobj_f8f3ab6c748eca6533ae055e87cb8240 = MAKE_CODE_OBJECT(module_filename_obj, 1010, CO_NOFREE, mod_consts[563], mod_consts[563], mod_consts[784], NULL, 0, 0, 0);
    codeobj_94afccca9abf825c4a97ad1a236cd068 = MAKE_CODE_OBJECT(module_filename_obj, 3203, CO_NOFREE, mod_consts[748], mod_consts[748], mod_consts[784], NULL, 0, 0, 0);
    codeobj_4a23c22cbf9d2dca9b11ab750b5dea0b = MAKE_CODE_OBJECT(module_filename_obj, 3076, CO_NOFREE, mod_consts[719], mod_consts[719], mod_consts[784], NULL, 0, 0, 0);
    codeobj_efb6aa783c8a63761ab6fb473645f613 = MAKE_CODE_OBJECT(module_filename_obj, 3189, CO_NOFREE, mod_consts[744], mod_consts[744], mod_consts[784], NULL, 0, 0, 0);
    codeobj_9da7d3048fabb152669b327b244fe974 = MAKE_CODE_OBJECT(module_filename_obj, 3238, CO_NOFREE, mod_consts[10], mod_consts[10], mod_consts[784], NULL, 0, 0, 0);
    codeobj_93ab42ae09729d32d6aad62ca2b84cc0 = MAKE_CODE_OBJECT(module_filename_obj, 588, CO_NOFREE, mod_consts[78], mod_consts[78], mod_consts[784], NULL, 0, 0, 0);
    codeobj_39df2453d6fb60af2ea62ec656d9cbf3 = MAKE_CODE_OBJECT(module_filename_obj, 1786, CO_NOFREE, mod_consts[262], mod_consts[262], mod_consts[784], NULL, 0, 0, 0);
    codeobj_7e74b4770480c918562fcc5293ddb28e = MAKE_CODE_OBJECT(module_filename_obj, 3062, CO_NOFREE, mod_consts[715], mod_consts[715], mod_consts[784], NULL, 0, 0, 0);
    codeobj_59cb959a308297ac8b18f492da0a1a46 = MAKE_CODE_OBJECT(module_filename_obj, 3100, CO_NOFREE, mod_consts[726], mod_consts[726], mod_consts[784], NULL, 0, 0, 0);
    codeobj_62856119e973c2139b9d90410c2122c0 = MAKE_CODE_OBJECT(module_filename_obj, 1034, CO_NOFREE, mod_consts[159], mod_consts[159], mod_consts[784], NULL, 0, 0, 0);
    codeobj_54943b13ceda71184ed82a93ac937d21 = MAKE_CODE_OBJECT(module_filename_obj, 564, CO_NOFREE, mod_consts[514], mod_consts[514], mod_consts[784], NULL, 0, 0, 0);
    codeobj_197892e6e6e68e40d8fdf1bb40b8d4f4 = MAKE_CODE_OBJECT(module_filename_obj, 126, CO_NOFREE, mod_consts[55], mod_consts[55], mod_consts[784], NULL, 0, 0, 0);
    codeobj_e67aba58ee7cffc472020a4e437023ab = MAKE_CODE_OBJECT(module_filename_obj, 3165, CO_NOFREE, mod_consts[738], mod_consts[738], mod_consts[784], NULL, 0, 0, 0);
    codeobj_10cc212bc35c1c061cff66148cbcde29 = MAKE_CODE_OBJECT(module_filename_obj, 3158, CO_NOFREE, mod_consts[736], mod_consts[736], mod_consts[784], NULL, 0, 0, 0);
    codeobj_dfe327ff5836e31b39a8ce11fee836fe = MAKE_CODE_OBJECT(module_filename_obj, 3114, CO_NOFREE, mod_consts[387], mod_consts[387], mod_consts[784], NULL, 0, 0, 0);
    codeobj_d446368a098e659ab1ad32b845c5299e = MAKE_CODE_OBJECT(module_filename_obj, 3284, CO_NOFREE, mod_consts[763], mod_consts[763], mod_consts[784], NULL, 0, 0, 0);
    codeobj_7e0a7e2812bb27d237297241fe6989c6 = MAKE_CODE_OBJECT(module_filename_obj, 407, CO_NOFREE, mod_consts[497], mod_consts[497], mod_consts[784], NULL, 0, 0, 0);
    codeobj_b5e1e0d46725f66c0a5f4cafc203c477 = MAKE_CODE_OBJECT(module_filename_obj, 912, CO_NOFREE, mod_consts[111], mod_consts[111], mod_consts[784], NULL, 0, 0, 0);
    codeobj_25ef1ebb07b4b0baf1f559d5ed63b11e = MAKE_CODE_OBJECT(module_filename_obj, 3032, CO_NOFREE, mod_consts[384], mod_consts[384], mod_consts[784], NULL, 0, 0, 0);
    codeobj_86aba5b77bc70fc0ed4ba448dadf0054 = MAKE_CODE_OBJECT(module_filename_obj, 422, CO_NOFREE, mod_consts[69], mod_consts[69], mod_consts[784], NULL, 0, 0, 0);
    codeobj_d0c7b8998b645ef155c09c24d41e5bbb = MAKE_CODE_OBJECT(module_filename_obj, 492, CO_NOFREE, mod_consts[72], mod_consts[72], mod_consts[784], NULL, 0, 0, 0);
    codeobj_9a7cdf8be051611b6ce58ab21d3dd9a5 = MAKE_CODE_OBJECT(module_filename_obj, 3224, CO_NOFREE, mod_consts[753], mod_consts[753], mod_consts[784], NULL, 0, 0, 0);
    codeobj_97502711f14333c2557dbb4ac6c98933 = MAKE_CODE_OBJECT(module_filename_obj, 3182, CO_NOFREE, mod_consts[742], mod_consts[742], mod_consts[784], NULL, 0, 0, 0);
    codeobj_1c8e3afcf516b03fba3866eb8e1f7215 = MAKE_CODE_OBJECT(module_filename_obj, 2014, CO_NOFREE, mod_consts[292], mod_consts[292], mod_consts[784], NULL, 0, 0, 0);
    codeobj_6525230dd834556a5ea96a0e502bf46d = MAKE_CODE_OBJECT(module_filename_obj, 946, CO_NOFREE, mod_consts[123], mod_consts[123], mod_consts[784], NULL, 0, 0, 0);
    codeobj_75f2c57f48de7f65993f72e91d187b17 = MAKE_CODE_OBJECT(module_filename_obj, 48, CO_NOFREE, mod_consts[450], mod_consts[450], mod_consts[784], NULL, 0, 0, 0);
    codeobj_ed7f1a1f30dd734ccfa6346aa5e09b35 = MAKE_CODE_OBJECT(module_filename_obj, 113, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[451], mod_consts[451], mod_consts[786], NULL, 2, 0, 0);
    codeobj_3fe76aec9f860e46bc4bad5ada88bb0e = MAKE_CODE_OBJECT(module_filename_obj, 1911, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[787], NULL, 4, 0, 0);
    codeobj_860cf24a015df29d396f8849325256e4 = MAKE_CODE_OBJECT(module_filename_obj, 3293, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[788], NULL, 1, 0, 0);
    codeobj_22b369a7fb61d52c4d40da6b0fdc21f6 = MAKE_CODE_OBJECT(module_filename_obj, 1324, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[789], NULL, 1, 0, 0);
    codeobj_dcb37d94f9a080ffee69d985b8473940 = MAKE_CODE_OBJECT(module_filename_obj, 2960, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[790], NULL, 5, 0, 0);
    codeobj_a5a5d3a8e5e34ea07914ff3f7c20caf8 = MAKE_CODE_OBJECT(module_filename_obj, 950, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[791], NULL, 2, 0, 0);
    codeobj_1655a926b88f18b8542168ff4f71938a = MAKE_CODE_OBJECT(module_filename_obj, 1022, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[791], NULL, 2, 0, 0);
    codeobj_78b5c1ad9da27cdab09b61f7c9361a93 = MAKE_CODE_OBJECT(module_filename_obj, 219, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[792], NULL, 7, 0, 0);
    codeobj_8d044b6d5bdc619673cd83ddf539ea55 = MAKE_CODE_OBJECT(module_filename_obj, 478, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[793], NULL, 2, 0, 0);
    codeobj_b63fa63511e0c7b1860a52cdcec45410 = MAKE_CODE_OBJECT(module_filename_obj, 507, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[793], NULL, 2, 0, 0);
    codeobj_c393e91cad8d39e54440e418e4d538f0 = MAKE_CODE_OBJECT(module_filename_obj, 1059, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[794], NULL, 7, 0, 0);
    codeobj_e1977a2d725d12c80b7a6caec89fcb30 = MAKE_CODE_OBJECT(module_filename_obj, 2069, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[795], NULL, 4, 0, 0);
    codeobj_8e8c704bd4c8e39012c18136e28302b7 = MAKE_CODE_OBJECT(module_filename_obj, 2384, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[796], NULL, 2, 0, 0);
    codeobj_3e4700fbfee0bd27ddc1ad9b6731a22f = MAKE_CODE_OBJECT(module_filename_obj, 772, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[797], NULL, 4, 0, 0);
    codeobj_d07f871351a6331152b640082eb89314 = MAKE_CODE_OBJECT(module_filename_obj, 625, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[798], NULL, 5, 0, 0);
    codeobj_c42814ac89cf306358687927a567e483 = MAKE_CODE_OBJECT(module_filename_obj, 1802, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[799], NULL, 5, 0, 0);
    codeobj_4514be1da557df83c2179ee33fc04bab = MAKE_CODE_OBJECT(module_filename_obj, 833, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[800], NULL, 2, 0, 0);
    codeobj_5a1c82eeba4d41bbbc3db728e2b9fc59 = MAKE_CODE_OBJECT(module_filename_obj, 918, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[800], NULL, 2, 0, 0);
    codeobj_a5939a4eef8c8ee9294d69c356867bd8 = MAKE_CODE_OBJECT(module_filename_obj, 3127, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[801], NULL, 2, 0, 0);
    codeobj_d2110d52561d4de5270328393e2cb4b1 = MAKE_CODE_OBJECT(module_filename_obj, 3037, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, mod_consts[70], mod_consts[70], mod_consts[802], NULL, 1, 0, 0);
    codeobj_a0596b116f73cc11f051908d5fa496da = MAKE_CODE_OBJECT(module_filename_obj, 1838, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[620], mod_consts[620], mod_consts[803], NULL, 1, 0, 0);
    codeobj_b2a3f80dafa6a38c0c69d24b7fb74477 = MAKE_CODE_OBJECT(module_filename_obj, 1666, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[600], mod_consts[600], mod_consts[803], NULL, 1, 0, 0);
    codeobj_a02ff683c856ba0c34c2d0de709d74ff = MAKE_CODE_OBJECT(module_filename_obj, 3273, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[13], mod_consts[804], NULL, 3, 0, 0);
    codeobj_478fae5cd16153931042b88bcec7603f = MAKE_CODE_OBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[13], mod_consts[805], NULL, 3, 0, 0);
    codeobj_a8aa4c3dc6bd2eff6b80e65163c43831 = MAKE_CODE_OBJECT(module_filename_obj, 64, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[13], mod_consts[806], NULL, 3, 0, 0);
    codeobj_5f4143dc7b59fc9c50b113a344e804ba = MAKE_CODE_OBJECT(module_filename_obj, 1637, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[13], mod_consts[807], NULL, 3, 0, 0);
    codeobj_84049f62abc4b0f6cc3d4bd7098c0c6a = MAKE_CODE_OBJECT(module_filename_obj, 2621, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[321], mod_consts[321], mod_consts[808], NULL, 3, 0, 0);
    codeobj_cdfb914b415cf1ef72774c8db4c1354d = MAKE_CODE_OBJECT(module_filename_obj, 1606, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[223], mod_consts[223], mod_consts[809], NULL, 2, 0, 0);
    codeobj_393c24de29e5f4b7b8173a52b5c6dcc5 = MAKE_CODE_OBJECT(module_filename_obj, 680, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[101], mod_consts[101], mod_consts[803], NULL, 1, 0, 0);
    codeobj_796bc91f48f21302ef5b98f3e2483489 = MAKE_CODE_OBJECT(module_filename_obj, 1473, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[171], mod_consts[171], mod_consts[810], NULL, 3, 0, 0);
    codeobj_7f9e4ec31fee00f805cf32752e1ce6c8 = MAKE_CODE_OBJECT(module_filename_obj, 1467, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[238], mod_consts[238], mod_consts[803], NULL, 1, 0, 0);
    codeobj_dc1e0116e02385bb6a0ea34ac06059f5 = MAKE_CODE_OBJECT(module_filename_obj, 58, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_90751710920b713440bdd9e6d3e2a077 = MAKE_CODE_OBJECT(module_filename_obj, 544, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_86a1f7ec69966cfa18ae1dc28bfa13bc = MAKE_CODE_OBJECT(module_filename_obj, 740, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_40c6e27348719cb4c5f6f001c46c47ef = MAKE_CODE_OBJECT(module_filename_obj, 863, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_6fa4a9c9a50f89ccbaee717d3548f2f6 = MAKE_CODE_OBJECT(module_filename_obj, 888, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_5bfb01a900fbcd37cf78a54badbcbde7 = MAKE_CODE_OBJECT(module_filename_obj, 936, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_0cd02c703c2775b783b9936a6f233d17 = MAKE_CODE_OBJECT(module_filename_obj, 2016, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[2], mod_consts[803], NULL, 1, 0, 0);
    codeobj_505a0502bdbab04f3824c3172764fcb4 = MAKE_CODE_OBJECT(module_filename_obj, 1215, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[165], mod_consts[165], mod_consts[811], NULL, 3, 0, 0);
    codeobj_cdb3081bdb2c85b909f6c4371f372e59 = MAKE_CODE_OBJECT(module_filename_obj, 1649, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[256], mod_consts[256], mod_consts[809], NULL, 2, 0, 0);
    codeobj_02ec6092a6bf216df402ff29d2a09867 = MAKE_CODE_OBJECT(module_filename_obj, 1199, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[138], mod_consts[138], mod_consts[812], NULL, 3, 0, 0);
    codeobj_c6bfd50df88620f32c9bc73248327de1 = MAKE_CODE_OBJECT(module_filename_obj, 1207, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[140], mod_consts[140], mod_consts[812], NULL, 3, 0, 0);
    codeobj_d84c754abc2f7c3ad9b602eba74790db = MAKE_CODE_OBJECT(module_filename_obj, 1183, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[150], mod_consts[150], mod_consts[812], NULL, 3, 0, 0);
    codeobj_5e4811336afcb0cee41bc6eba05d5af8 = MAKE_CODE_OBJECT(module_filename_obj, 1191, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[151], mod_consts[151], mod_consts[812], NULL, 3, 0, 0);
    codeobj_a29865fc3b7ccc8eed358a41946fb965 = MAKE_CODE_OBJECT(module_filename_obj, 1547, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[187], mod_consts[187], mod_consts[813], NULL, 3, 0, 0);
    codeobj_d185872fd6ef313ec30a6b47c7b89cae = MAKE_CODE_OBJECT(module_filename_obj, 851, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[399], mod_consts[399], mod_consts[814], NULL, 2, 0, 0);
    codeobj_178b92a44f6a739969990d16fed758a7 = MAKE_CODE_OBJECT(module_filename_obj, 928, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[399], mod_consts[399], mod_consts[814], NULL, 2, 0, 0);
    codeobj_39d02b762a7fc89ec42128877d4654af = MAKE_CODE_OBJECT(module_filename_obj, 3349, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[385], mod_consts[385], mod_consts[815], NULL, 1, 0, 0);
    codeobj_f3390662c8b7527db73baa51a692cb82 = MAKE_CODE_OBJECT(module_filename_obj, 3044, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[712], mod_consts[712], mod_consts[816], NULL, 2, 0, 0);
    codeobj_4841414b091159f12e20ecd242a5db74 = MAKE_CODE_OBJECT(module_filename_obj, 1089, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[377], mod_consts[377], mod_consts[817], NULL, 2, 0, 0);
    codeobj_7a96f11fc9841aac6ac44ac3480f50e1 = MAKE_CODE_OBJECT(module_filename_obj, 3017, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[377], mod_consts[377], mod_consts[818], NULL, 3, 0, 0);
    codeobj_e5f411581a210eef805ca44376d6ff8b = MAKE_CODE_OBJECT(module_filename_obj, 3023, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[379], mod_consts[379], mod_consts[819], NULL, 2, 0, 0);
    codeobj_81bdd4839efb4ca8cab2fe7d7122470a = MAKE_CODE_OBJECT(module_filename_obj, 1721, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[142], mod_consts[142], mod_consts[820], NULL, 3, 0, 0);
    codeobj_02fa2f175ce00e86181c18b5a06b2be0 = MAKE_CODE_OBJECT(module_filename_obj, 1948, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[142], mod_consts[142], mod_consts[820], NULL, 3, 0, 0);
    codeobj_02b24c1aab36b85538788780cbf29e07 = MAKE_CODE_OBJECT(module_filename_obj, 1100, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[142], mod_consts[142], mod_consts[821], NULL, 3, 0, 0);
    codeobj_0a4371321ab570fbf59be00f80d01c5c = MAKE_CODE_OBJECT(module_filename_obj, 1581, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[189], mod_consts[189], mod_consts[822], NULL, 4, 0, 0);
    codeobj_c1907f39d5011cfd95726a22afbb3938 = MAKE_CODE_OBJECT(module_filename_obj, 110, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[14], mod_consts[823], NULL, 2, 0, 0);
    codeobj_5aae064b1d2797cd804c1de082b29707 = MAKE_CODE_OBJECT(module_filename_obj, 2492, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[14], mod_consts[824], NULL, 2, 0, 0);
    codeobj_4681de3a5744db5c28af0c5006b60e40 = MAKE_CODE_OBJECT(module_filename_obj, 2826, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[14], mod_consts[825], NULL, 2, 0, 0);
    codeobj_8a94126259a5bafcedf7747a5b8d5ea2 = MAKE_CODE_OBJECT(module_filename_obj, 1713, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[246], mod_consts[246], mod_consts[826], NULL, 2, 0, 0);
    codeobj_626f15039653823855dba21445a737d7 = MAKE_CODE_OBJECT(module_filename_obj, 1939, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[246], mod_consts[246], mod_consts[826], NULL, 2, 0, 0);
    codeobj_df4f9203137722432f20a7a5cd8dfb73 = MAKE_CODE_OBJECT(module_filename_obj, 2653, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[344], mod_consts[344], mod_consts[803], NULL, 1, 0, 0);
    codeobj_2bd8805a9cbc7c13e67d737734aa3c69 = MAKE_CODE_OBJECT(module_filename_obj, 1972, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[281], mod_consts[281], mod_consts[816], NULL, 2, 0, 0);
    codeobj_69cd121a9e7915ea43e980bbfb781ba4 = MAKE_CODE_OBJECT(module_filename_obj, 2034, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[1], mod_consts[1], mod_consts[803], NULL, 1, 0, 0);
    codeobj_f414fb9bff05b417e46eb6ca0a8948ab = MAKE_CODE_OBJECT(module_filename_obj, 1092, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[149], mod_consts[149], mod_consts[827], NULL, 2, 0, 0);
    codeobj_a4dd06c35d8f54f5659d4efa77c645c1 = MAKE_CODE_OBJECT(module_filename_obj, 396, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[495], mod_consts[495], mod_consts[828], NULL, 1, 0, 0);
    codeobj_3d2504df643f6ba03cabb0b24161160e = MAKE_CODE_OBJECT(module_filename_obj, 520, CO_NOFREE, mod_consts[495], mod_consts[495], mod_consts[803], NULL, 1, 0, 0);
    codeobj_64325d5ac57f07f17109e61bac531e7f = MAKE_CODE_OBJECT(module_filename_obj, 1222, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[167], mod_consts[167], mod_consts[829], mod_consts[803], 1, 0, 0);
    codeobj_b22349e9e011fdb2b0cebbc3975c6387 = MAKE_CODE_OBJECT(module_filename_obj, 1708, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[152], mod_consts[152], mod_consts[830], NULL, 2, 0, 0);
    codeobj_321bf2361f1cad4f3c4c9cdf8ae84a4e = MAKE_CODE_OBJECT(module_filename_obj, 1148, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[152], mod_consts[152], mod_consts[831], NULL, 2, 0, 0);
    codeobj_b50eb69544daac7f0e728d4497ab5937 = MAKE_CODE_OBJECT(module_filename_obj, 1691, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[604], mod_consts[604], mod_consts[832], NULL, 2, 0, 0);
    codeobj_63e12dc9752003f7d1300b5a9d89f566 = MAKE_CODE_OBJECT(module_filename_obj, 2095, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[604], mod_consts[604], mod_consts[832], NULL, 2, 0, 0);
    codeobj_85bac47e1cf9d36e40522f790bb6cd9b = MAKE_CODE_OBJECT(module_filename_obj, 2907, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[700], mod_consts[700], mod_consts[833], NULL, 3, 0, 0);
    codeobj_ac0eb5cbdd92fdd006b83a9501c373a9 = MAKE_CODE_OBJECT(module_filename_obj, 2855, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[698], mod_consts[698], mod_consts[833], NULL, 3, 0, 0);
    codeobj_4b54e7eeebef5e85e49e3f73839abe7c = MAKE_CODE_OBJECT(module_filename_obj, 2519, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[323], mod_consts[323], mod_consts[803], NULL, 1, 0, 0);
    codeobj_11bd9f031662eaa94875136629728aed = MAKE_CODE_OBJECT(module_filename_obj, 2568, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[330], mod_consts[330], mod_consts[803], NULL, 1, 0, 0);
    codeobj_cbcbdb2d9e8a5fff79198c7cbe25ed04 = MAKE_CODE_OBJECT(module_filename_obj, 1677, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[602], mod_consts[602], mod_consts[834], NULL, 2, 0, 0);
    codeobj_9023f34f84e0bc2d0766715b99f9fe92 = MAKE_CODE_OBJECT(module_filename_obj, 2552, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[327], mod_consts[327], mod_consts[803], NULL, 1, 0, 0);
    codeobj_4deb6907a9a8f405f85fccb5a2026138 = MAKE_CODE_OBJECT(module_filename_obj, 2603, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[680], mod_consts[680], mod_consts[803], NULL, 1, 0, 0);
    codeobj_7fc04a05e029d491257a3400bd5674b4 = MAKE_CODE_OBJECT(module_filename_obj, 2584, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[333], mod_consts[333], mod_consts[835], NULL, 4, 0, 0);
    codeobj_7b3379ea232c1f0da5bc581a8f2d9590 = MAKE_CODE_OBJECT(module_filename_obj, 2535, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[325], mod_consts[325], mod_consts[803], NULL, 1, 0, 0);
    codeobj_e2920da790812d701aed1f6e299c3c2a = MAKE_CODE_OBJECT(module_filename_obj, 1162, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[156], mod_consts[156], mod_consts[803], NULL, 1, 0, 0);
    codeobj_c95f74067ff2a26745a69ed5731ef0fd = MAKE_CODE_OBJECT(module_filename_obj, 704, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[836], NULL, 2, 0, 0);
    codeobj_6efcc9144f44aeed5f25c6da94d7dd38 = MAKE_CODE_OBJECT(module_filename_obj, 966, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[837], NULL, 2, 0, 0);
    codeobj_6b2fdf7acf092486e60e6c4b91bdaacf = MAKE_CODE_OBJECT(module_filename_obj, 1992, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[838], NULL, 2, 0, 0);
    codeobj_62a491413e6803ba136fa56eec053539 = MAKE_CODE_OBJECT(module_filename_obj, 1841, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[839], NULL, 2, 0, 0);
    codeobj_7dc3a592a8957d237412cb3869c0d59b = MAKE_CODE_OBJECT(module_filename_obj, 2098, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[840], NULL, 2, 0, 0);
    codeobj_455d8e1951d4354fb0c6cb4f4898fd69 = MAKE_CODE_OBJECT(module_filename_obj, 2431, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[841], NULL, 2, 0, 0);
    codeobj_ab3bac6d0f6858d8ca356e1508aeb2ac = MAKE_CODE_OBJECT(module_filename_obj, 1752, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[842], NULL, 2, 0, 0);
    codeobj_cadc8843633297c77a83550476c5c68a = MAKE_CODE_OBJECT(module_filename_obj, 319, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[843], NULL, 2, 0, 0);
    codeobj_7c5e81347f01a63cc0bbd6a2d986e9c2 = MAKE_CODE_OBJECT(module_filename_obj, 2656, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[252], mod_consts[252], mod_consts[844], NULL, 2, 0, 0);
    codeobj_8f8e59509cf5dd0cddb84c2d22b10dcf = MAKE_CODE_OBJECT(module_filename_obj, 2037, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[124], mod_consts[124], mod_consts[845], NULL, 3, 0, 0);
    codeobj_224fee5ca0b2f3cfd3d9a5506ec239c9 = MAKE_CODE_OBJECT(module_filename_obj, 998, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[124], mod_consts[124], mod_consts[846], NULL, 3, 0, 0);
    codeobj_bd11c465c1627b66dd527f313d4aa38c = MAKE_CODE_OBJECT(module_filename_obj, 1881, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[624], mod_consts[624], mod_consts[847], NULL, 3, 0, 0);
    codeobj_0732f29a10e86e4e06372e913782245e = MAKE_CODE_OBJECT(module_filename_obj, 3014, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[624], mod_consts[624], mod_consts[847], NULL, 3, 0, 0);
    codeobj_292e8eb9852aff9ad1415c867443ca42 = MAKE_CODE_OBJECT(module_filename_obj, 2848, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[695], mod_consts[695], mod_consts[848], NULL, 1, 0, 0);
    codeobj_75cf377c5b151e45160341e104f8347e = MAKE_CODE_OBJECT(module_filename_obj, 1145, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[145], mod_consts[145], mod_consts[849], NULL, 1, 0, 0);
    codeobj_8cfd97f2a77ecbb2eb909335286de10f = MAKE_CODE_OBJECT(module_filename_obj, 1775, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[145], mod_consts[145], mod_consts[849], NULL, 1, 0, 0);
    codeobj_93e99cc8c06c3e9cd8797bb4bad6c276 = MAKE_CODE_OBJECT(module_filename_obj, 1165, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[160], mod_consts[160], mod_consts[850], NULL, 3, 0, 0);
    codeobj_8f0b7592959ec998dbe0a36a0203ad7d = MAKE_CODE_OBJECT(module_filename_obj, 1174, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[163], mod_consts[163], mod_consts[850], NULL, 3, 0, 0);
    codeobj_a99c26bd90c6e071d11f1c9eda1ed2ee = MAKE_CODE_OBJECT(module_filename_obj, 392, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_bf1332a160020718f67323f49b22daa3 = MAKE_CODE_OBJECT(module_filename_obj, 530, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_0fe5e2c0f3336234e4fbd21c3649d9bc = MAKE_CODE_OBJECT(module_filename_obj, 688, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_1e198664f2a4d9e82bdc48cdfa9a8f98 = MAKE_CODE_OBJECT(module_filename_obj, 848, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_a687d194a42d00f5eedb208b2958bc38 = MAKE_CODE_OBJECT(module_filename_obj, 880, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_e6768e8b750571560d72b619871f854e = MAKE_CODE_OBJECT(module_filename_obj, 921, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_6cd175b6d8dd8eef0a3f5ec634733de5 = MAKE_CODE_OBJECT(module_filename_obj, 1006, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_82e5fd204f296fa27f96d394a9996049 = MAKE_CODE_OBJECT(module_filename_obj, 3140, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[492], mod_consts[851], NULL, 2, 0, 0);
    codeobj_3393bab199aa606260cd83eafb7e60ef = MAKE_CODE_OBJECT(module_filename_obj, 3007, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[655], mod_consts[655], mod_consts[803], NULL, 1, 0, 0);
    codeobj_1cee837fc0e901460db4f0b3537764a9 = MAKE_CODE_OBJECT(module_filename_obj, 3269, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[836], NULL, 2, 0, 0);
    codeobj_70b6465292cb8ebb4d90aed986b2aa6d = MAKE_CODE_OBJECT(module_filename_obj, 1982, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[852], NULL, 2, 0, 0);
    codeobj_15e6a851de498da4e983cb66c2336097 = MAKE_CODE_OBJECT(module_filename_obj, 2444, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[841], NULL, 2, 0, 0);
    codeobj_71d3edc0c658b2c8714cd3518a82d2c5 = MAKE_CODE_OBJECT(module_filename_obj, 1741, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[842], NULL, 2, 0, 0);
    codeobj_4d6276086e7db92556476b843c7fa67e = MAKE_CODE_OBJECT(module_filename_obj, 308, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[853], NULL, 2, 0, 0);
    codeobj_66deec90162bc4753df4cc6dd0001d3c = MAKE_CODE_OBJECT(module_filename_obj, 537, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[853], NULL, 2, 0, 0);
    codeobj_bf8473661f9b4d7ef6a26aeeae2ba020 = MAKE_CODE_OBJECT(module_filename_obj, 691, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[853], NULL, 2, 0, 0);
    codeobj_db2e478b6344ee42179a20a08cdbb810 = MAKE_CODE_OBJECT(module_filename_obj, 953, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[249], mod_consts[853], NULL, 2, 0, 0);
    codeobj_5952bea9da3dc287ee9548270dd9ecec = MAKE_CODE_OBJECT(module_filename_obj, 1603, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[287], mod_consts[287], mod_consts[803], NULL, 1, 0, 0);
    codeobj_65bb6e806379f2ff318d16ee827a2a54 = MAKE_CODE_OBJECT(module_filename_obj, 327, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[28], mod_consts[854], NULL, 1, 0, 0);
    codeobj_d7d5c03789b25fdfe7cbb4bef3712422 = MAKE_CODE_OBJECT(module_filename_obj, 538, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[28], mod_consts[854], NULL, 1, 0, 0);
    codeobj_140f11ffc232bba79a75d39fd9201206 = MAKE_CODE_OBJECT(module_filename_obj, 692, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[28], mod_consts[854], NULL, 1, 0, 0);
    codeobj_8b1c9324b2f9a74c36720b12fbd8f5ac = MAKE_CODE_OBJECT(module_filename_obj, 991, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[28], mod_consts[854], NULL, 1, 0, 0);
    codeobj_f6f16776ae2cb762341ba3c5b6c326c2 = MAKE_CODE_OBJECT(module_filename_obj, 972, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[855], mod_consts[856], 1, 0, 0);
    codeobj_d2e311dba25391f084fb5587bbee1e49 = MAKE_CODE_OBJECT(module_filename_obj, 1999, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[857], mod_consts[858], 1, 0, 0);
    codeobj_312ec13661de5345d0571398b3ebdcd9 = MAKE_CODE_OBJECT(module_filename_obj, 309, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[859], mod_consts[860], 1, 0, 0);
    codeobj_7c00a8e6535b4fa75995a2f65b4780db = MAKE_CODE_OBJECT(module_filename_obj, 954, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[859], mod_consts[860], 1, 0, 0);
    codeobj_19739b43823e27c5ca08a9fce0ba67b9 = MAKE_CODE_OBJECT(module_filename_obj, 1854, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[861], mod_consts[862], 1, 0, 0);
    codeobj_39fef5748edb71876d93470d3a219c62 = MAKE_CODE_OBJECT(module_filename_obj, 1847, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[863], mod_consts[864], 1, 0, 0);
    codeobj_1576acc756b228012430cc5020f20e50 = MAKE_CODE_OBJECT(module_filename_obj, 343, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[865], mod_consts[866], 1, 0, 0);
    codeobj_f302782f2887664f0f81e60fcde974ef = MAKE_CODE_OBJECT(module_filename_obj, 2110, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[867], mod_consts[868], 1, 0, 0);
    codeobj_7e98211beaef94e3ce7422d68cfdf4d1 = MAKE_CODE_OBJECT(module_filename_obj, 2130, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[867], mod_consts[868], 1, 0, 0);
    codeobj_6870cd705409694c096203ac688e3f94 = MAKE_CODE_OBJECT(module_filename_obj, 2103, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[869], mod_consts[870], 1, 0, 0);
    codeobj_a38c5228ea1ec6397f512a1e33be6501 = MAKE_CODE_OBJECT(module_filename_obj, 2122, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[871], mod_consts[870], 1, 0, 0);
    codeobj_bf146a3bd02941452c10a750e761f313 = MAKE_CODE_OBJECT(module_filename_obj, 1866, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[872], mod_consts[873], 1, 0, 0);
    codeobj_5d56852e46eecf9b918918c8d7c7b596 = MAKE_CODE_OBJECT(module_filename_obj, 2435, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[874], mod_consts[875], 1, 0, 0);
    codeobj_46b25776bd4ddeac141a592a403be131 = MAKE_CODE_OBJECT(module_filename_obj, 2448, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[874], mod_consts[875], 1, 0, 0);
    codeobj_a9e09639978136bffb6206c45567ff7a = MAKE_CODE_OBJECT(module_filename_obj, 1874, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[876], mod_consts[877], 1, 0, 0);
    codeobj_e0a7f1e932becaa154a831e9269c7eea = MAKE_CODE_OBJECT(module_filename_obj, 1766, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[878], mod_consts[879], 1, 0, 0);
    codeobj_ee71dbf6059dd4350596c729cfc0a259 = MAKE_CODE_OBJECT(module_filename_obj, 1744, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[880], mod_consts[879], 1, 0, 0);
    codeobj_bf7f434d5ab0377974a5101ca9ba0d53 = MAKE_CODE_OBJECT(module_filename_obj, 1755, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[880], mod_consts[879], 1, 0, 0);
    codeobj_7c593997b229d4af744026257e566d69 = MAKE_CODE_OBJECT(module_filename_obj, 1987, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[881], mod_consts[882], 1, 0, 0);
    codeobj_1ad717ec8074da851881b8d6d8645881 = MAKE_CODE_OBJECT(module_filename_obj, 2661, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[883], mod_consts[884], 1, 0, 0);
    codeobj_9601272f9d86ca9675bd31bee69e315f = MAKE_CODE_OBJECT(module_filename_obj, 2680, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[28], mod_consts[885], mod_consts[886], 1, 0, 0);
    codeobj_a38ad2f71667eefaa00c91b2468061ee = MAKE_CODE_OBJECT(module_filename_obj, 386, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_002ac1bda8a7625b09e4ebcb81cb326b = MAKE_CODE_OBJECT(module_filename_obj, 534, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_b0447968372817314d0c8957939bd266 = MAKE_CODE_OBJECT(module_filename_obj, 698, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_a4ec031d95526921a392dd91aa716a6f = MAKE_CODE_OBJECT(module_filename_obj, 859, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_5c02dabc9065dccb18307f68bd111e12 = MAKE_CODE_OBJECT(module_filename_obj, 884, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_0f190e1c4a7897b2194aead67fb41b94 = MAKE_CODE_OBJECT(module_filename_obj, 925, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_cdf30f2e8523063925753c74ebf0993b = MAKE_CODE_OBJECT(module_filename_obj, 961, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_661fb462b301535964bfb2f673f127da = MAKE_CODE_OBJECT(module_filename_obj, 1967, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_c39aad65e86349b425603ac858b36a6c = MAKE_CODE_OBJECT(module_filename_obj, 2092, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_ee1ad9b19df039d69a22fe4948e9cc29 = MAKE_CODE_OBJECT(module_filename_obj, 2640, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_9ded2a4e9b5137410534666c16be1ee5 = MAKE_CODE_OBJECT(module_filename_obj, 3011, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[803], NULL, 1, 0, 0);
    codeobj_7678b2e07fbc7a4f387d6c0cc758d75e = MAKE_CODE_OBJECT(module_filename_obj, 1779, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[257], mod_consts[257], mod_consts[887], NULL, 1, 0, 0);
    codeobj_8dc7b1bcd27b6dac4b7e5756844aedbd = MAKE_CODE_OBJECT(module_filename_obj, 710, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[888], NULL, 3, 0, 0);
    codeobj_496e29032d090222c1a58f3ff80d8907 = MAKE_CODE_OBJECT(module_filename_obj, 801, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[888], NULL, 3, 0, 0);
    codeobj_46351f3dea9566bcf08fe0dc8a4cd561 = MAKE_CODE_OBJECT(module_filename_obj, 985, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[888], NULL, 3, 0, 0);
    codeobj_5c72b10f9b4b51ccf6a0f605a349415b = MAKE_CODE_OBJECT(module_filename_obj, 2007, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[888], NULL, 3, 0, 0);
    codeobj_95e372e15f3eab876275a166a45fc0ec = MAKE_CODE_OBJECT(module_filename_obj, 3055, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[888], NULL, 3, 0, 0);
    codeobj_72a1c19d21e6be035c14bc845019e8bb = MAKE_CODE_OBJECT(module_filename_obj, 2117, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[889], NULL, 3, 0, 0);
    codeobj_9bec7a53c683d8412a7dcbbec48f400e = MAKE_CODE_OBJECT(module_filename_obj, 1861, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[890], NULL, 3, 0, 0);
    codeobj_e330aca6bb85180dba8461a0a1940a85 = MAKE_CODE_OBJECT(module_filename_obj, 1763, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[891], NULL, 3, 0, 0);
    codeobj_854fb67416f05a7dd402e05f0c3fad95 = MAKE_CODE_OBJECT(module_filename_obj, 990, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[892], NULL, 3, 0, 0);
    codeobj_8bea2ad013daff045879b53916208b19 = MAKE_CODE_OBJECT(module_filename_obj, 2676, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[893], NULL, 3, 0, 0);
    codeobj_38c1873b26339ac722accf1443101653 = MAKE_CODE_OBJECT(module_filename_obj, 358, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[254], mod_consts[254], mod_consts[894], NULL, 3, 0, 0);
    codeobj_1ae91670e9c7411c62634f9d9b1cedf9 = MAKE_CODE_OBJECT(module_filename_obj, 2644, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[684], mod_consts[684], mod_consts[803], NULL, 1, 0, 0);
    codeobj_1906085cade7eb0c9b887fc6048b75da = MAKE_CODE_OBJECT(module_filename_obj, 2649, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[684], mod_consts[684], mod_consts[816], NULL, 2, 0, 0);
    codeobj_edbbfc1e8b4d64da3fa598f7fda58c7d = MAKE_CODE_OBJECT(module_filename_obj, 1596, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[181], mod_consts[181], mod_consts[803], NULL, 1, 0, 0);
    codeobj_8fd9daf5853e0e821c3f286896028af7 = MAKE_CODE_OBJECT(module_filename_obj, 2425, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[302], mod_consts[302], mod_consts[836], NULL, 2, 0, 0);
    codeobj_a902ceab51ee1c72b73341439a122c1a = MAKE_CODE_OBJECT(module_filename_obj, 2428, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[306], mod_consts[306], mod_consts[836], NULL, 2, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyThreadState *tstate, PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__2_complex_call_helper_keywords_star_dict(PyThreadState *tstate, PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__5_complex_call_helper_pos_star_dict(PyThreadState *tstate, PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__12_complex_call_helper_pos_keywords_star_list(PyThreadState *tstate, PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__10_complex_call_helper_star_dict(PyThreadState *tstate, PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__7_complex_call_helper_star_list(PyThreadState *tstate, PyObject **python_pars);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101__type_affinity();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_boolean();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_string();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_integer();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_float();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118_as_numeric(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_as_json();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124__str_impl();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_contains();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129_any(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_all(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_hashable();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134_compare_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135__set_parent(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137___init__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__140___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__142_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__144___init__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_as_generic(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79_adapt();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_copy();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88___reduce__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91_compare_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor();


// The module function definitions.
static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_dc1e0116e02385bb6a0ea34ac06059f5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_dc1e0116e02385bb6a0ea34ac06059f5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_dc1e0116e02385bb6a0ea34ac06059f5)) {
        Py_XDECREF(cache_frame_dc1e0116e02385bb6a0ea34ac06059f5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dc1e0116e02385bb6a0ea34ac06059f5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dc1e0116e02385bb6a0ea34ac06059f5 = MAKE_FUNCTION_FRAME(tstate, codeobj_dc1e0116e02385bb6a0ea34ac06059f5, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_dc1e0116e02385bb6a0ea34ac06059f5->m_type_description == NULL);
    frame_dc1e0116e02385bb6a0ea34ac06059f5 = cache_frame_dc1e0116e02385bb6a0ea34ac06059f5;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_dc1e0116e02385bb6a0ea34ac06059f5);
    assert(Py_REFCNT(frame_dc1e0116e02385bb6a0ea34ac06059f5) == 2);

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        frame_dc1e0116e02385bb6a0ea34ac06059f5->m_frame.f_lineno = 59;
        tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS(tstate, PyExc_NotImplementedError);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 59;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dc1e0116e02385bb6a0ea34ac06059f5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dc1e0116e02385bb6a0ea34ac06059f5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dc1e0116e02385bb6a0ea34ac06059f5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dc1e0116e02385bb6a0ea34ac06059f5,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_dc1e0116e02385bb6a0ea34ac06059f5 == cache_frame_dc1e0116e02385bb6a0ea34ac06059f5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_dc1e0116e02385bb6a0ea34ac06059f5);
        cache_frame_dc1e0116e02385bb6a0ea34ac06059f5 = NULL;
    }

    assertFrameObject(frame_dc1e0116e02385bb6a0ea34ac06059f5);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    PyObject *var_othertype = NULL;
    PyObject *var_lookup = NULL;
    struct Nuitka_FrameObject *frame_a8aa4c3dc6bd2eff6b80e65163c43831;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831)) {
        Py_XDECREF(cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831 = MAKE_FUNCTION_FRAME(tstate, codeobj_a8aa4c3dc6bd2eff6b80e65163c43831, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831->m_type_description == NULL);
    frame_a8aa4c3dc6bd2eff6b80e65163c43831 = cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a8aa4c3dc6bd2eff6b80e65163c43831);
    assert(Py_REFCNT(frame_a8aa4c3dc6bd2eff6b80e65163c43831) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_other_comparator);
        tmp_expression_value_2 = par_other_comparator;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[0]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[1]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_othertype == NULL);
        var_othertype = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[2]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[3]);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[4]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 67;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_a8aa4c3dc6bd2eff6b80e65163c43831->m_frame.f_lineno = 66;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_expression_value_3 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[3]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_othertype);
        tmp_args_element_value_3 = var_othertype;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[0]);
        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 68;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_a8aa4c3dc6bd2eff6b80e65163c43831->m_frame.f_lineno = 66;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_lookup == NULL);
        var_lookup = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_lookup);
        tmp_cmp_expr_left_1 = var_lookup;
        CHECK_OBJECT(var_othertype);
        tmp_cmp_expr_right_1 = var_othertype;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_1 = par_op;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_9;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_other_comparator);
            tmp_expression_value_9 = par_other_comparator;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[0]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(var_lookup);
        tmp_cmp_expr_left_2 = var_lookup;
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_expression_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[0]);
        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[1]);
        Py_DECREF(tmp_expression_value_10);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_2 = par_op;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_12;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_2);
            CHECK_OBJECT(par_self);
            tmp_expression_value_12 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[0]);
            if (tmp_tuple_element_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 72;
                type_description_1 = "ooooo";
                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_3 = par_op;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_5;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_3);
            tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[5]);

            if (unlikely(tmp_called_value_3 == NULL)) {
                tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[5]);
            }

            if (tmp_called_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;
                type_description_1 = "ooooo";
                goto tuple_build_exception_3;
            }
            CHECK_OBJECT(var_lookup);
            tmp_args_element_value_5 = var_lookup;
            frame_a8aa4c3dc6bd2eff6b80e65163c43831->m_frame.f_lineno = 74;
            tmp_tuple_element_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_5);
            if (tmp_tuple_element_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;
                type_description_1 = "ooooo";
                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        goto frame_return_exit_1;
    }
    branch_end_2:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a8aa4c3dc6bd2eff6b80e65163c43831, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a8aa4c3dc6bd2eff6b80e65163c43831->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a8aa4c3dc6bd2eff6b80e65163c43831, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a8aa4c3dc6bd2eff6b80e65163c43831,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        var_othertype,
        var_lookup
    );


    // Release cached frame if used for exception.
    if (frame_a8aa4c3dc6bd2eff6b80e65163c43831 == cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831);
        cache_frame_a8aa4c3dc6bd2eff6b80e65163c43831 = NULL;
    }

    assertFrameObject(frame_a8aa4c3dc6bd2eff6b80e65163c43831);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_othertype);
    Py_DECREF(var_othertype);
    var_othertype = NULL;
    CHECK_OBJECT(var_lookup);
    Py_DECREF(var_lookup);
    var_lookup = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_othertype);
    var_othertype = NULL;
    Py_XDECREF(var_lookup);
    var_lookup = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    struct Nuitka_FrameObject *frame_478fae5cd16153931042b88bcec7603f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_478fae5cd16153931042b88bcec7603f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_478fae5cd16153931042b88bcec7603f)) {
        Py_XDECREF(cache_frame_478fae5cd16153931042b88bcec7603f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_478fae5cd16153931042b88bcec7603f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_478fae5cd16153931042b88bcec7603f = MAKE_FUNCTION_FRAME(tstate, codeobj_478fae5cd16153931042b88bcec7603f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_478fae5cd16153931042b88bcec7603f->m_type_description == NULL);
    frame_478fae5cd16153931042b88bcec7603f = cache_frame_478fae5cd16153931042b88bcec7603f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_478fae5cd16153931042b88bcec7603f);
    assert(Py_REFCNT(frame_478fae5cd16153931042b88bcec7603f) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_op);
        tmp_cmp_expr_left_1 = par_op;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_other_comparator);
        tmp_isinstance_inst_1 = par_other_comparator;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[9]);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_3;
            PyTuple_SET_ITEM(tmp_isinstance_cls_1, 0, tmp_tuple_element_1);
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[10]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "oooN";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[9]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "oooN";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_isinstance_cls_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_isinstance_cls_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 90;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[11]);
        if (tmp_tuple_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 90;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_5;
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_2);
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[12]);
            if (tmp_expression_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 90;
                type_description_1 = "oooN";
                goto tuple_build_exception_2;
            }
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[0]);
            Py_DECREF(tmp_expression_value_5);
            if (tmp_tuple_element_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 90;
                type_description_1 = "oooN";
                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_type_arg_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[9]);
        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        Py_DECREF(tmp_type_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_other_comparator);
        tmp_args_element_value_2 = par_other_comparator;
        frame_478fae5cd16153931042b88bcec7603f->m_frame.f_lineno = 92;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[13],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_478fae5cd16153931042b88bcec7603f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_478fae5cd16153931042b88bcec7603f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_478fae5cd16153931042b88bcec7603f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_478fae5cd16153931042b88bcec7603f,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_478fae5cd16153931042b88bcec7603f == cache_frame_478fae5cd16153931042b88bcec7603f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_478fae5cd16153931042b88bcec7603f);
        cache_frame_478fae5cd16153931042b88bcec7603f = NULL;
    }

    assertFrameObject(frame_478fae5cd16153931042b88bcec7603f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    struct Nuitka_FrameObject *frame_c1907f39d5011cfd95726a22afbb3938;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c1907f39d5011cfd95726a22afbb3938 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c1907f39d5011cfd95726a22afbb3938)) {
        Py_XDECREF(cache_frame_c1907f39d5011cfd95726a22afbb3938);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c1907f39d5011cfd95726a22afbb3938 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c1907f39d5011cfd95726a22afbb3938 = MAKE_FUNCTION_FRAME(tstate, codeobj_c1907f39d5011cfd95726a22afbb3938, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c1907f39d5011cfd95726a22afbb3938->m_type_description == NULL);
    frame_c1907f39d5011cfd95726a22afbb3938 = cache_frame_c1907f39d5011cfd95726a22afbb3938;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c1907f39d5011cfd95726a22afbb3938);
    assert(Py_REFCNT(frame_c1907f39d5011cfd95726a22afbb3938) == 2);

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        frame_c1907f39d5011cfd95726a22afbb3938->m_frame.f_lineno = 111;
        tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS(tstate, PyExc_NotImplementedError);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 111;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c1907f39d5011cfd95726a22afbb3938, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c1907f39d5011cfd95726a22afbb3938->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c1907f39d5011cfd95726a22afbb3938, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c1907f39d5011cfd95726a22afbb3938,
        type_description_1,
        par_self,
        par_index
    );


    // Release cached frame if used for exception.
    if (frame_c1907f39d5011cfd95726a22afbb3938 == cache_frame_c1907f39d5011cfd95726a22afbb3938) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c1907f39d5011cfd95726a22afbb3938);
        cache_frame_c1907f39d5011cfd95726a22afbb3938 = NULL;
    }

    assertFrameObject(frame_c1907f39d5011cfd95726a22afbb3938);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *var_adjusted_op = NULL;
    PyObject *var_adjusted_right_expr = NULL;
    PyObject *var_result_type = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_ed7f1a1f30dd734ccfa6346aa5e09b35;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35)) {
        Py_XDECREF(cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35 = MAKE_FUNCTION_FRAME(tstate, codeobj_ed7f1a1f30dd734ccfa6346aa5e09b35, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35->m_type_description == NULL);
    frame_ed7f1a1f30dd734ccfa6346aa5e09b35 = cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_ed7f1a1f30dd734ccfa6346aa5e09b35);
    assert(Py_REFCNT(frame_ed7f1a1f30dd734ccfa6346aa5e09b35) == 2);

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_index);
        tmp_args_element_value_1 = par_index;
        frame_ed7f1a1f30dd734ccfa6346aa5e09b35->m_frame.f_lineno = 118;
        tmp_iter_arg_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[14], tmp_args_element_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 3);
        if (tmp_assign_source_2 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 3);
        if (tmp_assign_source_3 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tstate, tmp_unpack_3, 2, 3);
        if (tmp_assign_source_4 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_3 == NULL);
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED(tstate);

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED(tstate);
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 114;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[15];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert(var_adjusted_op == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_adjusted_op = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert(var_adjusted_right_expr == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_adjusted_right_expr = tmp_assign_source_6;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;
        assert(var_result_type == NULL);
        Py_INCREF(tmp_assign_source_7);
        var_result_type = tmp_assign_source_7;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[16]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_adjusted_op);
        tmp_kw_call_arg_value_0_1 = var_adjusted_op;
        CHECK_OBJECT(var_adjusted_right_expr);
        tmp_kw_call_arg_value_1_1 = var_adjusted_right_expr;
        CHECK_OBJECT(var_result_type);
        tmp_kw_call_dict_value_0_1 = var_result_type;
        frame_ed7f1a1f30dd734ccfa6346aa5e09b35->m_frame.f_lineno = 119;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[17]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ed7f1a1f30dd734ccfa6346aa5e09b35, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ed7f1a1f30dd734ccfa6346aa5e09b35->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ed7f1a1f30dd734ccfa6346aa5e09b35, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ed7f1a1f30dd734ccfa6346aa5e09b35,
        type_description_1,
        par_self,
        par_index,
        var_adjusted_op,
        var_adjusted_right_expr,
        var_result_type
    );


    // Release cached frame if used for exception.
    if (frame_ed7f1a1f30dd734ccfa6346aa5e09b35 == cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35);
        cache_frame_ed7f1a1f30dd734ccfa6346aa5e09b35 = NULL;
    }

    assertFrameObject(frame_ed7f1a1f30dd734ccfa6346aa5e09b35);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_adjusted_op);
    Py_DECREF(var_adjusted_op);
    var_adjusted_op = NULL;
    CHECK_OBJECT(var_adjusted_right_expr);
    Py_DECREF(var_adjusted_right_expr);
    var_adjusted_right_expr = NULL;
    CHECK_OBJECT(var_result_type);
    Py_DECREF(var_result_type);
    var_result_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_adjusted_op);
    var_adjusted_op = NULL;
    Py_XDECREF(var_adjusted_right_expr);
    var_adjusted_right_expr = NULL;
    Py_XDECREF(var_result_type);
    var_result_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__6___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_collation = python_pars[2];
    PyObject *par_convert_unicode = python_pars[3];
    PyObject *par_unicode_error = python_pars[4];
    PyObject *par__warn_on_bytestring = python_pars[5];
    PyObject *par__expect_unicode = python_pars[6];
    struct Nuitka_FrameObject *frame_78b5c1ad9da27cdab09b61f7c9361a93;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_78b5c1ad9da27cdab09b61f7c9361a93 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_78b5c1ad9da27cdab09b61f7c9361a93)) {
        Py_XDECREF(cache_frame_78b5c1ad9da27cdab09b61f7c9361a93);

#if _DEBUG_REFCOUNTS
        if (cache_frame_78b5c1ad9da27cdab09b61f7c9361a93 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_78b5c1ad9da27cdab09b61f7c9361a93 = MAKE_FUNCTION_FRAME(tstate, codeobj_78b5c1ad9da27cdab09b61f7c9361a93, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_78b5c1ad9da27cdab09b61f7c9361a93->m_type_description == NULL);
    frame_78b5c1ad9da27cdab09b61f7c9361a93 = cache_frame_78b5c1ad9da27cdab09b61f7c9361a93;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_78b5c1ad9da27cdab09b61f7c9361a93);
    assert(Py_REFCNT(frame_78b5c1ad9da27cdab09b61f7c9361a93) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(par_unicode_error);
        tmp_cmp_expr_left_1 = par_unicode_error;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_convert_unicode);
        tmp_cmp_expr_left_2 = par_convert_unicode;
        tmp_cmp_expr_right_2 = mod_consts[18];
        tmp_and_right_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_instance_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_78b5c1ad9da27cdab09b61f7c9361a93->m_frame.f_lineno = 297;
        tmp_raise_type_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tstate,
            tmp_called_instance_1,
            mod_consts[20],
            PyTuple_GET_ITEM(mod_consts[21], 0)
        );

        if (tmp_raise_type_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 297;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_length);
        tmp_assattr_value_1 = par_length;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[22], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_collation);
        tmp_assattr_value_2 = par_collation;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[23], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_convert_unicode);
        tmp_or_left_value_1 = par_convert_unicode;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 303;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par__expect_unicode);
        tmp_or_right_value_1 = par__expect_unicode;
        tmp_assattr_value_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assattr_value_3 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[24], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 303;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_unicode_error);
        tmp_assattr_value_4 = par_unicode_error;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[25], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par__warn_on_bytestring);
        tmp_assattr_value_5 = par__warn_on_bytestring;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_5, mod_consts[26], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_78b5c1ad9da27cdab09b61f7c9361a93, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_78b5c1ad9da27cdab09b61f7c9361a93->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_78b5c1ad9da27cdab09b61f7c9361a93, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_78b5c1ad9da27cdab09b61f7c9361a93,
        type_description_1,
        par_self,
        par_length,
        par_collation,
        par_convert_unicode,
        par_unicode_error,
        par__warn_on_bytestring,
        par__expect_unicode
    );


    // Release cached frame if used for exception.
    if (frame_78b5c1ad9da27cdab09b61f7c9361a93 == cache_frame_78b5c1ad9da27cdab09b61f7c9361a93) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_78b5c1ad9da27cdab09b61f7c9361a93);
        cache_frame_78b5c1ad9da27cdab09b61f7c9361a93 = NULL;
    }

    assertFrameObject(frame_78b5c1ad9da27cdab09b61f7c9361a93);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_collation);
    Py_DECREF(par_collation);
    CHECK_OBJECT(par_convert_unicode);
    Py_DECREF(par_convert_unicode);
    CHECK_OBJECT(par_unicode_error);
    Py_DECREF(par_unicode_error);
    CHECK_OBJECT(par__warn_on_bytestring);
    Py_DECREF(par__warn_on_bytestring);
    CHECK_OBJECT(par__expect_unicode);
    Py_DECREF(par__expect_unicode);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_collation);
    Py_DECREF(par_collation);
    CHECK_OBJECT(par_convert_unicode);
    Py_DECREF(par_convert_unicode);
    CHECK_OBJECT(par_unicode_error);
    Py_DECREF(par_unicode_error);
    CHECK_OBJECT(par__warn_on_bytestring);
    Py_DECREF(par__warn_on_bytestring);
    CHECK_OBJECT(par__expect_unicode);
    Py_DECREF(par__expect_unicode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_CellObject *par_dialect = Nuitka_Cell_New1(python_pars[1]);
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_dialect;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_312ec13661de5345d0571398b3ebdcd9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_312ec13661de5345d0571398b3ebdcd9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_312ec13661de5345d0571398b3ebdcd9)) {
        Py_XDECREF(cache_frame_312ec13661de5345d0571398b3ebdcd9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_312ec13661de5345d0571398b3ebdcd9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_312ec13661de5345d0571398b3ebdcd9 = MAKE_FUNCTION_FRAME(tstate, codeobj_312ec13661de5345d0571398b3ebdcd9, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_312ec13661de5345d0571398b3ebdcd9->m_type_description == NULL);
    frame_312ec13661de5345d0571398b3ebdcd9 = cache_frame_312ec13661de5345d0571398b3ebdcd9;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_312ec13661de5345d0571398b3ebdcd9);
    assert(Py_REFCNT(frame_312ec13661de5345d0571398b3ebdcd9) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_expression_value_1 = par_value;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[30]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_312ec13661de5345d0571398b3ebdcd9->m_frame.f_lineno = 310;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[31]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 312;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[33]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 312;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[34]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 312;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 312;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_value);
        tmp_expression_value_4 = par_value;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[30]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_312ec13661de5345d0571398b3ebdcd9->m_frame.f_lineno = 313;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_2, mod_consts[35]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        tmp_mod_expr_left_1 = mod_consts[36];
        CHECK_OBJECT(par_value);
        tmp_mod_expr_right_1 = par_value;
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 315;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_312ec13661de5345d0571398b3ebdcd9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_312ec13661de5345d0571398b3ebdcd9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_312ec13661de5345d0571398b3ebdcd9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_312ec13661de5345d0571398b3ebdcd9,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_312ec13661de5345d0571398b3ebdcd9 == cache_frame_312ec13661de5345d0571398b3ebdcd9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_312ec13661de5345d0571398b3ebdcd9);
        cache_frame_312ec13661de5345d0571398b3ebdcd9 = NULL;
    }

    assertFrameObject(frame_312ec13661de5345d0571398b3ebdcd9);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    struct Nuitka_CellObject *var_encoder = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_warn_on_bytestring = Nuitka_Cell_Empty();
    struct Nuitka_FrameObject *frame_cadc8843633297c77a83550476c5c68a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_cadc8843633297c77a83550476c5c68a = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_cadc8843633297c77a83550476c5c68a)) {
        Py_XDECREF(cache_frame_cadc8843633297c77a83550476c5c68a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cadc8843633297c77a83550476c5c68a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cadc8843633297c77a83550476c5c68a = MAKE_FUNCTION_FRAME(tstate, codeobj_cadc8843633297c77a83550476c5c68a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_cadc8843633297c77a83550476c5c68a->m_type_description == NULL);
    frame_cadc8843633297c77a83550476c5c68a = cache_frame_cadc8843633297c77a83550476c5c68a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_cadc8843633297c77a83550476c5c68a);
    assert(Py_REFCNT(frame_cadc8843633297c77a83550476c5c68a) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_1 = Nuitka_Cell_GET(par_self);
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[24]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 320;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[37]);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 320;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_4;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 322;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_dialect;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[38]);
        if (tmp_attribute_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 322;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 322;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 322;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_4 = Nuitka_Cell_GET(par_self);
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[24]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 323;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[18];
        tmp_and_right_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 323;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_attribute_value_4;
        int tmp_truth_name_4;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_5 = Nuitka_Cell_GET(par_self);
        tmp_attribute_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[26]);
        if (tmp_attribute_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_attribute_value_4);
        if (tmp_truth_name_4 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_4);

            exception_lineno = 325;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_4);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_7;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[40]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[41]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 340;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_dialect;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 340;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        frame_cadc8843633297c77a83550476c5c68a->m_frame.f_lineno = 340;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_encoder) == NULL);
        PyCell_SET(var_encoder, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_8 = Nuitka_Cell_GET(par_self);
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[26]);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_warn_on_bytestring) == NULL);
        PyCell_SET(var_warn_on_bytestring, tmp_assign_source_3);

    }
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_encoder;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_warn_on_bytestring;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_2:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cadc8843633297c77a83550476c5c68a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cadc8843633297c77a83550476c5c68a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cadc8843633297c77a83550476c5c68a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cadc8843633297c77a83550476c5c68a,
        type_description_1,
        par_self,
        par_dialect,
        var_process,
        var_encoder,
        var_warn_on_bytestring
    );


    // Release cached frame if used for exception.
    if (frame_cadc8843633297c77a83550476c5c68a == cache_frame_cadc8843633297c77a83550476c5c68a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_cadc8843633297c77a83550476c5c68a);
        cache_frame_cadc8843633297c77a83550476c5c68a = NULL;
    }

    assertFrameObject(frame_cadc8843633297c77a83550476c5c68a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_process);
    var_process = NULL;
    CHECK_OBJECT(var_encoder);
    Py_DECREF(var_encoder);
    var_encoder = NULL;
    CHECK_OBJECT(var_warn_on_bytestring);
    Py_DECREF(var_warn_on_bytestring);
    var_warn_on_bytestring = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_encoder);
    Py_DECREF(var_encoder);
    var_encoder = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_65bb6e806379f2ff318d16ee827a2a54;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_65bb6e806379f2ff318d16ee827a2a54 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_65bb6e806379f2ff318d16ee827a2a54)) {
        Py_XDECREF(cache_frame_65bb6e806379f2ff318d16ee827a2a54);

#if _DEBUG_REFCOUNTS
        if (cache_frame_65bb6e806379f2ff318d16ee827a2a54 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_65bb6e806379f2ff318d16ee827a2a54 = MAKE_FUNCTION_FRAME(tstate, codeobj_65bb6e806379f2ff318d16ee827a2a54, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_65bb6e806379f2ff318d16ee827a2a54->m_type_description == NULL);
    frame_65bb6e806379f2ff318d16ee827a2a54 = cache_frame_65bb6e806379f2ff318d16ee827a2a54;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_65bb6e806379f2ff318d16ee827a2a54);
    assert(Py_REFCNT(frame_65bb6e806379f2ff318d16ee827a2a54) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[44]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_3;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[45]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[46];
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        frame_65bb6e806379f2ff318d16ee827a2a54->m_frame.f_lineno = 332;
        tmp_tuple_element_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[47], tmp_args_element_value_3);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM(tmp_args_element_value_2, 0, tmp_tuple_element_1);
        frame_65bb6e806379f2ff318d16ee827a2a54->m_frame.f_lineno = 329;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(tstate, exception_value);

        exception_lineno = 334;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_65bb6e806379f2ff318d16ee827a2a54, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_65bb6e806379f2ff318d16ee827a2a54->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_65bb6e806379f2ff318d16ee827a2a54, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_65bb6e806379f2ff318d16ee827a2a54,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_65bb6e806379f2ff318d16ee827a2a54 == cache_frame_65bb6e806379f2ff318d16ee827a2a54) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_65bb6e806379f2ff318d16ee827a2a54);
        cache_frame_65bb6e806379f2ff318d16ee827a2a54 = NULL;
    }

    assertFrameObject(frame_65bb6e806379f2ff318d16ee827a2a54);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_1576acc756b228012430cc5020f20e50;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_1576acc756b228012430cc5020f20e50 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1576acc756b228012430cc5020f20e50)) {
        Py_XDECREF(cache_frame_1576acc756b228012430cc5020f20e50);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1576acc756b228012430cc5020f20e50 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1576acc756b228012430cc5020f20e50 = MAKE_FUNCTION_FRAME(tstate, codeobj_1576acc756b228012430cc5020f20e50, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1576acc756b228012430cc5020f20e50->m_type_description == NULL);
    frame_1576acc756b228012430cc5020f20e50 = cache_frame_1576acc756b228012430cc5020f20e50;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1576acc756b228012430cc5020f20e50);
    assert(Py_REFCNT(frame_1576acc756b228012430cc5020f20e50) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[49]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 345;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 345;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[25]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        frame_1576acc756b228012430cc5020f20e50->m_frame.f_lineno = 345;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_expression_value_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_subscript_value_1 = mod_consts[52];
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_2, tmp_subscript_value_1, 0);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[53]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 346;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[2]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 346;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 346;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_right_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_5;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[45]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[46];
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 350;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_5 = par_value;
        frame_1576acc756b228012430cc5020f20e50->m_frame.f_lineno = 350;
        tmp_tuple_element_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[47], tmp_args_element_value_5);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 350;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM(tmp_args_element_value_4, 0, tmp_tuple_element_1);
        frame_1576acc756b228012430cc5020f20e50->m_frame.f_lineno = 347;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;
    branch_end_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(tstate, exception_value);

        exception_lineno = 352;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1576acc756b228012430cc5020f20e50, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1576acc756b228012430cc5020f20e50->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1576acc756b228012430cc5020f20e50, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1576acc756b228012430cc5020f20e50,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1],
        self->m_closure[2]
    );


    // Release cached frame if used for exception.
    if (frame_1576acc756b228012430cc5020f20e50 == cache_frame_1576acc756b228012430cc5020f20e50) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1576acc756b228012430cc5020f20e50);
        cache_frame_1576acc756b228012430cc5020f20e50 = NULL;
    }

    assertFrameObject(frame_1576acc756b228012430cc5020f20e50);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    PyObject *var_wants_unicode = NULL;
    PyObject *var_needs_convert = NULL;
    PyObject *var_needs_isinstance = NULL;
    struct Nuitka_FrameObject *frame_38c1873b26339ac722accf1443101653;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_38c1873b26339ac722accf1443101653 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_38c1873b26339ac722accf1443101653)) {
        Py_XDECREF(cache_frame_38c1873b26339ac722accf1443101653);

#if _DEBUG_REFCOUNTS
        if (cache_frame_38c1873b26339ac722accf1443101653 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_38c1873b26339ac722accf1443101653 = MAKE_FUNCTION_FRAME(tstate, codeobj_38c1873b26339ac722accf1443101653, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_38c1873b26339ac722accf1443101653->m_type_description == NULL);
    frame_38c1873b26339ac722accf1443101653 = cache_frame_38c1873b26339ac722accf1443101653;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_38c1873b26339ac722accf1443101653);
    assert(Py_REFCNT(frame_38c1873b26339ac722accf1443101653) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[24]);
        if (tmp_or_left_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 359;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 359;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[37]);
        if (tmp_or_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 359;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_1 = tmp_or_left_value_1;
        or_end_1:;
        assert(var_wants_unicode == NULL);
        var_wants_unicode = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(var_wants_unicode);
        tmp_and_left_value_1 = var_wants_unicode;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 361;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_dialect;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[54]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 361;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[56]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 361;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_2 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? Py_True : Py_False;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[24]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 362;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = mod_consts[57];
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 362;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_2 = (tmp_res == 1) ? Py_True : Py_False;
        tmp_and_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_and_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_assign_source_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_assign_source_2 = tmp_and_left_value_1;
        and_end_1:;
        assert(var_needs_convert == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_needs_convert = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        int tmp_and_left_truth_2;
        PyObject *tmp_and_left_value_2;
        PyObject *tmp_and_right_value_2;
        int tmp_and_left_truth_3;
        PyObject *tmp_and_left_value_3;
        PyObject *tmp_and_right_value_3;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(var_needs_convert);
        tmp_and_left_value_2 = var_needs_convert;
        tmp_and_left_truth_2 = CHECK_IF_TRUE(tmp_and_left_value_2);
        if (tmp_and_left_truth_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 366;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_6 = par_dialect;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[54]);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 366;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 368;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[58]);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 368;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_3 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_8;
            PyTuple_SET_ITEM(tmp_cmp_expr_right_3, 0, tmp_tuple_element_1);
            tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

            if (unlikely(tmp_expression_value_8 == NULL)) {
                tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
            }

            if (tmp_expression_value_8 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 369;
                type_description_1 = "oooooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[56]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 369;
                type_description_1 = "oooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_cmp_expr_right_3, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_3, tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 367;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_3 = (tmp_res == 1) ? Py_True : Py_False;
        tmp_and_left_truth_3 = CHECK_IF_TRUE(tmp_and_left_value_3);
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_cmp_expr_left_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[24]);
        if (tmp_cmp_expr_left_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 371;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_4 = mod_consts[59];
        tmp_and_right_value_3 = RICH_COMPARE_NE_OBJECT_OBJECT_UNICODE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
        Py_DECREF(tmp_cmp_expr_left_4);
        if (tmp_and_right_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 371;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        Py_INCREF(tmp_and_left_value_3);
        tmp_and_right_value_2 = tmp_and_left_value_3;
        and_end_3:;
        tmp_assign_source_3 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        Py_INCREF(tmp_and_left_value_2);
        tmp_assign_source_3 = tmp_and_left_value_2;
        and_end_2:;
        assert(var_needs_isinstance == NULL);
        var_needs_isinstance = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_needs_convert);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_needs_convert);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_needs_isinstance);
        tmp_truth_name_2 = CHECK_IF_TRUE(var_needs_isinstance);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_12;
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[61]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 376;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_11 = par_dialect;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 376;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[25]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 376;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_38c1873b26339ac722accf1443101653->m_frame.f_lineno = 375;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_15;
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[62]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 380;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_14 = par_dialect;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[42]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 380;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_15 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[25]);
        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 380;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_38c1873b26339ac722accf1443101653->m_frame.f_lineno = 379;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_38c1873b26339ac722accf1443101653, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_38c1873b26339ac722accf1443101653->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_38c1873b26339ac722accf1443101653, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_38c1873b26339ac722accf1443101653,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_wants_unicode,
        var_needs_convert,
        var_needs_isinstance
    );


    // Release cached frame if used for exception.
    if (frame_38c1873b26339ac722accf1443101653 == cache_frame_38c1873b26339ac722accf1443101653) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_38c1873b26339ac722accf1443101653);
        cache_frame_38c1873b26339ac722accf1443101653 = NULL;
    }

    assertFrameObject(frame_38c1873b26339ac722accf1443101653);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_wants_unicode);
    Py_DECREF(var_wants_unicode);
    var_wants_unicode = NULL;
    CHECK_OBJECT(var_needs_convert);
    Py_DECREF(var_needs_convert);
    var_needs_convert = NULL;
    CHECK_OBJECT(var_needs_isinstance);
    Py_DECREF(var_needs_isinstance);
    var_needs_isinstance = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_wants_unicode);
    var_wants_unicode = NULL;
    Py_XDECREF(var_needs_convert);
    var_needs_convert = NULL;
    Py_XDECREF(var_needs_isinstance);
    var_needs_isinstance = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__10_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a38ad2f71667eefaa00c91b2468061ee;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a38ad2f71667eefaa00c91b2468061ee = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a38ad2f71667eefaa00c91b2468061ee)) {
        Py_XDECREF(cache_frame_a38ad2f71667eefaa00c91b2468061ee);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a38ad2f71667eefaa00c91b2468061ee == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a38ad2f71667eefaa00c91b2468061ee = MAKE_FUNCTION_FRAME(tstate, codeobj_a38ad2f71667eefaa00c91b2468061ee, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a38ad2f71667eefaa00c91b2468061ee->m_type_description == NULL);
    frame_a38ad2f71667eefaa00c91b2468061ee = cache_frame_a38ad2f71667eefaa00c91b2468061ee;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a38ad2f71667eefaa00c91b2468061ee);
    assert(Py_REFCNT(frame_a38ad2f71667eefaa00c91b2468061ee) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[24]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 387;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 387;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[49]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = (PyObject *)&PyUnicode_Type;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a38ad2f71667eefaa00c91b2468061ee, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a38ad2f71667eefaa00c91b2468061ee->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a38ad2f71667eefaa00c91b2468061ee, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a38ad2f71667eefaa00c91b2468061ee,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a38ad2f71667eefaa00c91b2468061ee == cache_frame_a38ad2f71667eefaa00c91b2468061ee) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a38ad2f71667eefaa00c91b2468061ee);
        cache_frame_a38ad2f71667eefaa00c91b2468061ee = NULL;
    }

    assertFrameObject(frame_a38ad2f71667eefaa00c91b2468061ee);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_a99c26bd90c6e071d11f1c9eda1ed2ee;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee)) {
        Py_XDECREF(cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee = MAKE_FUNCTION_FRAME(tstate, codeobj_a99c26bd90c6e071d11f1c9eda1ed2ee, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee->m_type_description == NULL);
    frame_a99c26bd90c6e071d11f1c9eda1ed2ee = cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a99c26bd90c6e071d11f1c9eda1ed2ee);
    assert(Py_REFCNT(frame_a99c26bd90c6e071d11f1c9eda1ed2ee) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[63]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 393;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a99c26bd90c6e071d11f1c9eda1ed2ee, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a99c26bd90c6e071d11f1c9eda1ed2ee->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a99c26bd90c6e071d11f1c9eda1ed2ee, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a99c26bd90c6e071d11f1c9eda1ed2ee,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_a99c26bd90c6e071d11f1c9eda1ed2ee == cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee);
        cache_frame_a99c26bd90c6e071d11f1c9eda1ed2ee = NULL;
    }

    assertFrameObject(frame_a99c26bd90c6e071d11f1c9eda1ed2ee);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[0];
    struct Nuitka_FrameObject *frame_a4dd06c35d8f54f5659d4efa77c645c1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a4dd06c35d8f54f5659d4efa77c645c1 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a4dd06c35d8f54f5659d4efa77c645c1)) {
        Py_XDECREF(cache_frame_a4dd06c35d8f54f5659d4efa77c645c1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a4dd06c35d8f54f5659d4efa77c645c1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a4dd06c35d8f54f5659d4efa77c645c1 = MAKE_FUNCTION_FRAME(tstate, codeobj_a4dd06c35d8f54f5659d4efa77c645c1, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a4dd06c35d8f54f5659d4efa77c645c1->m_type_description == NULL);
    frame_a4dd06c35d8f54f5659d4efa77c645c1 = cache_frame_a4dd06c35d8f54f5659d4efa77c645c1;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a4dd06c35d8f54f5659d4efa77c645c1);
    assert(Py_REFCNT(frame_a4dd06c35d8f54f5659d4efa77c645c1) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[64]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a4dd06c35d8f54f5659d4efa77c645c1->m_frame.f_lineno = 397;
        tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_VECTORCALL(tstate, tmp_called_value_1, &PyTuple_GET_ITEM(mod_consts[65], 0), mod_consts[66]);
        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a4dd06c35d8f54f5659d4efa77c645c1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a4dd06c35d8f54f5659d4efa77c645c1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a4dd06c35d8f54f5659d4efa77c645c1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a4dd06c35d8f54f5659d4efa77c645c1,
        type_description_1,
        par_cls
    );


    // Release cached frame if used for exception.
    if (frame_a4dd06c35d8f54f5659d4efa77c645c1 == cache_frame_a4dd06c35d8f54f5659d4efa77c645c1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a4dd06c35d8f54f5659d4efa77c645c1);
        cache_frame_a4dd06c35d8f54f5659d4efa77c645c1 = NULL;
    }

    assertFrameObject(frame_a4dd06c35d8f54f5659d4efa77c645c1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__13___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_8d044b6d5bdc619673cd83ddf539ea55;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_8d044b6d5bdc619673cd83ddf539ea55 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_dict_arg_value_1 = par_kwargs;
        tmp_key_value_1 = mod_consts[24];
        tmp_default_value_1 = Py_True;
        tmp_capi_result_1 = DICT_SETDEFAULT3(tstate, tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    if (isFrameUnusable(cache_frame_8d044b6d5bdc619673cd83ddf539ea55)) {
        Py_XDECREF(cache_frame_8d044b6d5bdc619673cd83ddf539ea55);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8d044b6d5bdc619673cd83ddf539ea55 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8d044b6d5bdc619673cd83ddf539ea55 = MAKE_FUNCTION_FRAME(tstate, codeobj_8d044b6d5bdc619673cd83ddf539ea55, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8d044b6d5bdc619673cd83ddf539ea55->m_type_description == NULL);
    frame_8d044b6d5bdc619673cd83ddf539ea55 = cache_frame_8d044b6d5bdc619673cd83ddf539ea55;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8d044b6d5bdc619673cd83ddf539ea55);
    assert(Py_REFCNT(frame_8d044b6d5bdc619673cd83ddf539ea55) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_expression_value_1 = par_kwargs;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[67]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 488;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        frame_8d044b6d5bdc619673cd83ddf539ea55->m_frame.f_lineno = 488;
        tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[68]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 488;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[70]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[22];
        CHECK_OBJECT(par_length);
        tmp_dict_value_1 = par_length;
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_2 = impl___main__$$$function__2_complex_call_helper_keywords_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8d044b6d5bdc619673cd83ddf539ea55, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8d044b6d5bdc619673cd83ddf539ea55->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8d044b6d5bdc619673cd83ddf539ea55, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8d044b6d5bdc619673cd83ddf539ea55,
        type_description_1,
        par_self,
        par_length,
        par_kwargs,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_8d044b6d5bdc619673cd83ddf539ea55 == cache_frame_8d044b6d5bdc619673cd83ddf539ea55) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8d044b6d5bdc619673cd83ddf539ea55);
        cache_frame_8d044b6d5bdc619673cd83ddf539ea55 = NULL;
    }

    assertFrameObject(frame_8d044b6d5bdc619673cd83ddf539ea55);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__14___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_b63fa63511e0c7b1860a52cdcec45410;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_b63fa63511e0c7b1860a52cdcec45410 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_dict_arg_value_1 = par_kwargs;
        tmp_key_value_1 = mod_consts[24];
        tmp_default_value_1 = Py_True;
        tmp_capi_result_1 = DICT_SETDEFAULT3(tstate, tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    if (isFrameUnusable(cache_frame_b63fa63511e0c7b1860a52cdcec45410)) {
        Py_XDECREF(cache_frame_b63fa63511e0c7b1860a52cdcec45410);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b63fa63511e0c7b1860a52cdcec45410 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b63fa63511e0c7b1860a52cdcec45410 = MAKE_FUNCTION_FRAME(tstate, codeobj_b63fa63511e0c7b1860a52cdcec45410, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_b63fa63511e0c7b1860a52cdcec45410->m_type_description == NULL);
    frame_b63fa63511e0c7b1860a52cdcec45410 = cache_frame_b63fa63511e0c7b1860a52cdcec45410;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_b63fa63511e0c7b1860a52cdcec45410);
    assert(Py_REFCNT(frame_b63fa63511e0c7b1860a52cdcec45410) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_expression_value_1 = par_kwargs;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[67]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        frame_b63fa63511e0c7b1860a52cdcec45410->m_frame.f_lineno = 517;
        tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[68]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[72]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[70]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[22];
        CHECK_OBJECT(par_length);
        tmp_dict_value_1 = par_length;
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_2 = impl___main__$$$function__2_complex_call_helper_keywords_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b63fa63511e0c7b1860a52cdcec45410, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b63fa63511e0c7b1860a52cdcec45410->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b63fa63511e0c7b1860a52cdcec45410, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b63fa63511e0c7b1860a52cdcec45410,
        type_description_1,
        par_self,
        par_length,
        par_kwargs,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_b63fa63511e0c7b1860a52cdcec45410 == cache_frame_b63fa63511e0c7b1860a52cdcec45410) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_b63fa63511e0c7b1860a52cdcec45410);
        cache_frame_b63fa63511e0c7b1860a52cdcec45410 = NULL;
    }

    assertFrameObject(frame_b63fa63511e0c7b1860a52cdcec45410);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_bf1332a160020718f67323f49b22daa3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bf1332a160020718f67323f49b22daa3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_bf1332a160020718f67323f49b22daa3)) {
        Py_XDECREF(cache_frame_bf1332a160020718f67323f49b22daa3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bf1332a160020718f67323f49b22daa3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bf1332a160020718f67323f49b22daa3 = MAKE_FUNCTION_FRAME(tstate, codeobj_bf1332a160020718f67323f49b22daa3, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_bf1332a160020718f67323f49b22daa3->m_type_description == NULL);
    frame_bf1332a160020718f67323f49b22daa3 = cache_frame_bf1332a160020718f67323f49b22daa3;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_bf1332a160020718f67323f49b22daa3);
    assert(Py_REFCNT(frame_bf1332a160020718f67323f49b22daa3) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[74]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bf1332a160020718f67323f49b22daa3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bf1332a160020718f67323f49b22daa3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bf1332a160020718f67323f49b22daa3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bf1332a160020718f67323f49b22daa3,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_bf1332a160020718f67323f49b22daa3 == cache_frame_bf1332a160020718f67323f49b22daa3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_bf1332a160020718f67323f49b22daa3);
        cache_frame_bf1332a160020718f67323f49b22daa3 = NULL;
    }

    assertFrameObject(frame_bf1332a160020718f67323f49b22daa3);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d7d5c03789b25fdfe7cbb4bef3712422;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d7d5c03789b25fdfe7cbb4bef3712422 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d7d5c03789b25fdfe7cbb4bef3712422)) {
        Py_XDECREF(cache_frame_d7d5c03789b25fdfe7cbb4bef3712422);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d7d5c03789b25fdfe7cbb4bef3712422 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d7d5c03789b25fdfe7cbb4bef3712422 = MAKE_FUNCTION_FRAME(tstate, codeobj_d7d5c03789b25fdfe7cbb4bef3712422, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d7d5c03789b25fdfe7cbb4bef3712422->m_type_description == NULL);
    frame_d7d5c03789b25fdfe7cbb4bef3712422 = cache_frame_d7d5c03789b25fdfe7cbb4bef3712422;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d7d5c03789b25fdfe7cbb4bef3712422);
    assert(Py_REFCNT(frame_d7d5c03789b25fdfe7cbb4bef3712422) == 2);

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        PyObject *tmp_int_arg_1;
        CHECK_OBJECT(par_value);
        tmp_int_arg_1 = par_value;
        tmp_unicode_arg_1 = PyNumber_Int(tmp_int_arg_1);
        if (tmp_unicode_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_UNICODE1(tmp_unicode_arg_1);
        Py_DECREF(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d7d5c03789b25fdfe7cbb4bef3712422, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d7d5c03789b25fdfe7cbb4bef3712422->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d7d5c03789b25fdfe7cbb4bef3712422, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d7d5c03789b25fdfe7cbb4bef3712422,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_d7d5c03789b25fdfe7cbb4bef3712422 == cache_frame_d7d5c03789b25fdfe7cbb4bef3712422) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d7d5c03789b25fdfe7cbb4bef3712422);
        cache_frame_d7d5c03789b25fdfe7cbb4bef3712422 = NULL;
    }

    assertFrameObject(frame_d7d5c03789b25fdfe7cbb4bef3712422);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_90751710920b713440bdd9e6d3e2a077;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_90751710920b713440bdd9e6d3e2a077 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_90751710920b713440bdd9e6d3e2a077)) {
        Py_XDECREF(cache_frame_90751710920b713440bdd9e6d3e2a077);

#if _DEBUG_REFCOUNTS
        if (cache_frame_90751710920b713440bdd9e6d3e2a077 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_90751710920b713440bdd9e6d3e2a077 = MAKE_FUNCTION_FRAME(tstate, codeobj_90751710920b713440bdd9e6d3e2a077, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_90751710920b713440bdd9e6d3e2a077->m_type_description == NULL);
    frame_90751710920b713440bdd9e6d3e2a077 = cache_frame_90751710920b713440bdd9e6d3e2a077;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_90751710920b713440bdd9e6d3e2a077);
    assert(Py_REFCNT(frame_90751710920b713440bdd9e6d3e2a077) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 549;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 549;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 549;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 550;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 550;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 550;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 551;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 551;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 551;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_6;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_10;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 553;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 553;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 554;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 554;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_4;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 554;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 555;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_4 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
                if (tmp_dict_value_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 555;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 555;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 556;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

                if (unlikely(tmp_dict_value_3 == NULL)) {
                    tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
                }

                if (tmp_dict_value_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 556;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 556;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 553;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[81]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
            if (tmp_dict_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_value_4 == NULL)) {
                tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[82]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_8);
            if (tmp_dict_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_dict_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_value_5 == NULL)) {
                tmp_dict_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 559;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_9 == NULL)) {
                tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_9 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_10 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_10);
            if (tmp_dict_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            Py_DECREF(tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_dict_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_value_6 == NULL)) {
                tmp_dict_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_90751710920b713440bdd9e6d3e2a077, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_90751710920b713440bdd9e6d3e2a077->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_90751710920b713440bdd9e6d3e2a077, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_90751710920b713440bdd9e6d3e2a077,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_90751710920b713440bdd9e6d3e2a077 == cache_frame_90751710920b713440bdd9e6d3e2a077) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_90751710920b713440bdd9e6d3e2a077);
        cache_frame_90751710920b713440bdd9e6d3e2a077 = NULL;
    }

    assertFrameObject(frame_90751710920b713440bdd9e6d3e2a077);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__20___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_precision = python_pars[1];
    PyObject *par_scale = python_pars[2];
    PyObject *par_decimal_return_scale = python_pars[3];
    PyObject *par_asdecimal = python_pars[4];
    struct Nuitka_FrameObject *frame_d07f871351a6331152b640082eb89314;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d07f871351a6331152b640082eb89314 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d07f871351a6331152b640082eb89314)) {
        Py_XDECREF(cache_frame_d07f871351a6331152b640082eb89314);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d07f871351a6331152b640082eb89314 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d07f871351a6331152b640082eb89314 = MAKE_FUNCTION_FRAME(tstate, codeobj_d07f871351a6331152b640082eb89314, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d07f871351a6331152b640082eb89314->m_type_description == NULL);
    frame_d07f871351a6331152b640082eb89314 = cache_frame_d07f871351a6331152b640082eb89314;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d07f871351a6331152b640082eb89314);
    assert(Py_REFCNT(frame_d07f871351a6331152b640082eb89314) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_precision);
        tmp_assattr_value_1 = par_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[84], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_scale);
        tmp_assattr_value_2 = par_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[85], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_decimal_return_scale);
        tmp_assattr_value_3 = par_decimal_return_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[86], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_asdecimal);
        tmp_assattr_value_4 = par_asdecimal;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[87], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 677;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d07f871351a6331152b640082eb89314, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d07f871351a6331152b640082eb89314->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d07f871351a6331152b640082eb89314, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d07f871351a6331152b640082eb89314,
        type_description_1,
        par_self,
        par_precision,
        par_scale,
        par_decimal_return_scale,
        par_asdecimal
    );


    // Release cached frame if used for exception.
    if (frame_d07f871351a6331152b640082eb89314 == cache_frame_d07f871351a6331152b640082eb89314) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d07f871351a6331152b640082eb89314);
        cache_frame_d07f871351a6331152b640082eb89314 = NULL;
    }

    assertFrameObject(frame_d07f871351a6331152b640082eb89314);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_393c24de29e5f4b7b8173a52b5c6dcc5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5)) {
        Py_XDECREF(cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5 = MAKE_FUNCTION_FRAME(tstate, codeobj_393c24de29e5f4b7b8173a52b5c6dcc5, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5->m_type_description == NULL);
    frame_393c24de29e5f4b7b8173a52b5c6dcc5 = cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_393c24de29e5f4b7b8173a52b5c6dcc5);
    assert(Py_REFCNT(frame_393c24de29e5f4b7b8173a52b5c6dcc5) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[86]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[86]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 682;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_name_value_1;
        PyObject *tmp_default_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_name_value_1 = mod_consts[85];
        tmp_default_value_1 = Py_None;
        tmp_cmp_expr_left_2 = BUILTIN_GETATTR(tstate, tmp_expression_value_3, tmp_name_value_1, tmp_default_value_1);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 683;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[85]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 684;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[89]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 686;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_393c24de29e5f4b7b8173a52b5c6dcc5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_393c24de29e5f4b7b8173a52b5c6dcc5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_393c24de29e5f4b7b8173a52b5c6dcc5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_393c24de29e5f4b7b8173a52b5c6dcc5,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_393c24de29e5f4b7b8173a52b5c6dcc5 == cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5);
        cache_frame_393c24de29e5f4b7b8173a52b5c6dcc5 = NULL;
    }

    assertFrameObject(frame_393c24de29e5f4b7b8173a52b5c6dcc5);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_0fe5e2c0f3336234e4fbd21c3649d9bc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc)) {
        Py_XDECREF(cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc = MAKE_FUNCTION_FRAME(tstate, codeobj_0fe5e2c0f3336234e4fbd21c3649d9bc, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc->m_type_description == NULL);
    frame_0fe5e2c0f3336234e4fbd21c3649d9bc = cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_0fe5e2c0f3336234e4fbd21c3649d9bc);
    assert(Py_REFCNT(frame_0fe5e2c0f3336234e4fbd21c3649d9bc) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[74]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 689;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0fe5e2c0f3336234e4fbd21c3649d9bc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0fe5e2c0f3336234e4fbd21c3649d9bc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0fe5e2c0f3336234e4fbd21c3649d9bc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0fe5e2c0f3336234e4fbd21c3649d9bc,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_0fe5e2c0f3336234e4fbd21c3649d9bc == cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc);
        cache_frame_0fe5e2c0f3336234e4fbd21c3649d9bc = NULL;
    }

    assertFrameObject(frame_0fe5e2c0f3336234e4fbd21c3649d9bc);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_140f11ffc232bba79a75d39fd9201206;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_140f11ffc232bba79a75d39fd9201206 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_140f11ffc232bba79a75d39fd9201206)) {
        Py_XDECREF(cache_frame_140f11ffc232bba79a75d39fd9201206);

#if _DEBUG_REFCOUNTS
        if (cache_frame_140f11ffc232bba79a75d39fd9201206 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_140f11ffc232bba79a75d39fd9201206 = MAKE_FUNCTION_FRAME(tstate, codeobj_140f11ffc232bba79a75d39fd9201206, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_140f11ffc232bba79a75d39fd9201206->m_type_description == NULL);
    frame_140f11ffc232bba79a75d39fd9201206 = cache_frame_140f11ffc232bba79a75d39fd9201206;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_140f11ffc232bba79a75d39fd9201206);
    assert(Py_REFCNT(frame_140f11ffc232bba79a75d39fd9201206) == 2);

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT(par_value);
        tmp_unicode_arg_1 = par_value;
        tmp_return_value = BUILTIN_UNICODE1(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 693;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_140f11ffc232bba79a75d39fd9201206, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_140f11ffc232bba79a75d39fd9201206->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_140f11ffc232bba79a75d39fd9201206, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_140f11ffc232bba79a75d39fd9201206,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_140f11ffc232bba79a75d39fd9201206 == cache_frame_140f11ffc232bba79a75d39fd9201206) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_140f11ffc232bba79a75d39fd9201206);
        cache_frame_140f11ffc232bba79a75d39fd9201206 = NULL;
    }

    assertFrameObject(frame_140f11ffc232bba79a75d39fd9201206);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__24_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_b0447968372817314d0c8957939bd266;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b0447968372817314d0c8957939bd266 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b0447968372817314d0c8957939bd266)) {
        Py_XDECREF(cache_frame_b0447968372817314d0c8957939bd266);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b0447968372817314d0c8957939bd266 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b0447968372817314d0c8957939bd266 = MAKE_FUNCTION_FRAME(tstate, codeobj_b0447968372817314d0c8957939bd266, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_b0447968372817314d0c8957939bd266->m_type_description == NULL);
    frame_b0447968372817314d0c8957939bd266 = cache_frame_b0447968372817314d0c8957939bd266;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_b0447968372817314d0c8957939bd266);
    assert(Py_REFCNT(frame_b0447968372817314d0c8957939bd266) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[87]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 699;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[91]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[92]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = (PyObject *)&PyFloat_Type;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b0447968372817314d0c8957939bd266, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b0447968372817314d0c8957939bd266->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b0447968372817314d0c8957939bd266, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b0447968372817314d0c8957939bd266,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_b0447968372817314d0c8957939bd266 == cache_frame_b0447968372817314d0c8957939bd266) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_b0447968372817314d0c8957939bd266);
        cache_frame_b0447968372817314d0c8957939bd266 = NULL;
    }

    assertFrameObject(frame_b0447968372817314d0c8957939bd266);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_c95f74067ff2a26745a69ed5731ef0fd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_c95f74067ff2a26745a69ed5731ef0fd = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c95f74067ff2a26745a69ed5731ef0fd)) {
        Py_XDECREF(cache_frame_c95f74067ff2a26745a69ed5731ef0fd);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c95f74067ff2a26745a69ed5731ef0fd == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c95f74067ff2a26745a69ed5731ef0fd = MAKE_FUNCTION_FRAME(tstate, codeobj_c95f74067ff2a26745a69ed5731ef0fd, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c95f74067ff2a26745a69ed5731ef0fd->m_type_description == NULL);
    frame_c95f74067ff2a26745a69ed5731ef0fd = cache_frame_c95f74067ff2a26745a69ed5731ef0fd;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c95f74067ff2a26745a69ed5731ef0fd);
    assert(Py_REFCNT(frame_c95f74067ff2a26745a69ed5731ef0fd) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[93]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 705;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[94]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c95f74067ff2a26745a69ed5731ef0fd, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c95f74067ff2a26745a69ed5731ef0fd->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c95f74067ff2a26745a69ed5731ef0fd, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c95f74067ff2a26745a69ed5731ef0fd,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_c95f74067ff2a26745a69ed5731ef0fd == cache_frame_c95f74067ff2a26745a69ed5731ef0fd) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c95f74067ff2a26745a69ed5731ef0fd);
        cache_frame_c95f74067ff2a26745a69ed5731ef0fd = NULL;
    }

    assertFrameObject(frame_c95f74067ff2a26745a69ed5731ef0fd);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_8dc7b1bcd27b6dac4b7e5756844aedbd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd)) {
        Py_XDECREF(cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd = MAKE_FUNCTION_FRAME(tstate, codeobj_8dc7b1bcd27b6dac4b7e5756844aedbd, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd->m_type_description == NULL);
    frame_8dc7b1bcd27b6dac4b7e5756844aedbd = cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8dc7b1bcd27b6dac4b7e5756844aedbd);
    assert(Py_REFCNT(frame_8dc7b1bcd27b6dac4b7e5756844aedbd) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[87]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 711;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 711;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[93]);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 712;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 712;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[95]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_left_1 = mod_consts[96];
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_4 = par_dialect;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[97]);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 723;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_5;
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_dialect);
            tmp_expression_value_5 = par_dialect;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[98]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 723;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_mod_expr_right_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 723;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_8dc7b1bcd27b6dac4b7e5756844aedbd->m_frame.f_lineno = 716;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_3;
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_expression_value_10;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[99]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[91]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[92]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[85]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 730;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_3 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_3 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[85]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 729;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[89]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 731;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        frame_8dc7b1bcd27b6dac4b7e5756844aedbd->m_frame.f_lineno = 727;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_11 = par_dialect;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[93]);
        if (tmp_attribute_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_expression_value_12;
        tmp_expression_value_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_12 == NULL)) {
            tmp_expression_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[94]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_3;
    branch_no_3:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_3:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8dc7b1bcd27b6dac4b7e5756844aedbd, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8dc7b1bcd27b6dac4b7e5756844aedbd->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8dc7b1bcd27b6dac4b7e5756844aedbd, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8dc7b1bcd27b6dac4b7e5756844aedbd,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_8dc7b1bcd27b6dac4b7e5756844aedbd == cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd);
        cache_frame_8dc7b1bcd27b6dac4b7e5756844aedbd = NULL;
    }

    assertFrameObject(frame_8dc7b1bcd27b6dac4b7e5756844aedbd);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_86a1f7ec69966cfa18ae1dc28bfa13bc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc)) {
        Py_XDECREF(cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc = MAKE_FUNCTION_FRAME(tstate, codeobj_86a1f7ec69966cfa18ae1dc28bfa13bc, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc->m_type_description == NULL);
    frame_86a1f7ec69966cfa18ae1dc28bfa13bc = cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_86a1f7ec69966cfa18ae1dc28bfa13bc);
    assert(Py_REFCNT(frame_86a1f7ec69966cfa18ae1dc28bfa13bc) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[79]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 743;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 743;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        {
            PyObject *tmp_expression_value_2;
            PyObject *tmp_expression_value_3;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 743;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 744;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 744;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 744;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 745;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_3 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_3);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 745;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 745;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_4;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_11;
            PyObject *tmp_expression_value_13;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_14;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 742;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_4 == NULL)) {
                tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 747;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[81]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 747;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 747;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_5 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_5);
            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 747;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_6;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 747;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 747;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_6 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
                if (tmp_dict_value_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 747;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 747;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 747;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[82]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 749;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_8);
            if (tmp_dict_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 749;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_9;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 749;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                if (unlikely(tmp_dict_key_4 == NULL)) {
                    tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                }

                if (tmp_dict_key_4 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 750;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_9 = par_self;
                tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_9);
                if (tmp_dict_value_4 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 750;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 750;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_10 == NULL)) {
                tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_10 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 752;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[7]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 752;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 752;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_11 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_11);
            if (tmp_dict_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 752;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_12;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 752;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                if (unlikely(tmp_dict_key_5 == NULL)) {
                    tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                }

                if (tmp_dict_key_5 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 752;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_12 = par_self;
                tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_12);
                if (tmp_dict_value_5 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 752;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 752;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 752;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_13 == NULL)) {
                tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_13 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 753;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 753;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 753;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_14 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_14);
            if (tmp_dict_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 753;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_15;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 753;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                if (unlikely(tmp_dict_key_6 == NULL)) {
                    tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                }

                if (tmp_dict_key_6 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 753;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_15 = par_self;
                tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_15);
                if (tmp_dict_value_6 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 753;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 753;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 753;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_86a1f7ec69966cfa18ae1dc28bfa13bc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_86a1f7ec69966cfa18ae1dc28bfa13bc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_86a1f7ec69966cfa18ae1dc28bfa13bc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_86a1f7ec69966cfa18ae1dc28bfa13bc,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_86a1f7ec69966cfa18ae1dc28bfa13bc == cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc);
        cache_frame_86a1f7ec69966cfa18ae1dc28bfa13bc = NULL;
    }

    assertFrameObject(frame_86a1f7ec69966cfa18ae1dc28bfa13bc);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__28___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_precision = python_pars[1];
    PyObject *par_asdecimal = python_pars[2];
    PyObject *par_decimal_return_scale = python_pars[3];
    struct Nuitka_FrameObject *frame_3e4700fbfee0bd27ddc1ad9b6731a22f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f)) {
        Py_XDECREF(cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f = MAKE_FUNCTION_FRAME(tstate, codeobj_3e4700fbfee0bd27ddc1ad9b6731a22f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f->m_type_description == NULL);
    frame_3e4700fbfee0bd27ddc1ad9b6731a22f = cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_3e4700fbfee0bd27ddc1ad9b6731a22f);
    assert(Py_REFCNT(frame_3e4700fbfee0bd27ddc1ad9b6731a22f) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_precision);
        tmp_assattr_value_1 = par_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[84], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 797;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_asdecimal);
        tmp_assattr_value_2 = par_asdecimal;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[87], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 798;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_decimal_return_scale);
        tmp_assattr_value_3 = par_decimal_return_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[86], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 799;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3e4700fbfee0bd27ddc1ad9b6731a22f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3e4700fbfee0bd27ddc1ad9b6731a22f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3e4700fbfee0bd27ddc1ad9b6731a22f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3e4700fbfee0bd27ddc1ad9b6731a22f,
        type_description_1,
        par_self,
        par_precision,
        par_asdecimal,
        par_decimal_return_scale
    );


    // Release cached frame if used for exception.
    if (frame_3e4700fbfee0bd27ddc1ad9b6731a22f == cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f);
        cache_frame_3e4700fbfee0bd27ddc1ad9b6731a22f = NULL;
    }

    assertFrameObject(frame_3e4700fbfee0bd27ddc1ad9b6731a22f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_496e29032d090222c1a58f3ff80d8907;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_496e29032d090222c1a58f3ff80d8907 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_496e29032d090222c1a58f3ff80d8907)) {
        Py_XDECREF(cache_frame_496e29032d090222c1a58f3ff80d8907);

#if _DEBUG_REFCOUNTS
        if (cache_frame_496e29032d090222c1a58f3ff80d8907 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_496e29032d090222c1a58f3ff80d8907 = MAKE_FUNCTION_FRAME(tstate, codeobj_496e29032d090222c1a58f3ff80d8907, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_496e29032d090222c1a58f3ff80d8907->m_type_description == NULL);
    frame_496e29032d090222c1a58f3ff80d8907 = cache_frame_496e29032d090222c1a58f3ff80d8907;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_496e29032d090222c1a58f3ff80d8907);
    assert(Py_REFCNT(frame_496e29032d090222c1a58f3ff80d8907) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[87]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 802;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 802;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[99]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[91]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 804;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[92]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 804;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[101]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 804;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_496e29032d090222c1a58f3ff80d8907->m_frame.f_lineno = 803;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_5 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[93]);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 806;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 806;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_value_6;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 807;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[94]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 807;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_2:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_496e29032d090222c1a58f3ff80d8907, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_496e29032d090222c1a58f3ff80d8907->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_496e29032d090222c1a58f3ff80d8907, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_496e29032d090222c1a58f3ff80d8907,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_496e29032d090222c1a58f3ff80d8907 == cache_frame_496e29032d090222c1a58f3ff80d8907) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_496e29032d090222c1a58f3ff80d8907);
        cache_frame_496e29032d090222c1a58f3ff80d8907 = NULL;
    }

    assertFrameObject(frame_496e29032d090222c1a58f3ff80d8907);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__30___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_4514be1da557df83c2179ee33fc04bab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4514be1da557df83c2179ee33fc04bab = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4514be1da557df83c2179ee33fc04bab)) {
        Py_XDECREF(cache_frame_4514be1da557df83c2179ee33fc04bab);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4514be1da557df83c2179ee33fc04bab == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4514be1da557df83c2179ee33fc04bab = MAKE_FUNCTION_FRAME(tstate, codeobj_4514be1da557df83c2179ee33fc04bab, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_4514be1da557df83c2179ee33fc04bab->m_type_description == NULL);
    frame_4514be1da557df83c2179ee33fc04bab = cache_frame_4514be1da557df83c2179ee33fc04bab;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_4514be1da557df83c2179ee33fc04bab);
    assert(Py_REFCNT(frame_4514be1da557df83c2179ee33fc04bab) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_timezone);
        tmp_assattr_value_1 = par_timezone;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[102], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 846;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4514be1da557df83c2179ee33fc04bab, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4514be1da557df83c2179ee33fc04bab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4514be1da557df83c2179ee33fc04bab, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4514be1da557df83c2179ee33fc04bab,
        type_description_1,
        par_self,
        par_timezone
    );


    // Release cached frame if used for exception.
    if (frame_4514be1da557df83c2179ee33fc04bab == cache_frame_4514be1da557df83c2179ee33fc04bab) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_4514be1da557df83c2179ee33fc04bab);
        cache_frame_4514be1da557df83c2179ee33fc04bab = NULL;
    }

    assertFrameObject(frame_4514be1da557df83c2179ee33fc04bab);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_1e198664f2a4d9e82bdc48cdfa9a8f98;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98)) {
        Py_XDECREF(cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98 = MAKE_FUNCTION_FRAME(tstate, codeobj_1e198664f2a4d9e82bdc48cdfa9a8f98, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98->m_type_description == NULL);
    frame_1e198664f2a4d9e82bdc48cdfa9a8f98 = cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1e198664f2a4d9e82bdc48cdfa9a8f98);
    assert(Py_REFCNT(frame_1e198664f2a4d9e82bdc48cdfa9a8f98) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[104]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 849;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1e198664f2a4d9e82bdc48cdfa9a8f98, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1e198664f2a4d9e82bdc48cdfa9a8f98->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1e198664f2a4d9e82bdc48cdfa9a8f98, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1e198664f2a4d9e82bdc48cdfa9a8f98,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_1e198664f2a4d9e82bdc48cdfa9a8f98 == cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98);
        cache_frame_1e198664f2a4d9e82bdc48cdfa9a8f98 = NULL;
    }

    assertFrameObject(frame_1e198664f2a4d9e82bdc48cdfa9a8f98);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    nuitka_bool var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    struct Nuitka_FrameObject *frame_d185872fd6ef313ec30a6b47c7b89cae;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d185872fd6ef313ec30a6b47c7b89cae = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d185872fd6ef313ec30a6b47c7b89cae)) {
        Py_XDECREF(cache_frame_d185872fd6ef313ec30a6b47c7b89cae);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d185872fd6ef313ec30a6b47c7b89cae == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d185872fd6ef313ec30a6b47c7b89cae = MAKE_FUNCTION_FRAME(tstate, codeobj_d185872fd6ef313ec30a6b47c7b89cae, module_sqlalchemy$sql$sqltypes, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d185872fd6ef313ec30a6b47c7b89cae->m_type_description == NULL);
    frame_d185872fd6ef313ec30a6b47c7b89cae = cache_frame_d185872fd6ef313ec30a6b47c7b89cae;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d185872fd6ef313ec30a6b47c7b89cae);
    assert(Py_REFCNT(frame_d185872fd6ef313ec30a6b47c7b89cae) == 2);

    // Framed code:
    {
        nuitka_bool tmp_assign_source_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_expression_value_1 = par_value;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[105]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 852;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_assign_source_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        var_with_timezone = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_2;
        assert(var_with_timezone != NUITKA_BOOL_UNASSIGNED);
        tmp_and_left_value_1 = var_with_timezone == NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[102]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 853;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 853;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? true : false;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[106]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[106]);
    }

    if (tmp_return_value == NULL) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


        exception_lineno = 854;
        type_description_1 = "oob";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    if (par_self == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(tstate, exception_value);

        exception_lineno = 856;
        type_description_1 = "oob";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d185872fd6ef313ec30a6b47c7b89cae, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d185872fd6ef313ec30a6b47c7b89cae->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d185872fd6ef313ec30a6b47c7b89cae, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d185872fd6ef313ec30a6b47c7b89cae,
        type_description_1,
        par_self,
        par_value,
        (int)var_with_timezone
    );


    // Release cached frame if used for exception.
    if (frame_d185872fd6ef313ec30a6b47c7b89cae == cache_frame_d185872fd6ef313ec30a6b47c7b89cae) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d185872fd6ef313ec30a6b47c7b89cae);
        cache_frame_d185872fd6ef313ec30a6b47c7b89cae = NULL;
    }

    assertFrameObject(frame_d185872fd6ef313ec30a6b47c7b89cae);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    assert(var_with_timezone != NUITKA_BOOL_UNASSIGNED);
    var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__33_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a4ec031d95526921a392dd91aa716a6f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a4ec031d95526921a392dd91aa716a6f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a4ec031d95526921a392dd91aa716a6f)) {
        Py_XDECREF(cache_frame_a4ec031d95526921a392dd91aa716a6f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a4ec031d95526921a392dd91aa716a6f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a4ec031d95526921a392dd91aa716a6f = MAKE_FUNCTION_FRAME(tstate, codeobj_a4ec031d95526921a392dd91aa716a6f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a4ec031d95526921a392dd91aa716a6f->m_type_description == NULL);
    frame_a4ec031d95526921a392dd91aa716a6f = cache_frame_a4ec031d95526921a392dd91aa716a6f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a4ec031d95526921a392dd91aa716a6f);
    assert(Py_REFCNT(frame_a4ec031d95526921a392dd91aa716a6f) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[108]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a4ec031d95526921a392dd91aa716a6f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a4ec031d95526921a392dd91aa716a6f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a4ec031d95526921a392dd91aa716a6f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a4ec031d95526921a392dd91aa716a6f,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a4ec031d95526921a392dd91aa716a6f == cache_frame_a4ec031d95526921a392dd91aa716a6f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a4ec031d95526921a392dd91aa716a6f);
        cache_frame_a4ec031d95526921a392dd91aa716a6f = NULL;
    }

    assertFrameObject(frame_a4ec031d95526921a392dd91aa716a6f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_40c6e27348719cb4c5f6f001c46c47ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_40c6e27348719cb4c5f6f001c46c47ef = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_40c6e27348719cb4c5f6f001c46c47ef)) {
        Py_XDECREF(cache_frame_40c6e27348719cb4c5f6f001c46c47ef);

#if _DEBUG_REFCOUNTS
        if (cache_frame_40c6e27348719cb4c5f6f001c46c47ef == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_40c6e27348719cb4c5f6f001c46c47ef = MAKE_FUNCTION_FRAME(tstate, codeobj_40c6e27348719cb4c5f6f001c46c47ef, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_40c6e27348719cb4c5f6f001c46c47ef->m_type_description == NULL);
    frame_40c6e27348719cb4c5f6f001c46c47ef = cache_frame_40c6e27348719cb4c5f6f001c46c47ef;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_40c6e27348719cb4c5f6f001c46c47ef);
    assert(Py_REFCNT(frame_40c6e27348719cb4c5f6f001c46c47ef) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 869;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 869;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 869;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 869;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 869;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_40c6e27348719cb4c5f6f001c46c47ef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_40c6e27348719cb4c5f6f001c46c47ef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_40c6e27348719cb4c5f6f001c46c47ef, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_40c6e27348719cb4c5f6f001c46c47ef,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_40c6e27348719cb4c5f6f001c46c47ef == cache_frame_40c6e27348719cb4c5f6f001c46c47ef) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_40c6e27348719cb4c5f6f001c46c47ef);
        cache_frame_40c6e27348719cb4c5f6f001c46c47ef = NULL;
    }

    assertFrameObject(frame_40c6e27348719cb4c5f6f001c46c47ef);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_a687d194a42d00f5eedb208b2958bc38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a687d194a42d00f5eedb208b2958bc38 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a687d194a42d00f5eedb208b2958bc38)) {
        Py_XDECREF(cache_frame_a687d194a42d00f5eedb208b2958bc38);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a687d194a42d00f5eedb208b2958bc38 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a687d194a42d00f5eedb208b2958bc38 = MAKE_FUNCTION_FRAME(tstate, codeobj_a687d194a42d00f5eedb208b2958bc38, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a687d194a42d00f5eedb208b2958bc38->m_type_description == NULL);
    frame_a687d194a42d00f5eedb208b2958bc38 = cache_frame_a687d194a42d00f5eedb208b2958bc38;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a687d194a42d00f5eedb208b2958bc38);
    assert(Py_REFCNT(frame_a687d194a42d00f5eedb208b2958bc38) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[104]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 881;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a687d194a42d00f5eedb208b2958bc38, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a687d194a42d00f5eedb208b2958bc38->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a687d194a42d00f5eedb208b2958bc38, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a687d194a42d00f5eedb208b2958bc38,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_a687d194a42d00f5eedb208b2958bc38 == cache_frame_a687d194a42d00f5eedb208b2958bc38) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a687d194a42d00f5eedb208b2958bc38);
        cache_frame_a687d194a42d00f5eedb208b2958bc38 = NULL;
    }

    assertFrameObject(frame_a687d194a42d00f5eedb208b2958bc38);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__36_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5c02dabc9065dccb18307f68bd111e12;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5c02dabc9065dccb18307f68bd111e12 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5c02dabc9065dccb18307f68bd111e12)) {
        Py_XDECREF(cache_frame_5c02dabc9065dccb18307f68bd111e12);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5c02dabc9065dccb18307f68bd111e12 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5c02dabc9065dccb18307f68bd111e12 = MAKE_FUNCTION_FRAME(tstate, codeobj_5c02dabc9065dccb18307f68bd111e12, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5c02dabc9065dccb18307f68bd111e12->m_type_description == NULL);
    frame_5c02dabc9065dccb18307f68bd111e12 = cache_frame_5c02dabc9065dccb18307f68bd111e12;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5c02dabc9065dccb18307f68bd111e12);
    assert(Py_REFCNT(frame_5c02dabc9065dccb18307f68bd111e12) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 885;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[110]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 885;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5c02dabc9065dccb18307f68bd111e12, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5c02dabc9065dccb18307f68bd111e12->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5c02dabc9065dccb18307f68bd111e12, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5c02dabc9065dccb18307f68bd111e12,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5c02dabc9065dccb18307f68bd111e12 == cache_frame_5c02dabc9065dccb18307f68bd111e12) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5c02dabc9065dccb18307f68bd111e12);
        cache_frame_5c02dabc9065dccb18307f68bd111e12 = NULL;
    }

    assertFrameObject(frame_5c02dabc9065dccb18307f68bd111e12);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_6fa4a9c9a50f89ccbaee717d3548f2f6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6)) {
        Py_XDECREF(cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6 = MAKE_FUNCTION_FRAME(tstate, codeobj_6fa4a9c9a50f89ccbaee717d3548f2f6, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6->m_type_description == NULL);
    frame_6fa4a9c9a50f89ccbaee717d3548f2f6 = cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_6fa4a9c9a50f89ccbaee717d3548f2f6);
    assert(Py_REFCNT(frame_6fa4a9c9a50f89ccbaee717d3548f2f6) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 893;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 893;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 894;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 894;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 894;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 893;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 898;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 898;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 900;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 900;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 4 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 900;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 902;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 902;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 902;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 907;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 907;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 907;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 898;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6fa4a9c9a50f89ccbaee717d3548f2f6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6fa4a9c9a50f89ccbaee717d3548f2f6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6fa4a9c9a50f89ccbaee717d3548f2f6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6fa4a9c9a50f89ccbaee717d3548f2f6,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_6fa4a9c9a50f89ccbaee717d3548f2f6 == cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6);
        cache_frame_6fa4a9c9a50f89ccbaee717d3548f2f6 = NULL;
    }

    assertFrameObject(frame_6fa4a9c9a50f89ccbaee717d3548f2f6);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__38___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_5a1c82eeba4d41bbbc3db728e2b9fc59;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59)) {
        Py_XDECREF(cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59 = MAKE_FUNCTION_FRAME(tstate, codeobj_5a1c82eeba4d41bbbc3db728e2b9fc59, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59->m_type_description == NULL);
    frame_5a1c82eeba4d41bbbc3db728e2b9fc59 = cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5a1c82eeba4d41bbbc3db728e2b9fc59);
    assert(Py_REFCNT(frame_5a1c82eeba4d41bbbc3db728e2b9fc59) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_timezone);
        tmp_assattr_value_1 = par_timezone;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[102], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 919;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5a1c82eeba4d41bbbc3db728e2b9fc59, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5a1c82eeba4d41bbbc3db728e2b9fc59->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5a1c82eeba4d41bbbc3db728e2b9fc59, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5a1c82eeba4d41bbbc3db728e2b9fc59,
        type_description_1,
        par_self,
        par_timezone
    );


    // Release cached frame if used for exception.
    if (frame_5a1c82eeba4d41bbbc3db728e2b9fc59 == cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59);
        cache_frame_5a1c82eeba4d41bbbc3db728e2b9fc59 = NULL;
    }

    assertFrameObject(frame_5a1c82eeba4d41bbbc3db728e2b9fc59);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_e6768e8b750571560d72b619871f854e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e6768e8b750571560d72b619871f854e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e6768e8b750571560d72b619871f854e)) {
        Py_XDECREF(cache_frame_e6768e8b750571560d72b619871f854e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e6768e8b750571560d72b619871f854e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e6768e8b750571560d72b619871f854e = MAKE_FUNCTION_FRAME(tstate, codeobj_e6768e8b750571560d72b619871f854e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e6768e8b750571560d72b619871f854e->m_type_description == NULL);
    frame_e6768e8b750571560d72b619871f854e = cache_frame_e6768e8b750571560d72b619871f854e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e6768e8b750571560d72b619871f854e);
    assert(Py_REFCNT(frame_e6768e8b750571560d72b619871f854e) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[104]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 922;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e6768e8b750571560d72b619871f854e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e6768e8b750571560d72b619871f854e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e6768e8b750571560d72b619871f854e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e6768e8b750571560d72b619871f854e,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_e6768e8b750571560d72b619871f854e == cache_frame_e6768e8b750571560d72b619871f854e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e6768e8b750571560d72b619871f854e);
        cache_frame_e6768e8b750571560d72b619871f854e = NULL;
    }

    assertFrameObject(frame_e6768e8b750571560d72b619871f854e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__40_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_0f190e1c4a7897b2194aead67fb41b94;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0f190e1c4a7897b2194aead67fb41b94 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0f190e1c4a7897b2194aead67fb41b94)) {
        Py_XDECREF(cache_frame_0f190e1c4a7897b2194aead67fb41b94);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0f190e1c4a7897b2194aead67fb41b94 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0f190e1c4a7897b2194aead67fb41b94 = MAKE_FUNCTION_FRAME(tstate, codeobj_0f190e1c4a7897b2194aead67fb41b94, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_0f190e1c4a7897b2194aead67fb41b94->m_type_description == NULL);
    frame_0f190e1c4a7897b2194aead67fb41b94 = cache_frame_0f190e1c4a7897b2194aead67fb41b94;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_0f190e1c4a7897b2194aead67fb41b94);
    assert(Py_REFCNT(frame_0f190e1c4a7897b2194aead67fb41b94) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[112]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0f190e1c4a7897b2194aead67fb41b94, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0f190e1c4a7897b2194aead67fb41b94->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0f190e1c4a7897b2194aead67fb41b94, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0f190e1c4a7897b2194aead67fb41b94,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_0f190e1c4a7897b2194aead67fb41b94 == cache_frame_0f190e1c4a7897b2194aead67fb41b94) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_0f190e1c4a7897b2194aead67fb41b94);
        cache_frame_0f190e1c4a7897b2194aead67fb41b94 = NULL;
    }

    assertFrameObject(frame_0f190e1c4a7897b2194aead67fb41b94);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    nuitka_bool var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    struct Nuitka_FrameObject *frame_178b92a44f6a739969990d16fed758a7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_178b92a44f6a739969990d16fed758a7 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_178b92a44f6a739969990d16fed758a7)) {
        Py_XDECREF(cache_frame_178b92a44f6a739969990d16fed758a7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_178b92a44f6a739969990d16fed758a7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_178b92a44f6a739969990d16fed758a7 = MAKE_FUNCTION_FRAME(tstate, codeobj_178b92a44f6a739969990d16fed758a7, module_sqlalchemy$sql$sqltypes, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_178b92a44f6a739969990d16fed758a7->m_type_description == NULL);
    frame_178b92a44f6a739969990d16fed758a7 = cache_frame_178b92a44f6a739969990d16fed758a7;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_178b92a44f6a739969990d16fed758a7);
    assert(Py_REFCNT(frame_178b92a44f6a739969990d16fed758a7) == 2);

    // Framed code:
    {
        nuitka_bool tmp_assign_source_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_expression_value_1 = par_value;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[105]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_assign_source_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        var_with_timezone = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_2;
        assert(var_with_timezone != NUITKA_BOOL_UNASSIGNED);
        tmp_and_left_value_1 = var_with_timezone == NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[102]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "oob";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? true : false;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[113]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[113]);
    }

    if (tmp_return_value == NULL) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


        exception_lineno = 931;
        type_description_1 = "oob";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    if (par_self == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(tstate, exception_value);

        exception_lineno = 933;
        type_description_1 = "oob";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_178b92a44f6a739969990d16fed758a7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_178b92a44f6a739969990d16fed758a7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_178b92a44f6a739969990d16fed758a7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_178b92a44f6a739969990d16fed758a7,
        type_description_1,
        par_self,
        par_value,
        (int)var_with_timezone
    );


    // Release cached frame if used for exception.
    if (frame_178b92a44f6a739969990d16fed758a7 == cache_frame_178b92a44f6a739969990d16fed758a7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_178b92a44f6a739969990d16fed758a7);
        cache_frame_178b92a44f6a739969990d16fed758a7 = NULL;
    }

    assertFrameObject(frame_178b92a44f6a739969990d16fed758a7);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    assert(var_with_timezone != NUITKA_BOOL_UNASSIGNED);
    var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    var_with_timezone = NUITKA_BOOL_UNASSIGNED;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5bfb01a900fbcd37cf78a54badbcbde7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_5bfb01a900fbcd37cf78a54badbcbde7 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5bfb01a900fbcd37cf78a54badbcbde7)) {
        Py_XDECREF(cache_frame_5bfb01a900fbcd37cf78a54badbcbde7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5bfb01a900fbcd37cf78a54badbcbde7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5bfb01a900fbcd37cf78a54badbcbde7 = MAKE_FUNCTION_FRAME(tstate, codeobj_5bfb01a900fbcd37cf78a54badbcbde7, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5bfb01a900fbcd37cf78a54badbcbde7->m_type_description == NULL);
    frame_5bfb01a900fbcd37cf78a54badbcbde7 = cache_frame_5bfb01a900fbcd37cf78a54badbcbde7;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5bfb01a900fbcd37cf78a54badbcbde7);
    assert(Py_REFCNT(frame_5bfb01a900fbcd37cf78a54badbcbde7) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 941;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 941;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 941;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 941;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 941;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 941;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 941;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 941;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 941;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 942;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 942;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 942;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 942;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_4;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 942;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 942;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_4 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
                if (tmp_dict_value_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 942;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 942;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 942;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5bfb01a900fbcd37cf78a54badbcbde7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5bfb01a900fbcd37cf78a54badbcbde7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5bfb01a900fbcd37cf78a54badbcbde7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5bfb01a900fbcd37cf78a54badbcbde7,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5bfb01a900fbcd37cf78a54badbcbde7 == cache_frame_5bfb01a900fbcd37cf78a54badbcbde7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5bfb01a900fbcd37cf78a54badbcbde7);
        cache_frame_5bfb01a900fbcd37cf78a54badbcbde7 = NULL;
    }

    assertFrameObject(frame_5bfb01a900fbcd37cf78a54badbcbde7);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__43___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    struct Nuitka_FrameObject *frame_a5a5d3a8e5e34ea07914ff3f7c20caf8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8)) {
        Py_XDECREF(cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 = MAKE_FUNCTION_FRAME(tstate, codeobj_a5a5d3a8e5e34ea07914ff3f7c20caf8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8->m_type_description == NULL);
    frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 = cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a5a5d3a8e5e34ea07914ff3f7c20caf8);
    assert(Py_REFCNT(frame_a5a5d3a8e5e34ea07914ff3f7c20caf8) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_length);
        tmp_assattr_value_1 = par_length;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[22], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 951;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a5a5d3a8e5e34ea07914ff3f7c20caf8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a5a5d3a8e5e34ea07914ff3f7c20caf8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a5a5d3a8e5e34ea07914ff3f7c20caf8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a5a5d3a8e5e34ea07914ff3f7c20caf8,
        type_description_1,
        par_self,
        par_length
    );


    // Release cached frame if used for exception.
    if (frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 == cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8);
        cache_frame_a5a5d3a8e5e34ea07914ff3f7c20caf8 = NULL;
    }

    assertFrameObject(frame_a5a5d3a8e5e34ea07914ff3f7c20caf8);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_CellObject *par_dialect = Nuitka_Cell_New1(python_pars[1]);
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_dialect;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_7c00a8e6535b4fa75995a2f65b4780db;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_7c00a8e6535b4fa75995a2f65b4780db = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7c00a8e6535b4fa75995a2f65b4780db)) {
        Py_XDECREF(cache_frame_7c00a8e6535b4fa75995a2f65b4780db);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7c00a8e6535b4fa75995a2f65b4780db == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7c00a8e6535b4fa75995a2f65b4780db = MAKE_FUNCTION_FRAME(tstate, codeobj_7c00a8e6535b4fa75995a2f65b4780db, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7c00a8e6535b4fa75995a2f65b4780db->m_type_description == NULL);
    frame_7c00a8e6535b4fa75995a2f65b4780db = cache_frame_7c00a8e6535b4fa75995a2f65b4780db;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7c00a8e6535b4fa75995a2f65b4780db);
    assert(Py_REFCNT(frame_7c00a8e6535b4fa75995a2f65b4780db) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_value);
        tmp_expression_value_2 = par_value;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[115]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_7c00a8e6535b4fa75995a2f65b4780db->m_frame.f_lineno = 955;
        tmp_expression_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[30]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_7c00a8e6535b4fa75995a2f65b4780db->m_frame.f_lineno = 955;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[31]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        tmp_mod_expr_left_1 = mod_consts[36];
        CHECK_OBJECT(par_value);
        tmp_mod_expr_right_1 = par_value;
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 956;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7c00a8e6535b4fa75995a2f65b4780db, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7c00a8e6535b4fa75995a2f65b4780db->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7c00a8e6535b4fa75995a2f65b4780db, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7c00a8e6535b4fa75995a2f65b4780db,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7c00a8e6535b4fa75995a2f65b4780db == cache_frame_7c00a8e6535b4fa75995a2f65b4780db) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7c00a8e6535b4fa75995a2f65b4780db);
        cache_frame_7c00a8e6535b4fa75995a2f65b4780db = NULL;
    }

    assertFrameObject(frame_7c00a8e6535b4fa75995a2f65b4780db);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__45_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_cdf30f2e8523063925753c74ebf0993b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_cdf30f2e8523063925753c74ebf0993b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_cdf30f2e8523063925753c74ebf0993b)) {
        Py_XDECREF(cache_frame_cdf30f2e8523063925753c74ebf0993b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cdf30f2e8523063925753c74ebf0993b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cdf30f2e8523063925753c74ebf0993b = MAKE_FUNCTION_FRAME(tstate, codeobj_cdf30f2e8523063925753c74ebf0993b, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_cdf30f2e8523063925753c74ebf0993b->m_type_description == NULL);
    frame_cdf30f2e8523063925753c74ebf0993b = cache_frame_cdf30f2e8523063925753c74ebf0993b;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_cdf30f2e8523063925753c74ebf0993b);
    assert(Py_REFCNT(frame_cdf30f2e8523063925753c74ebf0993b) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 962;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[44]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 962;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cdf30f2e8523063925753c74ebf0993b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cdf30f2e8523063925753c74ebf0993b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cdf30f2e8523063925753c74ebf0993b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cdf30f2e8523063925753c74ebf0993b,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_cdf30f2e8523063925753c74ebf0993b == cache_frame_cdf30f2e8523063925753c74ebf0993b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_cdf30f2e8523063925753c74ebf0993b);
        cache_frame_cdf30f2e8523063925753c74ebf0993b = NULL;
    }

    assertFrameObject(frame_cdf30f2e8523063925753c74ebf0993b);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_DBAPIBinary = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_6efcc9144f44aeed5f25c6da94d7dd38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6efcc9144f44aeed5f25c6da94d7dd38 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6efcc9144f44aeed5f25c6da94d7dd38)) {
        Py_XDECREF(cache_frame_6efcc9144f44aeed5f25c6da94d7dd38);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6efcc9144f44aeed5f25c6da94d7dd38 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6efcc9144f44aeed5f25c6da94d7dd38 = MAKE_FUNCTION_FRAME(tstate, codeobj_6efcc9144f44aeed5f25c6da94d7dd38, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_6efcc9144f44aeed5f25c6da94d7dd38->m_type_description == NULL);
    frame_6efcc9144f44aeed5f25c6da94d7dd38 = cache_frame_6efcc9144f44aeed5f25c6da94d7dd38;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_6efcc9144f44aeed5f25c6da94d7dd38);
    assert(Py_REFCNT(frame_6efcc9144f44aeed5f25c6da94d7dd38) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[116]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 967;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_3 = par_dialect;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[116]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[117]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_DBAPIBinary) == NULL);
        PyCell_SET(var_DBAPIBinary, tmp_assign_source_1);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6efcc9144f44aeed5f25c6da94d7dd38, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6efcc9144f44aeed5f25c6da94d7dd38->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6efcc9144f44aeed5f25c6da94d7dd38, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6efcc9144f44aeed5f25c6da94d7dd38,
        type_description_1,
        par_self,
        par_dialect,
        var_DBAPIBinary,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_6efcc9144f44aeed5f25c6da94d7dd38 == cache_frame_6efcc9144f44aeed5f25c6da94d7dd38) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_6efcc9144f44aeed5f25c6da94d7dd38);
        cache_frame_6efcc9144f44aeed5f25c6da94d7dd38 = NULL;
    }

    assertFrameObject(frame_6efcc9144f44aeed5f25c6da94d7dd38);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = var_DBAPIBinary;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_DBAPIBinary);
    Py_DECREF(var_DBAPIBinary);
    var_DBAPIBinary = NULL;
    Py_XDECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_f6f16776ae2cb762341ba3c5b6c326c2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f6f16776ae2cb762341ba3c5b6c326c2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f6f16776ae2cb762341ba3c5b6c326c2)) {
        Py_XDECREF(cache_frame_f6f16776ae2cb762341ba3c5b6c326c2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f6f16776ae2cb762341ba3c5b6c326c2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f6f16776ae2cb762341ba3c5b6c326c2 = MAKE_FUNCTION_FRAME(tstate, codeobj_f6f16776ae2cb762341ba3c5b6c326c2, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_f6f16776ae2cb762341ba3c5b6c326c2->m_type_description == NULL);
    frame_f6f16776ae2cb762341ba3c5b6c326c2 = cache_frame_f6f16776ae2cb762341ba3c5b6c326c2;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_f6f16776ae2cb762341ba3c5b6c326c2);
    assert(Py_REFCNT(frame_f6f16776ae2cb762341ba3c5b6c326c2) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[119]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 974;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_f6f16776ae2cb762341ba3c5b6c326c2->m_frame.f_lineno = 974;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 974;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f6f16776ae2cb762341ba3c5b6c326c2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f6f16776ae2cb762341ba3c5b6c326c2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f6f16776ae2cb762341ba3c5b6c326c2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f6f16776ae2cb762341ba3c5b6c326c2,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_f6f16776ae2cb762341ba3c5b6c326c2 == cache_frame_f6f16776ae2cb762341ba3c5b6c326c2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_f6f16776ae2cb762341ba3c5b6c326c2);
        cache_frame_f6f16776ae2cb762341ba3c5b6c326c2 = NULL;
    }

    assertFrameObject(frame_f6f16776ae2cb762341ba3c5b6c326c2);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__47_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_46351f3dea9566bcf08fe0dc8a4cd561;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_46351f3dea9566bcf08fe0dc8a4cd561 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_46351f3dea9566bcf08fe0dc8a4cd561)) {
        Py_XDECREF(cache_frame_46351f3dea9566bcf08fe0dc8a4cd561);

#if _DEBUG_REFCOUNTS
        if (cache_frame_46351f3dea9566bcf08fe0dc8a4cd561 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_46351f3dea9566bcf08fe0dc8a4cd561 = MAKE_FUNCTION_FRAME(tstate, codeobj_46351f3dea9566bcf08fe0dc8a4cd561, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_46351f3dea9566bcf08fe0dc8a4cd561->m_type_description == NULL);
    frame_46351f3dea9566bcf08fe0dc8a4cd561 = cache_frame_46351f3dea9566bcf08fe0dc8a4cd561;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_46351f3dea9566bcf08fe0dc8a4cd561);
    assert(Py_REFCNT(frame_46351f3dea9566bcf08fe0dc8a4cd561) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 986;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[120]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 986;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_46351f3dea9566bcf08fe0dc8a4cd561, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_46351f3dea9566bcf08fe0dc8a4cd561->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_46351f3dea9566bcf08fe0dc8a4cd561, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_46351f3dea9566bcf08fe0dc8a4cd561,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_46351f3dea9566bcf08fe0dc8a4cd561 == cache_frame_46351f3dea9566bcf08fe0dc8a4cd561) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_46351f3dea9566bcf08fe0dc8a4cd561);
        cache_frame_46351f3dea9566bcf08fe0dc8a4cd561 = NULL;
    }

    assertFrameObject(frame_46351f3dea9566bcf08fe0dc8a4cd561);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_8b1c9324b2f9a74c36720b12fbd8f5ac;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac)) {
        Py_XDECREF(cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac = MAKE_FUNCTION_FRAME(tstate, codeobj_8b1c9324b2f9a74c36720b12fbd8f5ac, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac->m_type_description == NULL);
    frame_8b1c9324b2f9a74c36720b12fbd8f5ac = cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8b1c9324b2f9a74c36720b12fbd8f5ac);
    assert(Py_REFCNT(frame_8b1c9324b2f9a74c36720b12fbd8f5ac) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_bytes_arg_1;
        CHECK_OBJECT(par_value);
        tmp_bytes_arg_1 = par_value;
        tmp_assign_source_1 = BUILTIN_BYTES1(tstate, tmp_bytes_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 993;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8b1c9324b2f9a74c36720b12fbd8f5ac, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8b1c9324b2f9a74c36720b12fbd8f5ac->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8b1c9324b2f9a74c36720b12fbd8f5ac, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8b1c9324b2f9a74c36720b12fbd8f5ac,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_8b1c9324b2f9a74c36720b12fbd8f5ac == cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac);
        cache_frame_8b1c9324b2f9a74c36720b12fbd8f5ac = NULL;
    }

    assertFrameObject(frame_8b1c9324b2f9a74c36720b12fbd8f5ac);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_value = python_pars[2];
    struct Nuitka_FrameObject *frame_224fee5ca0b2f3cfd3d9a5506ec239c9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9)) {
        Py_XDECREF(cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9 = MAKE_FUNCTION_FRAME(tstate, codeobj_224fee5ca0b2f3cfd3d9a5506ec239c9, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9->m_type_description == NULL);
    frame_224fee5ca0b2f3cfd3d9a5506ec239c9 = cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_224fee5ca0b2f3cfd3d9a5506ec239c9);
    assert(Py_REFCNT(frame_224fee5ca0b2f3cfd3d9a5506ec239c9) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[122]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(par_self);
    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[123]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_224fee5ca0b2f3cfd3d9a5506ec239c9->m_frame.f_lineno = 1004;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[124],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_224fee5ca0b2f3cfd3d9a5506ec239c9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_224fee5ca0b2f3cfd3d9a5506ec239c9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_224fee5ca0b2f3cfd3d9a5506ec239c9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_224fee5ca0b2f3cfd3d9a5506ec239c9,
        type_description_1,
        par_self,
        par_op,
        par_value,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_224fee5ca0b2f3cfd3d9a5506ec239c9 == cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9);
        cache_frame_224fee5ca0b2f3cfd3d9a5506ec239c9 = NULL;
    }

    assertFrameObject(frame_224fee5ca0b2f3cfd3d9a5506ec239c9);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_6cd175b6d8dd8eef0a3f5ec634733de5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5)) {
        Py_XDECREF(cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5 = MAKE_FUNCTION_FRAME(tstate, codeobj_6cd175b6d8dd8eef0a3f5ec634733de5, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5->m_type_description == NULL);
    frame_6cd175b6d8dd8eef0a3f5ec634733de5 = cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_6cd175b6d8dd8eef0a3f5ec634733de5);
    assert(Py_REFCNT(frame_6cd175b6d8dd8eef0a3f5ec634733de5) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[126]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1007;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6cd175b6d8dd8eef0a3f5ec634733de5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6cd175b6d8dd8eef0a3f5ec634733de5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6cd175b6d8dd8eef0a3f5ec634733de5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6cd175b6d8dd8eef0a3f5ec634733de5,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_6cd175b6d8dd8eef0a3f5ec634733de5 == cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5);
        cache_frame_6cd175b6d8dd8eef0a3f5ec634733de5 = NULL;
    }

    assertFrameObject(frame_6cd175b6d8dd8eef0a3f5ec634733de5);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__51___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    struct Nuitka_FrameObject *frame_1655a926b88f18b8542168ff4f71938a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1655a926b88f18b8542168ff4f71938a = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1655a926b88f18b8542168ff4f71938a)) {
        Py_XDECREF(cache_frame_1655a926b88f18b8542168ff4f71938a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1655a926b88f18b8542168ff4f71938a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1655a926b88f18b8542168ff4f71938a = MAKE_FUNCTION_FRAME(tstate, codeobj_1655a926b88f18b8542168ff4f71938a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1655a926b88f18b8542168ff4f71938a->m_type_description == NULL);
    frame_1655a926b88f18b8542168ff4f71938a = cache_frame_1655a926b88f18b8542168ff4f71938a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1655a926b88f18b8542168ff4f71938a);
    assert(Py_REFCNT(frame_1655a926b88f18b8542168ff4f71938a) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[123]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[70]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        CHECK_OBJECT(par_length);
        tmp_kw_call_dict_value_0_1 = par_length;
        frame_1655a926b88f18b8542168ff4f71938a->m_frame.f_lineno = 1031;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[127]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1655a926b88f18b8542168ff4f71938a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1655a926b88f18b8542168ff4f71938a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1655a926b88f18b8542168ff4f71938a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1655a926b88f18b8542168ff4f71938a,
        type_description_1,
        par_self,
        par_length
    );


    // Release cached frame if used for exception.
    if (frame_1655a926b88f18b8542168ff4f71938a == cache_frame_1655a926b88f18b8542168ff4f71938a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1655a926b88f18b8542168ff4f71938a);
        cache_frame_1655a926b88f18b8542168ff4f71938a = NULL;
    }

    assertFrameObject(frame_1655a926b88f18b8542168ff4f71938a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__52___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_name = python_pars[1];
    PyObject *par_schema = python_pars[2];
    PyObject *par_metadata = python_pars[3];
    PyObject *par_inherit_schema = python_pars[4];
    PyObject *par_quote = python_pars[5];
    PyObject *par__create_events = python_pars[6];
    struct Nuitka_FrameObject *frame_c393e91cad8d39e54440e418e4d538f0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c393e91cad8d39e54440e418e4d538f0 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c393e91cad8d39e54440e418e4d538f0)) {
        Py_XDECREF(cache_frame_c393e91cad8d39e54440e418e4d538f0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c393e91cad8d39e54440e418e4d538f0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c393e91cad8d39e54440e418e4d538f0 = MAKE_FUNCTION_FRAME(tstate, codeobj_c393e91cad8d39e54440e418e4d538f0, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c393e91cad8d39e54440e418e4d538f0->m_type_description == NULL);
    frame_c393e91cad8d39e54440e418e4d538f0 = cache_frame_c393e91cad8d39e54440e418e4d538f0;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c393e91cad8d39e54440e418e4d538f0);
    assert(Py_REFCNT(frame_c393e91cad8d39e54440e418e4d538f0) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_name);
        tmp_cmp_expr_left_1 = par_name;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[129]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[129]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1069;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_value_1 = par_name;
        CHECK_OBJECT(par_quote);
        tmp_args_element_value_2 = par_quote;
        frame_c393e91cad8d39e54440e418e4d538f0->m_frame.f_lineno = 1069;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1069;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[97], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1069;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[97], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1071;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_1:;
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_schema);
        tmp_assattr_value_3 = par_schema;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1072;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[130], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1072;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_metadata);
        tmp_assattr_value_4 = par_metadata;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1073;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[131], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par_inherit_schema);
        tmp_assattr_value_5 = par_inherit_schema;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1074;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_5, mod_consts[132], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1074;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT(par__create_events);
        tmp_assattr_value_6 = par__create_events;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1075;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_6, mod_consts[133], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1075;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(par__create_events);
        tmp_truth_name_1 = CHECK_IF_TRUE(par__create_events);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1077;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1077;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1077;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[131]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1077;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1077;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_5;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1078;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[135]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1078;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1079;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[131]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1079;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = mod_consts[136];
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1081;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[137]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1081;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_3);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1081;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = par_self;
        tmp_args_element_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[138]);
        if (tmp_args_element_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1081;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_c393e91cad8d39e54440e418e4d538f0->m_frame.f_lineno = 1081;
        tmp_args_element_value_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_6);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_args_element_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1081;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_c393e91cad8d39e54440e418e4d538f0->m_frame.f_lineno = 1078;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1078;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_9;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1083;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[135]);
        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1083;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1084;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[131]);
        if (tmp_args_element_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1084;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = mod_consts[139];
        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_8 == NULL)) {
            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1086;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[137]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1086;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1086;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_9 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[140]);
        if (tmp_args_element_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1086;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_c393e91cad8d39e54440e418e4d538f0->m_frame.f_lineno = 1086;
        tmp_args_element_value_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_5, tmp_args_element_value_10);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_args_element_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1086;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_c393e91cad8d39e54440e418e4d538f0->m_frame.f_lineno = 1083;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_7);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1083;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c393e91cad8d39e54440e418e4d538f0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c393e91cad8d39e54440e418e4d538f0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c393e91cad8d39e54440e418e4d538f0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c393e91cad8d39e54440e418e4d538f0,
        type_description_1,
        par_self,
        par_name,
        par_schema,
        par_metadata,
        par_inherit_schema,
        par_quote,
        par__create_events
    );


    // Release cached frame if used for exception.
    if (frame_c393e91cad8d39e54440e418e4d538f0 == cache_frame_c393e91cad8d39e54440e418e4d538f0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c393e91cad8d39e54440e418e4d538f0);
        cache_frame_c393e91cad8d39e54440e418e4d538f0 = NULL;
    }

    assertFrameObject(frame_c393e91cad8d39e54440e418e4d538f0);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_metadata);
    Py_DECREF(par_metadata);
    CHECK_OBJECT(par_inherit_schema);
    Py_DECREF(par_inherit_schema);
    CHECK_OBJECT(par_quote);
    Py_DECREF(par_quote);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_metadata);
    Py_DECREF(par_metadata);
    CHECK_OBJECT(par_inherit_schema);
    Py_DECREF(par_inherit_schema);
    CHECK_OBJECT(par_quote);
    Py_DECREF(par_quote);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_4841414b091159f12e20ecd242a5db74;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4841414b091159f12e20ecd242a5db74 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4841414b091159f12e20ecd242a5db74)) {
        Py_XDECREF(cache_frame_4841414b091159f12e20ecd242a5db74);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4841414b091159f12e20ecd242a5db74 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4841414b091159f12e20ecd242a5db74 = MAKE_FUNCTION_FRAME(tstate, codeobj_4841414b091159f12e20ecd242a5db74, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_4841414b091159f12e20ecd242a5db74->m_type_description == NULL);
    frame_4841414b091159f12e20ecd242a5db74 = cache_frame_4841414b091159f12e20ecd242a5db74;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_4841414b091159f12e20ecd242a5db74);
    assert(Py_REFCNT(frame_4841414b091159f12e20ecd242a5db74) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_column);
        tmp_expression_value_1 = par_column;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[141]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[137]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[142]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_4841414b091159f12e20ecd242a5db74->m_frame.f_lineno = 1090;
        tmp_args_element_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_4841414b091159f12e20ecd242a5db74->m_frame.f_lineno = 1090;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4841414b091159f12e20ecd242a5db74, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4841414b091159f12e20ecd242a5db74->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4841414b091159f12e20ecd242a5db74, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4841414b091159f12e20ecd242a5db74,
        type_description_1,
        par_self,
        par_column,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_4841414b091159f12e20ecd242a5db74 == cache_frame_4841414b091159f12e20ecd242a5db74) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_4841414b091159f12e20ecd242a5db74);
        cache_frame_4841414b091159f12e20ecd242a5db74 = NULL;
    }

    assertFrameObject(frame_4841414b091159f12e20ecd242a5db74);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *var_variant_mapping = NULL;
    struct Nuitka_FrameObject *frame_f414fb9bff05b417e46eb6ca0a8948ab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f414fb9bff05b417e46eb6ca0a8948ab = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f414fb9bff05b417e46eb6ca0a8948ab)) {
        Py_XDECREF(cache_frame_f414fb9bff05b417e46eb6ca0a8948ab);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f414fb9bff05b417e46eb6ca0a8948ab == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f414fb9bff05b417e46eb6ca0a8948ab = MAKE_FUNCTION_FRAME(tstate, codeobj_f414fb9bff05b417e46eb6ca0a8948ab, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_f414fb9bff05b417e46eb6ca0a8948ab->m_type_description == NULL);
    frame_f414fb9bff05b417e46eb6ca0a8948ab = cache_frame_f414fb9bff05b417e46eb6ca0a8948ab;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_f414fb9bff05b417e46eb6ca0a8948ab);
    assert(Py_REFCNT(frame_f414fb9bff05b417e46eb6ca0a8948ab) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_column);
        tmp_expression_value_1 = par_column;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[0]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1093;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[143]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[143]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 1093;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1093;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_column);
        tmp_expression_value_4 = par_column;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[0]);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1094;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[144]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1094;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[145]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1094;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_f414fb9bff05b417e46eb6ca0a8948ab->m_frame.f_lineno = 1094;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_1);
        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1094;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(par_column);
        tmp_expression_value_6 = par_column;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1095;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[146]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1095;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_ass_subscribed_1 = var_variant_mapping;
        tmp_ass_subscript_1 = mod_consts[147];
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1095;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = Py_None;
        assert(var_variant_mapping == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_variant_mapping = tmp_assign_source_2;
    }
    branch_end_1:;
    if (var_variant_mapping == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[148]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(tstate, exception_value);

        exception_lineno = 1098;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_variant_mapping;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f414fb9bff05b417e46eb6ca0a8948ab, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f414fb9bff05b417e46eb6ca0a8948ab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f414fb9bff05b417e46eb6ca0a8948ab, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f414fb9bff05b417e46eb6ca0a8948ab,
        type_description_1,
        par_self,
        par_column,
        var_variant_mapping
    );


    // Release cached frame if used for exception.
    if (frame_f414fb9bff05b417e46eb6ca0a8948ab == cache_frame_f414fb9bff05b417e46eb6ca0a8948ab) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_f414fb9bff05b417e46eb6ca0a8948ab);
        cache_frame_f414fb9bff05b417e46eb6ca0a8948ab = NULL;
    }

    assertFrameObject(frame_f414fb9bff05b417e46eb6ca0a8948ab);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__55__set_table(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_table = python_pars[2];
    PyObject *var_variant_mapping = NULL;
    struct Nuitka_FrameObject *frame_02b24c1aab36b85538788780cbf29e07;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_02b24c1aab36b85538788780cbf29e07 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_02b24c1aab36b85538788780cbf29e07)) {
        Py_XDECREF(cache_frame_02b24c1aab36b85538788780cbf29e07);

#if _DEBUG_REFCOUNTS
        if (cache_frame_02b24c1aab36b85538788780cbf29e07 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_02b24c1aab36b85538788780cbf29e07 = MAKE_FUNCTION_FRAME(tstate, codeobj_02b24c1aab36b85538788780cbf29e07, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_02b24c1aab36b85538788780cbf29e07->m_type_description == NULL);
    frame_02b24c1aab36b85538788780cbf29e07 = cache_frame_02b24c1aab36b85538788780cbf29e07;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_02b24c1aab36b85538788780cbf29e07);
    assert(Py_REFCNT(frame_02b24c1aab36b85538788780cbf29e07) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[132]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1101;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1101;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_table);
        tmp_expression_value_2 = par_table;
        tmp_assattr_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[130]);
        if (tmp_assattr_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1102;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[130], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1102;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[131]);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[130]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_left_value_2 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[131]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[130]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_attribute_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 1103;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        tmp_and_right_value_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_and_right_value_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_expression_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[131]);
        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1104;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[130]);
        Py_DECREF(tmp_expression_value_7);
        if (tmp_assattr_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1104;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[130], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1104;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_2:;
    branch_end_1:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[133]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1106;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1106;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_1 = par_column;
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1109;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[149], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1109;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1111;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[135]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1111;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_args_element_value_2 = par_table;
        tmp_args_element_value_3 = mod_consts[136];
        tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_11 == NULL)) {
            tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1114;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[137]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1114;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_args_element_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[150]);
        if (tmp_args_element_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1115;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_6 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_6, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1114;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_args_element_value_4 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_5);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1114;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1111;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1111;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1118;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[135]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1118;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_args_element_value_7 = par_table;
        tmp_args_element_value_8 = mod_consts[139];
        tmp_expression_value_14 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_14 == NULL)) {
            tmp_expression_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1121;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[137]);
        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1121;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_15 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[151]);
        if (tmp_args_element_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1122;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_2 = var_variant_mapping;
        tmp_args_element_value_11 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_11, tmp_dict_key_2, tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1121;
        {
            PyObject *call_args[] = {tmp_args_element_value_10, tmp_args_element_value_11};
            tmp_args_element_value_9 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_10);
        Py_DECREF(tmp_args_element_value_11);
        if (tmp_args_element_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1121;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1118;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1118;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        bool tmp_condition_result_4;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[131]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1125;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_4 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_condition_result_4 != false) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_expression_value_20;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_expression_value_17 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_17 == NULL)) {
            tmp_expression_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1128;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[135]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1128;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_expression_value_18 = par_table;
        tmp_args_element_value_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_18, mod_consts[131]);
        if (tmp_args_element_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1129;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[136];
        tmp_expression_value_19 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_19 == NULL)) {
            tmp_expression_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1131;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_19, mod_consts[137]);
        if (tmp_called_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1131;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_args_element_value_15 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_20, mod_consts[138]);
        if (tmp_args_element_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);
            Py_DECREF(tmp_called_value_6);

            exception_lineno = 1132;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_3 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_3 = var_variant_mapping;
        tmp_args_element_value_16 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_16, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1131;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16};
            tmp_args_element_value_14 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_6, call_args);
        }

        Py_DECREF(tmp_called_value_6);
        Py_DECREF(tmp_args_element_value_15);
        Py_DECREF(tmp_args_element_value_16);
        if (tmp_args_element_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1131;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1128;
        {
            PyObject *call_args[] = {tmp_args_element_value_12, tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_12);
        Py_DECREF(tmp_args_element_value_14);
        if (tmp_call_result_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1128;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_17;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_args_element_value_19;
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_args_element_value_20;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_args_element_value_21;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        tmp_expression_value_21 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_expression_value_21 == NULL)) {
            tmp_expression_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[134]);
        }

        if (tmp_expression_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1136;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_21, mod_consts[135]);
        if (tmp_called_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1136;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_expression_value_22 = par_table;
        tmp_args_element_value_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_22, mod_consts[131]);
        if (tmp_args_element_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);

            exception_lineno = 1137;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_18 = mod_consts[139];
        tmp_expression_value_23 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_23 == NULL)) {
            tmp_expression_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1139;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_23, mod_consts[137]);
        if (tmp_called_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1139;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_24 = par_self;
        tmp_args_element_value_20 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_24, mod_consts[140]);
        if (tmp_args_element_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);
            Py_DECREF(tmp_called_value_8);

            exception_lineno = 1140;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_4 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_4 = var_variant_mapping;
        tmp_args_element_value_21 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_21, tmp_dict_key_4, tmp_dict_value_4);
        assert(!(tmp_res != 0));
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1139;
        {
            PyObject *call_args[] = {tmp_args_element_value_20, tmp_args_element_value_21};
            tmp_args_element_value_19 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_8, call_args);
        }

        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_element_value_20);
        Py_DECREF(tmp_args_element_value_21);
        if (tmp_args_element_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1139;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_02b24c1aab36b85538788780cbf29e07->m_frame.f_lineno = 1136;
        {
            PyObject *call_args[] = {tmp_args_element_value_17, tmp_args_element_value_18, tmp_args_element_value_19};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_7, call_args);
        }

        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_element_value_17);
        Py_DECREF(tmp_args_element_value_19);
        if (tmp_call_result_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1136;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    branch_no_4:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_02b24c1aab36b85538788780cbf29e07, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_02b24c1aab36b85538788780cbf29e07->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_02b24c1aab36b85538788780cbf29e07, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_02b24c1aab36b85538788780cbf29e07,
        type_description_1,
        par_self,
        par_column,
        par_table,
        var_variant_mapping
    );


    // Release cached frame if used for exception.
    if (frame_02b24c1aab36b85538788780cbf29e07 == cache_frame_02b24c1aab36b85538788780cbf29e07) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_02b24c1aab36b85538788780cbf29e07);
        cache_frame_02b24c1aab36b85538788780cbf29e07 = NULL;
    }

    assertFrameObject(frame_02b24c1aab36b85538788780cbf29e07);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__56_copy(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kw = python_pars[1];
    struct Nuitka_FrameObject *frame_75cf377c5b151e45160341e104f8347e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_75cf377c5b151e45160341e104f8347e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_75cf377c5b151e45160341e104f8347e)) {
        Py_XDECREF(cache_frame_75cf377c5b151e45160341e104f8347e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_75cf377c5b151e45160341e104f8347e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_75cf377c5b151e45160341e104f8347e = MAKE_FUNCTION_FRAME(tstate, codeobj_75cf377c5b151e45160341e104f8347e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_75cf377c5b151e45160341e104f8347e->m_type_description == NULL);
    frame_75cf377c5b151e45160341e104f8347e = cache_frame_75cf377c5b151e45160341e104f8347e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_75cf377c5b151e45160341e104f8347e);
    assert(Py_REFCNT(frame_75cf377c5b151e45160341e104f8347e) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[152]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1146;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_value_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM(tmp_args_value_1, 0, tmp_tuple_element_1);
        tmp_kwargs_value_1 = DICT_COPY(mod_consts[153]);
        frame_75cf377c5b151e45160341e104f8347e->m_frame.f_lineno = 1146;
        tmp_return_value = CALL_FUNCTION(tstate, tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        Py_DECREF(tmp_kwargs_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_75cf377c5b151e45160341e104f8347e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_75cf377c5b151e45160341e104f8347e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_75cf377c5b151e45160341e104f8347e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_75cf377c5b151e45160341e104f8347e,
        type_description_1,
        par_self,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_75cf377c5b151e45160341e104f8347e == cache_frame_75cf377c5b151e45160341e104f8347e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_75cf377c5b151e45160341e104f8347e);
        cache_frame_75cf377c5b151e45160341e104f8347e = NULL;
    }

    assertFrameObject(frame_75cf377c5b151e45160341e104f8347e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__57_adapt(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_schema = NULL;
    PyObject *var_metadata = NULL;
    PyObject *var__create_events = NULL;
    struct Nuitka_FrameObject *frame_321bf2361f1cad4f3c4c9cdf8ae84a4e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e)) {
        Py_XDECREF(cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e = MAKE_FUNCTION_FRAME(tstate, codeobj_321bf2361f1cad4f3c4c9cdf8ae84a4e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e->m_type_description == NULL);
    frame_321bf2361f1cad4f3c4c9cdf8ae84a4e = cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_321bf2361f1cad4f3c4c9cdf8ae84a4e);
    assert(Py_REFCNT(frame_321bf2361f1cad4f3c4c9cdf8ae84a4e) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_dict_arg_value_1 = par_kw;
        tmp_key_value_1 = mod_consts[130];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_default_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[130]);
        if (tmp_default_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1149;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = DICT_POP3(tstate, tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        Py_DECREF(tmp_default_value_1);
        assert(!(tmp_assign_source_1 == NULL));
        assert(var_schema == NULL);
        var_schema = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[154]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[131];
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[131]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1150;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_321bf2361f1cad4f3c4c9cdf8ae84a4e->m_frame.f_lineno = 1150;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_metadata == NULL);
        var_metadata = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[154]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1151;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_321bf2361f1cad4f3c4c9cdf8ae84a4e->m_frame.f_lineno = 1151;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_2, mod_consts[155]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1151;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var__create_events == NULL);
        var__create_events = tmp_assign_source_3;
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(par_impltype);
        tmp_dircall_arg1_1 = par_impltype;
        tmp_dict_key_1 = mod_consts[97];
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[97]);
        if (tmp_dict_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1153;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_6;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[130];
            CHECK_OBJECT(var_schema);
            tmp_dict_value_1 = var_schema;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[132];
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[132]);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1155;
                type_description_1 = "oooooo";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[131];
            CHECK_OBJECT(var_metadata);
            tmp_dict_value_1 = var_metadata;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[133];
            CHECK_OBJECT(var__create_events);
            tmp_dict_value_1 = var__create_events;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dircall_arg2_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__2_complex_call_helper_keywords_star_dict(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1152;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_321bf2361f1cad4f3c4c9cdf8ae84a4e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_321bf2361f1cad4f3c4c9cdf8ae84a4e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_321bf2361f1cad4f3c4c9cdf8ae84a4e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_321bf2361f1cad4f3c4c9cdf8ae84a4e,
        type_description_1,
        par_self,
        par_impltype,
        par_kw,
        var_schema,
        var_metadata,
        var__create_events
    );


    // Release cached frame if used for exception.
    if (frame_321bf2361f1cad4f3c4c9cdf8ae84a4e == cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e);
        cache_frame_321bf2361f1cad4f3c4c9cdf8ae84a4e = NULL;
    }

    assertFrameObject(frame_321bf2361f1cad4f3c4c9cdf8ae84a4e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_schema);
    Py_DECREF(var_schema);
    var_schema = NULL;
    CHECK_OBJECT(var_metadata);
    Py_DECREF(var_metadata);
    var_metadata = NULL;
    CHECK_OBJECT(var__create_events);
    Py_DECREF(var__create_events);
    var__create_events = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_metadata);
    var_metadata = NULL;
    Py_XDECREF(var__create_events);
    var__create_events = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__58_bind(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_e2920da790812d701aed1f6e299c3c2a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e2920da790812d701aed1f6e299c3c2a = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e2920da790812d701aed1f6e299c3c2a)) {
        Py_XDECREF(cache_frame_e2920da790812d701aed1f6e299c3c2a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e2920da790812d701aed1f6e299c3c2a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e2920da790812d701aed1f6e299c3c2a = MAKE_FUNCTION_FRAME(tstate, codeobj_e2920da790812d701aed1f6e299c3c2a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e2920da790812d701aed1f6e299c3c2a->m_type_description == NULL);
    frame_e2920da790812d701aed1f6e299c3c2a = cache_frame_e2920da790812d701aed1f6e299c3c2a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e2920da790812d701aed1f6e299c3c2a);
    assert(Py_REFCNT(frame_e2920da790812d701aed1f6e299c3c2a) == 2);

    // Framed code:
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_and_left_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[131]);
        if (tmp_and_left_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1163;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_1);

            exception_lineno = 1163;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        Py_DECREF(tmp_and_left_value_1);
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[131]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1163;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[156]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_and_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1163;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_left_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 1163;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_or_right_value_1 = Py_None;
        Py_INCREF(tmp_or_right_value_1);
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e2920da790812d701aed1f6e299c3c2a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e2920da790812d701aed1f6e299c3c2a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e2920da790812d701aed1f6e299c3c2a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e2920da790812d701aed1f6e299c3c2a,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_e2920da790812d701aed1f6e299c3c2a == cache_frame_e2920da790812d701aed1f6e299c3c2a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e2920da790812d701aed1f6e299c3c2a);
        cache_frame_e2920da790812d701aed1f6e299c3c2a = NULL;
    }

    assertFrameObject(frame_e2920da790812d701aed1f6e299c3c2a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__59_create(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_bind = python_pars[1];
    PyObject *par_checkfirst = python_pars[2];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_93e99cc8c06c3e9cd8797bb4bad6c276;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276)) {
        Py_XDECREF(cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276);

#if _DEBUG_REFCOUNTS
        if (cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276 = MAKE_FUNCTION_FRAME(tstate, codeobj_93e99cc8c06c3e9cd8797bb4bad6c276, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276->m_type_description == NULL);
    frame_93e99cc8c06c3e9cd8797bb4bad6c276 = cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_93e99cc8c06c3e9cd8797bb4bad6c276);
    assert(Py_REFCNT(frame_93e99cc8c06c3e9cd8797bb4bad6c276) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_bind);
        tmp_cmp_expr_left_1 = par_bind;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[157]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1169;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        frame_93e99cc8c06c3e9cd8797bb4bad6c276->m_frame.f_lineno = 1169;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1169;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_bind;
            assert(old != NULL);
            par_bind = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1170;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1170;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_93e99cc8c06c3e9cd8797bb4bad6c276->m_frame.f_lineno = 1170;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_3 = var_t;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_3);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_cmp_expr_left_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1171;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_2);

            exception_lineno = 1171;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[160]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1172;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_kw_call_value_0_1 = par_bind;
        CHECK_OBJECT(par_checkfirst);
        tmp_kw_call_value_1_1 = par_checkfirst;
        frame_93e99cc8c06c3e9cd8797bb4bad6c276->m_frame.f_lineno = 1172;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_3, kw_values, mod_consts[161]);
        }

        Py_DECREF(tmp_called_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1172;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_93e99cc8c06c3e9cd8797bb4bad6c276, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_93e99cc8c06c3e9cd8797bb4bad6c276->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_93e99cc8c06c3e9cd8797bb4bad6c276, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_93e99cc8c06c3e9cd8797bb4bad6c276,
        type_description_1,
        par_self,
        par_bind,
        par_checkfirst,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_93e99cc8c06c3e9cd8797bb4bad6c276 == cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276);
        cache_frame_93e99cc8c06c3e9cd8797bb4bad6c276 = NULL;
    }

    assertFrameObject(frame_93e99cc8c06c3e9cd8797bb4bad6c276);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    par_bind = NULL;
    CHECK_OBJECT(var_t);
    Py_DECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_bind);
    par_bind = NULL;
    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__60_drop(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_bind = python_pars[1];
    PyObject *par_checkfirst = python_pars[2];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_8f0b7592959ec998dbe0a36a0203ad7d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_8f0b7592959ec998dbe0a36a0203ad7d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_8f0b7592959ec998dbe0a36a0203ad7d)) {
        Py_XDECREF(cache_frame_8f0b7592959ec998dbe0a36a0203ad7d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8f0b7592959ec998dbe0a36a0203ad7d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8f0b7592959ec998dbe0a36a0203ad7d = MAKE_FUNCTION_FRAME(tstate, codeobj_8f0b7592959ec998dbe0a36a0203ad7d, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8f0b7592959ec998dbe0a36a0203ad7d->m_type_description == NULL);
    frame_8f0b7592959ec998dbe0a36a0203ad7d = cache_frame_8f0b7592959ec998dbe0a36a0203ad7d;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8f0b7592959ec998dbe0a36a0203ad7d);
    assert(Py_REFCNT(frame_8f0b7592959ec998dbe0a36a0203ad7d) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_bind);
        tmp_cmp_expr_left_1 = par_bind;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[157]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        frame_8f0b7592959ec998dbe0a36a0203ad7d->m_frame.f_lineno = 1178;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_bind;
            assert(old != NULL);
            par_bind = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1179;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1179;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1179;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_8f0b7592959ec998dbe0a36a0203ad7d->m_frame.f_lineno = 1179;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1179;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_3 = var_t;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_3);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1180;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_cmp_expr_left_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1180;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_2);

            exception_lineno = 1180;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1180;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1180;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[163]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1181;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_kw_call_value_0_1 = par_bind;
        CHECK_OBJECT(par_checkfirst);
        tmp_kw_call_value_1_1 = par_checkfirst;
        frame_8f0b7592959ec998dbe0a36a0203ad7d->m_frame.f_lineno = 1181;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_3, kw_values, mod_consts[161]);
        }

        Py_DECREF(tmp_called_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1181;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8f0b7592959ec998dbe0a36a0203ad7d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8f0b7592959ec998dbe0a36a0203ad7d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8f0b7592959ec998dbe0a36a0203ad7d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8f0b7592959ec998dbe0a36a0203ad7d,
        type_description_1,
        par_self,
        par_bind,
        par_checkfirst,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_8f0b7592959ec998dbe0a36a0203ad7d == cache_frame_8f0b7592959ec998dbe0a36a0203ad7d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8f0b7592959ec998dbe0a36a0203ad7d);
        cache_frame_8f0b7592959ec998dbe0a36a0203ad7d = NULL;
    }

    assertFrameObject(frame_8f0b7592959ec998dbe0a36a0203ad7d);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    par_bind = NULL;
    CHECK_OBJECT(var_t);
    Py_DECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_bind);
    par_bind = NULL;
    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_d84c754abc2f7c3ad9b602eba74790db;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d84c754abc2f7c3ad9b602eba74790db = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d84c754abc2f7c3ad9b602eba74790db)) {
        Py_XDECREF(cache_frame_d84c754abc2f7c3ad9b602eba74790db);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d84c754abc2f7c3ad9b602eba74790db == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d84c754abc2f7c3ad9b602eba74790db = MAKE_FUNCTION_FRAME(tstate, codeobj_d84c754abc2f7c3ad9b602eba74790db, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d84c754abc2f7c3ad9b602eba74790db->m_type_description == NULL);
    frame_d84c754abc2f7c3ad9b602eba74790db = cache_frame_d84c754abc2f7c3ad9b602eba74790db;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d84c754abc2f7c3ad9b602eba74790db);
    assert(Py_REFCNT(frame_d84c754abc2f7c3ad9b602eba74790db) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1184;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1184;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_d84c754abc2f7c3ad9b602eba74790db->m_frame.f_lineno = 1184;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1184;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1184;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1187;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1187;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_d84c754abc2f7c3ad9b602eba74790db->m_frame.f_lineno = 1187;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1187;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1188;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1188;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1188;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1188;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[150]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1189;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1189;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d84c754abc2f7c3ad9b602eba74790db, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d84c754abc2f7c3ad9b602eba74790db->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d84c754abc2f7c3ad9b602eba74790db, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d84c754abc2f7c3ad9b602eba74790db,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_d84c754abc2f7c3ad9b602eba74790db == cache_frame_d84c754abc2f7c3ad9b602eba74790db) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d84c754abc2f7c3ad9b602eba74790db);
        cache_frame_d84c754abc2f7c3ad9b602eba74790db = NULL;
    }

    assertFrameObject(frame_d84c754abc2f7c3ad9b602eba74790db);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_5e4811336afcb0cee41bc6eba05d5af8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5e4811336afcb0cee41bc6eba05d5af8 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_5e4811336afcb0cee41bc6eba05d5af8)) {
        Py_XDECREF(cache_frame_5e4811336afcb0cee41bc6eba05d5af8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5e4811336afcb0cee41bc6eba05d5af8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5e4811336afcb0cee41bc6eba05d5af8 = MAKE_FUNCTION_FRAME(tstate, codeobj_5e4811336afcb0cee41bc6eba05d5af8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5e4811336afcb0cee41bc6eba05d5af8->m_type_description == NULL);
    frame_5e4811336afcb0cee41bc6eba05d5af8 = cache_frame_5e4811336afcb0cee41bc6eba05d5af8;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5e4811336afcb0cee41bc6eba05d5af8);
    assert(Py_REFCNT(frame_5e4811336afcb0cee41bc6eba05d5af8) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1192;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1192;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_5e4811336afcb0cee41bc6eba05d5af8->m_frame.f_lineno = 1192;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1192;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1192;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1195;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1195;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_5e4811336afcb0cee41bc6eba05d5af8->m_frame.f_lineno = 1195;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1195;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1196;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[151]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1197;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1197;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5e4811336afcb0cee41bc6eba05d5af8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5e4811336afcb0cee41bc6eba05d5af8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5e4811336afcb0cee41bc6eba05d5af8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5e4811336afcb0cee41bc6eba05d5af8,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_5e4811336afcb0cee41bc6eba05d5af8 == cache_frame_5e4811336afcb0cee41bc6eba05d5af8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5e4811336afcb0cee41bc6eba05d5af8);
        cache_frame_5e4811336afcb0cee41bc6eba05d5af8 = NULL;
    }

    assertFrameObject(frame_5e4811336afcb0cee41bc6eba05d5af8);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_02ec6092a6bf216df402ff29d2a09867;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_02ec6092a6bf216df402ff29d2a09867 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_02ec6092a6bf216df402ff29d2a09867)) {
        Py_XDECREF(cache_frame_02ec6092a6bf216df402ff29d2a09867);

#if _DEBUG_REFCOUNTS
        if (cache_frame_02ec6092a6bf216df402ff29d2a09867 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_02ec6092a6bf216df402ff29d2a09867 = MAKE_FUNCTION_FRAME(tstate, codeobj_02ec6092a6bf216df402ff29d2a09867, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_02ec6092a6bf216df402ff29d2a09867->m_type_description == NULL);
    frame_02ec6092a6bf216df402ff29d2a09867 = cache_frame_02ec6092a6bf216df402ff29d2a09867;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_02ec6092a6bf216df402ff29d2a09867);
    assert(Py_REFCNT(frame_02ec6092a6bf216df402ff29d2a09867) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1200;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_02ec6092a6bf216df402ff29d2a09867->m_frame.f_lineno = 1200;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1203;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1203;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_02ec6092a6bf216df402ff29d2a09867->m_frame.f_lineno = 1203;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1203;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1204;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1204;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1204;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1204;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[138]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1205;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1205;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_02ec6092a6bf216df402ff29d2a09867, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_02ec6092a6bf216df402ff29d2a09867->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_02ec6092a6bf216df402ff29d2a09867, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_02ec6092a6bf216df402ff29d2a09867,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_02ec6092a6bf216df402ff29d2a09867 == cache_frame_02ec6092a6bf216df402ff29d2a09867) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_02ec6092a6bf216df402ff29d2a09867);
        cache_frame_02ec6092a6bf216df402ff29d2a09867 = NULL;
    }

    assertFrameObject(frame_02ec6092a6bf216df402ff29d2a09867);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_c6bfd50df88620f32c9bc73248327de1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c6bfd50df88620f32c9bc73248327de1 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_c6bfd50df88620f32c9bc73248327de1)) {
        Py_XDECREF(cache_frame_c6bfd50df88620f32c9bc73248327de1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c6bfd50df88620f32c9bc73248327de1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c6bfd50df88620f32c9bc73248327de1 = MAKE_FUNCTION_FRAME(tstate, codeobj_c6bfd50df88620f32c9bc73248327de1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c6bfd50df88620f32c9bc73248327de1->m_type_description == NULL);
    frame_c6bfd50df88620f32c9bc73248327de1 = cache_frame_c6bfd50df88620f32c9bc73248327de1;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c6bfd50df88620f32c9bc73248327de1);
    assert(Py_REFCNT(frame_c6bfd50df88620f32c9bc73248327de1) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1208;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1208;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_c6bfd50df88620f32c9bc73248327de1->m_frame.f_lineno = 1208;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1208;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1208;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[158]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1211;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1211;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_c6bfd50df88620f32c9bc73248327de1->m_frame.f_lineno = 1211;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1211;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1212;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1212;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1212;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1212;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[140]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c6bfd50df88620f32c9bc73248327de1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c6bfd50df88620f32c9bc73248327de1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c6bfd50df88620f32c9bc73248327de1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c6bfd50df88620f32c9bc73248327de1,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_c6bfd50df88620f32c9bc73248327de1 == cache_frame_c6bfd50df88620f32c9bc73248327de1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c6bfd50df88620f32c9bc73248327de1);
        cache_frame_c6bfd50df88620f32c9bc73248327de1 = NULL;
    }

    assertFrameObject(frame_c6bfd50df88620f32c9bc73248327de1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_variant_mapping = NULL;
    PyObject *var__we_are_the_impl = NULL;
    struct Nuitka_FrameObject *frame_505a0502bdbab04f3824c3172764fcb4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_505a0502bdbab04f3824c3172764fcb4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_505a0502bdbab04f3824c3172764fcb4)) {
        Py_XDECREF(cache_frame_505a0502bdbab04f3824c3172764fcb4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_505a0502bdbab04f3824c3172764fcb4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_505a0502bdbab04f3824c3172764fcb4 = MAKE_FUNCTION_FRAME(tstate, codeobj_505a0502bdbab04f3824c3172764fcb4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_505a0502bdbab04f3824c3172764fcb4->m_type_description == NULL);
    frame_505a0502bdbab04f3824c3172764fcb4 = cache_frame_505a0502bdbab04f3824c3172764fcb4;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_505a0502bdbab04f3824c3172764fcb4);
    assert(Py_REFCNT(frame_505a0502bdbab04f3824c3172764fcb4) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[154]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1216;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        frame_505a0502bdbab04f3824c3172764fcb4->m_frame.f_lineno = 1216;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[166]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1216;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_left_1 = var_variant_mapping;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_True;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl(tmp_closure_1);

        assert(var__we_are_the_impl == NULL);
        var__we_are_the_impl = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_expression_value_4;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[97]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1227;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_right_2 = var_variant_mapping;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1227;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var__we_are_the_impl);
        tmp_called_value_2 = var__we_are_the_impl;
        CHECK_OBJECT(var_variant_mapping);
        tmp_expression_value_3 = var_variant_mapping;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_4 = par_dialect;
        tmp_subscript_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[97]);
        if (tmp_subscript_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1228;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_3, tmp_subscript_value_1);
        Py_DECREF(tmp_subscript_value_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1228;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        frame_505a0502bdbab04f3824c3172764fcb4->m_frame.f_lineno = 1227;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1227;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 1227;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_True;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_5 = par_dialect;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[97]);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1231;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_right_3 = var_variant_mapping;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_3, tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1231;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_2;
        if (var__we_are_the_impl == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[167]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1232;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }

        tmp_called_value_3 = var__we_are_the_impl;
        CHECK_OBJECT(var_variant_mapping);
        tmp_expression_value_6 = var_variant_mapping;
        tmp_subscript_value_2 = mod_consts[147];
        tmp_args_element_value_2 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_6, tmp_subscript_value_2);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1232;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        frame_505a0502bdbab04f3824c3172764fcb4->m_frame.f_lineno = 1232;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1232;
            type_description_1 = "coooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_3:;
    branch_end_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_505a0502bdbab04f3824c3172764fcb4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_505a0502bdbab04f3824c3172764fcb4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_505a0502bdbab04f3824c3172764fcb4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_505a0502bdbab04f3824c3172764fcb4,
        type_description_1,
        par_self,
        par_dialect,
        par_kw,
        var_variant_mapping,
        var__we_are_the_impl
    );


    // Release cached frame if used for exception.
    if (frame_505a0502bdbab04f3824c3172764fcb4 == cache_frame_505a0502bdbab04f3824c3172764fcb4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_505a0502bdbab04f3824c3172764fcb4);
        cache_frame_505a0502bdbab04f3824c3172764fcb4 = NULL;
    }

    assertFrameObject(frame_505a0502bdbab04f3824c3172764fcb4);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_variant_mapping);
    Py_DECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var__we_are_the_impl);
    var__we_are_the_impl = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var__we_are_the_impl);
    var__we_are_the_impl = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_typ = python_pars[0];
    struct Nuitka_FrameObject *frame_64325d5ac57f07f17109e61bac531e7f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_64325d5ac57f07f17109e61bac531e7f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_64325d5ac57f07f17109e61bac531e7f)) {
        Py_XDECREF(cache_frame_64325d5ac57f07f17109e61bac531e7f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_64325d5ac57f07f17109e61bac531e7f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_64325d5ac57f07f17109e61bac531e7f = MAKE_FUNCTION_FRAME(tstate, codeobj_64325d5ac57f07f17109e61bac531e7f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_64325d5ac57f07f17109e61bac531e7f->m_type_description == NULL);
    frame_64325d5ac57f07f17109e61bac531e7f = cache_frame_64325d5ac57f07f17109e61bac531e7f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_64325d5ac57f07f17109e61bac531e7f);
    assert(Py_REFCNT(frame_64325d5ac57f07f17109e61bac531e7f) == 2);

    // Framed code:
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_typ);
        tmp_cmp_expr_left_1 = par_typ;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_right_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_or_left_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_typ);
        tmp_isinstance_inst_1 = par_typ;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[169]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[169]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_typ);
        tmp_expression_value_1 = par_typ;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[170]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_cmp_expr_left_2);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_right_2 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_and_right_value_1 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? Py_True : Py_False;
        Py_DECREF(tmp_cmp_expr_left_2);
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_64325d5ac57f07f17109e61bac531e7f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_64325d5ac57f07f17109e61bac531e7f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_64325d5ac57f07f17109e61bac531e7f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_64325d5ac57f07f17109e61bac531e7f,
        type_description_1,
        par_typ,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_64325d5ac57f07f17109e61bac531e7f == cache_frame_64325d5ac57f07f17109e61bac531e7f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_64325d5ac57f07f17109e61bac531e7f);
        cache_frame_64325d5ac57f07f17109e61bac531e7f = NULL;
    }

    assertFrameObject(frame_64325d5ac57f07f17109e61bac531e7f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__66___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_22b369a7fb61d52c4d40da6b0fdc21f6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6)) {
        Py_XDECREF(cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6 = MAKE_FUNCTION_FRAME(tstate, codeobj_22b369a7fb61d52c4d40da6b0fdc21f6, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6->m_type_description == NULL);
    frame_22b369a7fb61d52c4d40da6b0fdc21f6 = cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_22b369a7fb61d52c4d40da6b0fdc21f6);
    assert(Py_REFCNT(frame_22b369a7fb61d52c4d40da6b0fdc21f6) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_enums);
        tmp_args_element_value_1 = par_enums;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_22b369a7fb61d52c4d40da6b0fdc21f6->m_frame.f_lineno = 1464;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[171],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1464;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_22b369a7fb61d52c4d40da6b0fdc21f6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_22b369a7fb61d52c4d40da6b0fdc21f6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_22b369a7fb61d52c4d40da6b0fdc21f6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_22b369a7fb61d52c4d40da6b0fdc21f6,
        type_description_1,
        par_self,
        par_enums,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_22b369a7fb61d52c4d40da6b0fdc21f6 == cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6);
        cache_frame_22b369a7fb61d52c4d40da6b0fdc21f6 = NULL;
    }

    assertFrameObject(frame_22b369a7fb61d52c4d40da6b0fdc21f6);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_7f9e4ec31fee00f805cf32752e1ce6c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8)) {
        Py_XDECREF(cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8 = MAKE_FUNCTION_FRAME(tstate, codeobj_7f9e4ec31fee00f805cf32752e1ce6c8, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8->m_type_description == NULL);
    frame_7f9e4ec31fee00f805cf32752e1ce6c8 = cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7f9e4ec31fee00f805cf32752e1ce6c8);
    assert(Py_REFCNT(frame_7f9e4ec31fee00f805cf32752e1ce6c8) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[173]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1468;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_list_element_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[173]);
        if (tmp_list_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1469;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_LIST_EMPTY(1);
        PyList_SET_ITEM(tmp_return_value, 0, tmp_list_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[174]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1471;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7f9e4ec31fee00f805cf32752e1ce6c8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7f9e4ec31fee00f805cf32752e1ce6c8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7f9e4ec31fee00f805cf32752e1ce6c8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7f9e4ec31fee00f805cf32752e1ce6c8,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_7f9e4ec31fee00f805cf32752e1ce6c8 == cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8);
        cache_frame_7f9e4ec31fee00f805cf32752e1ce6c8 = NULL;
    }

    assertFrameObject(frame_7f9e4ec31fee00f805cf32752e1ce6c8);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_length_arg = NULL;
    PyObject *var__disable_warnings = NULL;
    PyObject *var_values = NULL;
    PyObject *var_objects = NULL;
    PyObject *var_convert_unicode = NULL;
    PyObject *var_e = NULL;
    PyObject *var__expect_unicode = NULL;
    PyObject *var_length = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_796bc91f48f21302ef5b98f3e2483489;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_res;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_796bc91f48f21302ef5b98f3e2483489 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_796bc91f48f21302ef5b98f3e2483489)) {
        Py_XDECREF(cache_frame_796bc91f48f21302ef5b98f3e2483489);

#if _DEBUG_REFCOUNTS
        if (cache_frame_796bc91f48f21302ef5b98f3e2483489 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_796bc91f48f21302ef5b98f3e2483489 = MAKE_FUNCTION_FRAME(tstate, codeobj_796bc91f48f21302ef5b98f3e2483489, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_796bc91f48f21302ef5b98f3e2483489->m_type_description == NULL);
    frame_796bc91f48f21302ef5b98f3e2483489 = cache_frame_796bc91f48f21302ef5b98f3e2483489;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_796bc91f48f21302ef5b98f3e2483489);
    assert(Py_REFCNT(frame_796bc91f48f21302ef5b98f3e2483489) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[154]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1481;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1481;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_1, mod_consts[175]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1481;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[176], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1481;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[154]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1482;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1482;
        tmp_assattr_value_2 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_2, mod_consts[177]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assattr_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1482;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[178], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1482;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_3 = par_kw;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[154]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1483;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1483;
        tmp_assattr_value_3 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_3, mod_consts[179]);

        Py_DECREF(tmp_called_value_3);
        if (tmp_assattr_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1483;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[180], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1483;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[154]);
        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1484;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[181];
        tmp_args_element_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_2 == NULL)) {
            tmp_args_element_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1484;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1484;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_4 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        if (tmp_assattr_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1484;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[183], tmp_assattr_value_4);
        Py_DECREF(tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1484;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_5 = par_kw;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[154]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1485;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[22];
        tmp_args_element_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_4 == NULL)) {
            tmp_args_element_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1485;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1485;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1485;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_length_arg == NULL);
        var_length_arg = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_6 = par_kw;
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[154]);
        if (tmp_called_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1486;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_5 = mod_consts[184];
        tmp_args_element_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_6 == NULL)) {
            tmp_args_element_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_args_element_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_6);

            exception_lineno = 1486;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1486;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assattr_value_5 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_6, call_args);
        }

        Py_DECREF(tmp_called_value_6);
        if (tmp_assattr_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1486;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_5, mod_consts[185], tmp_assattr_value_5);
        Py_DECREF(tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1486;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_7 = par_kw;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[154]);
        if (tmp_called_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1487;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1487;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_7, mod_consts[186]);

        Py_DECREF(tmp_called_value_7);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1487;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var__disable_warnings == NULL);
        var__disable_warnings = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_enums);
        tmp_args_element_value_7 = par_enums;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_8 = par_kw;
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1488;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[187],
                call_args
            );
        }

        if (tmp_iter_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1488;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_2;
        }
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1488;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooN";
            exception_lineno = 1488;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 2);
        if (tmp_assign_source_5 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooN";
            exception_lineno = 1488;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED(tstate);

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED(tstate);
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooN";
                    exception_lineno = 1488;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[188];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooN";
            exception_lineno = 1488;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
        assert(var_values == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_values = tmp_assign_source_6;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
        assert(var_objects == NULL);
        Py_INCREF(tmp_assign_source_7);
        var_objects = tmp_assign_source_7;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_args_element_value_11;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(var_values);
        tmp_args_element_value_9 = var_values;
        CHECK_OBJECT(var_objects);
        tmp_args_element_value_10 = var_objects;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_11 = par_kw;
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1489;
        {
            PyObject *call_args[] = {tmp_args_element_value_9, tmp_args_element_value_10, tmp_args_element_value_11};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS3(
                tstate,
                tmp_called_instance_2,
                mod_consts[189],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1489;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_8 = par_kw;
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[154]);
        if (tmp_called_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1491;
        tmp_assign_source_8 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_8, mod_consts[190]);

        Py_DECREF(tmp_called_value_8);
        if (tmp_assign_source_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_convert_unicode == NULL);
        var_convert_unicode = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_9 = par_kw;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[154]);
        if (tmp_called_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1492;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1492;
        tmp_assattr_value_6 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_9, mod_consts[191]);

        Py_DECREF(tmp_called_value_9);
        if (tmp_assattr_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1492;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_6, mod_consts[192], tmp_assattr_value_6);
        Py_DECREF(tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1492;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_convert_unicode);
        tmp_cmp_expr_left_1 = var_convert_unicode;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_assign_source_9;
        tmp_assign_source_9 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_expression_value_10;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_iter_arg_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[174]);
        if (tmp_iter_arg_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1495;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = MAKE_ITERATOR(tstate, tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1495;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_10;
    }
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_value_value_1;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_value_value_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_11 = ITERATOR_NEXT(tmp_value_value_1);
        if (tmp_assign_source_11 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooN";
            exception_lineno = 1495;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_11;
            Py_XDECREF(old);
        }

    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        tmp_cmp_expr_left_2 = exception_keeper_type_3;
        tmp_cmp_expr_right_2 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tstate, tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        nuitka_bool tmp_assign_source_12;
        tmp_assign_source_12 = NUITKA_BOOL_TRUE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_12;
    }
    Py_DECREF(exception_keeper_type_3);
    Py_XDECREF(exception_keeper_value_3);
    Py_XDECREF(exception_keeper_tb_3);
    goto loop_end_1;
    goto branch_end_2;
    branch_no_2:;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    branch_end_2:;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_13 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_e;
            var_e = tmp_assign_source_13;
            Py_INCREF(var_e);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(var_e);
        tmp_isinstance_inst_1 = var_e;
        tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_11 == NULL)) {
            tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1498;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_4;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[49]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1498;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_4;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1498;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_4;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_14;
        tmp_assign_source_14 = Py_True;
        assert(var__expect_unicode == NULL);
        Py_INCREF(tmp_assign_source_14);
        var__expect_unicode = tmp_assign_source_14;
    }
    goto loop_end_1;
    branch_no_3:;
    if (CONSIDER_THREADING(tstate) == false) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


        exception_lineno = 1495;
        type_description_1 = "oooooooooooN";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        bool tmp_condition_result_4;
        nuitka_bool tmp_cmp_expr_left_3;
        nuitka_bool tmp_cmp_expr_right_3;
        assert(tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_cmp_expr_left_3 = tmp_for_loop_1__break_indicator;
        tmp_cmp_expr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = (tmp_cmp_expr_left_3 == tmp_cmp_expr_right_3) ? true : false;
        if (tmp_condition_result_4 != false) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = Py_False;
        {
            PyObject *old = var__expect_unicode;
            var__expect_unicode = tmp_assign_source_15;
            Py_INCREF(var__expect_unicode);
            Py_XDECREF(old);
        }

    }
    branch_no_4:;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(var_convert_unicode);
        tmp_assign_source_16 = var_convert_unicode;
        assert(var__expect_unicode == NULL);
        Py_INCREF(tmp_assign_source_16);
        var__expect_unicode = tmp_assign_source_16;
    }
    branch_end_1:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[174]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1506;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1506;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_value_10;
        PyObject *tmp_args_element_value_12;
        tmp_called_value_10 = LOOKUP_BUILTIN(mod_consts[193]);
        assert(tmp_called_value_10 != NULL);
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_expression_value_13;
            CHECK_OBJECT(par_self);
            tmp_expression_value_13 = par_self;
            tmp_iter_arg_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[174]);
            if (tmp_iter_arg_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1507;
                type_description_1 = "oooooooooooN";
                goto try_except_handler_6;
            }
            tmp_assign_source_18 = MAKE_ITERATOR(tstate, tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1507;
                type_description_1 = "oooooooooooN";
                goto try_except_handler_6;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_18;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_args_element_value_12 = MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_7;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1507;
        tmp_assign_source_17 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_10, tmp_args_element_value_12);
        Py_DECREF(tmp_args_element_value_12);
        if (tmp_assign_source_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1507;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_6;
        }
        assert(tmp_assign_unpack_1__assign_source == NULL);
        tmp_assign_unpack_1__assign_source = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assattr_value_7;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT(tmp_assign_unpack_1__assign_source);
        tmp_assattr_value_7 = tmp_assign_unpack_1__assign_source;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_7, mod_consts[194], tmp_assattr_value_7);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1507;
            type_description_1 = "oooooooooooN";
            goto try_except_handler_6;
        }
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_assign_unpack_1__assign_source);
    tmp_assign_unpack_1__assign_source = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT(tmp_assign_unpack_1__assign_source);
        tmp_assign_source_19 = tmp_assign_unpack_1__assign_source;
        assert(var_length == NULL);
        Py_INCREF(tmp_assign_source_19);
        var_length = tmp_assign_source_19;
    }
    CHECK_OBJECT(tmp_assign_unpack_1__assign_source);
    Py_DECREF(tmp_assign_unpack_1__assign_source);
    tmp_assign_unpack_1__assign_source = NULL;
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assattr_value_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_value_8 = mod_consts[52];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_8, mod_consts[194], tmp_assattr_value_8);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = mod_consts[52];
        assert(var_length == NULL);
        Py_INCREF(tmp_assign_source_20);
        var_length = tmp_assign_source_20;
    }
    branch_end_5:;
    {
        bool tmp_condition_result_6;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        CHECK_OBJECT(var_length_arg);
        tmp_cmp_expr_left_4 = var_length_arg;
        tmp_cmp_expr_right_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_cmp_expr_right_4 == NULL)) {
            tmp_cmp_expr_right_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_cmp_expr_right_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = (tmp_cmp_expr_left_4 != tmp_cmp_expr_right_4) ? true : false;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[176]);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1512;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 1512;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        bool tmp_condition_result_8;
        PyObject *tmp_operand_value_1;
        CHECK_OBJECT(var__disable_warnings);
        tmp_operand_value_1 = var__disable_warnings;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1513;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_8 != false) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_3 == NULL)) {
            tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_called_instance_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1514;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tstate,
            tmp_called_instance_3,
            mod_consts[95],
            PyTuple_GET_ITEM(mod_consts[195], 0)
        );

        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_8:;
    goto branch_end_7;
    branch_no_7:;
    {
        nuitka_bool tmp_condition_result_9;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        CHECK_OBJECT(var__disable_warnings);
        tmp_operand_value_2 = var__disable_warnings;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_length_arg);
        tmp_cmp_expr_left_5 = var_length_arg;
        CHECK_OBJECT(var_length);
        tmp_cmp_expr_right_5 = var_length;
        tmp_and_right_value_1 = RICH_COMPARE_LT_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_9 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        tmp_mod_expr_left_1 = mod_consts[196];
        CHECK_OBJECT(var_length_arg);
        tmp_tuple_element_1 = var_length_arg;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_length);
        tmp_tuple_element_1 = var_length;
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 1, tmp_tuple_element_1);
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1525;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1522;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_ValueError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1522;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooN";
        goto frame_exception_exit_1;
    }
    branch_no_9:;
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(var_length_arg);
        tmp_assign_source_21 = var_length_arg;
        {
            PyObject *old = var_length;
            assert(old != NULL);
            var_length = tmp_assign_source_21;
            Py_INCREF(var_length);
            Py_DECREF(old);
        }

    }
    branch_end_7:;
    branch_no_6:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_expression_value_15 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[197]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = Py_None;
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_ass_subscript_2;
        tmp_ass_subvalue_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[198]);
        if (tmp_ass_subscribed_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = Py_None;
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subscribed_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_3;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1531;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_17 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1531;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[70]);
        Py_DECREF(tmp_expression_value_17);
        if (tmp_called_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1531;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_length);
        tmp_kw_call_value_0_1 = var_length;
        if (var__expect_unicode == NULL) {
            Py_DECREF(tmp_called_value_11);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[24]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1532;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_value_1_1 = var__expect_unicode;
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1531;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_3 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_11, kw_values, mod_consts[200]);
        }

        Py_DECREF(tmp_called_value_11);
        if (tmp_call_result_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1531;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_18 = par_self;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_18, mod_consts[173]);
        if (tmp_attribute_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1535;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 1535;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_called_value_12;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_called_value_13;
        PyObject *tmp_expression_value_20;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_expression_value_22;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_19 = par_kw;
        tmp_called_value_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_19, mod_consts[67]);
        if (tmp_called_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[97];
        CHECK_OBJECT(par_self);
        tmp_expression_value_22 = par_self;
        tmp_expression_value_21 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_22, mod_consts[173]);
        if (tmp_expression_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_20 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_21, mod_consts[201]);
        Py_DECREF(tmp_expression_value_21);
        if (tmp_expression_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_13 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_20, mod_consts[202]);
        Py_DECREF(tmp_expression_value_20);
        if (tmp_called_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1536;
        tmp_args_element_value_14 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_13);
        Py_DECREF(tmp_called_value_13);
        if (tmp_args_element_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1536;
        {
            PyObject *call_args[] = {tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_12, call_args);
        }

        Py_DECREF(tmp_called_value_12);
        Py_DECREF(tmp_args_element_value_14);
        if (tmp_call_result_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1536;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    branch_no_10:;
    {
        PyObject *tmp_called_value_14;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_call_result_5;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_16;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_called_value_18;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_kw_call_dict_value_4_1;
        PyObject *tmp_called_value_19;
        PyObject *tmp_expression_value_28;
        PyObject *tmp_kw_call_dict_value_5_1;
        PyObject *tmp_called_value_20;
        PyObject *tmp_expression_value_29;
        tmp_expression_value_23 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_expression_value_23 == NULL)) {
            tmp_expression_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_expression_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1537;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_14 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_23, mod_consts[70]);
        if (tmp_called_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1537;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_24 = par_kw;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_24, mod_consts[154]);
        if (tmp_called_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);

            exception_lineno = 1539;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1539;
        tmp_kw_call_dict_value_0_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_15, mod_consts[203]);

        Py_DECREF(tmp_called_value_15);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);

            exception_lineno = 1539;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_25 = par_kw;
        tmp_called_value_16 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_25, mod_consts[154]);
        if (tmp_called_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1540;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1540;
        tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_16, mod_consts[204]);

        Py_DECREF(tmp_called_value_16);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1540;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_26 = par_kw;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_26, mod_consts[154]);
        if (tmp_called_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 1541;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1541;
        tmp_kw_call_dict_value_2_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_17, mod_consts[205]);

        Py_DECREF(tmp_called_value_17);
        if (tmp_kw_call_dict_value_2_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 1541;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_27 = par_kw;
        tmp_called_value_18 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_27, mod_consts[154]);
        if (tmp_called_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 1542;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1542;
        tmp_kw_call_dict_value_3_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_18, mod_consts[206]);

        Py_DECREF(tmp_called_value_18);
        if (tmp_kw_call_dict_value_3_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 1542;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_28 = par_kw;
        tmp_called_value_19 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_28, mod_consts[154]);
        if (tmp_called_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);

            exception_lineno = 1543;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1543;
        tmp_kw_call_dict_value_4_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_19, mod_consts[207]);

        Py_DECREF(tmp_called_value_19);
        if (tmp_kw_call_dict_value_4_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);

            exception_lineno = 1543;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_29 = par_kw;
        tmp_called_value_20 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_29, mod_consts[154]);
        if (tmp_called_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);
            Py_DECREF(tmp_kw_call_dict_value_4_1);

            exception_lineno = 1544;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1544;
        tmp_kw_call_dict_value_5_1 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_20, mod_consts[208]);

        Py_DECREF(tmp_called_value_20);
        if (tmp_kw_call_dict_value_5_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);
            Py_DECREF(tmp_kw_call_dict_value_4_1);

            exception_lineno = 1544;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_796bc91f48f21302ef5b98f3e2483489->m_frame.f_lineno = 1537;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[6] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1, tmp_kw_call_dict_value_4_1, tmp_kw_call_dict_value_5_1};
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_14, args, kw_values, mod_consts[209]);
        }

        Py_DECREF(tmp_called_value_14);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        Py_DECREF(tmp_kw_call_dict_value_2_1);
        Py_DECREF(tmp_kw_call_dict_value_3_1);
        Py_DECREF(tmp_kw_call_dict_value_4_1);
        Py_DECREF(tmp_kw_call_dict_value_5_1);
        if (tmp_call_result_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1537;
            type_description_1 = "oooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_796bc91f48f21302ef5b98f3e2483489, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_796bc91f48f21302ef5b98f3e2483489->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_796bc91f48f21302ef5b98f3e2483489, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_796bc91f48f21302ef5b98f3e2483489,
        type_description_1,
        par_self,
        par_enums,
        par_kw,
        var_length_arg,
        var__disable_warnings,
        var_values,
        var_objects,
        var_convert_unicode,
        var_e,
        var__expect_unicode,
        var_length,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_796bc91f48f21302ef5b98f3e2483489 == cache_frame_796bc91f48f21302ef5b98f3e2483489) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_796bc91f48f21302ef5b98f3e2483489);
        cache_frame_796bc91f48f21302ef5b98f3e2483489 = NULL;
    }

    assertFrameObject(frame_796bc91f48f21302ef5b98f3e2483489);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_length_arg);
    var_length_arg = NULL;
    CHECK_OBJECT(var__disable_warnings);
    Py_DECREF(var__disable_warnings);
    var__disable_warnings = NULL;
    CHECK_OBJECT(var_values);
    Py_DECREF(var_values);
    var_values = NULL;
    CHECK_OBJECT(var_objects);
    Py_DECREF(var_objects);
    var_objects = NULL;
    Py_XDECREF(var_convert_unicode);
    var_convert_unicode = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    Py_XDECREF(var__expect_unicode);
    var__expect_unicode = NULL;
    CHECK_OBJECT(var_length);
    Py_DECREF(var_length);
    var_length = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_length_arg);
    var_length_arg = NULL;
    Py_XDECREF(var__disable_warnings);
    var__disable_warnings = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_objects);
    var_objects = NULL;
    Py_XDECREF(var_convert_unicode);
    var_convert_unicode = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    Py_XDECREF(var__expect_unicode);
    var__expect_unicode = NULL;
    Py_XDECREF(var_length);
    var_length = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}



#if 1
struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals {
    PyObject *var_x;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};
#endif

static PyObject *sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_context(PyThreadState *tstate, struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

#if 1
    // Heap access.
    struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals *generator_heap = (struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;
#endif

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_x = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(tstate, codeobj_a2b2d3ce4f7ea74f31f84a13f2693fb3, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_m_frame->m_type_description == NULL);
    generator->m_frame = cache_m_frame;
    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

    Nuitka_SetFrameGenerator(generator->m_frame, (PyObject *)generator);

    assert(generator->m_frame->m_frame.f_back == NULL);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackGeneratorCompiledFrame(tstate, generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2);

    // Store currently existing exception as the one to publish again when we
    // yield or yield from.
    STORE_GENERATOR_EXCEPTION(tstate, generator);

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 1507;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_x;
            generator_heap->var_x = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_x);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_len_arg_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_x);
        tmp_len_arg_1 = generator_heap->var_x;
        tmp_expression_value_1 = BUILTIN_LEN(tstate, tmp_len_arg_1);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1507;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1507;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
        Py_DECREF(tmp_yield_result_1);
    }
    if (CONSIDER_THREADING(tstate) == false) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 1507;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    // Release exception attached to the frame
    DROP_GENERATOR_EXCEPTION(generator);



    goto frame_no_exception_1;
    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(tstate, generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_x
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TYPE_F(generator));
#endif
    Py_CLEAR(EXC_VALUE_F(generator));
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif
#endif

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_x);
    generator_heap->var_x = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_x);
    generator_heap->var_x = NULL;


    return NULL;

    function_exception_exit:

    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(tstate, generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_context,
        module_sqlalchemy$sql$sqltypes,
        mod_consts[211],
#if PYTHON_VERSION >= 0x350
        mod_consts[212],
#endif
        codeobj_a2b2d3ce4f7ea74f31f84a13f2693fb3,
        closure,
        1,
#if 1
        sizeof(struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals)
#else
        0
#endif
    );
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var__members = NULL;
    PyObject *var_aliases = NULL;
    PyObject *var_members = NULL;
    PyObject *var_values = NULL;
    PyObject *var_objects = NULL;
    PyObject *outline_0_var_n = NULL;
    PyObject *outline_0_var_v = NULL;
    PyObject *outline_1_var_k = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_a29865fc3b7ccc8eed358a41946fb965;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a29865fc3b7ccc8eed358a41946fb965 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a29865fc3b7ccc8eed358a41946fb965)) {
        Py_XDECREF(cache_frame_a29865fc3b7ccc8eed358a41946fb965);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a29865fc3b7ccc8eed358a41946fb965 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a29865fc3b7ccc8eed358a41946fb965 = MAKE_FUNCTION_FRAME(tstate, codeobj_a29865fc3b7ccc8eed358a41946fb965, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a29865fc3b7ccc8eed358a41946fb965->m_type_description == NULL);
    frame_a29865fc3b7ccc8eed358a41946fb965 = cache_frame_a29865fc3b7ccc8eed358a41946fb965;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a29865fc3b7ccc8eed358a41946fb965);
    assert(Py_REFCNT(frame_a29865fc3b7ccc8eed358a41946fb965) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_enums);
        tmp_operand_value_1 = par_enums;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1548;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        tmp_cmp_expr_left_1 = mod_consts[213];
        CHECK_OBJECT(par_kw);
        tmp_cmp_expr_right_1 = par_kw;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1548;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? true : false;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[154]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1549;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1549;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS1(tstate, tmp_called_value_1, mod_consts[214]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1549;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_enums;
            assert(old != NULL);
            par_enums = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        bool tmp_and_left_value_2;
        bool tmp_and_right_value_2;
        PyObject *tmp_cmp_expr_left_2;
        nuitka_digit tmp_cmp_expr_right_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_enums);
        tmp_len_arg_1 = par_enums;
        tmp_cmp_expr_left_2 = BUILTIN_LEN(tstate, tmp_len_arg_1);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1551;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = 1;
        tmp_and_left_value_2 = RICH_COMPARE_EQ_CBOOL_LONG_DIGIT(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        tmp_and_left_truth_2 = tmp_and_left_value_2 != false ? 1 : 0;
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_enums);
        tmp_expression_value_3 = par_enums;
        tmp_subscript_value_1 = mod_consts[52];
        tmp_expression_value_2 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_3, tmp_subscript_value_1, 0);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1551;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_2, mod_consts[215]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1551;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? true : false;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_enums);
        tmp_expression_value_4 = par_enums;
        tmp_subscript_value_2 = mod_consts[52];
        tmp_assattr_value_1 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_4, tmp_subscript_value_2, 0);
        if (tmp_assattr_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1552;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[173], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1552;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[173]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1554;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[215]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1554;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var__members == NULL);
        var__members = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_value_2;
            PyObject *tmp_expression_value_7;
            CHECK_OBJECT(var__members);
            tmp_expression_value_7 = var__members;
            tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[216]);
            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1556;
            tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_2);
            Py_DECREF(tmp_called_value_2);
            if (tmp_iter_arg_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_4 = MAKE_ITERATOR(tstate, tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            tmp_assign_source_5 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_5;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_6 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_6 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooooooo";
                    exception_lineno = 1556;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_iter_arg_2 = tmp_listcomp_1__iter_value_0;
            tmp_assign_source_7 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__source_iter;
                tmp_listcomp$tuple_unpack_1__source_iter = tmp_assign_source_7;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_8 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 2);
            if (tmp_assign_source_8 == NULL) {
                if (!HAS_ERROR_OCCURRED(tstate)) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1556;
                goto try_except_handler_5;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_1;
                tmp_listcomp$tuple_unpack_1__element_1 = tmp_assign_source_8;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_2 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 2);
            if (tmp_assign_source_9 == NULL) {
                if (!HAS_ERROR_OCCURRED(tstate)) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1556;
                goto try_except_handler_5;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_2;
                tmp_listcomp$tuple_unpack_1__element_2 = tmp_assign_source_9;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_iterator_name_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED(tstate);

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED(tstate);
                    } else {
                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);

                        type_description_1 = "oooooooo";
                        exception_lineno = 1556;
                        goto try_except_handler_5;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[188];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_1 = "oooooooo";
                exception_lineno = 1556;
                goto try_except_handler_5;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_4;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_1);
            tmp_assign_source_10 = tmp_listcomp$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_0_var_n;
                outline_0_var_n = tmp_assign_source_10;
                Py_INCREF(outline_0_var_n);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_2);
            tmp_assign_source_11 = tmp_listcomp$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_0_var_v;
                outline_0_var_v = tmp_assign_source_11;
                Py_INCREF(outline_0_var_v);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            PyObject *tmp_expression_value_8;
            CHECK_OBJECT(outline_0_var_v);
            tmp_expression_value_8 = outline_0_var_v;
            tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[97]);
            if (tmp_cmp_expr_left_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT(outline_0_var_n);
            tmp_cmp_expr_right_3 = outline_0_var_n;
            tmp_condition_result_3 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            Py_DECREF(tmp_cmp_expr_left_3);
            if (tmp_condition_result_3 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
        }
        branch_yes_3:;
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_n);
            tmp_append_value_1 = outline_0_var_n;
            tmp_result = LIST_APPEND0(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1556;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
        }
        branch_no_3:;
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1556;
            type_description_1 = "oooooooo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assign_source_3 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_3);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var_n);
        outline_0_var_n = NULL;
        Py_XDECREF(outline_0_var_v);
        outline_0_var_v = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_n);
        outline_0_var_n = NULL;
        Py_XDECREF(outline_0_var_v);
        outline_0_var_v = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1556;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert(var_aliases == NULL);
        var_aliases = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        PyObject *tmp_expression_value_9;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_cmp_expr_left_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[185]);
        if (tmp_cmp_expr_left_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1557;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_cmp_expr_right_4 == NULL)) {
            tmp_cmp_expr_right_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_cmp_expr_right_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_4);

            exception_lineno = 1557;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_3 = (tmp_cmp_expr_left_4 == tmp_cmp_expr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_4);
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT(var_aliases);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_aliases);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1557;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_4 = tmp_and_left_value_3;
        and_end_3:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_expression_value_12;
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[217]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_left_1 = mod_consts[218];
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_expression_value_11 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[173]);
        if (tmp_expression_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1562;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[201]);
        Py_DECREF(tmp_expression_value_11);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1562;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_aliases);
        tmp_tuple_element_1 = var_aliases;
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 1, tmp_tuple_element_1);
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1562;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1558;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_4:;
    {
        bool tmp_condition_result_5;
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        PyObject *tmp_expression_value_13;
        CHECK_OBJECT(par_self);
        tmp_expression_value_13 = par_self;
        tmp_cmp_expr_left_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[185]);
        if (tmp_cmp_expr_left_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1564;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_5 = Py_True;
        tmp_condition_result_5 = (tmp_cmp_expr_left_5 == tmp_cmp_expr_right_5) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_5);
        if (tmp_condition_result_5 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_value_4;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[219]);

        if (unlikely(tmp_called_value_4 == NULL)) {
            tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[219]);
        }

        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1566;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_value_5;
            PyObject *tmp_expression_value_14;
            CHECK_OBJECT(var__members);
            tmp_expression_value_14 = var__members;
            tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[216]);
            if (tmp_called_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1567;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1567;
            tmp_iter_arg_3 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_5);
            Py_DECREF(tmp_called_value_5);
            if (tmp_iter_arg_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1567;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_13 = MAKE_ITERATOR(tstate, tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_13 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1566;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_13;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_args_element_value_2 = MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_6;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_2:;
        frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1566;
        tmp_assign_source_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_4, tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1566;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_members == NULL);
        var_members = tmp_assign_source_12;
    }
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT(var__members);
        tmp_assign_source_14 = var__members;
        assert(var_members == NULL);
        Py_INCREF(tmp_assign_source_14);
        var_members = tmp_assign_source_14;
    }
    branch_end_5:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_15 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[180]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1571;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1571;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_17;
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[180]);
        if (tmp_called_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_17 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[173]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_6);

            exception_lineno = 1572;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_a29865fc3b7ccc8eed358a41946fb965->m_frame.f_lineno = 1572;
        tmp_assign_source_15 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_6, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_6);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_values == NULL);
        var_values = tmp_assign_source_15;
    }
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(var_members);
        tmp_list_arg_1 = var_members;
        tmp_assign_source_16 = MAKE_LIST(tstate, tmp_list_arg_1);
        if (tmp_assign_source_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1574;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_values == NULL);
        var_values = tmp_assign_source_16;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_17;
        // Tried code:
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_iter_arg_4;
            if (var_members == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[220]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_7;
            }

            tmp_iter_arg_4 = var_members;
            tmp_assign_source_18 = MAKE_ITERATOR(tstate, tmp_iter_arg_4);
            if (tmp_assign_source_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_7;
            }
            assert(tmp_listcomp_2__$0 == NULL);
            tmp_listcomp_2__$0 = tmp_assign_source_18;
        }
        {
            PyObject *tmp_assign_source_19;
            tmp_assign_source_19 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_2__contraction == NULL);
            tmp_listcomp_2__contraction = tmp_assign_source_19;
        }
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_20;
            CHECK_OBJECT(tmp_listcomp_2__$0);
            tmp_next_source_2 = tmp_listcomp_2__$0;
            tmp_assign_source_20 = ITERATOR_NEXT(tmp_next_source_2);
            if (tmp_assign_source_20 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_2;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooooooo";
                    exception_lineno = 1575;
                    goto try_except_handler_8;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_20;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_21;
            CHECK_OBJECT(tmp_listcomp_2__iter_value_0);
            tmp_assign_source_21 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var_k;
                outline_1_var_k = tmp_assign_source_21;
                Py_INCREF(outline_1_var_k);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_expression_value_18;
            PyObject *tmp_subscript_value_3;
            CHECK_OBJECT(tmp_listcomp_2__contraction);
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            if (var_members == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[220]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
            }

            tmp_expression_value_18 = var_members;
            CHECK_OBJECT(outline_1_var_k);
            tmp_subscript_value_3 = outline_1_var_k;
            tmp_append_value_2 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_18, tmp_subscript_value_3);
            if (tmp_append_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
            }
            tmp_result = LIST_APPEND1(tmp_append_list_2, tmp_append_value_2);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
            }
        }
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1575;
            type_description_1 = "oooooooo";
            goto try_except_handler_8;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        tmp_assign_source_17 = tmp_listcomp_2__contraction;
        Py_INCREF(tmp_assign_source_17);
        goto try_return_handler_8;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        goto try_return_handler_7;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_XDECREF(outline_1_var_k);
        outline_1_var_k = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_1_var_k);
        outline_1_var_k = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 1575;
        goto frame_exception_exit_1;
        outline_result_3:;
        assert(var_objects == NULL);
        var_objects = tmp_assign_source_17;
    }
    {
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT(var_values);
        tmp_tuple_element_2 = var_values;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_objects);
        tmp_tuple_element_2 = var_objects;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_2);
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[173], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1578;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT(par_enums);
        tmp_tuple_element_3 = par_enums;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_3);
        CHECK_OBJECT(par_enums);
        tmp_tuple_element_3 = par_enums;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_3);
        goto frame_return_exit_1;
    }
    branch_end_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a29865fc3b7ccc8eed358a41946fb965, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a29865fc3b7ccc8eed358a41946fb965->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a29865fc3b7ccc8eed358a41946fb965, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a29865fc3b7ccc8eed358a41946fb965,
        type_description_1,
        par_self,
        par_enums,
        par_kw,
        var__members,
        var_aliases,
        var_members,
        var_values,
        var_objects
    );


    // Release cached frame if used for exception.
    if (frame_a29865fc3b7ccc8eed358a41946fb965 == cache_frame_a29865fc3b7ccc8eed358a41946fb965) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a29865fc3b7ccc8eed358a41946fb965);
        cache_frame_a29865fc3b7ccc8eed358a41946fb965 = NULL;
    }

    assertFrameObject(frame_a29865fc3b7ccc8eed358a41946fb965);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    par_enums = NULL;
    Py_XDECREF(var__members);
    var__members = NULL;
    Py_XDECREF(var_aliases);
    var_aliases = NULL;
    Py_XDECREF(var_members);
    var_members = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_objects);
    var_objects = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_enums);
    par_enums = NULL;
    Py_XDECREF(var__members);
    var__members = NULL;
    Py_XDECREF(var_aliases);
    var_aliases = NULL;
    Py_XDECREF(var_members);
    var_members = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}



#if 1
struct sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_locals {
    PyObject *var_n;
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};
#endif

static PyObject *sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_context(PyThreadState *tstate, struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

#if 1
    // Heap access.
    struct sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_locals *generator_heap = (struct sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;
#endif

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_n = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(tstate, codeobj_26fa4d68edd53df5057cfb170821d414, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_m_frame->m_type_description == NULL);
    generator->m_frame = cache_m_frame;
    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

    Nuitka_SetFrameGenerator(generator->m_frame, (PyObject *)generator);

    assert(generator->m_frame->m_frame.f_back == NULL);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackGeneratorCompiledFrame(tstate, generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2);

    // Store currently existing exception as the one to publish again when we
    // yield or yield from.
    STORE_GENERATOR_EXCEPTION(tstate, generator);

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 1566;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1566;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 1566;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 1566;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED(tstate);

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED(tstate);
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                    generator_heap->type_description_1 = "Noo";
                    generator_heap->exception_lineno = 1566;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(generator_heap->tmp_iterator_attempt);

            generator_heap->exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            generator_heap->exception_value = mod_consts[188];
            Py_INCREF(generator_heap->exception_value);
            generator_heap->exception_tb = NULL;

            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 1566;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_n;
            generator_heap->var_n = tmp_assign_source_5;
            Py_INCREF(generator_heap->var_n);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_6;
            Py_INCREF(generator_heap->var_v);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(generator_heap->var_v);
        tmp_expression_value_1 = generator_heap->var_v;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[97]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1567;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(generator_heap->var_n);
        tmp_cmp_expr_right_1 = generator_heap->var_n;
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1567;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        PyObject *tmp_tuple_element_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_n);
        tmp_tuple_element_1 = generator_heap->var_n;
        tmp_expression_value_2 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_expression_value_2, 0, tmp_tuple_element_1);
        CHECK_OBJECT(generator_heap->var_v);
        tmp_tuple_element_1 = generator_heap->var_v;
        PyTuple_SET_ITEM0(tmp_expression_value_2, 1, tmp_tuple_element_1);
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_2;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1567;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
        Py_DECREF(tmp_yield_result_1);
    }
    branch_no_1:;
    if (CONSIDER_THREADING(tstate) == false) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 1566;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    // Release exception attached to the frame
    DROP_GENERATOR_EXCEPTION(generator);



    goto frame_no_exception_1;
    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(tstate, generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_n,
            generator_heap->var_v
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TYPE_F(generator));
#endif
    Py_CLEAR(EXC_VALUE_F(generator));
#if PYTHON_VERSION < 0x3b0
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif
#endif

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_n);
    generator_heap->var_n = NULL;
    Py_XDECREF(generator_heap->var_v);
    generator_heap->var_v = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_n);
    generator_heap->var_n = NULL;
    Py_XDECREF(generator_heap->var_v);
    generator_heap->var_v = NULL;


    return NULL;

    function_exception_exit:

    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(tstate, generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_context,
        module_sqlalchemy$sql$sqltypes,
        mod_consts[211],
#if PYTHON_VERSION >= 0x350
        mod_consts[221],
#endif
        codeobj_26fa4d68edd53df5057cfb170821d414,
        closure,
        1,
#if 1
        sizeof(struct sqlalchemy$sql$sqltypes$$$function__69__parse_into_values$$$genexpr__1_genexpr_locals)
#else
        0
#endif
    );
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_values = python_pars[1];
    PyObject *par_objects = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *outline_0_var_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_0a4371321ab570fbf59be00f80d01c5c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_0a4371321ab570fbf59be00f80d01c5c = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0a4371321ab570fbf59be00f80d01c5c)) {
        Py_XDECREF(cache_frame_0a4371321ab570fbf59be00f80d01c5c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0a4371321ab570fbf59be00f80d01c5c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0a4371321ab570fbf59be00f80d01c5c = MAKE_FUNCTION_FRAME(tstate, codeobj_0a4371321ab570fbf59be00f80d01c5c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_0a4371321ab570fbf59be00f80d01c5c->m_type_description == NULL);
    frame_0a4371321ab570fbf59be00f80d01c5c = cache_frame_0a4371321ab570fbf59be00f80d01c5c;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_0a4371321ab570fbf59be00f80d01c5c);
    assert(Py_REFCNT(frame_0a4371321ab570fbf59be00f80d01c5c) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_values);
        tmp_list_arg_1 = par_values;
        tmp_assattr_value_1 = MAKE_LIST(tstate, tmp_list_arg_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[174], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_dict_seq_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_1 = (PyObject *)&PyZip_Type;
        tmp_called_value_2 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(par_objects);
        tmp_args_element_value_2 = par_objects;
        frame_0a4371321ab570fbf59be00f80d01c5c->m_frame.f_lineno = 1584;
        tmp_args_element_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(par_values);
        tmp_args_element_value_4 = par_values;
        frame_0a4371321ab570fbf59be00f80d01c5c->m_frame.f_lineno = 1584;
        tmp_args_element_value_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_4);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 1584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_0a4371321ab570fbf59be00f80d01c5c->m_frame.f_lineno = 1584;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_3};
            tmp_dict_seq_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_dict_seq_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = TO_DICT(tstate, tmp_dict_seq_1, NULL);
        Py_DECREF(tmp_dict_seq_1);
        if (tmp_assattr_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[197], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_dict_seq_2;
        PyObject *tmp_called_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_assattr_target_3;
        tmp_called_value_4 = (PyObject *)&PyZip_Type;
        CHECK_OBJECT(par_values);
        tmp_args_element_value_5 = par_values;
        CHECK_OBJECT(par_objects);
        tmp_args_element_value_6 = par_objects;
        frame_0a4371321ab570fbf59be00f80d01c5c->m_frame.f_lineno = 1586;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_dict_seq_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_4, call_args);
        }

        if (tmp_dict_seq_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1586;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_3 = TO_DICT(tstate, tmp_dict_seq_2, NULL);
        Py_DECREF(tmp_dict_seq_2);
        if (tmp_assattr_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1586;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[198], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1586;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_7;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[197]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1588;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[222]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1588;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(par_values);
            tmp_iter_arg_1 = par_values;
            tmp_assign_source_1 = MAKE_ITERATOR(tstate, tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1589;
                type_description_1 = "oooo";
                goto try_except_handler_1;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_2;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooo";
                    exception_lineno = 1589;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_4 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_value;
                outline_0_var_value = tmp_assign_source_4;
                Py_INCREF(outline_0_var_value);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_value);
            tmp_tuple_element_1 = outline_0_var_value;
            tmp_append_value_1 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_3;
                PyObject *tmp_expression_value_4;
                PyObject *tmp_subscript_value_1;
                PyObject *tmp_expression_value_5;
                PyObject *tmp_expression_value_6;
                PyObject *tmp_subscript_value_2;
                PyTuple_SET_ITEM0(tmp_append_value_1, 0, tmp_tuple_element_1);
                if (par_self == NULL) {

                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(tstate, exception_value);

                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }

                tmp_expression_value_4 = par_self;
                tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[197]);
                if (tmp_expression_value_3 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }
                if (par_self == NULL) {
                    Py_DECREF(tmp_expression_value_3);
                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(tstate, exception_value);

                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }

                tmp_expression_value_6 = par_self;
                tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[198]);
                if (tmp_expression_value_5 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_3);

                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }
                CHECK_OBJECT(outline_0_var_value);
                tmp_subscript_value_2 = outline_0_var_value;
                tmp_subscript_value_1 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_5, tmp_subscript_value_2);
                Py_DECREF(tmp_expression_value_5);
                if (tmp_subscript_value_1 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_3);

                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }
                tmp_tuple_element_1 = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_3, tmp_subscript_value_1);
                Py_DECREF(tmp_expression_value_3);
                Py_DECREF(tmp_subscript_value_1);
                if (tmp_tuple_element_1 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1590;
                    type_description_1 = "oooo";
                    goto tuple_build_exception_1;
                }
                PyTuple_SET_ITEM(tmp_append_value_1, 1, tmp_tuple_element_1);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_1:;
            Py_DECREF(tmp_append_value_1);
            goto try_except_handler_2;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1589;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
        }
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1589;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_args_element_value_7 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_args_element_value_7);
        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto try_return_handler_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        Py_XDECREF(outline_0_var_value);
        outline_0_var_value = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_1:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_value);
        outline_0_var_value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1589;
        goto frame_exception_exit_1;
        outline_result_1:;
        frame_0a4371321ab570fbf59be00f80d01c5c->m_frame.f_lineno = 1588;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_5, tmp_args_element_value_7);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1588;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0a4371321ab570fbf59be00f80d01c5c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0a4371321ab570fbf59be00f80d01c5c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0a4371321ab570fbf59be00f80d01c5c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0a4371321ab570fbf59be00f80d01c5c,
        type_description_1,
        par_self,
        par_values,
        par_objects,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_0a4371321ab570fbf59be00f80d01c5c == cache_frame_0a4371321ab570fbf59be00f80d01c5c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_0a4371321ab570fbf59be00f80d01c5c);
        cache_frame_0a4371321ab570fbf59be00f80d01c5c = NULL;
    }

    assertFrameObject(frame_0a4371321ab570fbf59be00f80d01c5c);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_values);
    Py_DECREF(par_values);
    CHECK_OBJECT(par_objects);
    Py_DECREF(par_objects);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_values);
    Py_DECREF(par_values);
    CHECK_OBJECT(par_objects);
    Py_DECREF(par_objects);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_edbbfc1e8b4d64da3fa598f7fda58c7d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d)) {
        Py_XDECREF(cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d = MAKE_FUNCTION_FRAME(tstate, codeobj_edbbfc1e8b4d64da3fa598f7fda58c7d, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d->m_type_description == NULL);
    frame_edbbfc1e8b4d64da3fa598f7fda58c7d = cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_edbbfc1e8b4d64da3fa598f7fda58c7d);
    assert(Py_REFCNT(frame_edbbfc1e8b4d64da3fa598f7fda58c7d) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[183]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1597;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_cmp_expr_right_1 == NULL)) {
            tmp_cmp_expr_right_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[182]);
        }

        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1597;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[223]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1598;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[183]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1600;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_edbbfc1e8b4d64da3fa598f7fda58c7d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_edbbfc1e8b4d64da3fa598f7fda58c7d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_edbbfc1e8b4d64da3fa598f7fda58c7d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_edbbfc1e8b4d64da3fa598f7fda58c7d,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_edbbfc1e8b4d64da3fa598f7fda58c7d == cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d);
        cache_frame_edbbfc1e8b4d64da3fa598f7fda58c7d = NULL;
    }

    assertFrameObject(frame_edbbfc1e8b4d64da3fa598f7fda58c7d);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__72_native(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5952bea9da3dc287ee9548270dd9ecec;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5952bea9da3dc287ee9548270dd9ecec = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5952bea9da3dc287ee9548270dd9ecec)) {
        Py_XDECREF(cache_frame_5952bea9da3dc287ee9548270dd9ecec);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5952bea9da3dc287ee9548270dd9ecec == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5952bea9da3dc287ee9548270dd9ecec = MAKE_FUNCTION_FRAME(tstate, codeobj_5952bea9da3dc287ee9548270dd9ecec, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5952bea9da3dc287ee9548270dd9ecec->m_type_description == NULL);
    frame_5952bea9da3dc287ee9548270dd9ecec = cache_frame_5952bea9da3dc287ee9548270dd9ecec;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5952bea9da3dc287ee9548270dd9ecec);
    assert(Py_REFCNT(frame_5952bea9da3dc287ee9548270dd9ecec) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[176]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1604;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5952bea9da3dc287ee9548270dd9ecec, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5952bea9da3dc287ee9548270dd9ecec->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5952bea9da3dc287ee9548270dd9ecec, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5952bea9da3dc287ee9548270dd9ecec,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5952bea9da3dc287ee9548270dd9ecec == cache_frame_5952bea9da3dc287ee9548270dd9ecec) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5952bea9da3dc287ee9548270dd9ecec);
        cache_frame_5952bea9da3dc287ee9548270dd9ecec = NULL;
    }

    assertFrameObject(frame_5952bea9da3dc287ee9548270dd9ecec);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_err = NULL;
    struct Nuitka_FrameObject *frame_cdfb914b415cf1ef72774c8db4c1354d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    struct Nuitka_ExceptionStackItem exception_preserved_1;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_cdfb914b415cf1ef72774c8db4c1354d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_cdfb914b415cf1ef72774c8db4c1354d)) {
        Py_XDECREF(cache_frame_cdfb914b415cf1ef72774c8db4c1354d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cdfb914b415cf1ef72774c8db4c1354d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cdfb914b415cf1ef72774c8db4c1354d = MAKE_FUNCTION_FRAME(tstate, codeobj_cdfb914b415cf1ef72774c8db4c1354d, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_cdfb914b415cf1ef72774c8db4c1354d->m_type_description == NULL);
    frame_cdfb914b415cf1ef72774c8db4c1354d = cache_frame_cdfb914b415cf1ef72774c8db4c1354d;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_cdfb914b415cf1ef72774c8db4c1354d);
    assert(Py_REFCNT(frame_cdfb914b415cf1ef72774c8db4c1354d) == 2);

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[197]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1608;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_subscript_value_1 = par_elem;
        tmp_return_value = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1608;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        goto frame_return_exit_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    exception_preserved_1 = GET_CURRENT_EXCEPTION(tstate);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_cdfb914b415cf1ef72774c8db4c1354d, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_cdfb914b415cf1ef72774c8db4c1354d, exception_keeper_lineno_1);
    }

    PUBLISH_CURRENT_EXCEPTION(tstate, &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_cmp_expr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tstate, tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = EXC_VALUE(PyThreadState_GET());
        assert(var_err == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_err = tmp_assign_source_1;
    }
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[192]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1618;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1618;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_elem);
        tmp_isinstance_inst_1 = par_elem;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[224]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[224]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1619;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[122]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1619;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1618;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    CHECK_OBJECT(par_elem);
    tmp_return_value = par_elem;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_3;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1623;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[225]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1623;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_mod_expr_left_1 = mod_consts[226];
        CHECK_OBJECT(par_elem);
        tmp_tuple_element_1 = par_elem;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(3);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_called_value_2;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_8;
            PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[97]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1629;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 1, tmp_tuple_element_1);
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[227]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[227]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1630;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[228]);
            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1630;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[174]);
            if (tmp_args_element_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 1630;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame.f_lineno = 1630;
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1630;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_mod_expr_right_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1627;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame.f_lineno = 1624;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_LookupError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_kw_call_arg_value_0_1 == NULL));
        CHECK_OBJECT(var_err);
        tmp_kw_call_dict_value_0_1 = var_err;
        frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame.f_lineno = 1623;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[229]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1623;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_end_2:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_3:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto try_return_handler_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_err);
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1607;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame) frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_2;
    // Return handler code:
    try_return_handler_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    goto try_end_3;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_3:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cdfb914b415cf1ef72774c8db4c1354d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cdfb914b415cf1ef72774c8db4c1354d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cdfb914b415cf1ef72774c8db4c1354d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cdfb914b415cf1ef72774c8db4c1354d,
        type_description_1,
        par_self,
        par_elem,
        var_err
    );


    // Release cached frame if used for exception.
    if (frame_cdfb914b415cf1ef72774c8db4c1354d == cache_frame_cdfb914b415cf1ef72774c8db4c1354d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_cdfb914b415cf1ef72774c8db4c1354d);
        cache_frame_cdfb914b415cf1ef72774c8db4c1354d = NULL;
    }

    assertFrameObject(frame_cdfb914b415cf1ef72774c8db4c1354d);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    PyObject *var_typ = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_5f4143dc7b59fc9c50b113a344e804ba;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_5f4143dc7b59fc9c50b113a344e804ba = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_5f4143dc7b59fc9c50b113a344e804ba)) {
        Py_XDECREF(cache_frame_5f4143dc7b59fc9c50b113a344e804ba);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5f4143dc7b59fc9c50b113a344e804ba == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5f4143dc7b59fc9c50b113a344e804ba = MAKE_FUNCTION_FRAME(tstate, codeobj_5f4143dc7b59fc9c50b113a344e804ba, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5f4143dc7b59fc9c50b113a344e804ba->m_type_description == NULL);
    frame_5f4143dc7b59fc9c50b113a344e804ba = cache_frame_5f4143dc7b59fc9c50b113a344e804ba;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5f4143dc7b59fc9c50b113a344e804ba);
    assert(Py_REFCNT(frame_5f4143dc7b59fc9c50b113a344e804ba) == 2);

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        tmp_type_arg_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[9]);
        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        Py_DECREF(tmp_type_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_other_comparator);
        tmp_args_element_value_2 = par_other_comparator;
        frame_5f4143dc7b59fc9c50b113a344e804ba->m_frame.f_lineno = 1638;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[13],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 2);
        if (tmp_assign_source_2 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooN";
            exception_lineno = 1638;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!HAS_ERROR_OCCURRED(tstate)) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooN";
            exception_lineno = 1638;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED(tstate);

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED(tstate);
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooN";
                    exception_lineno = 1638;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[188];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooN";
            exception_lineno = 1638;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = par_op;
            assert(old != NULL);
            par_op = tmp_assign_source_4;
            Py_INCREF(par_op);
            Py_DECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert(var_typ == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_typ = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_op);
        tmp_cmp_expr_left_1 = par_op;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1641;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[11]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1641;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1642;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[0]);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1643;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[22]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1643;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1643;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[24]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1643;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        frame_5f4143dc7b59fc9c50b113a344e804ba->m_frame.f_lineno = 1642;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[230]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        if (tmp_assign_source_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1642;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_typ;
            assert(old != NULL);
            var_typ = tmp_assign_source_6;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5f4143dc7b59fc9c50b113a344e804ba, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5f4143dc7b59fc9c50b113a344e804ba->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5f4143dc7b59fc9c50b113a344e804ba, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5f4143dc7b59fc9c50b113a344e804ba,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        var_typ,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_5f4143dc7b59fc9c50b113a344e804ba == cache_frame_5f4143dc7b59fc9c50b113a344e804ba) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5f4143dc7b59fc9c50b113a344e804ba);
        cache_frame_5f4143dc7b59fc9c50b113a344e804ba = NULL;
    }

    assertFrameObject(frame_5f4143dc7b59fc9c50b113a344e804ba);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_1 = par_op;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_typ);
        tmp_tuple_element_1 = var_typ;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto try_return_handler_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    par_op = NULL;
    CHECK_OBJECT(var_typ);
    Py_DECREF(var_typ);
    var_typ = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_op);
    par_op = NULL;
    Py_XDECREF(var_typ);
    var_typ = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_err = NULL;
    struct Nuitka_FrameObject *frame_cdb3081bdb2c85b909f6c4371f372e59;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    struct Nuitka_ExceptionStackItem exception_preserved_1;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_cdb3081bdb2c85b909f6c4371f372e59 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_cdb3081bdb2c85b909f6c4371f372e59)) {
        Py_XDECREF(cache_frame_cdb3081bdb2c85b909f6c4371f372e59);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cdb3081bdb2c85b909f6c4371f372e59 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cdb3081bdb2c85b909f6c4371f372e59 = MAKE_FUNCTION_FRAME(tstate, codeobj_cdb3081bdb2c85b909f6c4371f372e59, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_cdb3081bdb2c85b909f6c4371f372e59->m_type_description == NULL);
    frame_cdb3081bdb2c85b909f6c4371f372e59 = cache_frame_cdb3081bdb2c85b909f6c4371f372e59;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_cdb3081bdb2c85b909f6c4371f372e59);
    assert(Py_REFCNT(frame_cdb3081bdb2c85b909f6c4371f372e59) == 2);

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[198]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1651;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_subscript_value_1 = par_elem;
        tmp_return_value = LOOKUP_SUBSCRIPT(tstate, tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1651;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        goto frame_return_exit_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    exception_preserved_1 = GET_CURRENT_EXCEPTION(tstate);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_cdb3081bdb2c85b909f6c4371f372e59, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_cdb3081bdb2c85b909f6c4371f372e59, exception_keeper_lineno_1);
    }

    PUBLISH_CURRENT_EXCEPTION(tstate, &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_cmp_expr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tstate, tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = EXC_VALUE(PyThreadState_GET());
        assert(var_err == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_err = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1653;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[225]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1653;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_mod_expr_left_1 = mod_consts[226];
        CHECK_OBJECT(par_elem);
        tmp_tuple_element_1 = par_elem;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(3);
        {
            PyObject *tmp_expression_value_4;
            PyObject *tmp_called_value_2;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[97]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1659;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 1, tmp_tuple_element_1);
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[227]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[227]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1660;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[228]);
            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1660;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[174]);
            if (tmp_args_element_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 1660;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame.f_lineno = 1660;
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1660;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_mod_expr_right_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1657;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame.f_lineno = 1654;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_LookupError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_kw_call_arg_value_0_1 == NULL));
        CHECK_OBJECT(var_err);
        tmp_kw_call_dict_value_0_1 = var_err;
        frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame.f_lineno = 1653;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[229]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1653;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_err);
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1650;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame) frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(tstate, &exception_preserved_1);

    goto try_end_3;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_3:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cdb3081bdb2c85b909f6c4371f372e59, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cdb3081bdb2c85b909f6c4371f372e59->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cdb3081bdb2c85b909f6c4371f372e59, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cdb3081bdb2c85b909f6c4371f372e59,
        type_description_1,
        par_self,
        par_elem,
        var_err
    );


    // Release cached frame if used for exception.
    if (frame_cdb3081bdb2c85b909f6c4371f372e59 == cache_frame_cdb3081bdb2c85b909f6c4371f372e59) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_cdb3081bdb2c85b909f6c4371f372e59);
        cache_frame_cdb3081bdb2c85b909f6c4371f372e59 = NULL;
    }

    assertFrameObject(frame_cdb3081bdb2c85b909f6c4371f372e59);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__76___repr__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_b2a3f80dafa6a38c0c69d24b7fb74477;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477)) {
        Py_XDECREF(cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477 = MAKE_FUNCTION_FRAME(tstate, codeobj_b2a3f80dafa6a38c0c69d24b7fb74477, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477->m_type_description == NULL);
    frame_b2a3f80dafa6a38c0c69d24b7fb74477 = cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_b2a3f80dafa6a38c0c69d24b7fb74477);
    assert(Py_REFCNT(frame_b2a3f80dafa6a38c0c69d24b7fb74477) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_list_element_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1667;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[231]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1667;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        tmp_list_element_1 = mod_consts[175];
        tmp_kw_call_dict_value_0_1 = MAKE_LIST_EMPTY(3);
        {
            PyObject *tmp_tuple_element_1;
            PyList_SET_ITEM0(tmp_kw_call_dict_value_0_1, 0, tmp_list_element_1);
            tmp_list_element_1 = mod_consts[177];
            PyList_SET_ITEM0(tmp_kw_call_dict_value_0_1, 1, tmp_list_element_1);
            tmp_tuple_element_1 = mod_consts[22];
            tmp_list_element_1 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_2;
                PyTuple_SET_ITEM0(tmp_list_element_1, 0, tmp_tuple_element_1);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[194]);
                if (tmp_tuple_element_1 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1672;
                    type_description_1 = "o";
                    goto tuple_build_exception_1;
                }
                PyTuple_SET_ITEM(tmp_list_element_1, 1, tmp_tuple_element_1);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_1:;
            Py_DECREF(tmp_list_element_1);
            goto list_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            PyList_SET_ITEM(tmp_kw_call_dict_value_0_1, 2, tmp_list_element_1);
        }
        goto list_build_noexception_1;
        // Exception handling pass through code for list_build:
        list_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        goto frame_exception_exit_1;
        // Finished with no exception for list_build:
        list_build_noexception_1:;
        tmp_list_element_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_list_element_2 == NULL)) {
            tmp_list_element_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_list_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1674;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_1 = MAKE_LIST_EMPTY(2);
        PyList_SET_ITEM0(tmp_kw_call_dict_value_1_1, 0, tmp_list_element_2);
        tmp_list_element_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_list_element_2 == NULL)) {
            tmp_list_element_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_list_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1674;
            type_description_1 = "o";
            goto list_build_exception_2;
        }
        PyList_SET_ITEM0(tmp_kw_call_dict_value_1_1, 1, tmp_list_element_2);
        goto list_build_noexception_2;
        // Exception handling pass through code for list_build:
        list_build_exception_2:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        goto frame_exception_exit_1;
        // Finished with no exception for list_build:
        list_build_noexception_2:;
        frame_b2a3f80dafa6a38c0c69d24b7fb74477->m_frame.f_lineno = 1667;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[232]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1667;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b2a3f80dafa6a38c0c69d24b7fb74477, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b2a3f80dafa6a38c0c69d24b7fb74477->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b2a3f80dafa6a38c0c69d24b7fb74477, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b2a3f80dafa6a38c0c69d24b7fb74477,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_b2a3f80dafa6a38c0c69d24b7fb74477 == cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477);
        cache_frame_b2a3f80dafa6a38c0c69d24b7fb74477 = NULL;
    }

    assertFrameObject(frame_b2a3f80dafa6a38c0c69d24b7fb74477);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__77_as_generic(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_allow_nulltype = python_pars[1];
    PyObject *var_args = NULL;
    struct Nuitka_FrameObject *frame_cbcbdb2d9e8a5fff79198c7cbe25ed04;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04)) {
        Py_XDECREF(cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 = MAKE_FUNCTION_FRAME(tstate, codeobj_cbcbdb2d9e8a5fff79198c7cbe25ed04, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04->m_type_description == NULL);
    frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 = cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_cbcbdb2d9e8a5fff79198c7cbe25ed04);
    assert(Py_REFCNT(frame_cbcbdb2d9e8a5fff79198c7cbe25ed04) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_1, mod_consts[174]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1678;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[174]);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1679;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_args == NULL);
        var_args = tmp_assign_source_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[233];
        frame_cbcbdb2d9e8a5fff79198c7cbe25ed04->m_frame.f_lineno = 1681;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_NotImplementedError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1681;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_end_1:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dircall_arg4_1;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[234]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_4;
            PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[235]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1688;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_dircall_arg1_1);
        Py_DECREF(tmp_dircall_arg2_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        CHECK_OBJECT(var_args);
        tmp_dircall_arg3_1 = var_args;
        tmp_dircall_arg4_1 = DICT_COPY(mod_consts[236]);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
            tmp_return_value = impl___main__$$$function__12_complex_call_helper_pos_keywords_star_list(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cbcbdb2d9e8a5fff79198c7cbe25ed04, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cbcbdb2d9e8a5fff79198c7cbe25ed04->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cbcbdb2d9e8a5fff79198c7cbe25ed04, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cbcbdb2d9e8a5fff79198c7cbe25ed04,
        type_description_1,
        par_self,
        par_allow_nulltype,
        var_args
    );


    // Release cached frame if used for exception.
    if (frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 == cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04);
        cache_frame_cbcbdb2d9e8a5fff79198c7cbe25ed04 = NULL;
    }

    assertFrameObject(frame_cbcbdb2d9e8a5fff79198c7cbe25ed04);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_args);
    Py_DECREF(var_args);
    var_args = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_args);
    var_args = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_allow_nulltype);
    Py_DECREF(par_allow_nulltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_allow_nulltype);
    Py_DECREF(par_allow_nulltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_b50eb69544daac7f0e728d4497ab5937;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b50eb69544daac7f0e728d4497ab5937 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b50eb69544daac7f0e728d4497ab5937)) {
        Py_XDECREF(cache_frame_b50eb69544daac7f0e728d4497ab5937);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b50eb69544daac7f0e728d4497ab5937 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b50eb69544daac7f0e728d4497ab5937 = MAKE_FUNCTION_FRAME(tstate, codeobj_b50eb69544daac7f0e728d4497ab5937, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_b50eb69544daac7f0e728d4497ab5937->m_type_description == NULL);
    frame_b50eb69544daac7f0e728d4497ab5937 = cache_frame_b50eb69544daac7f0e728d4497ab5937;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_b50eb69544daac7f0e728d4497ab5937);
    assert(Py_REFCNT(frame_b50eb69544daac7f0e728d4497ab5937) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kw);
        tmp_dict_arg_value_1 = par_kw;
        tmp_key_value_1 = mod_consts[24];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_default_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[24]);
        if (tmp_default_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1692;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_capi_result_1 = DICT_SETDEFAULT3(tstate, tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        Py_DECREF(tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[67]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1693;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[192];
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[192]);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1693;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1693;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1693;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[67]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1694;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[97];
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[97]);
        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1694;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1694;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1694;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_True;
        CHECK_OBJECT(par_kw);
        tmp_ass_subscribed_1 = par_kw;
        tmp_ass_subscript_1 = mod_consts[237];
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1695;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_6 = par_kw;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[67]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_5 = mod_consts[130];
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[130]);
        if (tmp_args_element_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1696;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_call_result_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_8 = par_kw;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[67]);
        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1697;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = mod_consts[132];
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[132]);
        if (tmp_args_element_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1697;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1697;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_8);
        if (tmp_call_result_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1697;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_10 = par_kw;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[67]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1698;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_9 = mod_consts[131];
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[131]);
        if (tmp_args_element_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1698;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1698;
        {
            PyObject *call_args[] = {tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_call_result_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1698;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_12 = par_kw;
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[67]);
        if (tmp_called_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1699;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1699;
        tmp_call_result_6 = CALL_FUNCTION_WITH_POSARGS2(tstate, tmp_called_value_6, mod_consts[155]);

        Py_DECREF(tmp_called_value_6);
        if (tmp_call_result_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1699;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_13 = par_kw;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[67]);
        if (tmp_called_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1700;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_11 = mod_consts[176];
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_args_element_value_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[176]);
        if (tmp_args_element_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);

            exception_lineno = 1700;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1700;
        {
            PyObject *call_args[] = {tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_7, call_args);
        }

        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_element_value_12);
        if (tmp_call_result_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1700;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_15 = par_kw;
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[67]);
        if (tmp_called_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1701;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[180];
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_args_element_value_14 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[180]);
        if (tmp_args_element_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_8);

            exception_lineno = 1701;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1701;
        {
            PyObject *call_args[] = {tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_8, call_args);
        }

        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_element_value_14);
        if (tmp_call_result_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1701;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_17 = par_kw;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[67]);
        if (tmp_called_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1702;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_15 = mod_consts[178];
        CHECK_OBJECT(par_self);
        tmp_expression_value_18 = par_self;
        tmp_args_element_value_16 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_18, mod_consts[178]);
        if (tmp_args_element_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_9);

            exception_lineno = 1702;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1702;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16};
            tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_9, call_args);
        }

        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_element_value_16);
        if (tmp_call_result_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1702;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_value_10;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_value_17;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_19 = par_kw;
        tmp_called_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_19, mod_consts[67]);
        if (tmp_called_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1703;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_17 = mod_consts[22];
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_args_element_value_18 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_20, mod_consts[22]);
        if (tmp_args_element_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1703;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1703;
        {
            PyObject *call_args[] = {tmp_args_element_value_17, tmp_args_element_value_18};
            tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_10, call_args);
        }

        Py_DECREF(tmp_called_value_10);
        Py_DECREF(tmp_args_element_value_18);
        if (tmp_call_result_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1703;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_value_19;
        PyObject *tmp_args_element_value_20;
        PyObject *tmp_expression_value_22;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_21 = par_kw;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_21, mod_consts[67]);
        if (tmp_called_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1704;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_19 = mod_consts[184];
        CHECK_OBJECT(par_self);
        tmp_expression_value_22 = par_self;
        tmp_args_element_value_20 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_22, mod_consts[185]);
        if (tmp_args_element_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_11);

            exception_lineno = 1704;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b50eb69544daac7f0e728d4497ab5937->m_frame.f_lineno = 1704;
        {
            PyObject *call_args[] = {tmp_args_element_value_19, tmp_args_element_value_20};
            tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_11, call_args);
        }

        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_element_value_20);
        if (tmp_call_result_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1704;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = mod_consts[213];
        CHECK_OBJECT(par_kw);
        tmp_cmp_expr_right_1 = par_kw;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1705;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1705;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT(par_impltype);
        tmp_dircall_arg1_1 = par_impltype;
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg2_1 = par_kw;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___main__$$$function__10_complex_call_helper_star_dict(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1706;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b50eb69544daac7f0e728d4497ab5937, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b50eb69544daac7f0e728d4497ab5937->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b50eb69544daac7f0e728d4497ab5937, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b50eb69544daac7f0e728d4497ab5937,
        type_description_1,
        par_self,
        par_impltype,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_b50eb69544daac7f0e728d4497ab5937 == cache_frame_b50eb69544daac7f0e728d4497ab5937) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_b50eb69544daac7f0e728d4497ab5937);
        cache_frame_b50eb69544daac7f0e728d4497ab5937 = NULL;
    }

    assertFrameObject(frame_b50eb69544daac7f0e728d4497ab5937);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__79_adapt(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_b22349e9e011fdb2b0cebbc3975c6387;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_dictset_value;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b22349e9e011fdb2b0cebbc3975c6387 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b22349e9e011fdb2b0cebbc3975c6387)) {
        Py_XDECREF(cache_frame_b22349e9e011fdb2b0cebbc3975c6387);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b22349e9e011fdb2b0cebbc3975c6387 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b22349e9e011fdb2b0cebbc3975c6387 = MAKE_FUNCTION_FRAME(tstate, codeobj_b22349e9e011fdb2b0cebbc3975c6387, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_b22349e9e011fdb2b0cebbc3975c6387->m_type_description == NULL);
    frame_b22349e9e011fdb2b0cebbc3975c6387 = cache_frame_b22349e9e011fdb2b0cebbc3975c6387;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_b22349e9e011fdb2b0cebbc3975c6387);
    assert(Py_REFCNT(frame_b22349e9e011fdb2b0cebbc3975c6387) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_dictset_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[238]);
        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1709;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_dictset_dict = par_kw;
        tmp_dictset_key = mod_consts[213];
        assert(PyDict_CheckExact(tmp_dictset_dict));
        tmp_res = PyDict_SetItem(tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value);

        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_True;
        CHECK_OBJECT(par_kw);
        tmp_ass_subscribed_1 = par_kw;
        tmp_ass_subscript_1 = mod_consts[237];
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1711;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1711;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[152]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1711;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_impltype);
        tmp_tuple_element_1 = par_impltype;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1711;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b22349e9e011fdb2b0cebbc3975c6387, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b22349e9e011fdb2b0cebbc3975c6387->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b22349e9e011fdb2b0cebbc3975c6387, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b22349e9e011fdb2b0cebbc3975c6387,
        type_description_1,
        par_self,
        par_impltype,
        par_kw,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_b22349e9e011fdb2b0cebbc3975c6387 == cache_frame_b22349e9e011fdb2b0cebbc3975c6387) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_b22349e9e011fdb2b0cebbc3975c6387);
        cache_frame_b22349e9e011fdb2b0cebbc3975c6387 = NULL;
    }

    assertFrameObject(frame_b22349e9e011fdb2b0cebbc3975c6387);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_compiler = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_8a94126259a5bafcedf7747a5b8d5ea2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_8a94126259a5bafcedf7747a5b8d5ea2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8a94126259a5bafcedf7747a5b8d5ea2)) {
        Py_XDECREF(cache_frame_8a94126259a5bafcedf7747a5b8d5ea2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8a94126259a5bafcedf7747a5b8d5ea2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8a94126259a5bafcedf7747a5b8d5ea2 = MAKE_FUNCTION_FRAME(tstate, codeobj_8a94126259a5bafcedf7747a5b8d5ea2, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8a94126259a5bafcedf7747a5b8d5ea2->m_type_description == NULL);
    frame_8a94126259a5bafcedf7747a5b8d5ea2 = cache_frame_8a94126259a5bafcedf7747a5b8d5ea2;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8a94126259a5bafcedf7747a5b8d5ea2);
    assert(Py_REFCNT(frame_8a94126259a5bafcedf7747a5b8d5ea2) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1714;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_2 = par_compiler;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1714;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_8a94126259a5bafcedf7747a5b8d5ea2->m_frame.f_lineno = 1714;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1714;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1714;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[176]);
        if (tmp_operand_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_5 = par_compiler;
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[32]);
        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[239]);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_operand_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        Py_DECREF(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8a94126259a5bafcedf7747a5b8d5ea2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8a94126259a5bafcedf7747a5b8d5ea2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8a94126259a5bafcedf7747a5b8d5ea2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8a94126259a5bafcedf7747a5b8d5ea2,
        type_description_1,
        par_self,
        par_compiler,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_8a94126259a5bafcedf7747a5b8d5ea2 == cache_frame_8a94126259a5bafcedf7747a5b8d5ea2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8a94126259a5bafcedf7747a5b8d5ea2);
        cache_frame_8a94126259a5bafcedf7747a5b8d5ea2 = NULL;
    }

    assertFrameObject(frame_8a94126259a5bafcedf7747a5b8d5ea2);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__81__set_table(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_table = python_pars[2];
    PyObject *var_schema = NULL;
    PyObject *var_variant_mapping = NULL;
    PyObject *var_e = NULL;
    struct Nuitka_FrameObject *frame_81bdd4839efb4ca8cab2fe7d7122470a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_81bdd4839efb4ca8cab2fe7d7122470a = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_81bdd4839efb4ca8cab2fe7d7122470a)) {
        Py_XDECREF(cache_frame_81bdd4839efb4ca8cab2fe7d7122470a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_81bdd4839efb4ca8cab2fe7d7122470a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_81bdd4839efb4ca8cab2fe7d7122470a = MAKE_FUNCTION_FRAME(tstate, codeobj_81bdd4839efb4ca8cab2fe7d7122470a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_81bdd4839efb4ca8cab2fe7d7122470a->m_type_description == NULL);
    frame_81bdd4839efb4ca8cab2fe7d7122470a = cache_frame_81bdd4839efb4ca8cab2fe7d7122470a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_81bdd4839efb4ca8cab2fe7d7122470a);
    assert(Py_REFCNT(frame_81bdd4839efb4ca8cab2fe7d7122470a) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1722;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[240]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1722;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[241]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1722;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_schema == NULL);
        var_schema = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1723;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_2 = par_column;
        CHECK_OBJECT(par_table);
        tmp_args_element_value_3 = par_table;
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1723;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS3(
                tstate,
                tmp_called_instance_1,
                mod_consts[142],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1723;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[178]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1725;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1725;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_4 = par_column;
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1728;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_2, mod_consts[149], tmp_args_element_value_4);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1728;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_called_value_4;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_dict_value_0_1;
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        CHECK_OBJECT(var_schema);
        tmp_expression_value_4 = var_schema;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[242]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[243]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[243]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_args_element_value_5 = par_column;
        tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_4 == NULL)) {
            tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1731;
        tmp_args_element_value_6 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_4);
        if (tmp_args_element_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1731;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_expression_value_5 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_args_element_value_6);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[244]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[174]);
        if (tmp_args_element_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1731;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_7);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1731;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[97]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1732;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_2 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_kw_call_dict_value_0_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[245]);

        if (unlikely(tmp_kw_call_dict_value_0_1 == NULL)) {
            tmp_kw_call_dict_value_0_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[245]);
        }

        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1732;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_INCREF(tmp_kw_call_dict_value_0_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[97]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1732;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_9 == NULL)) {
            tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1733;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[137]);
        if (tmp_called_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1733;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_args_element_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[246]);
        if (tmp_args_element_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1734;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_9 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_9, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1733;
        {
            PyObject *call_args[] = {tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_8);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1733;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_1 = Py_True;
        frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame.f_lineno = 1730;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[247]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_e == NULL);
        var_e = tmp_assign_source_3;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(var_e);
        tmp_expression_value_11 = var_e;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[248]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1739;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_cmp_expr_right_2 = par_table;
        tmp_condition_result_3 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_condition_result_3 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1739;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_81bdd4839efb4ca8cab2fe7d7122470a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_81bdd4839efb4ca8cab2fe7d7122470a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_81bdd4839efb4ca8cab2fe7d7122470a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_81bdd4839efb4ca8cab2fe7d7122470a,
        type_description_1,
        par_self,
        par_column,
        par_table,
        var_schema,
        var_variant_mapping,
        var_e
    );


    // Release cached frame if used for exception.
    if (frame_81bdd4839efb4ca8cab2fe7d7122470a == cache_frame_81bdd4839efb4ca8cab2fe7d7122470a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_81bdd4839efb4ca8cab2fe7d7122470a);
        cache_frame_81bdd4839efb4ca8cab2fe7d7122470a = NULL;
    }

    assertFrameObject(frame_81bdd4839efb4ca8cab2fe7d7122470a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_71d3edc0c658b2c8714cd3518a82d2c5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_71d3edc0c658b2c8714cd3518a82d2c5 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_71d3edc0c658b2c8714cd3518a82d2c5)) {
        Py_XDECREF(cache_frame_71d3edc0c658b2c8714cd3518a82d2c5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_71d3edc0c658b2c8714cd3518a82d2c5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_71d3edc0c658b2c8714cd3518a82d2c5 = MAKE_FUNCTION_FRAME(tstate, codeobj_71d3edc0c658b2c8714cd3518a82d2c5, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_71d3edc0c658b2c8714cd3518a82d2c5->m_type_description == NULL);
    frame_71d3edc0c658b2c8714cd3518a82d2c5 = cache_frame_71d3edc0c658b2c8714cd3518a82d2c5;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_71d3edc0c658b2c8714cd3518a82d2c5);
    assert(Py_REFCNT(frame_71d3edc0c658b2c8714cd3518a82d2c5) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1742;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1742;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_71d3edc0c658b2c8714cd3518a82d2c5->m_frame.f_lineno = 1742;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[249], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1742;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_1);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_71d3edc0c658b2c8714cd3518a82d2c5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_71d3edc0c658b2c8714cd3518a82d2c5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_71d3edc0c658b2c8714cd3518a82d2c5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_71d3edc0c658b2c8714cd3518a82d2c5,
        type_description_1,
        par_self,
        par_dialect,
        var_parent_processor,
        var_process,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_71d3edc0c658b2c8714cd3518a82d2c5 == cache_frame_71d3edc0c658b2c8714cd3518a82d2c5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_71d3edc0c658b2c8714cd3518a82d2c5);
        cache_frame_71d3edc0c658b2c8714cd3518a82d2c5 = NULL;
    }

    assertFrameObject(frame_71d3edc0c658b2c8714cd3518a82d2c5);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_ee71dbf6059dd4350596c729cfc0a259;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ee71dbf6059dd4350596c729cfc0a259 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ee71dbf6059dd4350596c729cfc0a259)) {
        Py_XDECREF(cache_frame_ee71dbf6059dd4350596c729cfc0a259);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ee71dbf6059dd4350596c729cfc0a259 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ee71dbf6059dd4350596c729cfc0a259 = MAKE_FUNCTION_FRAME(tstate, codeobj_ee71dbf6059dd4350596c729cfc0a259, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_ee71dbf6059dd4350596c729cfc0a259->m_type_description == NULL);
    frame_ee71dbf6059dd4350596c729cfc0a259 = cache_frame_ee71dbf6059dd4350596c729cfc0a259;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_ee71dbf6059dd4350596c729cfc0a259);
    assert(Py_REFCNT(frame_ee71dbf6059dd4350596c729cfc0a259) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1745;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_ee71dbf6059dd4350596c729cfc0a259->m_frame.f_lineno = 1745;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[223], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1745;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1746;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1746;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1747;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_ee71dbf6059dd4350596c729cfc0a259->m_frame.f_lineno = 1747;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ee71dbf6059dd4350596c729cfc0a259, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ee71dbf6059dd4350596c729cfc0a259->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ee71dbf6059dd4350596c729cfc0a259, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ee71dbf6059dd4350596c729cfc0a259,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_ee71dbf6059dd4350596c729cfc0a259 == cache_frame_ee71dbf6059dd4350596c729cfc0a259) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_ee71dbf6059dd4350596c729cfc0a259);
        cache_frame_ee71dbf6059dd4350596c729cfc0a259 = NULL;
    }

    assertFrameObject(frame_ee71dbf6059dd4350596c729cfc0a259);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_ab3bac6d0f6858d8ca356e1508aeb2ac;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac)) {
        Py_XDECREF(cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac = MAKE_FUNCTION_FRAME(tstate, codeobj_ab3bac6d0f6858d8ca356e1508aeb2ac, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac->m_type_description == NULL);
    frame_ab3bac6d0f6858d8ca356e1508aeb2ac = cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_ab3bac6d0f6858d8ca356e1508aeb2ac);
    assert(Py_REFCNT(frame_ab3bac6d0f6858d8ca356e1508aeb2ac) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1753;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1753;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_ab3bac6d0f6858d8ca356e1508aeb2ac->m_frame.f_lineno = 1753;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[252], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1753;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_1);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ab3bac6d0f6858d8ca356e1508aeb2ac, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ab3bac6d0f6858d8ca356e1508aeb2ac->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ab3bac6d0f6858d8ca356e1508aeb2ac, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ab3bac6d0f6858d8ca356e1508aeb2ac,
        type_description_1,
        par_self,
        par_dialect,
        var_parent_processor,
        var_process,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_ab3bac6d0f6858d8ca356e1508aeb2ac == cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac);
        cache_frame_ab3bac6d0f6858d8ca356e1508aeb2ac = NULL;
    }

    assertFrameObject(frame_ab3bac6d0f6858d8ca356e1508aeb2ac);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_bf7f434d5ab0377974a5101ca9ba0d53;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bf7f434d5ab0377974a5101ca9ba0d53 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_bf7f434d5ab0377974a5101ca9ba0d53)) {
        Py_XDECREF(cache_frame_bf7f434d5ab0377974a5101ca9ba0d53);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bf7f434d5ab0377974a5101ca9ba0d53 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bf7f434d5ab0377974a5101ca9ba0d53 = MAKE_FUNCTION_FRAME(tstate, codeobj_bf7f434d5ab0377974a5101ca9ba0d53, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_bf7f434d5ab0377974a5101ca9ba0d53->m_type_description == NULL);
    frame_bf7f434d5ab0377974a5101ca9ba0d53 = cache_frame_bf7f434d5ab0377974a5101ca9ba0d53;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_bf7f434d5ab0377974a5101ca9ba0d53);
    assert(Py_REFCNT(frame_bf7f434d5ab0377974a5101ca9ba0d53) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1756;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_bf7f434d5ab0377974a5101ca9ba0d53->m_frame.f_lineno = 1756;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[223], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1756;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1757;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1757;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1758;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_bf7f434d5ab0377974a5101ca9ba0d53->m_frame.f_lineno = 1758;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1758;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bf7f434d5ab0377974a5101ca9ba0d53, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bf7f434d5ab0377974a5101ca9ba0d53->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bf7f434d5ab0377974a5101ca9ba0d53, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bf7f434d5ab0377974a5101ca9ba0d53,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_bf7f434d5ab0377974a5101ca9ba0d53 == cache_frame_bf7f434d5ab0377974a5101ca9ba0d53) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_bf7f434d5ab0377974a5101ca9ba0d53);
        cache_frame_bf7f434d5ab0377974a5101ca9ba0d53 = NULL;
    }

    assertFrameObject(frame_bf7f434d5ab0377974a5101ca9ba0d53);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_e330aca6bb85180dba8461a0a1940a85;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e330aca6bb85180dba8461a0a1940a85 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e330aca6bb85180dba8461a0a1940a85)) {
        Py_XDECREF(cache_frame_e330aca6bb85180dba8461a0a1940a85);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e330aca6bb85180dba8461a0a1940a85 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e330aca6bb85180dba8461a0a1940a85 = MAKE_FUNCTION_FRAME(tstate, codeobj_e330aca6bb85180dba8461a0a1940a85, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e330aca6bb85180dba8461a0a1940a85->m_type_description == NULL);
    frame_e330aca6bb85180dba8461a0a1940a85 = cache_frame_e330aca6bb85180dba8461a0a1940a85;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e330aca6bb85180dba8461a0a1940a85);
    assert(Py_REFCNT(frame_e330aca6bb85180dba8461a0a1940a85) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1764;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1764;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_e330aca6bb85180dba8461a0a1940a85->m_frame.f_lineno = 1764;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[254],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1764;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_1);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e330aca6bb85180dba8461a0a1940a85, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e330aca6bb85180dba8461a0a1940a85->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e330aca6bb85180dba8461a0a1940a85, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e330aca6bb85180dba8461a0a1940a85,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_parent_processor,
        var_process,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_e330aca6bb85180dba8461a0a1940a85 == cache_frame_e330aca6bb85180dba8461a0a1940a85) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e330aca6bb85180dba8461a0a1940a85);
        cache_frame_e330aca6bb85180dba8461a0a1940a85 = NULL;
    }

    assertFrameObject(frame_e330aca6bb85180dba8461a0a1940a85);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_e0a7f1e932becaa154a831e9269c7eea;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e0a7f1e932becaa154a831e9269c7eea = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e0a7f1e932becaa154a831e9269c7eea)) {
        Py_XDECREF(cache_frame_e0a7f1e932becaa154a831e9269c7eea);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e0a7f1e932becaa154a831e9269c7eea == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e0a7f1e932becaa154a831e9269c7eea = MAKE_FUNCTION_FRAME(tstate, codeobj_e0a7f1e932becaa154a831e9269c7eea, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e0a7f1e932becaa154a831e9269c7eea->m_type_description == NULL);
    frame_e0a7f1e932becaa154a831e9269c7eea = cache_frame_e0a7f1e932becaa154a831e9269c7eea;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e0a7f1e932becaa154a831e9269c7eea);
    assert(Py_REFCNT(frame_e0a7f1e932becaa154a831e9269c7eea) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1767;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1767;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[251]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1768;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_e0a7f1e932becaa154a831e9269c7eea->m_frame.f_lineno = 1768;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1768;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1770;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_e0a7f1e932becaa154a831e9269c7eea->m_frame.f_lineno = 1770;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[256], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1770;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e0a7f1e932becaa154a831e9269c7eea, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e0a7f1e932becaa154a831e9269c7eea->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e0a7f1e932becaa154a831e9269c7eea, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e0a7f1e932becaa154a831e9269c7eea,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_e0a7f1e932becaa154a831e9269c7eea == cache_frame_e0a7f1e932becaa154a831e9269c7eea) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e0a7f1e932becaa154a831e9269c7eea);
        cache_frame_e0a7f1e932becaa154a831e9269c7eea = NULL;
    }

    assertFrameObject(frame_e0a7f1e932becaa154a831e9269c7eea);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__85_copy(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kw = python_pars[1];
    struct Nuitka_FrameObject *frame_8cfd97f2a77ecbb2eb909335286de10f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8cfd97f2a77ecbb2eb909335286de10f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8cfd97f2a77ecbb2eb909335286de10f)) {
        Py_XDECREF(cache_frame_8cfd97f2a77ecbb2eb909335286de10f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8cfd97f2a77ecbb2eb909335286de10f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8cfd97f2a77ecbb2eb909335286de10f = MAKE_FUNCTION_FRAME(tstate, codeobj_8cfd97f2a77ecbb2eb909335286de10f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8cfd97f2a77ecbb2eb909335286de10f->m_type_description == NULL);
    frame_8cfd97f2a77ecbb2eb909335286de10f = cache_frame_8cfd97f2a77ecbb2eb909335286de10f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8cfd97f2a77ecbb2eb909335286de10f);
    assert(Py_REFCNT(frame_8cfd97f2a77ecbb2eb909335286de10f) == 2);

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[145]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8cfd97f2a77ecbb2eb909335286de10f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8cfd97f2a77ecbb2eb909335286de10f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8cfd97f2a77ecbb2eb909335286de10f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8cfd97f2a77ecbb2eb909335286de10f,
        type_description_1,
        par_self,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_8cfd97f2a77ecbb2eb909335286de10f == cache_frame_8cfd97f2a77ecbb2eb909335286de10f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8cfd97f2a77ecbb2eb909335286de10f);
        cache_frame_8cfd97f2a77ecbb2eb909335286de10f = NULL;
    }

    assertFrameObject(frame_8cfd97f2a77ecbb2eb909335286de10f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__86_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_7678b2e07fbc7a4f387d6c0cc758d75e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e)) {
        Py_XDECREF(cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e = MAKE_FUNCTION_FRAME(tstate, codeobj_7678b2e07fbc7a4f387d6c0cc758d75e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e->m_type_description == NULL);
    frame_7678b2e07fbc7a4f387d6c0cc758d75e = cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7678b2e07fbc7a4f387d6c0cc758d75e);
    assert(Py_REFCNT(frame_7678b2e07fbc7a4f387d6c0cc758d75e) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[173]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1780;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1780;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[173]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1781;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[199]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1783;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_3 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1783;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[257]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1783;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7678b2e07fbc7a4f387d6c0cc758d75e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7678b2e07fbc7a4f387d6c0cc758d75e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7678b2e07fbc7a4f387d6c0cc758d75e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7678b2e07fbc7a4f387d6c0cc758d75e,
        type_description_1,
        par_self,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_7678b2e07fbc7a4f387d6c0cc758d75e == cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e);
        cache_frame_7678b2e07fbc7a4f387d6c0cc758d75e = NULL;
    }

    assertFrameObject(frame_7678b2e07fbc7a4f387d6c0cc758d75e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__87___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_protocol = python_pars[1];
    PyObject *par_pickler = python_pars[2];
    PyObject *par_comparator = python_pars[3];
    PyObject *par_impl = python_pars[4];
    struct Nuitka_FrameObject *frame_c42814ac89cf306358687927a567e483;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c42814ac89cf306358687927a567e483 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c42814ac89cf306358687927a567e483)) {
        Py_XDECREF(cache_frame_c42814ac89cf306358687927a567e483);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c42814ac89cf306358687927a567e483 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c42814ac89cf306358687927a567e483 = MAKE_FUNCTION_FRAME(tstate, codeobj_c42814ac89cf306358687927a567e483, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c42814ac89cf306358687927a567e483->m_type_description == NULL);
    frame_c42814ac89cf306358687927a567e483 = cache_frame_c42814ac89cf306358687927a567e483;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c42814ac89cf306358687927a567e483);
    assert(Py_REFCNT(frame_c42814ac89cf306358687927a567e483) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_protocol);
        tmp_assattr_value_1 = par_protocol;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[258], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1830;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_pickler);
        tmp_or_left_value_1 = par_pickler;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_or_right_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[259]);

        if (unlikely(tmp_or_right_value_1 == NULL)) {
            tmp_or_right_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[259]);
        }

        if (tmp_or_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assattr_value_2 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[260], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_comparator);
        tmp_assattr_value_3 = par_comparator;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[261], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1832;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[262]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[262]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1833;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1833;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        frame_c42814ac89cf306358687927a567e483->m_frame.f_lineno = 1833;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_1, mod_consts[70]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1833;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_impl);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_impl);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1835;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_assattr_target_4;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[5]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[5]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_impl);
        tmp_args_element_value_1 = par_impl;
        frame_c42814ac89cf306358687927a567e483->m_frame.f_lineno = 1836;
        tmp_assattr_value_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assattr_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[146], tmp_assattr_value_4);
        Py_DECREF(tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooN";
            goto frame_exception_exit_1;
        }
    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c42814ac89cf306358687927a567e483, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c42814ac89cf306358687927a567e483->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c42814ac89cf306358687927a567e483, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c42814ac89cf306358687927a567e483,
        type_description_1,
        par_self,
        par_protocol,
        par_pickler,
        par_comparator,
        par_impl,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_c42814ac89cf306358687927a567e483 == cache_frame_c42814ac89cf306358687927a567e483) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c42814ac89cf306358687927a567e483);
        cache_frame_c42814ac89cf306358687927a567e483 = NULL;
    }

    assertFrameObject(frame_c42814ac89cf306358687927a567e483);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protocol);
    Py_DECREF(par_protocol);
    CHECK_OBJECT(par_pickler);
    Py_DECREF(par_pickler);
    CHECK_OBJECT(par_comparator);
    Py_DECREF(par_comparator);
    CHECK_OBJECT(par_impl);
    Py_DECREF(par_impl);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protocol);
    Py_DECREF(par_protocol);
    CHECK_OBJECT(par_pickler);
    Py_DECREF(par_pickler);
    CHECK_OBJECT(par_comparator);
    Py_DECREF(par_comparator);
    CHECK_OBJECT(par_impl);
    Py_DECREF(par_impl);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__88___reduce__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a0596b116f73cc11f051908d5fa496da;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a0596b116f73cc11f051908d5fa496da = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a0596b116f73cc11f051908d5fa496da)) {
        Py_XDECREF(cache_frame_a0596b116f73cc11f051908d5fa496da);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a0596b116f73cc11f051908d5fa496da == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a0596b116f73cc11f051908d5fa496da = MAKE_FUNCTION_FRAME(tstate, codeobj_a0596b116f73cc11f051908d5fa496da, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a0596b116f73cc11f051908d5fa496da->m_type_description == NULL);
    frame_a0596b116f73cc11f051908d5fa496da = cache_frame_a0596b116f73cc11f051908d5fa496da;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a0596b116f73cc11f051908d5fa496da);
    assert(Py_REFCNT(frame_a0596b116f73cc11f051908d5fa496da) == 2);

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[262]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[262]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1839;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_expression_value_1;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[258]);
            if (tmp_tuple_element_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1839;
                type_description_1 = "o";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = MAKE_TUPLE_EMPTY(3);
            {
                PyObject *tmp_expression_value_2;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
                tmp_tuple_element_2 = Py_None;
                PyTuple_SET_ITEM0(tmp_tuple_element_1, 1, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[261]);
                if (tmp_tuple_element_2 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1839;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_tuple_element_1, 2, tmp_tuple_element_2);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_tuple_element_1);
            goto tuple_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a0596b116f73cc11f051908d5fa496da, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a0596b116f73cc11f051908d5fa496da->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a0596b116f73cc11f051908d5fa496da, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a0596b116f73cc11f051908d5fa496da,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a0596b116f73cc11f051908d5fa496da == cache_frame_a0596b116f73cc11f051908d5fa496da) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a0596b116f73cc11f051908d5fa496da);
        cache_frame_a0596b116f73cc11f051908d5fa496da = NULL;
    }

    assertFrameObject(frame_a0596b116f73cc11f051908d5fa496da);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_dumps = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_protocol = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_62a491413e6803ba136fa56eec053539;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_62a491413e6803ba136fa56eec053539 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_62a491413e6803ba136fa56eec053539)) {
        Py_XDECREF(cache_frame_62a491413e6803ba136fa56eec053539);

#if _DEBUG_REFCOUNTS
        if (cache_frame_62a491413e6803ba136fa56eec053539 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_62a491413e6803ba136fa56eec053539 = MAKE_FUNCTION_FRAME(tstate, codeobj_62a491413e6803ba136fa56eec053539, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_62a491413e6803ba136fa56eec053539->m_type_description == NULL);
    frame_62a491413e6803ba136fa56eec053539 = cache_frame_62a491413e6803ba136fa56eec053539;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_62a491413e6803ba136fa56eec053539);
    assert(Py_REFCNT(frame_62a491413e6803ba136fa56eec053539) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[146]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1842;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_62a491413e6803ba136fa56eec053539->m_frame.f_lineno = 1842;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[252], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1842;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[260]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1843;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[264]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1843;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_dumps) == NULL);
        PyCell_SET(var_dumps, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[258]);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1844;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_protocol) == NULL);
        PyCell_SET(var_protocol, tmp_assign_source_3);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1845;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_dumps;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_protocol;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_5;
        struct Nuitka_CellObject *tmp_closure_2[2];

        tmp_closure_2[0] = var_dumps;
        Py_INCREF(tmp_closure_2[0]);
        tmp_closure_2[1] = var_protocol;
        Py_INCREF(tmp_closure_2[1]);

        tmp_assign_source_5 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_5;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_62a491413e6803ba136fa56eec053539, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_62a491413e6803ba136fa56eec053539->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_62a491413e6803ba136fa56eec053539, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_62a491413e6803ba136fa56eec053539,
        type_description_1,
        par_self,
        par_dialect,
        var_impl_processor,
        var_dumps,
        var_protocol,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_62a491413e6803ba136fa56eec053539 == cache_frame_62a491413e6803ba136fa56eec053539) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_62a491413e6803ba136fa56eec053539);
        cache_frame_62a491413e6803ba136fa56eec053539 = NULL;
    }

    assertFrameObject(frame_62a491413e6803ba136fa56eec053539);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_dumps);
    Py_DECREF(var_dumps);
    var_dumps = NULL;
    CHECK_OBJECT(var_protocol);
    Py_DECREF(var_protocol);
    var_protocol = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_dumps);
    Py_DECREF(var_dumps);
    var_dumps = NULL;
    CHECK_OBJECT(var_protocol);
    Py_DECREF(var_protocol);
    var_protocol = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_39fef5748edb71876d93470d3a219c62;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_39fef5748edb71876d93470d3a219c62 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_39fef5748edb71876d93470d3a219c62)) {
        Py_XDECREF(cache_frame_39fef5748edb71876d93470d3a219c62);

#if _DEBUG_REFCOUNTS
        if (cache_frame_39fef5748edb71876d93470d3a219c62 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_39fef5748edb71876d93470d3a219c62 = MAKE_FUNCTION_FRAME(tstate, codeobj_39fef5748edb71876d93470d3a219c62, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_39fef5748edb71876d93470d3a219c62->m_type_description == NULL);
    frame_39fef5748edb71876d93470d3a219c62 = cache_frame_39fef5748edb71876d93470d3a219c62;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_39fef5748edb71876d93470d3a219c62);
    assert(Py_REFCNT(frame_39fef5748edb71876d93470d3a219c62) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[264]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1849;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[258]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1849;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = Nuitka_Cell_GET(self->m_closure[2]);
        frame_39fef5748edb71876d93470d3a219c62->m_frame.f_lineno = 1849;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1849;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[266]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1850;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        frame_39fef5748edb71876d93470d3a219c62->m_frame.f_lineno = 1850;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1850;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_39fef5748edb71876d93470d3a219c62, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_39fef5748edb71876d93470d3a219c62->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_39fef5748edb71876d93470d3a219c62, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_39fef5748edb71876d93470d3a219c62,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[2],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_39fef5748edb71876d93470d3a219c62 == cache_frame_39fef5748edb71876d93470d3a219c62) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_39fef5748edb71876d93470d3a219c62);
        cache_frame_39fef5748edb71876d93470d3a219c62 = NULL;
    }

    assertFrameObject(frame_39fef5748edb71876d93470d3a219c62);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_19739b43823e27c5ca08a9fce0ba67b9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_19739b43823e27c5ca08a9fce0ba67b9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_19739b43823e27c5ca08a9fce0ba67b9)) {
        Py_XDECREF(cache_frame_19739b43823e27c5ca08a9fce0ba67b9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_19739b43823e27c5ca08a9fce0ba67b9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_19739b43823e27c5ca08a9fce0ba67b9 = MAKE_FUNCTION_FRAME(tstate, codeobj_19739b43823e27c5ca08a9fce0ba67b9, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_19739b43823e27c5ca08a9fce0ba67b9->m_type_description == NULL);
    frame_19739b43823e27c5ca08a9fce0ba67b9 = cache_frame_19739b43823e27c5ca08a9fce0ba67b9;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_19739b43823e27c5ca08a9fce0ba67b9);
    assert(Py_REFCNT(frame_19739b43823e27c5ca08a9fce0ba67b9) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[264]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1856;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[258]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1856;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        frame_19739b43823e27c5ca08a9fce0ba67b9->m_frame.f_lineno = 1856;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1856;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_19739b43823e27c5ca08a9fce0ba67b9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_19739b43823e27c5ca08a9fce0ba67b9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_19739b43823e27c5ca08a9fce0ba67b9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_19739b43823e27c5ca08a9fce0ba67b9,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_19739b43823e27c5ca08a9fce0ba67b9 == cache_frame_19739b43823e27c5ca08a9fce0ba67b9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_19739b43823e27c5ca08a9fce0ba67b9);
        cache_frame_19739b43823e27c5ca08a9fce0ba67b9 = NULL;
    }

    assertFrameObject(frame_19739b43823e27c5ca08a9fce0ba67b9);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_loads = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_9bec7a53c683d8412a7dcbbec48f400e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9bec7a53c683d8412a7dcbbec48f400e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_9bec7a53c683d8412a7dcbbec48f400e)) {
        Py_XDECREF(cache_frame_9bec7a53c683d8412a7dcbbec48f400e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9bec7a53c683d8412a7dcbbec48f400e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9bec7a53c683d8412a7dcbbec48f400e = MAKE_FUNCTION_FRAME(tstate, codeobj_9bec7a53c683d8412a7dcbbec48f400e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_9bec7a53c683d8412a7dcbbec48f400e->m_type_description == NULL);
    frame_9bec7a53c683d8412a7dcbbec48f400e = cache_frame_9bec7a53c683d8412a7dcbbec48f400e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_9bec7a53c683d8412a7dcbbec48f400e);
    assert(Py_REFCNT(frame_9bec7a53c683d8412a7dcbbec48f400e) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[146]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1862;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_9bec7a53c683d8412a7dcbbec48f400e->m_frame.f_lineno = 1862;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[254],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1862;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[260]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1863;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[267]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1863;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_loads) == NULL);
        PyCell_SET(var_loads, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1864;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_impl_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_loads;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_loads;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9bec7a53c683d8412a7dcbbec48f400e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9bec7a53c683d8412a7dcbbec48f400e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9bec7a53c683d8412a7dcbbec48f400e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9bec7a53c683d8412a7dcbbec48f400e,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_impl_processor,
        var_loads,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_9bec7a53c683d8412a7dcbbec48f400e == cache_frame_9bec7a53c683d8412a7dcbbec48f400e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_9bec7a53c683d8412a7dcbbec48f400e);
        cache_frame_9bec7a53c683d8412a7dcbbec48f400e = NULL;
    }

    assertFrameObject(frame_9bec7a53c683d8412a7dcbbec48f400e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_loads);
    Py_DECREF(var_loads);
    var_loads = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_loads);
    Py_DECREF(var_loads);
    var_loads = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_bf146a3bd02941452c10a750e761f313;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_bf146a3bd02941452c10a750e761f313 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_bf146a3bd02941452c10a750e761f313)) {
        Py_XDECREF(cache_frame_bf146a3bd02941452c10a750e761f313);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bf146a3bd02941452c10a750e761f313 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bf146a3bd02941452c10a750e761f313 = MAKE_FUNCTION_FRAME(tstate, codeobj_bf146a3bd02941452c10a750e761f313, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_bf146a3bd02941452c10a750e761f313->m_type_description == NULL);
    frame_bf146a3bd02941452c10a750e761f313 = cache_frame_bf146a3bd02941452c10a750e761f313;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_bf146a3bd02941452c10a750e761f313);
    assert(Py_REFCNT(frame_bf146a3bd02941452c10a750e761f313) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[266]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1867;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_bf146a3bd02941452c10a750e761f313->m_frame.f_lineno = 1867;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1867;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[267]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1870;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_bf146a3bd02941452c10a750e761f313->m_frame.f_lineno = 1870;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1870;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bf146a3bd02941452c10a750e761f313, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bf146a3bd02941452c10a750e761f313->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bf146a3bd02941452c10a750e761f313, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bf146a3bd02941452c10a750e761f313,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_bf146a3bd02941452c10a750e761f313 == cache_frame_bf146a3bd02941452c10a750e761f313) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_bf146a3bd02941452c10a750e761f313);
        cache_frame_bf146a3bd02941452c10a750e761f313 = NULL;
    }

    assertFrameObject(frame_bf146a3bd02941452c10a750e761f313);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_a9e09639978136bffb6206c45567ff7a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a9e09639978136bffb6206c45567ff7a = NULL;

    // Actual function body.
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_a9e09639978136bffb6206c45567ff7a)) {
        Py_XDECREF(cache_frame_a9e09639978136bffb6206c45567ff7a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a9e09639978136bffb6206c45567ff7a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a9e09639978136bffb6206c45567ff7a = MAKE_FUNCTION_FRAME(tstate, codeobj_a9e09639978136bffb6206c45567ff7a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a9e09639978136bffb6206c45567ff7a->m_type_description == NULL);
    frame_a9e09639978136bffb6206c45567ff7a = cache_frame_a9e09639978136bffb6206c45567ff7a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a9e09639978136bffb6206c45567ff7a);
    assert(Py_REFCNT(frame_a9e09639978136bffb6206c45567ff7a) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[267]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1877;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_a9e09639978136bffb6206c45567ff7a->m_frame.f_lineno = 1877;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1877;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a9e09639978136bffb6206c45567ff7a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a9e09639978136bffb6206c45567ff7a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a9e09639978136bffb6206c45567ff7a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a9e09639978136bffb6206c45567ff7a,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_a9e09639978136bffb6206c45567ff7a == cache_frame_a9e09639978136bffb6206c45567ff7a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a9e09639978136bffb6206c45567ff7a);
        cache_frame_a9e09639978136bffb6206c45567ff7a = NULL;
    }

    assertFrameObject(frame_a9e09639978136bffb6206c45567ff7a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__91_compare_values(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_x = python_pars[1];
    PyObject *par_y = python_pars[2];
    struct Nuitka_FrameObject *frame_bd11c465c1627b66dd527f313d4aa38c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_bd11c465c1627b66dd527f313d4aa38c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_bd11c465c1627b66dd527f313d4aa38c)) {
        Py_XDECREF(cache_frame_bd11c465c1627b66dd527f313d4aa38c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bd11c465c1627b66dd527f313d4aa38c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bd11c465c1627b66dd527f313d4aa38c = MAKE_FUNCTION_FRAME(tstate, codeobj_bd11c465c1627b66dd527f313d4aa38c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_bd11c465c1627b66dd527f313d4aa38c->m_type_description == NULL);
    frame_bd11c465c1627b66dd527f313d4aa38c = cache_frame_bd11c465c1627b66dd527f313d4aa38c;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_bd11c465c1627b66dd527f313d4aa38c);
    assert(Py_REFCNT(frame_bd11c465c1627b66dd527f313d4aa38c) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[261]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1882;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1882;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_x);
        tmp_args_element_value_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_args_element_value_2 = par_y;
        frame_bd11c465c1627b66dd527f313d4aa38c->m_frame.f_lineno = 1883;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[261],
                call_args
            );
        }

        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_x);
        tmp_cmp_expr_left_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_cmp_expr_right_1 = par_y;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1885;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bd11c465c1627b66dd527f313d4aa38c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bd11c465c1627b66dd527f313d4aa38c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bd11c465c1627b66dd527f313d4aa38c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bd11c465c1627b66dd527f313d4aa38c,
        type_description_1,
        par_self,
        par_x,
        par_y
    );


    // Release cached frame if used for exception.
    if (frame_bd11c465c1627b66dd527f313d4aa38c == cache_frame_bd11c465c1627b66dd527f313d4aa38c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_bd11c465c1627b66dd527f313d4aa38c);
        cache_frame_bd11c465c1627b66dd527f313d4aa38c = NULL;
    }

    assertFrameObject(frame_bd11c465c1627b66dd527f313d4aa38c);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__92___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_create_constraint = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par__create_events = python_pars[3];
    struct Nuitka_FrameObject *frame_3fe76aec9f860e46bc4bad5ada88bb0e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e)) {
        Py_XDECREF(cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e = MAKE_FUNCTION_FRAME(tstate, codeobj_3fe76aec9f860e46bc4bad5ada88bb0e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e->m_type_description == NULL);
    frame_3fe76aec9f860e46bc4bad5ada88bb0e = cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_3fe76aec9f860e46bc4bad5ada88bb0e);
    assert(Py_REFCNT(frame_3fe76aec9f860e46bc4bad5ada88bb0e) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_create_constraint);
        tmp_assattr_value_1 = par_create_constraint;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[178], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1935;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_name);
        tmp_assattr_value_2 = par_name;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[97], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1936;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par__create_events);
        tmp_assattr_value_3 = par__create_events;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[133], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1937;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3fe76aec9f860e46bc4bad5ada88bb0e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3fe76aec9f860e46bc4bad5ada88bb0e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3fe76aec9f860e46bc4bad5ada88bb0e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3fe76aec9f860e46bc4bad5ada88bb0e,
        type_description_1,
        par_self,
        par_create_constraint,
        par_name,
        par__create_events
    );


    // Release cached frame if used for exception.
    if (frame_3fe76aec9f860e46bc4bad5ada88bb0e == cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e);
        cache_frame_3fe76aec9f860e46bc4bad5ada88bb0e = NULL;
    }

    assertFrameObject(frame_3fe76aec9f860e46bc4bad5ada88bb0e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_create_constraint);
    Py_DECREF(par_create_constraint);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_create_constraint);
    Py_DECREF(par_create_constraint);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_compiler = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_626f15039653823855dba21445a737d7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_626f15039653823855dba21445a737d7 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_626f15039653823855dba21445a737d7)) {
        Py_XDECREF(cache_frame_626f15039653823855dba21445a737d7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_626f15039653823855dba21445a737d7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_626f15039653823855dba21445a737d7 = MAKE_FUNCTION_FRAME(tstate, codeobj_626f15039653823855dba21445a737d7, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_626f15039653823855dba21445a737d7->m_type_description == NULL);
    frame_626f15039653823855dba21445a737d7 = cache_frame_626f15039653823855dba21445a737d7;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_626f15039653823855dba21445a737d7);
    assert(Py_REFCNT(frame_626f15039653823855dba21445a737d7) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[165]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1940;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_2 = par_compiler;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1940;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_626f15039653823855dba21445a737d7->m_frame.f_lineno = 1940;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1940;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1940;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_4 = par_compiler;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[32]);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1943;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[270]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_operand_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1943;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1943;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_6 = par_compiler;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[32]);
        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1944;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[271]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_and_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1944;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        Py_INCREF(tmp_and_left_value_1);
        tmp_return_value = tmp_and_left_value_1;
        and_end_1:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_626f15039653823855dba21445a737d7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_626f15039653823855dba21445a737d7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_626f15039653823855dba21445a737d7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_626f15039653823855dba21445a737d7,
        type_description_1,
        par_self,
        par_compiler,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_626f15039653823855dba21445a737d7 == cache_frame_626f15039653823855dba21445a737d7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_626f15039653823855dba21445a737d7);
        cache_frame_626f15039653823855dba21445a737d7 = NULL;
    }

    assertFrameObject(frame_626f15039653823855dba21445a737d7);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__94__set_table(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_table = python_pars[2];
    PyObject *var_schema = NULL;
    PyObject *var_variant_mapping = NULL;
    PyObject *var_e = NULL;
    struct Nuitka_FrameObject *frame_02fa2f175ce00e86181c18b5a06b2be0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_02fa2f175ce00e86181c18b5a06b2be0 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_02fa2f175ce00e86181c18b5a06b2be0)) {
        Py_XDECREF(cache_frame_02fa2f175ce00e86181c18b5a06b2be0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_02fa2f175ce00e86181c18b5a06b2be0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_02fa2f175ce00e86181c18b5a06b2be0 = MAKE_FUNCTION_FRAME(tstate, codeobj_02fa2f175ce00e86181c18b5a06b2be0, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_02fa2f175ce00e86181c18b5a06b2be0->m_type_description == NULL);
    frame_02fa2f175ce00e86181c18b5a06b2be0 = cache_frame_02fa2f175ce00e86181c18b5a06b2be0;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_02fa2f175ce00e86181c18b5a06b2be0);
    assert(Py_REFCNT(frame_02fa2f175ce00e86181c18b5a06b2be0) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1949;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[240]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1949;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[241]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1949;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_schema == NULL);
        var_schema = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[178]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1950;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1950;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_1 = par_column;
        frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame.f_lineno = 1953;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[149], tmp_args_element_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1953;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        CHECK_OBJECT(var_schema);
        tmp_expression_value_4 = var_schema;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[242]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1955;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[243]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[243]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1956;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_args_element_value_2 = par_column;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_3 = par_self;
        frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame.f_lineno = 1956;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_called_instance_2 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_2, call_args);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1956;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_call_arg_element_1 = MAKE_LIST2(mod_consts[52],mod_consts[272]);
        frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame.f_lineno = 1956;
        tmp_kw_call_arg_value_0_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_2, mod_consts[244], tmp_call_arg_element_1);
        Py_DECREF(tmp_called_instance_2);
        Py_DECREF(tmp_call_arg_element_1);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1956;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[97]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1957;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_2 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_kw_call_dict_value_0_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[245]);

        if (unlikely(tmp_kw_call_dict_value_0_1 == NULL)) {
            tmp_kw_call_dict_value_0_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[245]);
        }

        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1957;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_INCREF(tmp_kw_call_dict_value_0_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[97]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1957;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1958;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[137]);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1958;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[246]);
        if (tmp_args_element_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1959;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[148];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_5 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_5, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame.f_lineno = 1958;
        {
            PyObject *call_args[] = {tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_4);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1958;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_1 = Py_True;
        frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame.f_lineno = 1955;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[247]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1955;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_e == NULL);
        var_e = tmp_assign_source_3;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(var_e);
        tmp_expression_value_9 = var_e;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[248]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1964;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_cmp_expr_right_2 = par_table;
        tmp_condition_result_3 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_condition_result_3 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1964;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_02fa2f175ce00e86181c18b5a06b2be0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_02fa2f175ce00e86181c18b5a06b2be0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_02fa2f175ce00e86181c18b5a06b2be0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_02fa2f175ce00e86181c18b5a06b2be0,
        type_description_1,
        par_self,
        par_column,
        par_table,
        var_schema,
        var_variant_mapping,
        var_e
    );


    // Release cached frame if used for exception.
    if (frame_02fa2f175ce00e86181c18b5a06b2be0 == cache_frame_02fa2f175ce00e86181c18b5a06b2be0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_02fa2f175ce00e86181c18b5a06b2be0);
        cache_frame_02fa2f175ce00e86181c18b5a06b2be0 = NULL;
    }

    assertFrameObject(frame_02fa2f175ce00e86181c18b5a06b2be0);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    struct Nuitka_FrameObject *frame_2bd8805a9cbc7c13e67d737734aa3c69;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_2bd8805a9cbc7c13e67d737734aa3c69 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2bd8805a9cbc7c13e67d737734aa3c69)) {
        Py_XDECREF(cache_frame_2bd8805a9cbc7c13e67d737734aa3c69);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2bd8805a9cbc7c13e67d737734aa3c69 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2bd8805a9cbc7c13e67d737734aa3c69 = MAKE_FUNCTION_FRAME(tstate, codeobj_2bd8805a9cbc7c13e67d737734aa3c69, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_2bd8805a9cbc7c13e67d737734aa3c69->m_type_description == NULL);
    frame_2bd8805a9cbc7c13e67d737734aa3c69 = cache_frame_2bd8805a9cbc7c13e67d737734aa3c69;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_2bd8805a9cbc7c13e67d737734aa3c69);
    assert(Py_REFCNT(frame_2bd8805a9cbc7c13e67d737734aa3c69) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[273]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1974;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1974;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        tmp_mod_expr_left_1 = mod_consts[274];
        CHECK_OBJECT(par_value);
        tmp_tuple_element_1 = par_value;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1975;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_2bd8805a9cbc7c13e67d737734aa3c69->m_frame.f_lineno = 1975;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_TypeError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1975;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_mod_expr_left_2;
        PyObject *tmp_mod_expr_right_2;
        PyObject *tmp_tuple_element_2;
        tmp_mod_expr_left_2 = mod_consts[275];
        CHECK_OBJECT(par_value);
        tmp_tuple_element_2 = par_value;
        tmp_mod_expr_right_2 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_mod_expr_right_2, 0, tmp_tuple_element_2);
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_2, tmp_mod_expr_right_2);
        Py_DECREF(tmp_mod_expr_right_2);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1978;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_2bd8805a9cbc7c13e67d737734aa3c69->m_frame.f_lineno = 1977;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_ValueError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 1977;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2bd8805a9cbc7c13e67d737734aa3c69, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2bd8805a9cbc7c13e67d737734aa3c69->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2bd8805a9cbc7c13e67d737734aa3c69, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2bd8805a9cbc7c13e67d737734aa3c69,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_2bd8805a9cbc7c13e67d737734aa3c69 == cache_frame_2bd8805a9cbc7c13e67d737734aa3c69) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_2bd8805a9cbc7c13e67d737734aa3c69);
        cache_frame_2bd8805a9cbc7c13e67d737734aa3c69 = NULL;
    }

    assertFrameObject(frame_2bd8805a9cbc7c13e67d737734aa3c69);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *var_compiler = NULL;
    struct Nuitka_CellObject *var_true = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_false = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_70b6465292cb8ebb4d90aed986b2aa6d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_70b6465292cb8ebb4d90aed986b2aa6d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_70b6465292cb8ebb4d90aed986b2aa6d)) {
        Py_XDECREF(cache_frame_70b6465292cb8ebb4d90aed986b2aa6d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_70b6465292cb8ebb4d90aed986b2aa6d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_70b6465292cb8ebb4d90aed986b2aa6d = MAKE_FUNCTION_FRAME(tstate, codeobj_70b6465292cb8ebb4d90aed986b2aa6d, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_70b6465292cb8ebb4d90aed986b2aa6d->m_type_description == NULL);
    frame_70b6465292cb8ebb4d90aed986b2aa6d = cache_frame_70b6465292cb8ebb4d90aed986b2aa6d;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_70b6465292cb8ebb4d90aed986b2aa6d);
    assert(Py_REFCNT(frame_70b6465292cb8ebb4d90aed986b2aa6d) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_dialect);
        tmp_called_instance_1 = par_dialect;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        tmp_args_element_value_2 = Py_None;
        frame_70b6465292cb8ebb4d90aed986b2aa6d->m_frame.f_lineno = 1983;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[276],
                call_args
            );
        }

        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1983;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(var_compiler == NULL);
        var_compiler = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_compiler);
        tmp_called_instance_2 = var_compiler;
        frame_70b6465292cb8ebb4d90aed986b2aa6d->m_frame.f_lineno = 1984;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tstate,
            tmp_called_instance_2,
            mod_consts[277],
            PyTuple_GET_ITEM(mod_consts[278], 0)
        );

        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1984;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_true) == NULL);
        PyCell_SET(var_true, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT(var_compiler);
        tmp_called_instance_3 = var_compiler;
        frame_70b6465292cb8ebb4d90aed986b2aa6d->m_frame.f_lineno = 1985;
        tmp_assign_source_3 = CALL_METHOD_WITH_SINGLE_ARG(
            tstate,
            tmp_called_instance_3,
            mod_consts[279],
            PyTuple_GET_ITEM(mod_consts[278], 0)
        );

        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1985;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_false) == NULL);
        PyCell_SET(var_false, tmp_assign_source_3);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_70b6465292cb8ebb4d90aed986b2aa6d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_70b6465292cb8ebb4d90aed986b2aa6d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_70b6465292cb8ebb4d90aed986b2aa6d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_70b6465292cb8ebb4d90aed986b2aa6d,
        type_description_1,
        par_self,
        par_dialect,
        var_compiler,
        var_true,
        var_false,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_70b6465292cb8ebb4d90aed986b2aa6d == cache_frame_70b6465292cb8ebb4d90aed986b2aa6d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_70b6465292cb8ebb4d90aed986b2aa6d);
        cache_frame_70b6465292cb8ebb4d90aed986b2aa6d = NULL;
    }

    assertFrameObject(frame_70b6465292cb8ebb4d90aed986b2aa6d);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_false;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_true;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_compiler);
    Py_DECREF(var_compiler);
    var_compiler = NULL;
    CHECK_OBJECT(var_true);
    Py_DECREF(var_true);
    var_true = NULL;
    CHECK_OBJECT(var_false);
    Py_DECREF(var_false);
    var_false = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_compiler);
    var_compiler = NULL;
    CHECK_OBJECT(var_true);
    Py_DECREF(var_true);
    var_true = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_7c593997b229d4af744026257e566d69;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7c593997b229d4af744026257e566d69 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7c593997b229d4af744026257e566d69)) {
        Py_XDECREF(cache_frame_7c593997b229d4af744026257e566d69);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7c593997b229d4af744026257e566d69 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7c593997b229d4af744026257e566d69 = MAKE_FUNCTION_FRAME(tstate, codeobj_7c593997b229d4af744026257e566d69, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7c593997b229d4af744026257e566d69->m_type_description == NULL);
    frame_7c593997b229d4af744026257e566d69 = cache_frame_7c593997b229d4af744026257e566d69;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7c593997b229d4af744026257e566d69);
    assert(Py_REFCNT(frame_7c593997b229d4af744026257e566d69) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1988;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_7c593997b229d4af744026257e566d69->m_frame.f_lineno = 1988;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[281], tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1988;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 1988;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[282]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1988;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_return_value = Nuitka_Cell_GET(self->m_closure[2]);
        goto condexpr_end_1;
        condexpr_false_1:;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[283]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1988;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_return_value = Nuitka_Cell_GET(self->m_closure[0]);
        condexpr_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7c593997b229d4af744026257e566d69, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7c593997b229d4af744026257e566d69->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7c593997b229d4af744026257e566d69, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7c593997b229d4af744026257e566d69,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[2],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7c593997b229d4af744026257e566d69 == cache_frame_7c593997b229d4af744026257e566d69) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7c593997b229d4af744026257e566d69);
        cache_frame_7c593997b229d4af744026257e566d69 = NULL;
    }

    assertFrameObject(frame_7c593997b229d4af744026257e566d69);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var__strict_as_bool = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var__coerce = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_6b2fdf7acf092486e60e6c4b91bdaacf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf)) {
        Py_XDECREF(cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf = MAKE_FUNCTION_FRAME(tstate, codeobj_6b2fdf7acf092486e60e6c4b91bdaacf, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf->m_type_description == NULL);
    frame_6b2fdf7acf092486e60e6c4b91bdaacf = cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_6b2fdf7acf092486e60e6c4b91bdaacf);
    assert(Py_REFCNT(frame_6b2fdf7acf092486e60e6c4b91bdaacf) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[281]);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1993;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var__strict_as_bool) == NULL);
        PyCell_SET(var__strict_as_bool, tmp_assign_source_1);

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[270]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1994;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1994;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = (PyObject *)&PyBool_Type;
        assert(Nuitka_Cell_GET(var__coerce) == NULL);
        Py_INCREF(tmp_assign_source_2);
        PyCell_SET(var__coerce, tmp_assign_source_2);

    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = (PyObject *)&PyLong_Type;
        assert(Nuitka_Cell_GET(var__coerce) == NULL);
        Py_INCREF(tmp_assign_source_3);
        PyCell_SET(var__coerce, tmp_assign_source_3);

    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6b2fdf7acf092486e60e6c4b91bdaacf, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6b2fdf7acf092486e60e6c4b91bdaacf->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6b2fdf7acf092486e60e6c4b91bdaacf, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6b2fdf7acf092486e60e6c4b91bdaacf,
        type_description_1,
        par_self,
        par_dialect,
        var__strict_as_bool,
        var__coerce,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_6b2fdf7acf092486e60e6c4b91bdaacf == cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf);
        cache_frame_6b2fdf7acf092486e60e6c4b91bdaacf = NULL;
    }

    assertFrameObject(frame_6b2fdf7acf092486e60e6c4b91bdaacf);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var__coerce;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var__strict_as_bool;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var__strict_as_bool);
    Py_DECREF(var__strict_as_bool);
    var__strict_as_bool = NULL;
    CHECK_OBJECT(var__coerce);
    Py_DECREF(var__coerce);
    var__coerce = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var__strict_as_bool);
    Py_DECREF(var__strict_as_bool);
    var__strict_as_bool = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d2e311dba25391f084fb5587bbee1e49;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d2e311dba25391f084fb5587bbee1e49 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d2e311dba25391f084fb5587bbee1e49)) {
        Py_XDECREF(cache_frame_d2e311dba25391f084fb5587bbee1e49);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2e311dba25391f084fb5587bbee1e49 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2e311dba25391f084fb5587bbee1e49 = MAKE_FUNCTION_FRAME(tstate, codeobj_d2e311dba25391f084fb5587bbee1e49, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d2e311dba25391f084fb5587bbee1e49->m_type_description == NULL);
    frame_d2e311dba25391f084fb5587bbee1e49 = cache_frame_d2e311dba25391f084fb5587bbee1e49;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d2e311dba25391f084fb5587bbee1e49);
    assert(Py_REFCNT(frame_d2e311dba25391f084fb5587bbee1e49) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[281]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2000;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_d2e311dba25391f084fb5587bbee1e49->m_frame.f_lineno = 2000;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2000;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[285]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2002;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_d2e311dba25391f084fb5587bbee1e49->m_frame.f_lineno = 2002;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2002;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2e311dba25391f084fb5587bbee1e49, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2e311dba25391f084fb5587bbee1e49->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2e311dba25391f084fb5587bbee1e49, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2e311dba25391f084fb5587bbee1e49,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_d2e311dba25391f084fb5587bbee1e49 == cache_frame_d2e311dba25391f084fb5587bbee1e49) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d2e311dba25391f084fb5587bbee1e49);
        cache_frame_d2e311dba25391f084fb5587bbee1e49 = NULL;
    }

    assertFrameObject(frame_d2e311dba25391f084fb5587bbee1e49);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__99_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_5c72b10f9b4b51ccf6a0f605a349415b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_5c72b10f9b4b51ccf6a0f605a349415b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5c72b10f9b4b51ccf6a0f605a349415b)) {
        Py_XDECREF(cache_frame_5c72b10f9b4b51ccf6a0f605a349415b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5c72b10f9b4b51ccf6a0f605a349415b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5c72b10f9b4b51ccf6a0f605a349415b = MAKE_FUNCTION_FRAME(tstate, codeobj_5c72b10f9b4b51ccf6a0f605a349415b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5c72b10f9b4b51ccf6a0f605a349415b->m_type_description == NULL);
    frame_5c72b10f9b4b51ccf6a0f605a349415b = cache_frame_5c72b10f9b4b51ccf6a0f605a349415b;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5c72b10f9b4b51ccf6a0f605a349415b);
    assert(Py_REFCNT(frame_5c72b10f9b4b51ccf6a0f605a349415b) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[270]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2008;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 2008;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[60]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2011;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[286]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2011;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5c72b10f9b4b51ccf6a0f605a349415b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5c72b10f9b4b51ccf6a0f605a349415b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5c72b10f9b4b51ccf6a0f605a349415b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5c72b10f9b4b51ccf6a0f605a349415b,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_5c72b10f9b4b51ccf6a0f605a349415b == cache_frame_5c72b10f9b4b51ccf6a0f605a349415b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5c72b10f9b4b51ccf6a0f605a349415b);
        cache_frame_5c72b10f9b4b51ccf6a0f605a349415b = NULL;
    }

    assertFrameObject(frame_5c72b10f9b4b51ccf6a0f605a349415b);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_0cd02c703c2775b783b9936a6f233d17;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_0cd02c703c2775b783b9936a6f233d17 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0cd02c703c2775b783b9936a6f233d17)) {
        Py_XDECREF(cache_frame_0cd02c703c2775b783b9936a6f233d17);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0cd02c703c2775b783b9936a6f233d17 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0cd02c703c2775b783b9936a6f233d17 = MAKE_FUNCTION_FRAME(tstate, codeobj_0cd02c703c2775b783b9936a6f233d17, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_0cd02c703c2775b783b9936a6f233d17->m_type_description == NULL);
    frame_0cd02c703c2775b783b9936a6f233d17 = cache_frame_0cd02c703c2775b783b9936a6f233d17;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_0cd02c703c2775b783b9936a6f233d17);
    assert(Py_REFCNT(frame_0cd02c703c2775b783b9936a6f233d17) == 2);

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2021;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2021;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 2022;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 2022;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 4 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2022;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2023;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2023;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2023;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2025;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2025;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2025;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_6;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_10;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2021;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[83]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2027;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_6);
            if (tmp_dict_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2028;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[82]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_8);
            if (tmp_dict_value_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2029;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_9 == NULL)) {
                tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_9 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[81]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_10 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_10);
            if (tmp_dict_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            Py_DECREF(tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2030;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0cd02c703c2775b783b9936a6f233d17, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0cd02c703c2775b783b9936a6f233d17->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0cd02c703c2775b783b9936a6f233d17, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0cd02c703c2775b783b9936a6f233d17,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_0cd02c703c2775b783b9936a6f233d17 == cache_frame_0cd02c703c2775b783b9936a6f233d17) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_0cd02c703c2775b783b9936a6f233d17);
        cache_frame_0cd02c703c2775b783b9936a6f233d17 = NULL;
    }

    assertFrameObject(frame_0cd02c703c2775b783b9936a6f233d17);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__101__type_affinity(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_69cd121a9e7915ea43e980bbfb781ba4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_69cd121a9e7915ea43e980bbfb781ba4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_69cd121a9e7915ea43e980bbfb781ba4)) {
        Py_XDECREF(cache_frame_69cd121a9e7915ea43e980bbfb781ba4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_69cd121a9e7915ea43e980bbfb781ba4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_69cd121a9e7915ea43e980bbfb781ba4 = MAKE_FUNCTION_FRAME(tstate, codeobj_69cd121a9e7915ea43e980bbfb781ba4, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_69cd121a9e7915ea43e980bbfb781ba4->m_type_description == NULL);
    frame_69cd121a9e7915ea43e980bbfb781ba4 = cache_frame_69cd121a9e7915ea43e980bbfb781ba4;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_69cd121a9e7915ea43e980bbfb781ba4);
    assert(Py_REFCNT(frame_69cd121a9e7915ea43e980bbfb781ba4) == 2);

    // Framed code:
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
    }

    if (tmp_return_value == NULL) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


        exception_lineno = 2035;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_69cd121a9e7915ea43e980bbfb781ba4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_69cd121a9e7915ea43e980bbfb781ba4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_69cd121a9e7915ea43e980bbfb781ba4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_69cd121a9e7915ea43e980bbfb781ba4,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_69cd121a9e7915ea43e980bbfb781ba4 == cache_frame_69cd121a9e7915ea43e980bbfb781ba4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_69cd121a9e7915ea43e980bbfb781ba4);
        cache_frame_69cd121a9e7915ea43e980bbfb781ba4 = NULL;
    }

    assertFrameObject(frame_69cd121a9e7915ea43e980bbfb781ba4);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_value = python_pars[2];
    struct Nuitka_FrameObject *frame_8f8e59509cf5dd0cddb84c2d22b10dcf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf)) {
        Py_XDECREF(cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf = MAKE_FUNCTION_FRAME(tstate, codeobj_8f8e59509cf5dd0cddb84c2d22b10dcf, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf->m_type_description == NULL);
    frame_8f8e59509cf5dd0cddb84c2d22b10dcf = cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8f8e59509cf5dd0cddb84c2d22b10dcf);
    assert(Py_REFCNT(frame_8f8e59509cf5dd0cddb84c2d22b10dcf) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[146]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2039;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_8f8e59509cf5dd0cddb84c2d22b10dcf->m_frame.f_lineno = 2039;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[124],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2039;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8f8e59509cf5dd0cddb84c2d22b10dcf, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8f8e59509cf5dd0cddb84c2d22b10dcf->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8f8e59509cf5dd0cddb84c2d22b10dcf, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8f8e59509cf5dd0cddb84c2d22b10dcf,
        type_description_1,
        par_self,
        par_op,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_8f8e59509cf5dd0cddb84c2d22b10dcf == cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf);
        cache_frame_8f8e59509cf5dd0cddb84c2d22b10dcf = NULL;
    }

    assertFrameObject(frame_8f8e59509cf5dd0cddb84c2d22b10dcf);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__103___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_native = python_pars[1];
    PyObject *par_second_precision = python_pars[2];
    PyObject *par_day_precision = python_pars[3];
    struct Nuitka_FrameObject *frame_e1977a2d725d12c80b7a6caec89fcb30;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_e1977a2d725d12c80b7a6caec89fcb30 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e1977a2d725d12c80b7a6caec89fcb30)) {
        Py_XDECREF(cache_frame_e1977a2d725d12c80b7a6caec89fcb30);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e1977a2d725d12c80b7a6caec89fcb30 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e1977a2d725d12c80b7a6caec89fcb30 = MAKE_FUNCTION_FRAME(tstate, codeobj_e1977a2d725d12c80b7a6caec89fcb30, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e1977a2d725d12c80b7a6caec89fcb30->m_type_description == NULL);
    frame_e1977a2d725d12c80b7a6caec89fcb30 = cache_frame_e1977a2d725d12c80b7a6caec89fcb30;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e1977a2d725d12c80b7a6caec89fcb30);
    assert(Py_REFCNT(frame_e1977a2d725d12c80b7a6caec89fcb30) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        frame_e1977a2d725d12c80b7a6caec89fcb30->m_frame.f_lineno = 2086;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_1, mod_consts[70]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_native);
        tmp_assattr_value_1 = par_native;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[287], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2087;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_second_precision);
        tmp_assattr_value_2 = par_second_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[288], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2088;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_day_precision);
        tmp_assattr_value_3 = par_day_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[289], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2089;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e1977a2d725d12c80b7a6caec89fcb30, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e1977a2d725d12c80b7a6caec89fcb30->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e1977a2d725d12c80b7a6caec89fcb30, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e1977a2d725d12c80b7a6caec89fcb30,
        type_description_1,
        par_self,
        par_native,
        par_second_precision,
        par_day_precision,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_e1977a2d725d12c80b7a6caec89fcb30 == cache_frame_e1977a2d725d12c80b7a6caec89fcb30) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e1977a2d725d12c80b7a6caec89fcb30);
        cache_frame_e1977a2d725d12c80b7a6caec89fcb30 = NULL;
    }

    assertFrameObject(frame_e1977a2d725d12c80b7a6caec89fcb30);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_native);
    Py_DECREF(par_native);
    CHECK_OBJECT(par_second_precision);
    Py_DECREF(par_second_precision);
    CHECK_OBJECT(par_day_precision);
    Py_DECREF(par_day_precision);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_native);
    Py_DECREF(par_native);
    CHECK_OBJECT(par_second_precision);
    Py_DECREF(par_second_precision);
    CHECK_OBJECT(par_day_precision);
    Py_DECREF(par_day_precision);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__104_python_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_c39aad65e86349b425603ac858b36a6c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c39aad65e86349b425603ac858b36a6c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c39aad65e86349b425603ac858b36a6c)) {
        Py_XDECREF(cache_frame_c39aad65e86349b425603ac858b36a6c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c39aad65e86349b425603ac858b36a6c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c39aad65e86349b425603ac858b36a6c = MAKE_FUNCTION_FRAME(tstate, codeobj_c39aad65e86349b425603ac858b36a6c, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_c39aad65e86349b425603ac858b36a6c->m_type_description == NULL);
    frame_c39aad65e86349b425603ac858b36a6c = cache_frame_c39aad65e86349b425603ac858b36a6c;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_c39aad65e86349b425603ac858b36a6c);
    assert(Py_REFCNT(frame_c39aad65e86349b425603ac858b36a6c) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2093;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[291]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2093;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c39aad65e86349b425603ac858b36a6c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c39aad65e86349b425603ac858b36a6c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c39aad65e86349b425603ac858b36a6c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c39aad65e86349b425603ac858b36a6c,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_c39aad65e86349b425603ac858b36a6c == cache_frame_c39aad65e86349b425603ac858b36a6c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_c39aad65e86349b425603ac858b36a6c);
        cache_frame_c39aad65e86349b425603ac858b36a6c = NULL;
    }

    assertFrameObject(frame_c39aad65e86349b425603ac858b36a6c);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_63e12dc9752003f7d1300b5a9d89f566;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_63e12dc9752003f7d1300b5a9d89f566 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_63e12dc9752003f7d1300b5a9d89f566)) {
        Py_XDECREF(cache_frame_63e12dc9752003f7d1300b5a9d89f566);

#if _DEBUG_REFCOUNTS
        if (cache_frame_63e12dc9752003f7d1300b5a9d89f566 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_63e12dc9752003f7d1300b5a9d89f566 = MAKE_FUNCTION_FRAME(tstate, codeobj_63e12dc9752003f7d1300b5a9d89f566, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_63e12dc9752003f7d1300b5a9d89f566->m_type_description == NULL);
    frame_63e12dc9752003f7d1300b5a9d89f566 = cache_frame_63e12dc9752003f7d1300b5a9d89f566;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_63e12dc9752003f7d1300b5a9d89f566);
    assert(Py_REFCNT(frame_63e12dc9752003f7d1300b5a9d89f566) == 2);

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[292]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[292]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2096;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[152]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2096;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_impltype);
        tmp_tuple_element_1 = par_impltype;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2096;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_63e12dc9752003f7d1300b5a9d89f566, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_63e12dc9752003f7d1300b5a9d89f566->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_63e12dc9752003f7d1300b5a9d89f566, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_63e12dc9752003f7d1300b5a9d89f566,
        type_description_1,
        par_self,
        par_impltype,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_63e12dc9752003f7d1300b5a9d89f566 == cache_frame_63e12dc9752003f7d1300b5a9d89f566) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_63e12dc9752003f7d1300b5a9d89f566);
        cache_frame_63e12dc9752003f7d1300b5a9d89f566 = NULL;
    }

    assertFrameObject(frame_63e12dc9752003f7d1300b5a9d89f566);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_epoch = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_7dc3a592a8957d237412cb3869c0d59b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7dc3a592a8957d237412cb3869c0d59b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7dc3a592a8957d237412cb3869c0d59b)) {
        Py_XDECREF(cache_frame_7dc3a592a8957d237412cb3869c0d59b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7dc3a592a8957d237412cb3869c0d59b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7dc3a592a8957d237412cb3869c0d59b = MAKE_FUNCTION_FRAME(tstate, codeobj_7dc3a592a8957d237412cb3869c0d59b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7dc3a592a8957d237412cb3869c0d59b->m_type_description == NULL);
    frame_7dc3a592a8957d237412cb3869c0d59b = cache_frame_7dc3a592a8957d237412cb3869c0d59b;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7dc3a592a8957d237412cb3869c0d59b);
    assert(Py_REFCNT(frame_7dc3a592a8957d237412cb3869c0d59b) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[146]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_7dc3a592a8957d237412cb3869c0d59b->m_frame.f_lineno = 2099;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[252], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[293]);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2100;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_epoch) == NULL);
        PyCell_SET(var_epoch, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2101;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_epoch;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_epoch;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7dc3a592a8957d237412cb3869c0d59b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7dc3a592a8957d237412cb3869c0d59b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7dc3a592a8957d237412cb3869c0d59b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7dc3a592a8957d237412cb3869c0d59b,
        type_description_1,
        par_self,
        par_dialect,
        var_impl_processor,
        var_epoch,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_7dc3a592a8957d237412cb3869c0d59b == cache_frame_7dc3a592a8957d237412cb3869c0d59b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7dc3a592a8957d237412cb3869c0d59b);
        cache_frame_7dc3a592a8957d237412cb3869c0d59b = NULL;
    }

    assertFrameObject(frame_7dc3a592a8957d237412cb3869c0d59b);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_6870cd705409694c096203ac688e3f94;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6870cd705409694c096203ac688e3f94 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6870cd705409694c096203ac688e3f94)) {
        Py_XDECREF(cache_frame_6870cd705409694c096203ac688e3f94);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6870cd705409694c096203ac688e3f94 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6870cd705409694c096203ac688e3f94 = MAKE_FUNCTION_FRAME(tstate, codeobj_6870cd705409694c096203ac688e3f94, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_6870cd705409694c096203ac688e3f94->m_type_description == NULL);
    frame_6870cd705409694c096203ac688e3f94 = cache_frame_6870cd705409694c096203ac688e3f94;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_6870cd705409694c096203ac688e3f94);
    assert(Py_REFCNT(frame_6870cd705409694c096203ac688e3f94) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_add_expr_left_1;
        PyObject *tmp_add_expr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[293]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2105;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_add_expr_left_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_add_expr_right_1 = par_value;
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_add_expr_left_1, tmp_add_expr_right_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2105;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[266]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2106;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_6870cd705409694c096203ac688e3f94->m_frame.f_lineno = 2106;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2106;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6870cd705409694c096203ac688e3f94, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6870cd705409694c096203ac688e3f94->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6870cd705409694c096203ac688e3f94, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6870cd705409694c096203ac688e3f94,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_6870cd705409694c096203ac688e3f94 == cache_frame_6870cd705409694c096203ac688e3f94) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_6870cd705409694c096203ac688e3f94);
        cache_frame_6870cd705409694c096203ac688e3f94 = NULL;
    }

    assertFrameObject(frame_6870cd705409694c096203ac688e3f94);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_f302782f2887664f0f81e60fcde974ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f302782f2887664f0f81e60fcde974ef = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f302782f2887664f0f81e60fcde974ef)) {
        Py_XDECREF(cache_frame_f302782f2887664f0f81e60fcde974ef);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f302782f2887664f0f81e60fcde974ef == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f302782f2887664f0f81e60fcde974ef = MAKE_FUNCTION_FRAME(tstate, codeobj_f302782f2887664f0f81e60fcde974ef, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_f302782f2887664f0f81e60fcde974ef->m_type_description == NULL);
    frame_f302782f2887664f0f81e60fcde974ef = cache_frame_f302782f2887664f0f81e60fcde974ef;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_f302782f2887664f0f81e60fcde974ef);
    assert(Py_REFCNT(frame_f302782f2887664f0f81e60fcde974ef) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_add_expr_left_1;
        PyObject *tmp_add_expr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[293]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2112;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_add_expr_left_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_add_expr_right_1 = par_value;
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_add_expr_left_1, tmp_add_expr_right_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2112;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f302782f2887664f0f81e60fcde974ef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f302782f2887664f0f81e60fcde974ef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f302782f2887664f0f81e60fcde974ef, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f302782f2887664f0f81e60fcde974ef,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_f302782f2887664f0f81e60fcde974ef == cache_frame_f302782f2887664f0f81e60fcde974ef) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_f302782f2887664f0f81e60fcde974ef);
        cache_frame_f302782f2887664f0f81e60fcde974ef = NULL;
    }

    assertFrameObject(frame_f302782f2887664f0f81e60fcde974ef);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_epoch = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_72a1c19d21e6be035c14bc845019e8bb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_72a1c19d21e6be035c14bc845019e8bb = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_72a1c19d21e6be035c14bc845019e8bb)) {
        Py_XDECREF(cache_frame_72a1c19d21e6be035c14bc845019e8bb);

#if _DEBUG_REFCOUNTS
        if (cache_frame_72a1c19d21e6be035c14bc845019e8bb == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_72a1c19d21e6be035c14bc845019e8bb = MAKE_FUNCTION_FRAME(tstate, codeobj_72a1c19d21e6be035c14bc845019e8bb, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_72a1c19d21e6be035c14bc845019e8bb->m_type_description == NULL);
    frame_72a1c19d21e6be035c14bc845019e8bb = cache_frame_72a1c19d21e6be035c14bc845019e8bb;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_72a1c19d21e6be035c14bc845019e8bb);
    assert(Py_REFCNT(frame_72a1c19d21e6be035c14bc845019e8bb) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[146]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2118;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_72a1c19d21e6be035c14bc845019e8bb->m_frame.f_lineno = 2118;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[254],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2118;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[293]);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2119;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_epoch) == NULL);
        PyCell_SET(var_epoch, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2120;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_epoch;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_epoch;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_72a1c19d21e6be035c14bc845019e8bb, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_72a1c19d21e6be035c14bc845019e8bb->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_72a1c19d21e6be035c14bc845019e8bb, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_72a1c19d21e6be035c14bc845019e8bb,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_impl_processor,
        var_epoch,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_72a1c19d21e6be035c14bc845019e8bb == cache_frame_72a1c19d21e6be035c14bc845019e8bb) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_72a1c19d21e6be035c14bc845019e8bb);
        cache_frame_72a1c19d21e6be035c14bc845019e8bb = NULL;
    }

    assertFrameObject(frame_72a1c19d21e6be035c14bc845019e8bb);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_a38c5228ea1ec6397f512a1e33be6501;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a38c5228ea1ec6397f512a1e33be6501 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a38c5228ea1ec6397f512a1e33be6501)) {
        Py_XDECREF(cache_frame_a38c5228ea1ec6397f512a1e33be6501);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a38c5228ea1ec6397f512a1e33be6501 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a38c5228ea1ec6397f512a1e33be6501 = MAKE_FUNCTION_FRAME(tstate, codeobj_a38c5228ea1ec6397f512a1e33be6501, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a38c5228ea1ec6397f512a1e33be6501->m_type_description == NULL);
    frame_a38c5228ea1ec6397f512a1e33be6501 = cache_frame_a38c5228ea1ec6397f512a1e33be6501;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a38c5228ea1ec6397f512a1e33be6501);
    assert(Py_REFCNT(frame_a38c5228ea1ec6397f512a1e33be6501) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[266]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2123;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_a38c5228ea1ec6397f512a1e33be6501->m_frame.f_lineno = 2123;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2123;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_sub_expr_left_1;
        PyObject *tmp_sub_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_sub_expr_left_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[293]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2126;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_sub_expr_right_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_return_value = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_sub_expr_left_1, tmp_sub_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2126;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a38c5228ea1ec6397f512a1e33be6501, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a38c5228ea1ec6397f512a1e33be6501->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a38c5228ea1ec6397f512a1e33be6501, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a38c5228ea1ec6397f512a1e33be6501,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_a38c5228ea1ec6397f512a1e33be6501 == cache_frame_a38c5228ea1ec6397f512a1e33be6501) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a38c5228ea1ec6397f512a1e33be6501);
        cache_frame_a38c5228ea1ec6397f512a1e33be6501 = NULL;
    }

    assertFrameObject(frame_a38c5228ea1ec6397f512a1e33be6501);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_7e98211beaef94e3ce7422d68cfdf4d1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7e98211beaef94e3ce7422d68cfdf4d1 = NULL;

    // Actual function body.
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_7e98211beaef94e3ce7422d68cfdf4d1)) {
        Py_XDECREF(cache_frame_7e98211beaef94e3ce7422d68cfdf4d1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7e98211beaef94e3ce7422d68cfdf4d1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7e98211beaef94e3ce7422d68cfdf4d1 = MAKE_FUNCTION_FRAME(tstate, codeobj_7e98211beaef94e3ce7422d68cfdf4d1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7e98211beaef94e3ce7422d68cfdf4d1->m_type_description == NULL);
    frame_7e98211beaef94e3ce7422d68cfdf4d1 = cache_frame_7e98211beaef94e3ce7422d68cfdf4d1;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7e98211beaef94e3ce7422d68cfdf4d1);
    assert(Py_REFCNT(frame_7e98211beaef94e3ce7422d68cfdf4d1) == 2);

    // Framed code:
    {
        PyObject *tmp_sub_expr_left_1;
        PyObject *tmp_sub_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_sub_expr_left_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[293]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2133;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_sub_expr_right_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_return_value = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_sub_expr_left_1, tmp_sub_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2133;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7e98211beaef94e3ce7422d68cfdf4d1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7e98211beaef94e3ce7422d68cfdf4d1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7e98211beaef94e3ce7422d68cfdf4d1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7e98211beaef94e3ce7422d68cfdf4d1,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7e98211beaef94e3ce7422d68cfdf4d1 == cache_frame_7e98211beaef94e3ce7422d68cfdf4d1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7e98211beaef94e3ce7422d68cfdf4d1);
        cache_frame_7e98211beaef94e3ce7422d68cfdf4d1 = NULL;
    }

    assertFrameObject(frame_7e98211beaef94e3ce7422d68cfdf4d1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__108___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_none_as_null = python_pars[1];
    struct Nuitka_FrameObject *frame_8e8c704bd4c8e39012c18136e28302b7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8e8c704bd4c8e39012c18136e28302b7 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8e8c704bd4c8e39012c18136e28302b7)) {
        Py_XDECREF(cache_frame_8e8c704bd4c8e39012c18136e28302b7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8e8c704bd4c8e39012c18136e28302b7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8e8c704bd4c8e39012c18136e28302b7 = MAKE_FUNCTION_FRAME(tstate, codeobj_8e8c704bd4c8e39012c18136e28302b7, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8e8c704bd4c8e39012c18136e28302b7->m_type_description == NULL);
    frame_8e8c704bd4c8e39012c18136e28302b7 = cache_frame_8e8c704bd4c8e39012c18136e28302b7;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8e8c704bd4c8e39012c18136e28302b7);
    assert(Py_REFCNT(frame_8e8c704bd4c8e39012c18136e28302b7) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_none_as_null);
        tmp_assattr_value_1 = par_none_as_null;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[296], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2417;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8e8c704bd4c8e39012c18136e28302b7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8e8c704bd4c8e39012c18136e28302b7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8e8c704bd4c8e39012c18136e28302b7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8e8c704bd4c8e39012c18136e28302b7,
        type_description_1,
        par_self,
        par_none_as_null
    );


    // Release cached frame if used for exception.
    if (frame_8e8c704bd4c8e39012c18136e28302b7 == cache_frame_8e8c704bd4c8e39012c18136e28302b7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8e8c704bd4c8e39012c18136e28302b7);
        cache_frame_8e8c704bd4c8e39012c18136e28302b7 = NULL;
    }

    assertFrameObject(frame_8e8c704bd4c8e39012c18136e28302b7);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_none_as_null);
    Py_DECREF(par_none_as_null);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_none_as_null);
    Py_DECREF(par_none_as_null);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_8fd9daf5853e0e821c3f286896028af7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8fd9daf5853e0e821c3f286896028af7 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8fd9daf5853e0e821c3f286896028af7)) {
        Py_XDECREF(cache_frame_8fd9daf5853e0e821c3f286896028af7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8fd9daf5853e0e821c3f286896028af7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8fd9daf5853e0e821c3f286896028af7 = MAKE_FUNCTION_FRAME(tstate, codeobj_8fd9daf5853e0e821c3f286896028af7, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8fd9daf5853e0e821c3f286896028af7->m_type_description == NULL);
    frame_8fd9daf5853e0e821c3f286896028af7 = cache_frame_8fd9daf5853e0e821c3f286896028af7;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8fd9daf5853e0e821c3f286896028af7);
    assert(Py_REFCNT(frame_8fd9daf5853e0e821c3f286896028af7) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[298]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2426;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_8fd9daf5853e0e821c3f286896028af7->m_frame.f_lineno = 2426;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[299], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2426;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8fd9daf5853e0e821c3f286896028af7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8fd9daf5853e0e821c3f286896028af7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8fd9daf5853e0e821c3f286896028af7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8fd9daf5853e0e821c3f286896028af7,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_8fd9daf5853e0e821c3f286896028af7 == cache_frame_8fd9daf5853e0e821c3f286896028af7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8fd9daf5853e0e821c3f286896028af7);
        cache_frame_8fd9daf5853e0e821c3f286896028af7 = NULL;
    }

    assertFrameObject(frame_8fd9daf5853e0e821c3f286896028af7);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_a902ceab51ee1c72b73341439a122c1a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a902ceab51ee1c72b73341439a122c1a = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a902ceab51ee1c72b73341439a122c1a)) {
        Py_XDECREF(cache_frame_a902ceab51ee1c72b73341439a122c1a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a902ceab51ee1c72b73341439a122c1a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a902ceab51ee1c72b73341439a122c1a = MAKE_FUNCTION_FRAME(tstate, codeobj_a902ceab51ee1c72b73341439a122c1a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a902ceab51ee1c72b73341439a122c1a->m_type_description == NULL);
    frame_a902ceab51ee1c72b73341439a122c1a = cache_frame_a902ceab51ee1c72b73341439a122c1a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a902ceab51ee1c72b73341439a122c1a);
    assert(Py_REFCNT(frame_a902ceab51ee1c72b73341439a122c1a) == 2);

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[298]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2429;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_a902ceab51ee1c72b73341439a122c1a->m_frame.f_lineno = 2429;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[300], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2429;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a902ceab51ee1c72b73341439a122c1a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a902ceab51ee1c72b73341439a122c1a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a902ceab51ee1c72b73341439a122c1a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a902ceab51ee1c72b73341439a122c1a,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_a902ceab51ee1c72b73341439a122c1a == cache_frame_a902ceab51ee1c72b73341439a122c1a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a902ceab51ee1c72b73341439a122c1a);
        cache_frame_a902ceab51ee1c72b73341439a122c1a = NULL;
    }

    assertFrameObject(frame_a902ceab51ee1c72b73341439a122c1a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_int_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_string_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_455d8e1951d4354fb0c6cb4f4898fd69;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_455d8e1951d4354fb0c6cb4f4898fd69 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_455d8e1951d4354fb0c6cb4f4898fd69)) {
        Py_XDECREF(cache_frame_455d8e1951d4354fb0c6cb4f4898fd69);

#if _DEBUG_REFCOUNTS
        if (cache_frame_455d8e1951d4354fb0c6cb4f4898fd69 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_455d8e1951d4354fb0c6cb4f4898fd69 = MAKE_FUNCTION_FRAME(tstate, codeobj_455d8e1951d4354fb0c6cb4f4898fd69, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_455d8e1951d4354fb0c6cb4f4898fd69->m_type_description == NULL);
    frame_455d8e1951d4354fb0c6cb4f4898fd69 = cache_frame_455d8e1951d4354fb0c6cb4f4898fd69;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_455d8e1951d4354fb0c6cb4f4898fd69);
    assert(Py_REFCNT(frame_455d8e1951d4354fb0c6cb4f4898fd69) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[301]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2432;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_455d8e1951d4354fb0c6cb4f4898fd69->m_frame.f_lineno = 2432;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[299], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2432;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_int_processor) == NULL);
        PyCell_SET(var_int_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_2 = par_dialect;
        frame_455d8e1951d4354fb0c6cb4f4898fd69->m_frame.f_lineno = 2433;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_2, mod_consts[302], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2433;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_processor) == NULL);
        PyCell_SET(var_string_processor, tmp_assign_source_2);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_455d8e1951d4354fb0c6cb4f4898fd69, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_455d8e1951d4354fb0c6cb4f4898fd69->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_455d8e1951d4354fb0c6cb4f4898fd69, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_455d8e1951d4354fb0c6cb4f4898fd69,
        type_description_1,
        par_self,
        par_dialect,
        var_int_processor,
        var_string_processor,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_455d8e1951d4354fb0c6cb4f4898fd69 == cache_frame_455d8e1951d4354fb0c6cb4f4898fd69) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_455d8e1951d4354fb0c6cb4f4898fd69);
        cache_frame_455d8e1951d4354fb0c6cb4f4898fd69 = NULL;
    }

    assertFrameObject(frame_455d8e1951d4354fb0c6cb4f4898fd69);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_int_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    CHECK_OBJECT(var_string_processor);
    Py_DECREF(var_string_processor);
    var_string_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_5d56852e46eecf9b918918c8d7c7b596;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_5d56852e46eecf9b918918c8d7c7b596 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_5d56852e46eecf9b918918c8d7c7b596)) {
        Py_XDECREF(cache_frame_5d56852e46eecf9b918918c8d7c7b596);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5d56852e46eecf9b918918c8d7c7b596 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5d56852e46eecf9b918918c8d7c7b596 = MAKE_FUNCTION_FRAME(tstate, codeobj_5d56852e46eecf9b918918c8d7c7b596, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5d56852e46eecf9b918918c8d7c7b596->m_type_description == NULL);
    frame_5d56852e46eecf9b918918c8d7c7b596 = cache_frame_5d56852e46eecf9b918918c8d7c7b596;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5d56852e46eecf9b918918c8d7c7b596);
    assert(Py_REFCNT(frame_5d56852e46eecf9b918918c8d7c7b596) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[304]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2436;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2436;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2436;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2436;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[304]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2437;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_5d56852e46eecf9b918918c8d7c7b596->m_frame.f_lineno = 2437;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2437;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[305]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_2 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[122]);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[305]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2439;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_5d56852e46eecf9b918918c8d7c7b596->m_frame.f_lineno = 2439;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2439;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5d56852e46eecf9b918918c8d7c7b596, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5d56852e46eecf9b918918c8d7c7b596->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5d56852e46eecf9b918918c8d7c7b596, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5d56852e46eecf9b918918c8d7c7b596,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_5d56852e46eecf9b918918c8d7c7b596 == cache_frame_5d56852e46eecf9b918918c8d7c7b596) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5d56852e46eecf9b918918c8d7c7b596);
        cache_frame_5d56852e46eecf9b918918c8d7c7b596 = NULL;
    }

    assertFrameObject(frame_5d56852e46eecf9b918918c8d7c7b596);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_int_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_string_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_15e6a851de498da4e983cb66c2336097;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_15e6a851de498da4e983cb66c2336097 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_15e6a851de498da4e983cb66c2336097)) {
        Py_XDECREF(cache_frame_15e6a851de498da4e983cb66c2336097);

#if _DEBUG_REFCOUNTS
        if (cache_frame_15e6a851de498da4e983cb66c2336097 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_15e6a851de498da4e983cb66c2336097 = MAKE_FUNCTION_FRAME(tstate, codeobj_15e6a851de498da4e983cb66c2336097, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_15e6a851de498da4e983cb66c2336097->m_type_description == NULL);
    frame_15e6a851de498da4e983cb66c2336097 = cache_frame_15e6a851de498da4e983cb66c2336097;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_15e6a851de498da4e983cb66c2336097);
    assert(Py_REFCNT(frame_15e6a851de498da4e983cb66c2336097) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[301]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2445;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_15e6a851de498da4e983cb66c2336097->m_frame.f_lineno = 2445;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[300], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2445;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_int_processor) == NULL);
        PyCell_SET(var_int_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_2 = par_dialect;
        frame_15e6a851de498da4e983cb66c2336097->m_frame.f_lineno = 2446;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_2, mod_consts[306], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2446;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_processor) == NULL);
        PyCell_SET(var_string_processor, tmp_assign_source_2);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_15e6a851de498da4e983cb66c2336097, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_15e6a851de498da4e983cb66c2336097->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_15e6a851de498da4e983cb66c2336097, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_15e6a851de498da4e983cb66c2336097,
        type_description_1,
        par_self,
        par_dialect,
        var_int_processor,
        var_string_processor,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_15e6a851de498da4e983cb66c2336097 == cache_frame_15e6a851de498da4e983cb66c2336097) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_15e6a851de498da4e983cb66c2336097);
        cache_frame_15e6a851de498da4e983cb66c2336097 = NULL;
    }

    assertFrameObject(frame_15e6a851de498da4e983cb66c2336097);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_int_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    CHECK_OBJECT(var_string_processor);
    Py_DECREF(var_string_processor);
    var_string_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_46b25776bd4ddeac141a592a403be131;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_46b25776bd4ddeac141a592a403be131 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_46b25776bd4ddeac141a592a403be131)) {
        Py_XDECREF(cache_frame_46b25776bd4ddeac141a592a403be131);

#if _DEBUG_REFCOUNTS
        if (cache_frame_46b25776bd4ddeac141a592a403be131 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_46b25776bd4ddeac141a592a403be131 = MAKE_FUNCTION_FRAME(tstate, codeobj_46b25776bd4ddeac141a592a403be131, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_46b25776bd4ddeac141a592a403be131->m_type_description == NULL);
    frame_46b25776bd4ddeac141a592a403be131 = cache_frame_46b25776bd4ddeac141a592a403be131;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_46b25776bd4ddeac141a592a403be131);
    assert(Py_REFCNT(frame_46b25776bd4ddeac141a592a403be131) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[304]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2449;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2449;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2449;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2449;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[304]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2450;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_46b25776bd4ddeac141a592a403be131->m_frame.f_lineno = 2450;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2450;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[305]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_2 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[122]);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2451;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[305]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2452;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_46b25776bd4ddeac141a592a403be131->m_frame.f_lineno = 2452;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2452;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_46b25776bd4ddeac141a592a403be131, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_46b25776bd4ddeac141a592a403be131->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_46b25776bd4ddeac141a592a403be131, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_46b25776bd4ddeac141a592a403be131,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_46b25776bd4ddeac141a592a403be131 == cache_frame_46b25776bd4ddeac141a592a403be131) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_46b25776bd4ddeac141a592a403be131);
        cache_frame_46b25776bd4ddeac141a592a403be131 = NULL;
    }

    assertFrameObject(frame_46b25776bd4ddeac141a592a403be131);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *var_operator = NULL;
    struct Nuitka_FrameObject *frame_5aae064b1d2797cd804c1de082b29707;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_5aae064b1d2797cd804c1de082b29707 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_5aae064b1d2797cd804c1de082b29707)) {
        Py_XDECREF(cache_frame_5aae064b1d2797cd804c1de082b29707);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5aae064b1d2797cd804c1de082b29707 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5aae064b1d2797cd804c1de082b29707 = MAKE_FUNCTION_FRAME(tstate, codeobj_5aae064b1d2797cd804c1de082b29707, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_5aae064b1d2797cd804c1de082b29707->m_type_description == NULL);
    frame_5aae064b1d2797cd804c1de082b29707 = cache_frame_5aae064b1d2797cd804c1de082b29707;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5aae064b1d2797cd804c1de082b29707);
    assert(Py_REFCNT(frame_5aae064b1d2797cd804c1de082b29707) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_1 = par_index;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2493;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[122]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2493;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2493;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2493;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_2 = par_index;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[224]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[224]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2494;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[308]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2494;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[309]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2494;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2493;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_expression_value_8;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[310]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2496;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[311]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2496;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[312]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2497;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[313]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2497;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_kw_call_arg_value_1_1 = par_index;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[12]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2499;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 2500;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[314]);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 2500;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[315]);

        if (unlikely(tmp_expression_value_8 == NULL)) {
            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[315]);
        }

        if (tmp_expression_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 2501;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[316]);
        if (tmp_kw_call_dict_value_2_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 2501;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_5aae064b1d2797cd804c1de082b29707->m_frame.f_lineno = 2496;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[317]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        Py_DECREF(tmp_kw_call_dict_value_2_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2496;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_9;
        tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_9 == NULL)) {
            tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2504;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[314]);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2504;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_operator == NULL);
        var_operator = tmp_assign_source_2;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_kw_call_arg_value_1_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_kw_call_dict_value_1_2;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_kw_call_dict_value_2_2;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_expression_value_15;
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[310]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2506;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[311]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2506;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312]);

        if (unlikely(tmp_expression_value_11 == NULL)) {
            tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[312]);
        }

        if (tmp_expression_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2507;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[313]);
        if (tmp_kw_call_arg_value_0_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2507;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_kw_call_arg_value_1_2 = par_index;
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_kw_call_dict_value_0_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[12]);
        if (tmp_kw_call_dict_value_0_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);

            exception_lineno = 2509;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);

            exception_lineno = 2510;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[318]);
        if (tmp_kw_call_dict_value_1_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);

            exception_lineno = 2510;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_3 = par_index;
        tmp_isinstance_cls_3 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_1_2);

            exception_lineno = 2512;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_expression_value_14 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[315]);

        if (unlikely(tmp_expression_value_14 == NULL)) {
            tmp_expression_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[315]);
        }

        if (tmp_expression_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_1_2);

            exception_lineno = 2511;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[319]);
        if (tmp_kw_call_dict_value_2_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_1_2);

            exception_lineno = 2511;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_expression_value_15 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[315]);

        if (unlikely(tmp_expression_value_15 == NULL)) {
            tmp_expression_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[315]);
        }

        if (tmp_expression_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_1_2);

            exception_lineno = 2513;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[320]);
        if (tmp_kw_call_dict_value_2_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_1_2);

            exception_lineno = 2513;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        frame_5aae064b1d2797cd804c1de082b29707->m_frame.f_lineno = 2506;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2, tmp_kw_call_arg_value_1_2};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_2, tmp_kw_call_dict_value_1_2, tmp_kw_call_dict_value_2_2};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tstate, tmp_called_value_2, args, kw_values, mod_consts[317]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_arg_value_0_2);
        Py_DECREF(tmp_kw_call_dict_value_0_2);
        Py_DECREF(tmp_kw_call_dict_value_1_2);
        Py_DECREF(tmp_kw_call_dict_value_2_2);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2506;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_expression_value_16;
        tmp_expression_value_16 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_16 == NULL)) {
            tmp_expression_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2515;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[318]);
        if (tmp_assign_source_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2515;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_operator == NULL);
        var_operator = tmp_assign_source_4;
    }
    branch_end_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(var_operator);
        tmp_tuple_element_1 = var_operator;
        tmp_return_value = MAKE_TUPLE_EMPTY(3);
        {
            PyObject *tmp_expression_value_17;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_index);
            tmp_tuple_element_1 = par_index;
            PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
            if (par_self == NULL) {

                FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2517;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }

            tmp_expression_value_17 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[0]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2517;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5aae064b1d2797cd804c1de082b29707, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5aae064b1d2797cd804c1de082b29707->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5aae064b1d2797cd804c1de082b29707, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5aae064b1d2797cd804c1de082b29707,
        type_description_1,
        par_self,
        par_index,
        var_operator
    );


    // Release cached frame if used for exception.
    if (frame_5aae064b1d2797cd804c1de082b29707 == cache_frame_5aae064b1d2797cd804c1de082b29707) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_5aae064b1d2797cd804c1de082b29707);
        cache_frame_5aae064b1d2797cd804c1de082b29707 = NULL;
    }

    assertFrameObject(frame_5aae064b1d2797cd804c1de082b29707);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    par_index = NULL;
    CHECK_OBJECT(var_operator);
    Py_DECREF(var_operator);
    var_operator = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_index);
    par_index = NULL;
    Py_XDECREF(var_operator);
    var_operator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__114_as_boolean(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_4b54e7eeebef5e85e49e3f73839abe7c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4b54e7eeebef5e85e49e3f73839abe7c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4b54e7eeebef5e85e49e3f73839abe7c)) {
        Py_XDECREF(cache_frame_4b54e7eeebef5e85e49e3f73839abe7c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4b54e7eeebef5e85e49e3f73839abe7c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4b54e7eeebef5e85e49e3f73839abe7c = MAKE_FUNCTION_FRAME(tstate, codeobj_4b54e7eeebef5e85e49e3f73839abe7c, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_4b54e7eeebef5e85e49e3f73839abe7c->m_type_description == NULL);
    frame_4b54e7eeebef5e85e49e3f73839abe7c = cache_frame_4b54e7eeebef5e85e49e3f73839abe7c;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_4b54e7eeebef5e85e49e3f73839abe7c);
    assert(Py_REFCNT(frame_4b54e7eeebef5e85e49e3f73839abe7c) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[321]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2533;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[322]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[322]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2533;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_4b54e7eeebef5e85e49e3f73839abe7c->m_frame.f_lineno = 2533;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2533;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[323];
        frame_4b54e7eeebef5e85e49e3f73839abe7c->m_frame.f_lineno = 2533;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2533;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4b54e7eeebef5e85e49e3f73839abe7c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4b54e7eeebef5e85e49e3f73839abe7c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4b54e7eeebef5e85e49e3f73839abe7c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4b54e7eeebef5e85e49e3f73839abe7c,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_4b54e7eeebef5e85e49e3f73839abe7c == cache_frame_4b54e7eeebef5e85e49e3f73839abe7c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_4b54e7eeebef5e85e49e3f73839abe7c);
        cache_frame_4b54e7eeebef5e85e49e3f73839abe7c = NULL;
    }

    assertFrameObject(frame_4b54e7eeebef5e85e49e3f73839abe7c);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__115_as_string(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_7b3379ea232c1f0da5bc581a8f2d9590;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7b3379ea232c1f0da5bc581a8f2d9590 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7b3379ea232c1f0da5bc581a8f2d9590)) {
        Py_XDECREF(cache_frame_7b3379ea232c1f0da5bc581a8f2d9590);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7b3379ea232c1f0da5bc581a8f2d9590 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7b3379ea232c1f0da5bc581a8f2d9590 = MAKE_FUNCTION_FRAME(tstate, codeobj_7b3379ea232c1f0da5bc581a8f2d9590, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7b3379ea232c1f0da5bc581a8f2d9590->m_type_description == NULL);
    frame_7b3379ea232c1f0da5bc581a8f2d9590 = cache_frame_7b3379ea232c1f0da5bc581a8f2d9590;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7b3379ea232c1f0da5bc581a8f2d9590);
    assert(Py_REFCNT(frame_7b3379ea232c1f0da5bc581a8f2d9590) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[321]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2550;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2550;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_7b3379ea232c1f0da5bc581a8f2d9590->m_frame.f_lineno = 2550;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2550;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[325];
        frame_7b3379ea232c1f0da5bc581a8f2d9590->m_frame.f_lineno = 2550;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2550;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7b3379ea232c1f0da5bc581a8f2d9590, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7b3379ea232c1f0da5bc581a8f2d9590->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7b3379ea232c1f0da5bc581a8f2d9590, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7b3379ea232c1f0da5bc581a8f2d9590,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_7b3379ea232c1f0da5bc581a8f2d9590 == cache_frame_7b3379ea232c1f0da5bc581a8f2d9590) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7b3379ea232c1f0da5bc581a8f2d9590);
        cache_frame_7b3379ea232c1f0da5bc581a8f2d9590 = NULL;
    }

    assertFrameObject(frame_7b3379ea232c1f0da5bc581a8f2d9590);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__116_as_integer(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_9023f34f84e0bc2d0766715b99f9fe92;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9023f34f84e0bc2d0766715b99f9fe92 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9023f34f84e0bc2d0766715b99f9fe92)) {
        Py_XDECREF(cache_frame_9023f34f84e0bc2d0766715b99f9fe92);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9023f34f84e0bc2d0766715b99f9fe92 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9023f34f84e0bc2d0766715b99f9fe92 = MAKE_FUNCTION_FRAME(tstate, codeobj_9023f34f84e0bc2d0766715b99f9fe92, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_9023f34f84e0bc2d0766715b99f9fe92->m_type_description == NULL);
    frame_9023f34f84e0bc2d0766715b99f9fe92 = cache_frame_9023f34f84e0bc2d0766715b99f9fe92;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_9023f34f84e0bc2d0766715b99f9fe92);
    assert(Py_REFCNT(frame_9023f34f84e0bc2d0766715b99f9fe92) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[321]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2566;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2566;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_9023f34f84e0bc2d0766715b99f9fe92->m_frame.f_lineno = 2566;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2566;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[327];
        frame_9023f34f84e0bc2d0766715b99f9fe92->m_frame.f_lineno = 2566;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2566;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9023f34f84e0bc2d0766715b99f9fe92, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9023f34f84e0bc2d0766715b99f9fe92->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9023f34f84e0bc2d0766715b99f9fe92, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9023f34f84e0bc2d0766715b99f9fe92,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_9023f34f84e0bc2d0766715b99f9fe92 == cache_frame_9023f34f84e0bc2d0766715b99f9fe92) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_9023f34f84e0bc2d0766715b99f9fe92);
        cache_frame_9023f34f84e0bc2d0766715b99f9fe92 = NULL;
    }

    assertFrameObject(frame_9023f34f84e0bc2d0766715b99f9fe92);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__117_as_float(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_11bd9f031662eaa94875136629728aed;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_11bd9f031662eaa94875136629728aed = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_11bd9f031662eaa94875136629728aed)) {
        Py_XDECREF(cache_frame_11bd9f031662eaa94875136629728aed);

#if _DEBUG_REFCOUNTS
        if (cache_frame_11bd9f031662eaa94875136629728aed == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_11bd9f031662eaa94875136629728aed = MAKE_FUNCTION_FRAME(tstate, codeobj_11bd9f031662eaa94875136629728aed, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_11bd9f031662eaa94875136629728aed->m_type_description == NULL);
    frame_11bd9f031662eaa94875136629728aed = cache_frame_11bd9f031662eaa94875136629728aed;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_11bd9f031662eaa94875136629728aed);
    assert(Py_REFCNT(frame_11bd9f031662eaa94875136629728aed) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[321]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2582;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[329]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[329]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2582;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_11bd9f031662eaa94875136629728aed->m_frame.f_lineno = 2582;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2582;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[330];
        frame_11bd9f031662eaa94875136629728aed->m_frame.f_lineno = 2582;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2582;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_11bd9f031662eaa94875136629728aed, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_11bd9f031662eaa94875136629728aed->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_11bd9f031662eaa94875136629728aed, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_11bd9f031662eaa94875136629728aed,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_11bd9f031662eaa94875136629728aed == cache_frame_11bd9f031662eaa94875136629728aed) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_11bd9f031662eaa94875136629728aed);
        cache_frame_11bd9f031662eaa94875136629728aed = NULL;
    }

    assertFrameObject(frame_11bd9f031662eaa94875136629728aed);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__118_as_numeric(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_precision = python_pars[1];
    PyObject *par_scale = python_pars[2];
    PyObject *par_asdecimal = python_pars[3];
    struct Nuitka_FrameObject *frame_7fc04a05e029d491257a3400bd5674b4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7fc04a05e029d491257a3400bd5674b4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7fc04a05e029d491257a3400bd5674b4)) {
        Py_XDECREF(cache_frame_7fc04a05e029d491257a3400bd5674b4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7fc04a05e029d491257a3400bd5674b4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7fc04a05e029d491257a3400bd5674b4 = MAKE_FUNCTION_FRAME(tstate, codeobj_7fc04a05e029d491257a3400bd5674b4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7fc04a05e029d491257a3400bd5674b4->m_type_description == NULL);
    frame_7fc04a05e029d491257a3400bd5674b4 = cache_frame_7fc04a05e029d491257a3400bd5674b4;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7fc04a05e029d491257a3400bd5674b4);
    assert(Py_REFCNT(frame_7fc04a05e029d491257a3400bd5674b4) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[321]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2599;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2600;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_precision);
        tmp_kw_call_arg_value_0_1 = par_precision;
        CHECK_OBJECT(par_scale);
        tmp_kw_call_arg_value_1_1 = par_scale;
        CHECK_OBJECT(par_asdecimal);
        tmp_kw_call_dict_value_0_1 = par_asdecimal;
        frame_7fc04a05e029d491257a3400bd5674b4->m_frame.f_lineno = 2600;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_args_element_value_1 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tstate, tmp_called_value_2, args, kw_values, mod_consts[332]);
        }

        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2600;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[333];
        frame_7fc04a05e029d491257a3400bd5674b4->m_frame.f_lineno = 2599;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2599;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7fc04a05e029d491257a3400bd5674b4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7fc04a05e029d491257a3400bd5674b4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7fc04a05e029d491257a3400bd5674b4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7fc04a05e029d491257a3400bd5674b4,
        type_description_1,
        par_self,
        par_precision,
        par_scale,
        par_asdecimal
    );


    // Release cached frame if used for exception.
    if (frame_7fc04a05e029d491257a3400bd5674b4 == cache_frame_7fc04a05e029d491257a3400bd5674b4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7fc04a05e029d491257a3400bd5674b4);
        cache_frame_7fc04a05e029d491257a3400bd5674b4 = NULL;
    }

    assertFrameObject(frame_7fc04a05e029d491257a3400bd5674b4);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__119_as_json(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_4deb6907a9a8f405f85fccb5a2026138;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4deb6907a9a8f405f85fccb5a2026138 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4deb6907a9a8f405f85fccb5a2026138)) {
        Py_XDECREF(cache_frame_4deb6907a9a8f405f85fccb5a2026138);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4deb6907a9a8f405f85fccb5a2026138 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4deb6907a9a8f405f85fccb5a2026138 = MAKE_FUNCTION_FRAME(tstate, codeobj_4deb6907a9a8f405f85fccb5a2026138, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_4deb6907a9a8f405f85fccb5a2026138->m_type_description == NULL);
    frame_4deb6907a9a8f405f85fccb5a2026138 = cache_frame_4deb6907a9a8f405f85fccb5a2026138;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_4deb6907a9a8f405f85fccb5a2026138);
    assert(Py_REFCNT(frame_4deb6907a9a8f405f85fccb5a2026138) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[12]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2619;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4deb6907a9a8f405f85fccb5a2026138, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4deb6907a9a8f405f85fccb5a2026138->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4deb6907a9a8f405f85fccb5a2026138, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4deb6907a9a8f405f85fccb5a2026138,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_4deb6907a9a8f405f85fccb5a2026138 == cache_frame_4deb6907a9a8f405f85fccb5a2026138) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_4deb6907a9a8f405f85fccb5a2026138);
        cache_frame_4deb6907a9a8f405f85fccb5a2026138 = NULL;
    }

    assertFrameObject(frame_4deb6907a9a8f405f85fccb5a2026138);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_typ = python_pars[1];
    PyObject *par_method_name = python_pars[2];
    PyObject *var_expr = NULL;
    struct Nuitka_FrameObject *frame_84049f62abc4b0f6cc3d4bd7098c0c6a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a)) {
        Py_XDECREF(cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a = MAKE_FUNCTION_FRAME(tstate, codeobj_84049f62abc4b0f6cc3d4bd7098c0c6a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a->m_type_description == NULL);
    frame_84049f62abc4b0f6cc3d4bd7098c0c6a = cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_84049f62abc4b0f6cc3d4bd7098c0c6a);
    assert(Py_REFCNT(frame_84049f62abc4b0f6cc3d4bd7098c0c6a) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        bool tmp_or_left_value_1;
        bool tmp_or_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[12]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2623;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[336]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[336]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2623;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[337]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2623;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2622;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2622;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res == 0) ? true : false;
        tmp_or_left_truth_1 = tmp_or_left_value_1 != false ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[12]);
        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2624;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[338]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2624;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 2625;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[318]);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 2625;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM(tmp_cmp_expr_right_1, 0, tmp_tuple_element_1);
            tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_6 == NULL)) {
                tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
            }

            if (tmp_expression_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2626;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[314]);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2626;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_cmp_expr_right_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2624;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? true : false;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_2;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2628;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[339]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2628;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_left_1 = mod_consts[340];
        CHECK_OBJECT(par_method_name);
        tmp_tuple_element_2 = par_method_name;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_method_name);
        tmp_tuple_element_2 = par_method_name;
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 1, tmp_tuple_element_2);
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2631;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_84049f62abc4b0f6cc3d4bd7098c0c6a->m_frame.f_lineno = 2628;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_raise_type_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2628;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 2628;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[12]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2633;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_84049f62abc4b0f6cc3d4bd7098c0c6a->m_frame.f_lineno = 2633;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_1, mod_consts[341]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2633;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_expr == NULL);
        var_expr = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_typ);
        tmp_assattr_value_1 = par_typ;
        CHECK_OBJECT(var_expr);
        tmp_assattr_target_1 = var_expr;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[0], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2634;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_84049f62abc4b0f6cc3d4bd7098c0c6a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_84049f62abc4b0f6cc3d4bd7098c0c6a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_84049f62abc4b0f6cc3d4bd7098c0c6a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_84049f62abc4b0f6cc3d4bd7098c0c6a,
        type_description_1,
        par_self,
        par_typ,
        par_method_name,
        var_expr
    );


    // Release cached frame if used for exception.
    if (frame_84049f62abc4b0f6cc3d4bd7098c0c6a == cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a);
        cache_frame_84049f62abc4b0f6cc3d4bd7098c0c6a = NULL;
    }

    assertFrameObject(frame_84049f62abc4b0f6cc3d4bd7098c0c6a);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_expr);
    tmp_return_value = var_expr;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_expr);
    Py_DECREF(var_expr);
    var_expr = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_expr);
    var_expr = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);
    CHECK_OBJECT(par_method_name);
    Py_DECREF(par_method_name);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);
    CHECK_OBJECT(par_method_name);
    Py_DECREF(par_method_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_1ae91670e9c7411c62634f9d9b1cedf9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_1ae91670e9c7411c62634f9d9b1cedf9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1ae91670e9c7411c62634f9d9b1cedf9)) {
        Py_XDECREF(cache_frame_1ae91670e9c7411c62634f9d9b1cedf9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1ae91670e9c7411c62634f9d9b1cedf9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1ae91670e9c7411c62634f9d9b1cedf9 = MAKE_FUNCTION_FRAME(tstate, codeobj_1ae91670e9c7411c62634f9d9b1cedf9, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1ae91670e9c7411c62634f9d9b1cedf9->m_type_description == NULL);
    frame_1ae91670e9c7411c62634f9d9b1cedf9 = cache_frame_1ae91670e9c7411c62634f9d9b1cedf9;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1ae91670e9c7411c62634f9d9b1cedf9);
    assert(Py_REFCNT(frame_1ae91670e9c7411c62634f9d9b1cedf9) == 2);

    // Framed code:
    {
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[296]);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2646;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2646;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = (tmp_res == 0) ? Py_True : Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1ae91670e9c7411c62634f9d9b1cedf9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1ae91670e9c7411c62634f9d9b1cedf9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1ae91670e9c7411c62634f9d9b1cedf9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1ae91670e9c7411c62634f9d9b1cedf9,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_1ae91670e9c7411c62634f9d9b1cedf9 == cache_frame_1ae91670e9c7411c62634f9d9b1cedf9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1ae91670e9c7411c62634f9d9b1cedf9);
        cache_frame_1ae91670e9c7411c62634f9d9b1cedf9 = NULL;
    }

    assertFrameObject(frame_1ae91670e9c7411c62634f9d9b1cedf9);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    struct Nuitka_FrameObject *frame_1906085cade7eb0c9b887fc6048b75da;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_1906085cade7eb0c9b887fc6048b75da = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1906085cade7eb0c9b887fc6048b75da)) {
        Py_XDECREF(cache_frame_1906085cade7eb0c9b887fc6048b75da);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1906085cade7eb0c9b887fc6048b75da == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1906085cade7eb0c9b887fc6048b75da = MAKE_FUNCTION_FRAME(tstate, codeobj_1906085cade7eb0c9b887fc6048b75da, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1906085cade7eb0c9b887fc6048b75da->m_type_description == NULL);
    frame_1906085cade7eb0c9b887fc6048b75da = cache_frame_1906085cade7eb0c9b887fc6048b75da;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1906085cade7eb0c9b887fc6048b75da);
    assert(Py_REFCNT(frame_1906085cade7eb0c9b887fc6048b75da) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_value);
        tmp_operand_value_1 = par_value;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2650;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[296], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2650;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1906085cade7eb0c9b887fc6048b75da, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1906085cade7eb0c9b887fc6048b75da->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1906085cade7eb0c9b887fc6048b75da, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1906085cade7eb0c9b887fc6048b75da,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_1906085cade7eb0c9b887fc6048b75da == cache_frame_1906085cade7eb0c9b887fc6048b75da) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1906085cade7eb0c9b887fc6048b75da);
        cache_frame_1906085cade7eb0c9b887fc6048b75da = NULL;
    }

    assertFrameObject(frame_1906085cade7eb0c9b887fc6048b75da);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__124__str_impl(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_df4f9203137722432f20a7a5cd8dfb73;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_df4f9203137722432f20a7a5cd8dfb73 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_df4f9203137722432f20a7a5cd8dfb73)) {
        Py_XDECREF(cache_frame_df4f9203137722432f20a7a5cd8dfb73);

#if _DEBUG_REFCOUNTS
        if (cache_frame_df4f9203137722432f20a7a5cd8dfb73 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_df4f9203137722432f20a7a5cd8dfb73 = MAKE_FUNCTION_FRAME(tstate, codeobj_df4f9203137722432f20a7a5cd8dfb73, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_df4f9203137722432f20a7a5cd8dfb73->m_type_description == NULL);
    frame_df4f9203137722432f20a7a5cd8dfb73 = cache_frame_df4f9203137722432f20a7a5cd8dfb73;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_df4f9203137722432f20a7a5cd8dfb73);
    assert(Py_REFCNT(frame_df4f9203137722432f20a7a5cd8dfb73) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2654;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_df4f9203137722432f20a7a5cd8dfb73->m_frame.f_lineno = 2654;
        tmp_return_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_1, &PyTuple_GET_ITEM(mod_consts[343], 0), mod_consts[230]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2654;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_df4f9203137722432f20a7a5cd8dfb73, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_df4f9203137722432f20a7a5cd8dfb73->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_df4f9203137722432f20a7a5cd8dfb73, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_df4f9203137722432f20a7a5cd8dfb73,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_df4f9203137722432f20a7a5cd8dfb73 == cache_frame_df4f9203137722432f20a7a5cd8dfb73) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_df4f9203137722432f20a7a5cd8dfb73);
        cache_frame_df4f9203137722432f20a7a5cd8dfb73 = NULL;
    }

    assertFrameObject(frame_df4f9203137722432f20a7a5cd8dfb73);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_string_process = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_json_serializer = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_7c5e81347f01a63cc0bbd6a2d986e9c2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2)) {
        Py_XDECREF(cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2 = MAKE_FUNCTION_FRAME(tstate, codeobj_7c5e81347f01a63cc0bbd6a2d986e9c2, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2->m_type_description == NULL);
    frame_7c5e81347f01a63cc0bbd6a2d986e9c2 = cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7c5e81347f01a63cc0bbd6a2d986e9c2);
    assert(Py_REFCNT(frame_7c5e81347f01a63cc0bbd6a2d986e9c2) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[344]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2657;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_7c5e81347f01a63cc0bbd6a2d986e9c2->m_frame.f_lineno = 2657;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[252], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2657;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_process) == NULL);
        PyCell_SET(var_string_process, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[345]);
        if (tmp_or_left_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2659;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 2659;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[346]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[346]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2659;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[264]);
        if (tmp_or_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2659;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_2 = tmp_or_left_value_1;
        or_end_1:;
        assert(Nuitka_Cell_GET(var_json_serializer) == NULL);
        PyCell_SET(var_json_serializer, tmp_assign_source_2);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7c5e81347f01a63cc0bbd6a2d986e9c2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7c5e81347f01a63cc0bbd6a2d986e9c2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7c5e81347f01a63cc0bbd6a2d986e9c2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7c5e81347f01a63cc0bbd6a2d986e9c2,
        type_description_1,
        par_self,
        par_dialect,
        var_string_process,
        var_json_serializer,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_7c5e81347f01a63cc0bbd6a2d986e9c2 == cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2);
        cache_frame_7c5e81347f01a63cc0bbd6a2d986e9c2 = NULL;
    }

    assertFrameObject(frame_7c5e81347f01a63cc0bbd6a2d986e9c2);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_json_serializer;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_string_process;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    CHECK_OBJECT(var_json_serializer);
    Py_DECREF(var_json_serializer);
    var_json_serializer = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *var_serialized = NULL;
    struct Nuitka_FrameObject *frame_1ad717ec8074da851881b8d6d8645881;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1ad717ec8074da851881b8d6d8645881 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_1ad717ec8074da851881b8d6d8645881)) {
        Py_XDECREF(cache_frame_1ad717ec8074da851881b8d6d8645881);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1ad717ec8074da851881b8d6d8645881 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1ad717ec8074da851881b8d6d8645881 = MAKE_FUNCTION_FRAME(tstate, codeobj_1ad717ec8074da851881b8d6d8645881, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_1ad717ec8074da851881b8d6d8645881->m_type_description == NULL);
    frame_1ad717ec8074da851881b8d6d8645881 = cache_frame_1ad717ec8074da851881b8d6d8645881;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_1ad717ec8074da851881b8d6d8645881);
    assert(Py_REFCNT(frame_1ad717ec8074da851881b8d6d8645881) == 2);

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2662;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[348]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2662;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_INCREF(par_value);
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[336]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[336]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2664;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[349]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2664;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2664;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2664;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_2 = par_value;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2665;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[296]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2665;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 2665;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_condition_result_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_2 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_2:;
    branch_end_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[350]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2669;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_1ad717ec8074da851881b8d6d8645881->m_frame.f_lineno = 2669;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2669;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        assert(var_serialized == NULL);
        var_serialized = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_2;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[351]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2670;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[2]));
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2670;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[351]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2671;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[2]);
        CHECK_OBJECT(var_serialized);
        tmp_args_element_value_2 = var_serialized;
        frame_1ad717ec8074da851881b8d6d8645881->m_frame.f_lineno = 2671;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2671;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_serialized;
            assert(old != NULL);
            var_serialized = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_3:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1ad717ec8074da851881b8d6d8645881, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1ad717ec8074da851881b8d6d8645881->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1ad717ec8074da851881b8d6d8645881, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1ad717ec8074da851881b8d6d8645881,
        type_description_1,
        par_value,
        var_serialized,
        self->m_closure[1],
        self->m_closure[0],
        self->m_closure[2]
    );


    // Release cached frame if used for exception.
    if (frame_1ad717ec8074da851881b8d6d8645881 == cache_frame_1ad717ec8074da851881b8d6d8645881) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_1ad717ec8074da851881b8d6d8645881);
        cache_frame_1ad717ec8074da851881b8d6d8645881 = NULL;
    }

    assertFrameObject(frame_1ad717ec8074da851881b8d6d8645881);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    CHECK_OBJECT(var_serialized);
    tmp_return_value = var_serialized;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    Py_XDECREF(var_serialized);
    var_serialized = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    Py_XDECREF(var_serialized);
    var_serialized = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_string_process = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_json_deserializer = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_8bea2ad013daff045879b53916208b19;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8bea2ad013daff045879b53916208b19 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_8bea2ad013daff045879b53916208b19)) {
        Py_XDECREF(cache_frame_8bea2ad013daff045879b53916208b19);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8bea2ad013daff045879b53916208b19 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8bea2ad013daff045879b53916208b19 = MAKE_FUNCTION_FRAME(tstate, codeobj_8bea2ad013daff045879b53916208b19, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_8bea2ad013daff045879b53916208b19->m_type_description == NULL);
    frame_8bea2ad013daff045879b53916208b19 = cache_frame_8bea2ad013daff045879b53916208b19;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_8bea2ad013daff045879b53916208b19);
    assert(Py_REFCNT(frame_8bea2ad013daff045879b53916208b19) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[344]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2677;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_8bea2ad013daff045879b53916208b19->m_frame.f_lineno = 2677;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[254],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2677;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_process) == NULL);
        PyCell_SET(var_string_process, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[352]);
        if (tmp_or_left_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2678;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 2678;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[346]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[346]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2678;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[267]);
        if (tmp_or_right_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2678;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_2 = tmp_or_left_value_1;
        or_end_1:;
        assert(Nuitka_Cell_GET(var_json_deserializer) == NULL);
        PyCell_SET(var_json_deserializer, tmp_assign_source_2);

    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8bea2ad013daff045879b53916208b19, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8bea2ad013daff045879b53916208b19->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8bea2ad013daff045879b53916208b19, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8bea2ad013daff045879b53916208b19,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_string_process,
        var_json_deserializer,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_8bea2ad013daff045879b53916208b19 == cache_frame_8bea2ad013daff045879b53916208b19) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_8bea2ad013daff045879b53916208b19);
        cache_frame_8bea2ad013daff045879b53916208b19 = NULL;
    }

    assertFrameObject(frame_8bea2ad013daff045879b53916208b19);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_json_deserializer;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_process;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    CHECK_OBJECT(var_json_deserializer);
    Py_DECREF(var_json_deserializer);
    var_json_deserializer = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_9601272f9d86ca9675bd31bee69e315f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9601272f9d86ca9675bd31bee69e315f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_9601272f9d86ca9675bd31bee69e315f)) {
        Py_XDECREF(cache_frame_9601272f9d86ca9675bd31bee69e315f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9601272f9d86ca9675bd31bee69e315f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9601272f9d86ca9675bd31bee69e315f = MAKE_FUNCTION_FRAME(tstate, codeobj_9601272f9d86ca9675bd31bee69e315f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_9601272f9d86ca9675bd31bee69e315f->m_type_description == NULL);
    frame_9601272f9d86ca9675bd31bee69e315f = cache_frame_9601272f9d86ca9675bd31bee69e315f;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_9601272f9d86ca9675bd31bee69e315f);
    assert(Py_REFCNT(frame_9601272f9d86ca9675bd31bee69e315f) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[351]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2683;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2683;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[351]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2684;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_9601272f9d86ca9675bd31bee69e315f->m_frame.f_lineno = 2684;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2684;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[354]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2685;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_9601272f9d86ca9675bd31bee69e315f->m_frame.f_lineno = 2685;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2685;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9601272f9d86ca9675bd31bee69e315f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9601272f9d86ca9675bd31bee69e315f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9601272f9d86ca9675bd31bee69e315f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9601272f9d86ca9675bd31bee69e315f,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_9601272f9d86ca9675bd31bee69e315f == cache_frame_9601272f9d86ca9675bd31bee69e315f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_9601272f9d86ca9675bd31bee69e315f);
        cache_frame_9601272f9d86ca9675bd31bee69e315f = NULL;
    }

    assertFrameObject(frame_9601272f9d86ca9675bd31bee69e315f);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:

    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *var_return_type = NULL;
    PyObject *var_slice_ = NULL;
    PyObject *var_adapt_kw = NULL;
    struct Nuitka_FrameObject *frame_4681de3a5744db5c28af0c5006b60e40;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_4681de3a5744db5c28af0c5006b60e40 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_4681de3a5744db5c28af0c5006b60e40)) {
        Py_XDECREF(cache_frame_4681de3a5744db5c28af0c5006b60e40);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4681de3a5744db5c28af0c5006b60e40 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4681de3a5744db5c28af0c5006b60e40 = MAKE_FUNCTION_FRAME(tstate, codeobj_4681de3a5744db5c28af0c5006b60e40, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_4681de3a5744db5c28af0c5006b60e40->m_type_description == NULL);
    frame_4681de3a5744db5c28af0c5006b60e40 = cache_frame_4681de3a5744db5c28af0c5006b60e40;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_4681de3a5744db5c28af0c5006b60e40);
    assert(Py_REFCNT(frame_4681de3a5744db5c28af0c5006b60e40) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_1 = par_index;
        tmp_isinstance_cls_1 = (PyObject *)&PySlice_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2827;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[0]);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2828;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[0]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2829;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[355]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2829;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 2829;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_start_value_1;
        PyObject *tmp_add_expr_left_1;
        PyObject *tmp_add_expr_right_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_stop_value_1;
        PyObject *tmp_add_expr_left_2;
        PyObject *tmp_add_expr_right_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_step_value_1;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_index);
        tmp_expression_value_4 = par_index;
        tmp_add_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[356]);
        if (tmp_add_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2830;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_add_expr_right_1 = mod_consts[272];
        tmp_start_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_add_expr_left_1, tmp_add_expr_right_1);
        Py_DECREF(tmp_add_expr_left_1);
        if (tmp_start_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2830;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_5 = par_index;
        tmp_add_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[357]);
        if (tmp_add_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);

            exception_lineno = 2830;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_add_expr_right_2 = mod_consts[272];
        tmp_stop_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_add_expr_left_2, tmp_add_expr_right_2);
        Py_DECREF(tmp_add_expr_left_2);
        if (tmp_stop_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);

            exception_lineno = 2830;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_6 = par_index;
        tmp_step_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[358]);
        if (tmp_step_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);
            Py_DECREF(tmp_stop_value_1);

            exception_lineno = 2830;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_SLICE_OBJECT3(tmp_start_value_1, tmp_stop_value_1, tmp_step_value_1);
        Py_DECREF(tmp_start_value_1);
        Py_DECREF(tmp_stop_value_1);
        Py_DECREF(tmp_step_value_1);
        assert(!(tmp_assign_source_2 == NULL));
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_kw_call_arg_value_2_1;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_expression_value_11;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[359]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[359]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2831;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_7 = par_index;
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[356]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2832;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_8 = par_index;
        tmp_kw_call_arg_value_1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[357]);
        if (tmp_kw_call_arg_value_1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2832;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_9 = par_index;
        tmp_kw_call_arg_value_2_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[358]);
        if (tmp_kw_call_arg_value_2_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_arg_value_1_1);

            exception_lineno = 2832;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_expression_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[12]);
        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_arg_value_1_1);
            Py_DECREF(tmp_kw_call_arg_value_2_1);

            exception_lineno = 2832;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[360]);
        Py_DECREF(tmp_expression_value_10);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_arg_value_1_1);
            Py_DECREF(tmp_kw_call_arg_value_2_1);

            exception_lineno = 2832;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_4681de3a5744db5c28af0c5006b60e40->m_frame.f_lineno = 2831;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1, tmp_kw_call_arg_value_2_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS3_KWSPLIT(tstate, tmp_called_value_1, args, kw_values, mod_consts[361]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_arg_value_1_1);
        Py_DECREF(tmp_kw_call_arg_value_2_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2831;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_slice_ == NULL);
        var_slice_ = tmp_assign_source_3;
    }
    {
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_12;
        tmp_expression_value_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_12 == NULL)) {
            tmp_expression_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2834;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[362]);
        if (tmp_tuple_element_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2834;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_TUPLE_EMPTY(3);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_slice_);
        tmp_tuple_element_1 = var_slice_;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        CHECK_OBJECT(var_return_type);
        tmp_tuple_element_1 = var_return_type;
        PyTuple_SET_ITEM0(tmp_return_value, 2, tmp_tuple_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_expression_value_13 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_14, mod_consts[0]);
        if (tmp_expression_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2836;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[355]);
        Py_DECREF(tmp_expression_value_13);
        if (tmp_attribute_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2836;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 2836;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iadd_expr_left_1;
        PyObject *tmp_iadd_expr_right_1;
        CHECK_OBJECT(par_index);
        tmp_iadd_expr_left_1 = par_index;
        tmp_iadd_expr_right_1 = mod_consts[272];
        tmp_result = INPLACE_OPERATION_ADD_OBJECT_LONG(&tmp_iadd_expr_left_1, tmp_iadd_expr_right_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2837;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = tmp_iadd_expr_left_1;
        par_index = tmp_assign_source_4;

    }
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_expression_value_15 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[0]);
        if (tmp_expression_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2838;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_15, mod_consts[363]);
        Py_DECREF(tmp_expression_value_15);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2838;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_or_left_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_18 = par_self;
        tmp_expression_value_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_18, mod_consts[0]);
        if (tmp_expression_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2838;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_17, mod_consts[363]);
        Py_DECREF(tmp_expression_value_17);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2838;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = mod_consts[272];
        tmp_or_right_value_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_or_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2838;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_4 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_expression_value_19 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_20, mod_consts[0]);
        if (tmp_expression_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2839;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_19, mod_consts[170]);
        Py_DECREF(tmp_expression_value_19);
        if (tmp_assign_source_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2839;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_5;
    }
    goto branch_end_4;
    branch_no_4:;
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_sub_expr_left_1;
        PyObject *tmp_sub_expr_right_1;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_expression_value_22;
        tmp_dict_key_1 = mod_consts[363];
        CHECK_OBJECT(par_self);
        tmp_expression_value_22 = par_self;
        tmp_expression_value_21 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_22, mod_consts[0]);
        if (tmp_expression_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2841;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_sub_expr_left_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_21, mod_consts[363]);
        Py_DECREF(tmp_expression_value_21);
        if (tmp_sub_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2841;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_sub_expr_right_1 = mod_consts[272];
        tmp_dict_value_1 = BINARY_OPERATION_SUB_OBJECT_OBJECT_LONG(tmp_sub_expr_left_1, tmp_sub_expr_right_1);
        Py_DECREF(tmp_sub_expr_left_1);
        if (tmp_dict_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2841;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_6 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_assign_source_6, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        assert(var_adapt_kw == NULL);
        var_adapt_kw = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_24 = par_self;
        tmp_expression_value_23 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_24, mod_consts[0]);
        if (tmp_expression_value_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2842;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_23, mod_consts[152]);
        Py_DECREF(tmp_expression_value_23);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2842;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_26 = par_self;
        tmp_expression_value_25 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_26, mod_consts[0]);
        if (tmp_expression_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg1_1);

            exception_lineno = 2843;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_25);
        Py_DECREF(tmp_expression_value_25);
        if (tmp_tuple_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg1_1);

            exception_lineno = 2843;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_adapt_kw);
        tmp_dircall_arg3_1 = var_adapt_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_7 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_assign_source_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2842;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_7;
    }
    branch_end_4:;
    {
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_expression_value_27;
        tmp_expression_value_27 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_27 == NULL)) {
            tmp_expression_value_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2846;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_27, mod_consts[362]);
        if (tmp_tuple_element_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2846;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_TUPLE_EMPTY(3);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_3);
        CHECK_OBJECT(par_index);
        tmp_tuple_element_3 = par_index;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_3);
        CHECK_OBJECT(var_return_type);
        tmp_tuple_element_3 = var_return_type;
        PyTuple_SET_ITEM0(tmp_return_value, 2, tmp_tuple_element_3);
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4681de3a5744db5c28af0c5006b60e40, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4681de3a5744db5c28af0c5006b60e40->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4681de3a5744db5c28af0c5006b60e40, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4681de3a5744db5c28af0c5006b60e40,
        type_description_1,
        par_self,
        par_index,
        var_return_type,
        var_slice_,
        var_adapt_kw
    );


    // Release cached frame if used for exception.
    if (frame_4681de3a5744db5c28af0c5006b60e40 == cache_frame_4681de3a5744db5c28af0c5006b60e40) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_4681de3a5744db5c28af0c5006b60e40);
        cache_frame_4681de3a5744db5c28af0c5006b60e40 = NULL;
    }

    assertFrameObject(frame_4681de3a5744db5c28af0c5006b60e40);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_index);
    par_index = NULL;
    CHECK_OBJECT(var_return_type);
    Py_DECREF(var_return_type);
    var_return_type = NULL;
    Py_XDECREF(var_slice_);
    var_slice_ = NULL;
    Py_XDECREF(var_adapt_kw);
    var_adapt_kw = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_index);
    par_index = NULL;
    Py_XDECREF(var_return_type);
    var_return_type = NULL;
    Py_XDECREF(var_slice_);
    var_slice_ = NULL;
    Py_XDECREF(var_adapt_kw);
    var_adapt_kw = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__128_contains(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_arg = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_292e8eb9852aff9ad1415c867443ca42;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_292e8eb9852aff9ad1415c867443ca42 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_292e8eb9852aff9ad1415c867443ca42)) {
        Py_XDECREF(cache_frame_292e8eb9852aff9ad1415c867443ca42);

#if _DEBUG_REFCOUNTS
        if (cache_frame_292e8eb9852aff9ad1415c867443ca42 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_292e8eb9852aff9ad1415c867443ca42 = MAKE_FUNCTION_FRAME(tstate, codeobj_292e8eb9852aff9ad1415c867443ca42, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_292e8eb9852aff9ad1415c867443ca42->m_type_description == NULL);
    frame_292e8eb9852aff9ad1415c867443ca42 = cache_frame_292e8eb9852aff9ad1415c867443ca42;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_292e8eb9852aff9ad1415c867443ca42);
    assert(Py_REFCNT(frame_292e8eb9852aff9ad1415c867443ca42) == 2);

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[364];
        frame_292e8eb9852aff9ad1415c867443ca42->m_frame.f_lineno = 2849;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_NotImplementedError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 2849;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_292e8eb9852aff9ad1415c867443ca42, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_292e8eb9852aff9ad1415c867443ca42->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_292e8eb9852aff9ad1415c867443ca42, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_292e8eb9852aff9ad1415c867443ca42,
        type_description_1,
        par_self,
        par_arg,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_292e8eb9852aff9ad1415c867443ca42 == cache_frame_292e8eb9852aff9ad1415c867443ca42) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_292e8eb9852aff9ad1415c867443ca42);
        cache_frame_292e8eb9852aff9ad1415c867443ca42 = NULL;
    }

    assertFrameObject(frame_292e8eb9852aff9ad1415c867443ca42);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_arg);
    Py_DECREF(par_arg);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__129_any(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_other = python_pars[1];
    PyObject *par_operator = python_pars[2];
    PyObject *var_elements = NULL;
    PyObject *var_arr_type = NULL;
    struct Nuitka_FrameObject *frame_ac0eb5cbdd92fdd006b83a9501c373a9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9)) {
        Py_XDECREF(cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9 = MAKE_FUNCTION_FRAME(tstate, codeobj_ac0eb5cbdd92fdd006b83a9501c373a9, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9->m_type_description == NULL);
    frame_ac0eb5cbdd92fdd006b83a9501c373a9 = cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_ac0eb5cbdd92fdd006b83a9501c373a9);
    assert(Py_REFCNT(frame_ac0eb5cbdd92fdd006b83a9501c373a9) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2887;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[240]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2887;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[365]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2887;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_elements == NULL);
        var_elements = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_operator);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_operator);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_operator);
        tmp_assign_source_2 = par_operator;
        Py_INCREF(tmp_assign_source_2);
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[366]);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        {
            PyObject *old = par_operator;
            assert(old != NULL);
            par_operator = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[0]);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2890;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_arr_type == NULL);
        var_arr_type = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(var_elements);
        tmp_expression_value_5 = var_elements;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[337]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2894;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[310]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2895;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[311]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2895;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[312]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2896;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[313]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2896;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_other);
        tmp_kw_call_dict_value_0_1 = par_other;
        CHECK_OBJECT(par_operator);
        tmp_kw_call_dict_value_1_1 = par_operator;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_kw_call_dict_value_2_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[12]);
        if (tmp_kw_call_dict_value_2_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2899;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_arr_type);
        tmp_expression_value_9 = var_arr_type;
        tmp_kw_call_dict_value_3_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[170]);
        if (tmp_kw_call_dict_value_3_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 2900;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_ac0eb5cbdd92fdd006b83a9501c373a9->m_frame.f_lineno = 2895;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[4] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1};
            tmp_args_element_value_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_2, args, kw_values, mod_consts[367]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_2_1);
        Py_DECREF(tmp_kw_call_dict_value_3_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2895;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_elements);
        tmp_expression_value_11 = var_elements;
        tmp_expression_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[368]);
        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2902;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[369]);
        Py_DECREF(tmp_expression_value_10);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2902;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[12]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 2902;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_ac0eb5cbdd92fdd006b83a9501c373a9->m_frame.f_lineno = 2902;
        tmp_args_element_value_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2902;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_operator);
        tmp_args_element_value_4 = par_operator;
        frame_ac0eb5cbdd92fdd006b83a9501c373a9->m_frame.f_lineno = 2894;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2894;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ac0eb5cbdd92fdd006b83a9501c373a9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ac0eb5cbdd92fdd006b83a9501c373a9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ac0eb5cbdd92fdd006b83a9501c373a9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ac0eb5cbdd92fdd006b83a9501c373a9,
        type_description_1,
        par_self,
        par_other,
        par_operator,
        var_elements,
        var_arr_type
    );


    // Release cached frame if used for exception.
    if (frame_ac0eb5cbdd92fdd006b83a9501c373a9 == cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9);
        cache_frame_ac0eb5cbdd92fdd006b83a9501c373a9 = NULL;
    }

    assertFrameObject(frame_ac0eb5cbdd92fdd006b83a9501c373a9);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_operator);
    Py_DECREF(par_operator);
    par_operator = NULL;
    CHECK_OBJECT(var_elements);
    Py_DECREF(var_elements);
    var_elements = NULL;
    CHECK_OBJECT(var_arr_type);
    Py_DECREF(var_arr_type);
    var_arr_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_operator);
    par_operator = NULL;
    Py_XDECREF(var_elements);
    var_elements = NULL;
    Py_XDECREF(var_arr_type);
    var_arr_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__130_all(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_other = python_pars[1];
    PyObject *par_operator = python_pars[2];
    PyObject *var_elements = NULL;
    PyObject *var_arr_type = NULL;
    struct Nuitka_FrameObject *frame_85bac47e1cf9d36e40522f790bb6cd9b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_85bac47e1cf9d36e40522f790bb6cd9b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_85bac47e1cf9d36e40522f790bb6cd9b)) {
        Py_XDECREF(cache_frame_85bac47e1cf9d36e40522f790bb6cd9b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_85bac47e1cf9d36e40522f790bb6cd9b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_85bac47e1cf9d36e40522f790bb6cd9b = MAKE_FUNCTION_FRAME(tstate, codeobj_85bac47e1cf9d36e40522f790bb6cd9b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_85bac47e1cf9d36e40522f790bb6cd9b->m_type_description == NULL);
    frame_85bac47e1cf9d36e40522f790bb6cd9b = cache_frame_85bac47e1cf9d36e40522f790bb6cd9b;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_85bac47e1cf9d36e40522f790bb6cd9b);
    assert(Py_REFCNT(frame_85bac47e1cf9d36e40522f790bb6cd9b) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2939;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[240]);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2939;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[365]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2939;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_elements == NULL);
        var_elements = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_operator);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_operator);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2940;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_operator);
        tmp_assign_source_2 = par_operator;
        Py_INCREF(tmp_assign_source_2);
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2940;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[366]);
        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2940;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        {
            PyObject *old = par_operator;
            assert(old != NULL);
            par_operator = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[0]);
        if (tmp_assign_source_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2942;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_arr_type == NULL);
        var_arr_type = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(var_elements);
        tmp_expression_value_5 = var_elements;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_5, mod_consts[337]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2946;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[310]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2947;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[311]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2947;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[312]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2948;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[313]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2948;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_other);
        tmp_kw_call_dict_value_0_1 = par_other;
        CHECK_OBJECT(par_operator);
        tmp_kw_call_dict_value_1_1 = par_operator;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_kw_call_dict_value_2_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_8, mod_consts[12]);
        if (tmp_kw_call_dict_value_2_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2951;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_arr_type);
        tmp_expression_value_9 = var_arr_type;
        tmp_kw_call_dict_value_3_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_9, mod_consts[170]);
        if (tmp_kw_call_dict_value_3_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 2952;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_85bac47e1cf9d36e40522f790bb6cd9b->m_frame.f_lineno = 2947;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[4] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1};
            tmp_args_element_value_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tstate, tmp_called_value_2, args, kw_values, mod_consts[367]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_2_1);
        Py_DECREF(tmp_kw_call_dict_value_3_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2947;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_elements);
        tmp_expression_value_11 = var_elements;
        tmp_expression_value_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_11, mod_consts[368]);
        if (tmp_expression_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2954;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[371]);
        Py_DECREF(tmp_expression_value_10);
        if (tmp_called_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2954;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_12, mod_consts[12]);
        if (tmp_args_element_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 2954;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_85bac47e1cf9d36e40522f790bb6cd9b->m_frame.f_lineno = 2954;
        tmp_args_element_value_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_args_element_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2954;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_operator);
        tmp_args_element_value_4 = par_operator;
        frame_85bac47e1cf9d36e40522f790bb6cd9b->m_frame.f_lineno = 2946;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2946;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_85bac47e1cf9d36e40522f790bb6cd9b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_85bac47e1cf9d36e40522f790bb6cd9b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_85bac47e1cf9d36e40522f790bb6cd9b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_85bac47e1cf9d36e40522f790bb6cd9b,
        type_description_1,
        par_self,
        par_other,
        par_operator,
        var_elements,
        var_arr_type
    );


    // Release cached frame if used for exception.
    if (frame_85bac47e1cf9d36e40522f790bb6cd9b == cache_frame_85bac47e1cf9d36e40522f790bb6cd9b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_85bac47e1cf9d36e40522f790bb6cd9b);
        cache_frame_85bac47e1cf9d36e40522f790bb6cd9b = NULL;
    }

    assertFrameObject(frame_85bac47e1cf9d36e40522f790bb6cd9b);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_operator);
    Py_DECREF(par_operator);
    par_operator = NULL;
    CHECK_OBJECT(var_elements);
    Py_DECREF(var_elements);
    var_elements = NULL;
    CHECK_OBJECT(var_arr_type);
    Py_DECREF(var_arr_type);
    var_arr_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_operator);
    par_operator = NULL;
    Py_XDECREF(var_elements);
    var_elements = NULL;
    Py_XDECREF(var_arr_type);
    var_arr_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__131___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_item_type = python_pars[1];
    PyObject *par_as_tuple = python_pars[2];
    PyObject *par_dimensions = python_pars[3];
    PyObject *par_zero_indexes = python_pars[4];
    struct Nuitka_FrameObject *frame_dcb37d94f9a080ffee69d985b8473940;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_dcb37d94f9a080ffee69d985b8473940 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_dcb37d94f9a080ffee69d985b8473940)) {
        Py_XDECREF(cache_frame_dcb37d94f9a080ffee69d985b8473940);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dcb37d94f9a080ffee69d985b8473940 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dcb37d94f9a080ffee69d985b8473940 = MAKE_FUNCTION_FRAME(tstate, codeobj_dcb37d94f9a080ffee69d985b8473940, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_dcb37d94f9a080ffee69d985b8473940->m_type_description == NULL);
    frame_dcb37d94f9a080ffee69d985b8473940 = cache_frame_dcb37d94f9a080ffee69d985b8473940;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_dcb37d94f9a080ffee69d985b8473940);
    assert(Py_REFCNT(frame_dcb37d94f9a080ffee69d985b8473940) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_item_type);
        tmp_isinstance_inst_1 = par_item_type;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[169]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[169]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2994;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2994;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[373];
        frame_dcb37d94f9a080ffee69d985b8473940->m_frame.f_lineno = 2995;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 2995;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        CHECK_OBJECT(par_item_type);
        tmp_isinstance_inst_2 = par_item_type;
        tmp_isinstance_cls_2 = (PyObject *)&PyType_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2999;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        CHECK_OBJECT(par_item_type);
        tmp_called_value_1 = par_item_type;
        frame_dcb37d94f9a080ffee69d985b8473940->m_frame.f_lineno = 3000;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3000;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_item_type;
            assert(old != NULL);
            par_item_type = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_item_type);
        tmp_assattr_value_1 = par_item_type;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[170], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3001;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_as_tuple);
        tmp_assattr_value_2 = par_as_tuple;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[374], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3002;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_dimensions);
        tmp_assattr_value_3 = par_dimensions;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[363], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3003;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_zero_indexes);
        tmp_assattr_value_4 = par_zero_indexes;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[355], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3004;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dcb37d94f9a080ffee69d985b8473940, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dcb37d94f9a080ffee69d985b8473940->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dcb37d94f9a080ffee69d985b8473940, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dcb37d94f9a080ffee69d985b8473940,
        type_description_1,
        par_self,
        par_item_type,
        par_as_tuple,
        par_dimensions,
        par_zero_indexes
    );


    // Release cached frame if used for exception.
    if (frame_dcb37d94f9a080ffee69d985b8473940 == cache_frame_dcb37d94f9a080ffee69d985b8473940) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_dcb37d94f9a080ffee69d985b8473940);
        cache_frame_dcb37d94f9a080ffee69d985b8473940 = NULL;
    }

    assertFrameObject(frame_dcb37d94f9a080ffee69d985b8473940);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_item_type);
    Py_DECREF(par_item_type);
    par_item_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_item_type);
    par_item_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_as_tuple);
    Py_DECREF(par_as_tuple);
    CHECK_OBJECT(par_dimensions);
    Py_DECREF(par_dimensions);
    CHECK_OBJECT(par_zero_indexes);
    Py_DECREF(par_zero_indexes);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_as_tuple);
    Py_DECREF(par_as_tuple);
    CHECK_OBJECT(par_dimensions);
    Py_DECREF(par_dimensions);
    CHECK_OBJECT(par_zero_indexes);
    Py_DECREF(par_zero_indexes);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__132_hashable(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_3393bab199aa606260cd83eafb7e60ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3393bab199aa606260cd83eafb7e60ef = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3393bab199aa606260cd83eafb7e60ef)) {
        Py_XDECREF(cache_frame_3393bab199aa606260cd83eafb7e60ef);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3393bab199aa606260cd83eafb7e60ef == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3393bab199aa606260cd83eafb7e60ef = MAKE_FUNCTION_FRAME(tstate, codeobj_3393bab199aa606260cd83eafb7e60ef, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_3393bab199aa606260cd83eafb7e60ef->m_type_description == NULL);
    frame_3393bab199aa606260cd83eafb7e60ef = cache_frame_3393bab199aa606260cd83eafb7e60ef;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_3393bab199aa606260cd83eafb7e60ef);
    assert(Py_REFCNT(frame_3393bab199aa606260cd83eafb7e60ef) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[374]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3008;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3393bab199aa606260cd83eafb7e60ef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3393bab199aa606260cd83eafb7e60ef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3393bab199aa606260cd83eafb7e60ef, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3393bab199aa606260cd83eafb7e60ef,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_3393bab199aa606260cd83eafb7e60ef == cache_frame_3393bab199aa606260cd83eafb7e60ef) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_3393bab199aa606260cd83eafb7e60ef);
        cache_frame_3393bab199aa606260cd83eafb7e60ef = NULL;
    }

    assertFrameObject(frame_3393bab199aa606260cd83eafb7e60ef);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__134_compare_values(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_x = python_pars[1];
    PyObject *par_y = python_pars[2];
    struct Nuitka_FrameObject *frame_0732f29a10e86e4e06372e913782245e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0732f29a10e86e4e06372e913782245e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0732f29a10e86e4e06372e913782245e)) {
        Py_XDECREF(cache_frame_0732f29a10e86e4e06372e913782245e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0732f29a10e86e4e06372e913782245e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0732f29a10e86e4e06372e913782245e = MAKE_FUNCTION_FRAME(tstate, codeobj_0732f29a10e86e4e06372e913782245e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_0732f29a10e86e4e06372e913782245e->m_type_description == NULL);
    frame_0732f29a10e86e4e06372e913782245e = cache_frame_0732f29a10e86e4e06372e913782245e;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_0732f29a10e86e4e06372e913782245e);
    assert(Py_REFCNT(frame_0732f29a10e86e4e06372e913782245e) == 2);

    // Framed code:
    {
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_x);
        tmp_cmp_expr_left_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_cmp_expr_right_1 = par_y;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3015;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0732f29a10e86e4e06372e913782245e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0732f29a10e86e4e06372e913782245e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0732f29a10e86e4e06372e913782245e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0732f29a10e86e4e06372e913782245e,
        type_description_1,
        par_self,
        par_x,
        par_y
    );


    // Release cached frame if used for exception.
    if (frame_0732f29a10e86e4e06372e913782245e == cache_frame_0732f29a10e86e4e06372e913782245e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_0732f29a10e86e4e06372e913782245e);
        cache_frame_0732f29a10e86e4e06372e913782245e = NULL;
    }

    assertFrameObject(frame_0732f29a10e86e4e06372e913782245e);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__135__set_parent(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_outer = python_pars[2];
    PyObject *par_kw = python_pars[3];
    struct Nuitka_FrameObject *frame_7a96f11fc9841aac6ac44ac3480f50e1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7a96f11fc9841aac6ac44ac3480f50e1 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7a96f11fc9841aac6ac44ac3480f50e1)) {
        Py_XDECREF(cache_frame_7a96f11fc9841aac6ac44ac3480f50e1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7a96f11fc9841aac6ac44ac3480f50e1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7a96f11fc9841aac6ac44ac3480f50e1 = MAKE_FUNCTION_FRAME(tstate, codeobj_7a96f11fc9841aac6ac44ac3480f50e1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_7a96f11fc9841aac6ac44ac3480f50e1->m_type_description == NULL);
    frame_7a96f11fc9841aac6ac44ac3480f50e1 = cache_frame_7a96f11fc9841aac6ac44ac3480f50e1;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_7a96f11fc9841aac6ac44ac3480f50e1);
    assert(Py_REFCNT(frame_7a96f11fc9841aac6ac44ac3480f50e1) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_outer);
        tmp_operand_value_1 = par_outer;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3020;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[170]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3020;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[376]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[376]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 3020;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3020;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 3021;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[170]);
        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3021;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[377]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3021;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_tuple_element_1 = par_column;
        tmp_dircall_arg2_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__5_complex_call_helper_pos_star_dict(tstate, dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3021;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7a96f11fc9841aac6ac44ac3480f50e1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7a96f11fc9841aac6ac44ac3480f50e1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7a96f11fc9841aac6ac44ac3480f50e1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7a96f11fc9841aac6ac44ac3480f50e1,
        type_description_1,
        par_self,
        par_column,
        par_outer,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_7a96f11fc9841aac6ac44ac3480f50e1 == cache_frame_7a96f11fc9841aac6ac44ac3480f50e1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_7a96f11fc9841aac6ac44ac3480f50e1);
        cache_frame_7a96f11fc9841aac6ac44ac3480f50e1 = NULL;
    }

    assertFrameObject(frame_7a96f11fc9841aac6ac44ac3480f50e1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_outer);
    Py_DECREF(par_outer);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_outer);
    Py_DECREF(par_outer);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    struct Nuitka_FrameObject *frame_e5f411581a210eef805ca44376d6ff8b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_e5f411581a210eef805ca44376d6ff8b = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e5f411581a210eef805ca44376d6ff8b)) {
        Py_XDECREF(cache_frame_e5f411581a210eef805ca44376d6ff8b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e5f411581a210eef805ca44376d6ff8b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e5f411581a210eef805ca44376d6ff8b = MAKE_FUNCTION_FRAME(tstate, codeobj_e5f411581a210eef805ca44376d6ff8b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_e5f411581a210eef805ca44376d6ff8b->m_type_description == NULL);
    frame_e5f411581a210eef805ca44376d6ff8b = cache_frame_e5f411581a210eef805ca44376d6ff8b;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_e5f411581a210eef805ca44376d6ff8b);
    assert(Py_REFCNT(frame_e5f411581a210eef805ca44376d6ff8b) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[169]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[169]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[379]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_tuple_element_1 = par_parent;
        tmp_args_value_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        tmp_kwargs_value_1 = DICT_COPY(mod_consts[380]);
        frame_e5f411581a210eef805ca44376d6ff8b->m_frame.f_lineno = 3026;
        tmp_call_result_1 = CALL_FUNCTION(tstate, tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        Py_DECREF(tmp_kwargs_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[170]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3028;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[376]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[376]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 3028;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3028;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[170]);
        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3029;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_args_element_value_1 = par_parent;
        frame_e5f411581a210eef805ca44376d6ff8b->m_frame.f_lineno = 3029;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[379], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3029;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e5f411581a210eef805ca44376d6ff8b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e5f411581a210eef805ca44376d6ff8b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e5f411581a210eef805ca44376d6ff8b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e5f411581a210eef805ca44376d6ff8b,
        type_description_1,
        par_self,
        par_parent,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_e5f411581a210eef805ca44376d6ff8b == cache_frame_e5f411581a210eef805ca44376d6ff8b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_e5f411581a210eef805ca44376d6ff8b);
        cache_frame_e5f411581a210eef805ca44376d6ff8b = NULL;
    }

    assertFrameObject(frame_e5f411581a210eef805ca44376d6ff8b);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__137___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_types = python_pars[1];
    PyObject *outline_0_var_item_type = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_d2110d52561d4de5270328393e2cb4b1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_d2110d52561d4de5270328393e2cb4b1 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d2110d52561d4de5270328393e2cb4b1)) {
        Py_XDECREF(cache_frame_d2110d52561d4de5270328393e2cb4b1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2110d52561d4de5270328393e2cb4b1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2110d52561d4de5270328393e2cb4b1 = MAKE_FUNCTION_FRAME(tstate, codeobj_d2110d52561d4de5270328393e2cb4b1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_d2110d52561d4de5270328393e2cb4b1->m_type_description == NULL);
    frame_d2110d52561d4de5270328393e2cb4b1 = cache_frame_d2110d52561d4de5270328393e2cb4b1;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_d2110d52561d4de5270328393e2cb4b1);
    assert(Py_REFCNT(frame_d2110d52561d4de5270328393e2cb4b1) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_assattr_target_1;
        tmp_cmp_expr_left_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381]);

        if (unlikely(tmp_cmp_expr_left_1 == NULL)) {
            tmp_cmp_expr_left_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[381]);
        }

        if (tmp_cmp_expr_left_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3038;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_types);
        tmp_cmp_expr_right_1 = par_types;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3038;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[382], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3038;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(par_types);
            tmp_iter_arg_1 = par_types;
            tmp_assign_source_1 = MAKE_ITERATOR(tstate, tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3039;
                type_description_1 = "oo";
                goto try_except_handler_1;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_2;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oo";
                    exception_lineno = 3039;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_4 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_item_type;
                outline_0_var_item_type = tmp_assign_source_4;
                Py_INCREF(outline_0_var_item_type);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            nuitka_bool tmp_condition_result_1;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_called_value_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_item_type);
            tmp_isinstance_inst_1 = outline_0_var_item_type;
            tmp_isinstance_cls_1 = (PyObject *)&PyType_Type;
            tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3040;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_1;
            } else {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            CHECK_OBJECT(outline_0_var_item_type);
            tmp_called_value_1 = outline_0_var_item_type;
            frame_d2110d52561d4de5270328393e2cb4b1->m_frame.f_lineno = 3040;
            tmp_append_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_1);
            if (tmp_append_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3040;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            goto condexpr_end_1;
            condexpr_false_1:;
            CHECK_OBJECT(outline_0_var_item_type);
            tmp_append_value_1 = outline_0_var_item_type;
            Py_INCREF(tmp_append_value_1);
            condexpr_end_1:;
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3039;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
        }
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3039;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assattr_value_2 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assattr_value_2);
        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto try_return_handler_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        Py_XDECREF(outline_0_var_item_type);
        outline_0_var_item_type = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_1:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_item_type);
        outline_0_var_item_type = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 3039;
        goto frame_exception_exit_1;
        outline_result_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[383], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3039;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2110d52561d4de5270328393e2cb4b1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2110d52561d4de5270328393e2cb4b1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2110d52561d4de5270328393e2cb4b1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2110d52561d4de5270328393e2cb4b1,
        type_description_1,
        par_self,
        par_types
    );


    // Release cached frame if used for exception.
    if (frame_d2110d52561d4de5270328393e2cb4b1 == cache_frame_d2110d52561d4de5270328393e2cb4b1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_d2110d52561d4de5270328393e2cb4b1);
        cache_frame_d2110d52561d4de5270328393e2cb4b1 = NULL;
    }

    assertFrameObject(frame_d2110d52561d4de5270328393e2cb4b1);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_types);
    Py_DECREF(par_types);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_types);
    Py_DECREF(par_types);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    PyObject *outline_0_var_typ = NULL;
    PyObject *outline_0_var_elem = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_f3390662c8b7527db73baa51a692cb82;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_f3390662c8b7527db73baa51a692cb82 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f3390662c8b7527db73baa51a692cb82)) {
        Py_XDECREF(cache_frame_f3390662c8b7527db73baa51a692cb82);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f3390662c8b7527db73baa51a692cb82 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f3390662c8b7527db73baa51a692cb82 = MAKE_FUNCTION_FRAME(tstate, codeobj_f3390662c8b7527db73baa51a692cb82, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_f3390662c8b7527db73baa51a692cb82->m_type_description == NULL);
    frame_f3390662c8b7527db73baa51a692cb82 = cache_frame_f3390662c8b7527db73baa51a692cb82;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_f3390662c8b7527db73baa51a692cb82);
    assert(Py_REFCNT(frame_f3390662c8b7527db73baa51a692cb82) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[382]);
        if (tmp_attribute_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 3045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(par_self);
    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[384]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[384]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3048;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_value_1;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_2;
            PyObject *tmp_args_element_value_2;
            tmp_called_value_1 = (PyObject *)&PyZip_Type;
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[383]);
            if (tmp_args_element_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3051;
                type_description_1 = "oo";
                goto try_except_handler_1;
            }
            CHECK_OBJECT(par_value);
            tmp_args_element_value_2 = par_value;
            frame_f3390662c8b7527db73baa51a692cb82->m_frame.f_lineno = 3051;
            {
                PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
            }

            Py_DECREF(tmp_args_element_value_1);
            if (tmp_iter_arg_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3051;
                type_description_1 = "oo";
                goto try_except_handler_1;
            }
            tmp_assign_source_1 = MAKE_ITERATOR(tstate, tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3049;
                type_description_1 = "oo";
                goto try_except_handler_1;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_2;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oo";
                    exception_lineno = 3049;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_iter_arg_2 = tmp_listcomp_1__iter_value_0;
            tmp_assign_source_4 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3049;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__source_iter;
                tmp_listcomp$tuple_unpack_1__source_iter = tmp_assign_source_4;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_5 = UNPACK_NEXT(tstate, tmp_unpack_1, 0, 2);
            if (tmp_assign_source_5 == NULL) {
                if (!HAS_ERROR_OCCURRED(tstate)) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "oo";
                exception_lineno = 3049;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_1;
                tmp_listcomp$tuple_unpack_1__element_1 = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_2 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_6 = UNPACK_NEXT(tstate, tmp_unpack_2, 1, 2);
            if (tmp_assign_source_6 == NULL) {
                if (!HAS_ERROR_OCCURRED(tstate)) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "oo";
                exception_lineno = 3049;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_2;
                tmp_listcomp$tuple_unpack_1__element_2 = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_iterator_name_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED(tstate);

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(tstate, error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED(tstate);
                    } else {
                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);

                        type_description_1 = "oo";
                        exception_lineno = 3049;
                        goto try_except_handler_4;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[188];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_1 = "oo";
                exception_lineno = 3049;
                goto try_except_handler_4;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_1);
            tmp_assign_source_7 = tmp_listcomp$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_0_var_typ;
                outline_0_var_typ = tmp_assign_source_7;
                Py_INCREF(outline_0_var_typ);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_2);
            tmp_assign_source_8 = tmp_listcomp$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_0_var_elem;
                outline_0_var_elem = tmp_assign_source_8;
                Py_INCREF(outline_0_var_elem);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            bool tmp_condition_result_2;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_3;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_typ);
            tmp_cmp_expr_left_1 = outline_0_var_typ;
            tmp_cmp_expr_right_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381]);

            if (unlikely(tmp_cmp_expr_right_1 == NULL)) {
                tmp_cmp_expr_right_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[381]);
            }

            if (tmp_cmp_expr_right_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3050;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
            if (tmp_condition_result_2 != false) {
                goto condexpr_true_1;
            } else {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[385]);

            if (unlikely(tmp_called_value_2 == NULL)) {
                tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[385]);
            }

            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3050;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(outline_0_var_elem);
            tmp_args_element_value_3 = outline_0_var_elem;
            frame_f3390662c8b7527db73baa51a692cb82->m_frame.f_lineno = 3050;
            tmp_append_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_3);
            if (tmp_append_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3050;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            goto condexpr_end_1;
            condexpr_false_1:;
            CHECK_OBJECT(outline_0_var_typ);
            tmp_append_value_1 = outline_0_var_typ;
            Py_INCREF(tmp_append_value_1);
            condexpr_end_1:;
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3049;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
        }
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3049;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_dircall_arg2_1 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_dircall_arg2_1);
        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto try_return_handler_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        Py_XDECREF(outline_0_var_typ);
        outline_0_var_typ = NULL;
        Py_XDECREF(outline_0_var_elem);
        outline_0_var_elem = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_1:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_typ);
        outline_0_var_typ = NULL;
        Py_XDECREF(outline_0_var_elem);
        outline_0_var_elem = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 3049;
        goto frame_exception_exit_1;
        outline_result_1:;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___main__$$$function__7_complex_call_helper_star_list(tstate, dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3048;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f3390662c8b7527db73baa51a692cb82, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f3390662c8b7527db73baa51a692cb82->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f3390662c8b7527db73baa51a692cb82, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f3390662c8b7527db73baa51a692cb82,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_f3390662c8b7527db73baa51a692cb82 == cache_frame_f3390662c8b7527db73baa51a692cb82) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_f3390662c8b7527db73baa51a692cb82);
        cache_frame_f3390662c8b7527db73baa51a692cb82 = NULL;
    }

    assertFrameObject(frame_f3390662c8b7527db73baa51a692cb82);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__139_result_processor(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_95e372e15f3eab876275a166a45fc0ec;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_95e372e15f3eab876275a166a45fc0ec = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_95e372e15f3eab876275a166a45fc0ec)) {
        Py_XDECREF(cache_frame_95e372e15f3eab876275a166a45fc0ec);

#if _DEBUG_REFCOUNTS
        if (cache_frame_95e372e15f3eab876275a166a45fc0ec == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_95e372e15f3eab876275a166a45fc0ec = MAKE_FUNCTION_FRAME(tstate, codeobj_95e372e15f3eab876275a166a45fc0ec, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_95e372e15f3eab876275a166a45fc0ec->m_type_description == NULL);
    frame_95e372e15f3eab876275a166a45fc0ec = cache_frame_95e372e15f3eab876275a166a45fc0ec;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_95e372e15f3eab876275a166a45fc0ec);
    assert(Py_REFCNT(frame_95e372e15f3eab876275a166a45fc0ec) == 2);

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[386];
        frame_95e372e15f3eab876275a166a45fc0ec->m_frame.f_lineno = 3056;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, PyExc_NotImplementedError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 3056;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_95e372e15f3eab876275a166a45fc0ec, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_95e372e15f3eab876275a166a45fc0ec->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_95e372e15f3eab876275a166a45fc0ec, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_95e372e15f3eab876275a166a45fc0ec,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_95e372e15f3eab876275a166a45fc0ec == cache_frame_95e372e15f3eab876275a166a45fc0ec) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_95e372e15f3eab876275a166a45fc0ec);
        cache_frame_95e372e15f3eab876275a166a45fc0ec = NULL;
    }

    assertFrameObject(frame_95e372e15f3eab876275a166a45fc0ec);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__140___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_a5939a4eef8c8ee9294d69c356867bd8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a5939a4eef8c8ee9294d69c356867bd8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a5939a4eef8c8ee9294d69c356867bd8)) {
        Py_XDECREF(cache_frame_a5939a4eef8c8ee9294d69c356867bd8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a5939a4eef8c8ee9294d69c356867bd8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a5939a4eef8c8ee9294d69c356867bd8 = MAKE_FUNCTION_FRAME(tstate, codeobj_a5939a4eef8c8ee9294d69c356867bd8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a5939a4eef8c8ee9294d69c356867bd8->m_type_description == NULL);
    frame_a5939a4eef8c8ee9294d69c356867bd8 = cache_frame_a5939a4eef8c8ee9294d69c356867bd8;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a5939a4eef8c8ee9294d69c356867bd8);
    assert(Py_REFCNT(frame_a5939a4eef8c8ee9294d69c356867bd8) == 2);

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[387]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[387]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3138;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER2(tstate, moduledict_sqlalchemy$sql$sqltypes, tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3138;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[70]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3138;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_timezone);
        tmp_kw_call_value_0_1 = par_timezone;
        frame_a5939a4eef8c8ee9294d69c356867bd8->m_frame.f_lineno = 3138;
        {
            PyObject *kw_values[1] = {tmp_kw_call_value_0_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_1, kw_values, mod_consts[388]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3138;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a5939a4eef8c8ee9294d69c356867bd8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a5939a4eef8c8ee9294d69c356867bd8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a5939a4eef8c8ee9294d69c356867bd8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a5939a4eef8c8ee9294d69c356867bd8,
        type_description_1,
        par_self,
        par_timezone,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_a5939a4eef8c8ee9294d69c356867bd8 == cache_frame_a5939a4eef8c8ee9294d69c356867bd8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a5939a4eef8c8ee9294d69c356867bd8);
        cache_frame_a5939a4eef8c8ee9294d69c356867bd8 = NULL;
    }

    assertFrameObject(frame_a5939a4eef8c8ee9294d69c356867bd8);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_82e5fd204f296fa27f96d394a9996049;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_82e5fd204f296fa27f96d394a9996049 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_82e5fd204f296fa27f96d394a9996049)) {
        Py_XDECREF(cache_frame_82e5fd204f296fa27f96d394a9996049);

#if _DEBUG_REFCOUNTS
        if (cache_frame_82e5fd204f296fa27f96d394a9996049 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_82e5fd204f296fa27f96d394a9996049 = MAKE_FUNCTION_FRAME(tstate, codeobj_82e5fd204f296fa27f96d394a9996049, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_82e5fd204f296fa27f96d394a9996049->m_type_description == NULL);
    frame_82e5fd204f296fa27f96d394a9996049 = cache_frame_82e5fd204f296fa27f96d394a9996049;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_82e5fd204f296fa27f96d394a9996049);
    assert(Py_REFCNT(frame_82e5fd204f296fa27f96d394a9996049) == 2);

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[387]);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3141;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_82e5fd204f296fa27f96d394a9996049, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_82e5fd204f296fa27f96d394a9996049->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_82e5fd204f296fa27f96d394a9996049, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_82e5fd204f296fa27f96d394a9996049,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_82e5fd204f296fa27f96d394a9996049 == cache_frame_82e5fd204f296fa27f96d394a9996049) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_82e5fd204f296fa27f96d394a9996049);
        cache_frame_82e5fd204f296fa27f96d394a9996049 = NULL;
    }

    assertFrameObject(frame_82e5fd204f296fa27f96d394a9996049);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    struct Nuitka_FrameObject *frame_a02ff683c856ba0c34c2d0de709d74ff;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a02ff683c856ba0c34c2d0de709d74ff = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a02ff683c856ba0c34c2d0de709d74ff)) {
        Py_XDECREF(cache_frame_a02ff683c856ba0c34c2d0de709d74ff);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a02ff683c856ba0c34c2d0de709d74ff == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a02ff683c856ba0c34c2d0de709d74ff = MAKE_FUNCTION_FRAME(tstate, codeobj_a02ff683c856ba0c34c2d0de709d74ff, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_a02ff683c856ba0c34c2d0de709d74ff->m_type_description == NULL);
    frame_a02ff683c856ba0c34c2d0de709d74ff = cache_frame_a02ff683c856ba0c34c2d0de709d74ff;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_a02ff683c856ba0c34c2d0de709d74ff);
    assert(Py_REFCNT(frame_a02ff683c856ba0c34c2d0de709d74ff) == 2);

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_other_comparator);
        tmp_isinstance_inst_1 = par_other_comparator;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[10]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3275;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[9]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3275;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3274;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3274;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[6]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3276;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        frame_a02ff683c856ba0c34c2d0de709d74ff->m_frame.f_lineno = 3276;
        tmp_operand_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_1, mod_consts[390], tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3276;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3276;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_1;
        if (par_op == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[391]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 3277;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = par_op;
        tmp_return_value = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_2;
            PyObject *tmp_expression_value_3;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_3 = par_self;
            tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[12]);
            if (tmp_expression_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3277;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[0]);
            Py_DECREF(tmp_expression_value_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3277;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        CHECK_OBJECT(par_other_comparator);
        tmp_expression_value_4 = par_other_comparator;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_4, mod_consts[13]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3279;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if (par_op == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[391]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 3279;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = par_op;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_3 = par_self;
        frame_a02ff683c856ba0c34c2d0de709d74ff->m_frame.f_lineno = 3279;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3279;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto function_return_exit;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a02ff683c856ba0c34c2d0de709d74ff, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a02ff683c856ba0c34c2d0de709d74ff->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a02ff683c856ba0c34c2d0de709d74ff, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a02ff683c856ba0c34c2d0de709d74ff,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator
    );


    // Release cached frame if used for exception.
    if (frame_a02ff683c856ba0c34c2d0de709d74ff == cache_frame_a02ff683c856ba0c34c2d0de709d74ff) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_a02ff683c856ba0c34c2d0de709d74ff);
        cache_frame_a02ff683c856ba0c34c2d0de709d74ff = NULL;
    }

    assertFrameObject(frame_a02ff683c856ba0c34c2d0de709d74ff);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__144___init__(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elements = python_pars[1];
    PyObject *outline_0_var_elem = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_860cf24a015df29d396f8849325256e4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_860cf24a015df29d396f8849325256e4 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_860cf24a015df29d396f8849325256e4)) {
        Py_XDECREF(cache_frame_860cf24a015df29d396f8849325256e4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_860cf24a015df29d396f8849325256e4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_860cf24a015df29d396f8849325256e4 = MAKE_FUNCTION_FRAME(tstate, codeobj_860cf24a015df29d396f8849325256e4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_860cf24a015df29d396f8849325256e4->m_type_description == NULL);
    frame_860cf24a015df29d396f8849325256e4 = cache_frame_860cf24a015df29d396f8849325256e4;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_860cf24a015df29d396f8849325256e4);
    assert(Py_REFCNT(frame_860cf24a015df29d396f8849325256e4) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(par_elements);
            tmp_iter_arg_1 = par_elements;
            tmp_assign_source_1 = MAKE_ITERATOR(tstate, tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3294;
                type_description_1 = "oo";
                goto try_except_handler_1;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = MAKE_LIST_EMPTY(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_2;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED(tstate)) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oo";
                    exception_lineno = 3294;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_4 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_elem;
                outline_0_var_elem = tmp_assign_source_4;
                Py_INCREF(outline_0_var_elem);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_value_1;
            PyObject *tmp_expression_value_1;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_2;
            PyObject *tmp_args_element_value_2;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310]);

            if (unlikely(tmp_expression_value_1 == NULL)) {
                tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[310]);
            }

            if (tmp_expression_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3295;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_1, mod_consts[311]);
            if (tmp_called_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3295;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312]);

            if (unlikely(tmp_expression_value_2 == NULL)) {
                tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[312]);
            }

            if (tmp_expression_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_1);

                exception_lineno = 3295;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[392]);
            if (tmp_args_element_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_1);

                exception_lineno = 3295;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(outline_0_var_elem);
            tmp_args_element_value_2 = outline_0_var_elem;
            frame_860cf24a015df29d396f8849325256e4->m_frame.f_lineno = 3295;
            {
                PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
                tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
            }

            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_append_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3295;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3294;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
        }
        if (CONSIDER_THREADING(tstate) == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3294;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assattr_value_1 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assattr_value_1);
        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto try_return_handler_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        Py_XDECREF(outline_0_var_elem);
        outline_0_var_elem = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_1:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_elem);
        outline_0_var_elem = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 3294;
        goto frame_exception_exit_1;
        outline_result_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[393], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3294;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_860cf24a015df29d396f8849325256e4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_860cf24a015df29d396f8849325256e4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_860cf24a015df29d396f8849325256e4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_860cf24a015df29d396f8849325256e4,
        type_description_1,
        par_self,
        par_elements
    );


    // Release cached frame if used for exception.
    if (frame_860cf24a015df29d396f8849325256e4 == cache_frame_860cf24a015df29d396f8849325256e4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_860cf24a015df29d396f8849325256e4);
        cache_frame_860cf24a015df29d396f8849325256e4 = NULL;
    }

    assertFrameObject(frame_860cf24a015df29d396f8849325256e4);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type(PyThreadState *tstate, struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = HAS_ERROR_OCCURRED(tstate);
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *var__result_type = NULL;
    PyObject *var_insp = NULL;
    struct Nuitka_FrameObject *frame_39d02b762a7fc89ec42128877d4654af;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_39d02b762a7fc89ec42128877d4654af = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_39d02b762a7fc89ec42128877d4654af)) {
        Py_XDECREF(cache_frame_39d02b762a7fc89ec42128877d4654af);

#if _DEBUG_REFCOUNTS
        if (cache_frame_39d02b762a7fc89ec42128877d4654af == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_39d02b762a7fc89ec42128877d4654af = MAKE_FUNCTION_FRAME(tstate, codeobj_39d02b762a7fc89ec42128877d4654af, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }

    assert(cache_frame_39d02b762a7fc89ec42128877d4654af->m_type_description == NULL);
    frame_39d02b762a7fc89ec42128877d4654af = cache_frame_39d02b762a7fc89ec42128877d4654af;

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_39d02b762a7fc89ec42128877d4654af);
    assert(Py_REFCNT(frame_39d02b762a7fc89ec42128877d4654af) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[394]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[394]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3350;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_type_arg_1 = par_value;
        tmp_args_element_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_args_element_value_1 == NULL));
        tmp_args_element_value_2 = Py_False;
        frame_39d02b762a7fc89ec42128877d4654af->m_frame.f_lineno = 3350;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3350;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var__result_type == NULL);
        var__result_type = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var__result_type);
        tmp_cmp_expr_left_1 = var__result_type;
        tmp_cmp_expr_right_1 = Py_False;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[395]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[395]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3354;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        tmp_args_element_value_4 = Py_False;
        frame_39d02b762a7fc89ec42128877d4654af->m_frame.f_lineno = 3354;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_1,
                mod_consts[396],
                call_args
            );
        }

        if (tmp_assign_source_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3354;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_insp == NULL);
        var_insp = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(var_insp);
        tmp_cmp_expr_left_2 = var_insp;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_insp);
        tmp_expression_value_1 = var_insp;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tstate, tmp_expression_value_1);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3360;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[395]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[395]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 3360;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_2, mod_consts[397]);
        if (tmp_cmp_expr_right_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 3360;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_3, tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3360;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? true : false;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_1;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[19]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3362;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[20]);
        if (tmp_called_value_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3362;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mod_expr_left_1 = mod_consts[398];
        CHECK_OBJECT(par_value);
        tmp_tuple_element_1 = par_value;
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_mod_expr_right_1, 0, tmp_tuple_element_1);
        tmp_args_element_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_args_element_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 3363;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_39d02b762a7fc89ec42128877d4654af->m_frame.f_lineno = 3362;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_5);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_raise_type_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3362;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 3362;
        RAISE_EXCEPTION_WITH_TYPE(tstate, &exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[381]);
    }

    if (tmp_return_value == NULL) {
        assert(HAS_ERROR_OCCURRED(tstate));

        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


        exception_lineno = 3365;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_6;
        CHECK_OBJECT(var__result_type);
        tmp_called_instance_2 = var__result_type;
        CHECK_OBJECT(par_value);
        tmp_args_element_value_6 = par_value;
        frame_39d02b762a7fc89ec42128877d4654af->m_frame.f_lineno = 3367;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_2, mod_consts[399], tmp_args_element_value_6);
        if (tmp_return_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3367;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_1;
    frame_return_exit_1:

    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto try_return_handler_1;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_39d02b762a7fc89ec42128877d4654af, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_39d02b762a7fc89ec42128877d4654af->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_39d02b762a7fc89ec42128877d4654af, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_39d02b762a7fc89ec42128877d4654af,
        type_description_1,
        par_value,
        var__result_type,
        var_insp
    );


    // Release cached frame if used for exception.
    if (frame_39d02b762a7fc89ec42128877d4654af == cache_frame_39d02b762a7fc89ec42128877d4654af) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif
        Py_DECREF(cache_frame_39d02b762a7fc89ec42128877d4654af);
        cache_frame_39d02b762a7fc89ec42128877d4654af = NULL;
    }

    assertFrameObject(frame_39d02b762a7fc89ec42128877d4654af);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var__result_type);
    var__result_type = NULL;
    Py_XDECREF(var_insp);
    var_insp = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var__result_type);
    var__result_type = NULL;
    Py_XDECREF(var_insp);
    var_insp = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !HAS_ERROR_OCCURRED(tstate));
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[639],
#endif
        codeobj_0cd02c703c2775b783b9936a6f233d17,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101__type_affinity() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__101__type_affinity,
        mod_consts[1],
#if PYTHON_VERSION >= 0x300
        mod_consts[640],
#endif
        codeobj_69cd121a9e7915ea43e980bbfb781ba4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[641],
#endif
        codeobj_8f8e59509cf5dd0cddb84c2d22b10dcf,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[125],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__103___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[649],
#endif
        codeobj_e1977a2d725d12c80b7a6caec89fcb30,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[290],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__104_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[650],
#endif
        codeobj_c39aad65e86349b425603ac858b36a6c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated,
        mod_consts[604],
#if PYTHON_VERSION >= 0x300
        mod_consts[651],
#endif
        codeobj_63e12dc9752003f7d1300b5a9d89f566,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[652],
#endif
        codeobj_7dc3a592a8957d237412cb3869c0d59b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[294],
#endif
        codeobj_6870cd705409694c096203ac688e3f94,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[294],
#endif
        codeobj_f302782f2887664f0f81e60fcde974ef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[653],
#endif
        codeobj_72a1c19d21e6be035c14bc845019e8bb,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[295],
#endif
        codeobj_a38c5228ea1ec6397f512a1e33be6501,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[295],
#endif
        codeobj_7e98211beaef94e3ce7422d68cfdf4d1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__108___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[657],
#endif
        codeobj_8e8c704bd4c8e39012c18136e28302b7,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[297],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor,
        mod_consts[302],
#if PYTHON_VERSION >= 0x300
        mod_consts[661],
#endif
        codeobj_8fd9daf5853e0e821c3f286896028af7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__10_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[491],
#endif
        codeobj_a38ad2f71667eefaa00c91b2468061ee,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor,
        mod_consts[306],
#if PYTHON_VERSION >= 0x300
        mod_consts[662],
#endif
        codeobj_a902ceab51ee1c72b73341439a122c1a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[663],
#endif
        codeobj_455d8e1951d4354fb0c6cb4f4898fd69,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[303],
#endif
        codeobj_5d56852e46eecf9b918918c8d7c7b596,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[664],
#endif
        codeobj_15e6a851de498da4e983cb66c2336097,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[307],
#endif
        codeobj_46b25776bd4ddeac141a592a403be131,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[674],
#endif
        codeobj_5aae064b1d2797cd804c1de082b29707,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_boolean() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__114_as_boolean,
        mod_consts[323],
#if PYTHON_VERSION >= 0x300
        mod_consts[675],
#endif
        codeobj_4b54e7eeebef5e85e49e3f73839abe7c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[324],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_string() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__115_as_string,
        mod_consts[325],
#if PYTHON_VERSION >= 0x300
        mod_consts[676],
#endif
        codeobj_7b3379ea232c1f0da5bc581a8f2d9590,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[326],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_integer() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__116_as_integer,
        mod_consts[327],
#if PYTHON_VERSION >= 0x300
        mod_consts[677],
#endif
        codeobj_9023f34f84e0bc2d0766715b99f9fe92,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[328],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_float() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__117_as_float,
        mod_consts[330],
#if PYTHON_VERSION >= 0x300
        mod_consts[678],
#endif
        codeobj_11bd9f031662eaa94875136629728aed,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[331],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118_as_numeric(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__118_as_numeric,
        mod_consts[333],
#if PYTHON_VERSION >= 0x300
        mod_consts[679],
#endif
        codeobj_7fc04a05e029d491257a3400bd5674b4,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[334],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_as_json() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__119_as_json,
        mod_consts[680],
#if PYTHON_VERSION >= 0x300
        mod_consts[681],
#endif
        codeobj_4deb6907a9a8f405f85fccb5a2026138,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[335],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[493],
#endif
        codeobj_a99c26bd90c6e071d11f1c9eda1ed2ee,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type,
        mod_consts[321],
#if PYTHON_VERSION >= 0x300
        mod_consts[682],
#endif
        codeobj_84049f62abc4b0f6cc3d4bd7098c0c6a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[683],
#endif
        codeobj_ee1ad9b19df039d69a22fe4948e9cc29,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyDict_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none,
        mod_consts[684],
#if PYTHON_VERSION >= 0x300
        mod_consts[685],
#endif
        codeobj_1ae91670e9c7411c62634f9d9b1cedf9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[342],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none,
        mod_consts[684],
#if PYTHON_VERSION >= 0x300
        mod_consts[685],
#endif
        codeobj_1906085cade7eb0c9b887fc6048b75da,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124__str_impl() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__124__str_impl,
        mod_consts[344],
#if PYTHON_VERSION >= 0x300
        mod_consts[687],
#endif
        codeobj_df4f9203137722432f20a7a5cd8dfb73,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[688],
#endif
        codeobj_7c5e81347f01a63cc0bbd6a2d986e9c2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[347],
#endif
        codeobj_1ad717ec8074da851881b8d6d8645881,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[689],
#endif
        codeobj_8bea2ad013daff045879b53916208b19,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[353],
#endif
        codeobj_9601272f9d86ca9675bd31bee69e315f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[694],
#endif
        codeobj_4681de3a5744db5c28af0c5006b60e40,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_contains() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__128_contains,
        mod_consts[695],
#if PYTHON_VERSION >= 0x300
        mod_consts[696],
#endif
        codeobj_292e8eb9852aff9ad1415c867443ca42,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129_any(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__129_any,
        mod_consts[698],
#if PYTHON_VERSION >= 0x300
        mod_consts[699],
#endif
        codeobj_ac0eb5cbdd92fdd006b83a9501c373a9,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[370],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode,
        mod_consts[495],
#if PYTHON_VERSION >= 0x300
        mod_consts[496],
#endif
        codeobj_a4dd06c35d8f54f5659d4efa77c645c1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_all(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__130_all,
        mod_consts[700],
#if PYTHON_VERSION >= 0x300
        mod_consts[701],
#endif
        codeobj_85bac47e1cf9d36e40522f790bb6cd9b,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[372],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__131___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[703],
#endif
        codeobj_dcb37d94f9a080ffee69d985b8473940,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[375],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_hashable() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__132_hashable,
        mod_consts[655],
#if PYTHON_VERSION >= 0x300
        mod_consts[704],
#endif
        codeobj_3393bab199aa606260cd83eafb7e60ef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[705],
#endif
        codeobj_9ded2a4e9b5137410534666c16be1ee5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyList_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134_compare_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__134_compare_values,
        mod_consts[624],
#if PYTHON_VERSION >= 0x300
        mod_consts[706],
#endif
        codeobj_0732f29a10e86e4e06372e913782245e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135__set_parent(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__135__set_parent,
        mod_consts[377],
#if PYTHON_VERSION >= 0x300
        mod_consts[707],
#endif
        codeobj_7a96f11fc9841aac6ac44ac3480f50e1,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[378],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch,
        mod_consts[379],
#if PYTHON_VERSION >= 0x300
        mod_consts[708],
#endif
        codeobj_e5f411581a210eef805ca44376d6ff8b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[378],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__137___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[711],
#endif
        codeobj_d2110d52561d4de5270328393e2cb4b1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types,
        mod_consts[712],
#if PYTHON_VERSION >= 0x300
        mod_consts[713],
#endif
        codeobj_f3390662c8b7527db73baa51a692cb82,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__139_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[714],
#endif
        codeobj_95e372e15f3eab876275a166a45fc0ec,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__13___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[502],
#endif
        codeobj_8d044b6d5bdc619673cd83ddf539ea55,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[71],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__140___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__140___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[731],
#endif
        codeobj_a5939a4eef8c8ee9294d69c356867bd8,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[389],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[732],
#endif
        codeobj_82e5fd204f296fa27f96d394a9996049,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__142_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[760],
#endif
        codeobj_1cee837fc0e901460db4f0b3537764a9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[762],
#endif
        codeobj_a02ff683c856ba0c34c2d0de709d74ff,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__144___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__144___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[768],
#endif
        codeobj_860cf24a015df29d396f8849325256e4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type,
        mod_consts[385],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_39d02b762a7fc89ec42128877d4654af,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__14___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[505],
#endif
        codeobj_b63fa63511e0c7b1860a52cdcec45410,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[73],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[495],
#if PYTHON_VERSION >= 0x300
        mod_consts[506],
#endif
        codeobj_3d2504df643f6ba03cabb0b24161160e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[509],
#endif
        codeobj_bf1332a160020718f67323f49b22daa3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[510],
#endif
        codeobj_002ac1bda8a7625b09e4ebcb81cb326b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyLong_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[511],
#endif
        codeobj_66deec90162bc4753df4cc6dd0001d3c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[75],
#endif
        codeobj_d7d5c03789b25fdfe7cbb4bef3712422,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[513],
#endif
        codeobj_90751710920b713440bdd9e6d3e2a077,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[459],
#endif
        codeobj_dc1e0116e02385bb6a0ea34ac06059f5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__20___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[524],
#endif
        codeobj_d07f871351a6331152b640082eb89314,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[88],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale,
        mod_consts[101],
#if PYTHON_VERSION >= 0x300
        mod_consts[525],
#endif
        codeobj_393c24de29e5f4b7b8173a52b5c6dcc5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[526],
#endif
        codeobj_0fe5e2c0f3336234e4fbd21c3649d9bc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[527],
#endif
        codeobj_bf8473661f9b4d7ef6a26aeeae2ba020,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[90],
#endif
        codeobj_140f11ffc232bba79a75d39fd9201206,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__24_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[528],
#endif
        codeobj_b0447968372817314d0c8957939bd266,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[529],
#endif
        codeobj_c95f74067ff2a26745a69ed5731ef0fd,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[530],
#endif
        codeobj_8dc7b1bcd27b6dac4b7e5756844aedbd,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[531],
#endif
        codeobj_86a1f7ec69966cfa18ae1dc28bfa13bc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__28___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[535],
#endif
        codeobj_3e4700fbfee0bd27ddc1ad9b6731a22f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[100],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[536],
#endif
        codeobj_496e29032d090222c1a58f3ff80d8907,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[462],
#endif
        codeobj_a8aa4c3dc6bd2eff6b80e65163c43831,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__30___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[539],
#endif
        codeobj_4514be1da557df83c2179ee33fc04bab,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[103],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[540],
#endif
        codeobj_1e198664f2a4d9e82bdc48cdfa9a8f98,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal,
        mod_consts[399],
#if PYTHON_VERSION >= 0x300
        mod_consts[541],
#endif
        codeobj_d185872fd6ef313ec30a6b47c7b89cae,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__33_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[542],
#endif
        codeobj_a4ec031d95526921a392dd91aa716a6f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[543],
#endif
        codeobj_40c6e27348719cb4c5f6f001c46c47ef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[545],
#endif
        codeobj_a687d194a42d00f5eedb208b2958bc38,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__36_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[546],
#endif
        codeobj_5c02dabc9065dccb18307f68bd111e12,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[547],
#endif
        codeobj_6fa4a9c9a50f89ccbaee717d3548f2f6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__38___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[549],
#endif
        codeobj_5a1c82eeba4d41bbbc3db728e2b9fc59,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[550],
#endif
        codeobj_e6768e8b750571560d72b619871f854e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[467],
#endif
        codeobj_478fae5cd16153931042b88bcec7603f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__40_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[551],
#endif
        codeobj_0f190e1c4a7897b2194aead67fb41b94,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal,
        mod_consts[399],
#if PYTHON_VERSION >= 0x300
        mod_consts[552],
#endif
        codeobj_178b92a44f6a739969990d16fed758a7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[553],
#endif
        codeobj_5bfb01a900fbcd37cf78a54badbcbde7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__43___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[555],
#endif
        codeobj_a5a5d3a8e5e34ea07914ff3f7c20caf8,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[556],
#endif
        codeobj_db2e478b6344ee42179a20a08cdbb810,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[114],
#endif
        codeobj_7c00a8e6535b4fa75995a2f65b4780db,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__45_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[557],
#endif
        codeobj_cdf30f2e8523063925753c74ebf0993b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[558],
#endif
        codeobj_6efcc9144f44aeed5f25c6da94d7dd38,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[118],
#endif
        codeobj_f6f16776ae2cb762341ba3c5b6c326c2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__47_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[560],
#endif
        codeobj_46351f3dea9566bcf08fe0dc8a4cd561,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[560],
#endif
        codeobj_854fb67416f05a7dd402e05f0c3fad95,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[121],
#endif
        codeobj_8b1c9324b2f9a74c36720b12fbd8f5ac,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[561],
#endif
        codeobj_224fee5ca0b2f3cfd3d9a5506ec239c9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[125],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[471],
#endif
        codeobj_c1907f39d5011cfd95726a22afbb3938,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        mod_consts[562],
#endif
        codeobj_6cd175b6d8dd8eef0a3f5ec634733de5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__51___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[566],
#endif
        codeobj_1655a926b88f18b8542168ff4f71938a,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[128],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__52___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[570],
#endif
        codeobj_c393e91cad8d39e54440e418e4d538f0,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent,
        mod_consts[377],
#if PYTHON_VERSION >= 0x300
        mod_consts[571],
#endif
        codeobj_4841414b091159f12e20ecd242a5db74,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table,
        mod_consts[149],
#if PYTHON_VERSION >= 0x300
        mod_consts[572],
#endif
        codeobj_f414fb9bff05b417e46eb6ca0a8948ab,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__55__set_table,
        mod_consts[142],
#if PYTHON_VERSION >= 0x300
        mod_consts[573],
#endif
        codeobj_02b24c1aab36b85538788780cbf29e07,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__56_copy,
        mod_consts[145],
#if PYTHON_VERSION >= 0x300
        mod_consts[574],
#endif
        codeobj_75cf377c5b151e45160341e104f8347e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__57_adapt,
        mod_consts[152],
#if PYTHON_VERSION >= 0x300
        mod_consts[575],
#endif
        codeobj_321bf2361f1cad4f3c4c9cdf8ae84a4e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__58_bind,
        mod_consts[156],
#if PYTHON_VERSION >= 0x300
        mod_consts[576],
#endif
        codeobj_e2920da790812d701aed1f6e299c3c2a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__59_create,
        mod_consts[160],
#if PYTHON_VERSION >= 0x300
        mod_consts[578],
#endif
        codeobj_93e99cc8c06c3e9cd8797bb4bad6c276,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[162],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__,
        mod_consts[451],
#if PYTHON_VERSION >= 0x300
        mod_consts[472],
#endif
        codeobj_ed7f1a1f30dd734ccfa6346aa5e09b35,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__60_drop,
        mod_consts[163],
#if PYTHON_VERSION >= 0x300
        mod_consts[579],
#endif
        codeobj_8f0b7592959ec998dbe0a36a0203ad7d,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[164],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create,
        mod_consts[150],
#if PYTHON_VERSION >= 0x300
        mod_consts[580],
#endif
        codeobj_d84c754abc2f7c3ad9b602eba74790db,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop,
        mod_consts[151],
#if PYTHON_VERSION >= 0x300
        mod_consts[581],
#endif
        codeobj_5e4811336afcb0cee41bc6eba05d5af8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create,
        mod_consts[138],
#if PYTHON_VERSION >= 0x300
        mod_consts[582],
#endif
        codeobj_02ec6092a6bf216df402ff29d2a09867,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop,
        mod_consts[140],
#if PYTHON_VERSION >= 0x300
        mod_consts[583],
#endif
        codeobj_c6bfd50df88620f32c9bc73248327de1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant,
        mod_consts[165],
#if PYTHON_VERSION >= 0x300
        mod_consts[584],
#endif
        codeobj_505a0502bdbab04f3824c3172764fcb4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl,
        mod_consts[167],
#if PYTHON_VERSION >= 0x300
        mod_consts[168],
#endif
        codeobj_64325d5ac57f07f17109e61bac531e7f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__66___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[589],
#endif
        codeobj_22b369a7fb61d52c4d40da6b0fdc21f6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[172],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument,
        mod_consts[238],
#if PYTHON_VERSION >= 0x300
        mod_consts[590],
#endif
        codeobj_7f9e4ec31fee00f805cf32752e1ce6c8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init,
        mod_consts[171],
#if PYTHON_VERSION >= 0x300
        mod_consts[591],
#endif
        codeobj_796bc91f48f21302ef5b98f3e2483489,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[210],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values,
        mod_consts[187],
#if PYTHON_VERSION >= 0x300
        mod_consts[592],
#endif
        codeobj_a29865fc3b7ccc8eed358a41946fb965,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__6___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[487],
#endif
        codeobj_78b5c1ad9da27cdab09b61f7c9361a93,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[27],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values,
        mod_consts[189],
#if PYTHON_VERSION >= 0x300
        mod_consts[593],
#endif
        codeobj_0a4371321ab570fbf59be00f80d01c5c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function,
        mod_consts[181],
#if PYTHON_VERSION >= 0x300
        mod_consts[594],
#endif
        codeobj_edbbfc1e8b4d64da3fa598f7fda58c7d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__72_native,
        mod_consts[287],
#if PYTHON_VERSION >= 0x300
        mod_consts[595],
#endif
        codeobj_5952bea9da3dc287ee9548270dd9ecec,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem,
        mod_consts[223],
#if PYTHON_VERSION >= 0x300
        mod_consts[596],
#endif
        codeobj_cdfb914b415cf1ef72774c8db4c1354d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[598],
#endif
        codeobj_5f4143dc7b59fc9c50b113a344e804ba,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem,
        mod_consts[256],
#if PYTHON_VERSION >= 0x300
        mod_consts[599],
#endif
        codeobj_cdb3081bdb2c85b909f6c4371f372e59,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__76___repr__,
        mod_consts[600],
#if PYTHON_VERSION >= 0x300
        mod_consts[601],
#endif
        codeobj_b2a3f80dafa6a38c0c69d24b7fb74477,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_as_generic(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__77_as_generic,
        mod_consts[602],
#if PYTHON_VERSION >= 0x300
        mod_consts[603],
#endif
        codeobj_cbcbdb2d9e8a5fff79198c7cbe25ed04,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated,
        mod_consts[604],
#if PYTHON_VERSION >= 0x300
        mod_consts[605],
#endif
        codeobj_b50eb69544daac7f0e728d4497ab5937,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79_adapt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__79_adapt,
        mod_consts[152],
#if PYTHON_VERSION >= 0x300
        mod_consts[606],
#endif
        codeobj_b22349e9e011fdb2b0cebbc3975c6387,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[488],
#endif
        codeobj_4d6276086e7db92556476b843c7fa67e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[29],
#endif
        codeobj_312ec13661de5345d0571398b3ebdcd9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint,
        mod_consts[246],
#if PYTHON_VERSION >= 0x300
        mod_consts[607],
#endif
        codeobj_8a94126259a5bafcedf7747a5b8d5ea2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__81__set_table,
        mod_consts[142],
#if PYTHON_VERSION >= 0x300
        mod_consts[610],
#endif
        codeobj_81bdd4839efb4ca8cab2fe7d7122470a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[611],
#endif
        codeobj_71d3edc0c658b2c8714cd3518a82d2c5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[250],
#endif
        codeobj_ee71dbf6059dd4350596c729cfc0a259,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[612],
#endif
        codeobj_ab3bac6d0f6858d8ca356e1508aeb2ac,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[253],
#endif
        codeobj_bf7f434d5ab0377974a5101ca9ba0d53,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[613],
#endif
        codeobj_e330aca6bb85180dba8461a0a1940a85,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[255],
#endif
        codeobj_e0a7f1e932becaa154a831e9269c7eea,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_copy() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__85_copy,
        mod_consts[145],
#if PYTHON_VERSION >= 0x300
        mod_consts[614],
#endif
        codeobj_8cfd97f2a77ecbb2eb909335286de10f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__86_python_type,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[615],
#endif
        codeobj_7678b2e07fbc7a4f387d6c0cc758d75e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__87___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[619],
#endif
        codeobj_c42814ac89cf306358687927a567e483,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[263],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88___reduce__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__88___reduce__,
        mod_consts[620],
#if PYTHON_VERSION >= 0x300
        mod_consts[621],
#endif
        codeobj_a0596b116f73cc11f051908d5fa496da,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[622],
#endif
        codeobj_62a491413e6803ba136fa56eec053539,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[265],
#endif
        codeobj_39fef5748edb71876d93470d3a219c62,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[265],
#endif
        codeobj_19739b43823e27c5ca08a9fce0ba67b9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[489],
#endif
        codeobj_cadc8843633297c77a83550476c5c68a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[39],
#endif
        codeobj_65bb6e806379f2ff318d16ee827a2a54,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[39],
#endif
        codeobj_1576acc756b228012430cc5020f20e50,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[623],
#endif
        codeobj_9bec7a53c683d8412a7dcbbec48f400e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[268],
#endif
        codeobj_bf146a3bd02941452c10a750e761f313,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[268],
#endif
        codeobj_a9e09639978136bffb6206c45567ff7a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91_compare_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__91_compare_values,
        mod_consts[624],
#if PYTHON_VERSION >= 0x300
        mod_consts[625],
#endif
        codeobj_bd11c465c1627b66dd527f313d4aa38c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__92___init__,
        mod_consts[70],
#if PYTHON_VERSION >= 0x300
        mod_consts[629],
#endif
        codeobj_3fe76aec9f860e46bc4bad5ada88bb0e,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[269],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint,
        mod_consts[246],
#if PYTHON_VERSION >= 0x300
        mod_consts[630],
#endif
        codeobj_626f15039653823855dba21445a737d7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__94__set_table,
        mod_consts[142],
#if PYTHON_VERSION >= 0x300
        mod_consts[631],
#endif
        codeobj_02fa2f175ce00e86181c18b5a06b2be0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[257],
#if PYTHON_VERSION >= 0x300
        mod_consts[632],
#endif
        codeobj_661fb462b301535964bfb2f673f127da,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyBool_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool,
        mod_consts[281],
#if PYTHON_VERSION >= 0x300
        mod_consts[635],
#endif
        codeobj_2bd8805a9cbc7c13e67d737734aa3c69,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[636],
#endif
        codeobj_70b6465292cb8ebb4d90aed986b2aa6d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[280],
#endif
        codeobj_7c593997b229d4af744026257e566d69,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[637],
#endif
        codeobj_6b2fdf7acf092486e60e6c4b91bdaacf,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[284],
#endif
        codeobj_d2e311dba25391f084fb5587bbee1e49,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__99_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[638],
#endif
        codeobj_5c72b10f9b4b51ccf6a0f605a349415b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor,
        mod_consts[254],
#if PYTHON_VERSION >= 0x300
        mod_consts[490],
#endif
        codeobj_38c1873b26339ac722accf1443101653,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(PyThreadState *tstate, char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_sqlalchemy$sql$sqltypes[] = {
    impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant$$$function__1__we_are_the_impl,
    impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__,
    impl_sqlalchemy$sql$sqltypes$$$function__6___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__10_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode,
    impl_sqlalchemy$sql$sqltypes$$$function__13___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__14___init__,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__20___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale,
    impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__24_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__28___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__30___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal,
    impl_sqlalchemy$sql$sqltypes$$$function__33_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__36_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__38___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__40_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal,
    impl_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__43___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__44_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__45_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__46_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__47_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__48_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value,
    impl_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__51___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__52___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent,
    impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__55__set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__56_copy,
    impl_sqlalchemy$sql$sqltypes$$$function__57_adapt,
    impl_sqlalchemy$sql$sqltypes$$$function__58_bind,
    impl_sqlalchemy$sql$sqltypes$$$function__59_create,
    impl_sqlalchemy$sql$sqltypes$$$function__60_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create,
    impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create,
    impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant,
    impl_sqlalchemy$sql$sqltypes$$$function__66___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument,
    impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init,
    impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values,
    impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values,
    impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function,
    impl_sqlalchemy$sql$sqltypes$$$function__72_native,
    impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem,
    impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem,
    impl_sqlalchemy$sql$sqltypes$$$function__76___repr__,
    impl_sqlalchemy$sql$sqltypes$$$function__77_as_generic,
    impl_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated,
    impl_sqlalchemy$sql$sqltypes$$$function__79_adapt,
    impl_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint,
    impl_sqlalchemy$sql$sqltypes$$$function__81__set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__82_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__83_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__84_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__85_copy,
    impl_sqlalchemy$sql$sqltypes$$$function__86_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__87___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__88___reduce__,
    impl_sqlalchemy$sql$sqltypes$$$function__89_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__90_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__91_compare_values,
    impl_sqlalchemy$sql$sqltypes$$$function__92___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint,
    impl_sqlalchemy$sql$sqltypes$$$function__94__set_table,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool,
    impl_sqlalchemy$sql$sqltypes$$$function__97_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__98_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__99_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__101__type_affinity,
    impl_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value,
    impl_sqlalchemy$sql$sqltypes$$$function__103___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__104_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated,
    impl_sqlalchemy$sql$sqltypes$$$function__106_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__107_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__108___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__111_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__112_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__114_as_boolean,
    impl_sqlalchemy$sql$sqltypes$$$function__115_as_string,
    impl_sqlalchemy$sql$sqltypes$$$function__116_as_integer,
    impl_sqlalchemy$sql$sqltypes$$$function__117_as_float,
    impl_sqlalchemy$sql$sqltypes$$$function__118_as_numeric,
    impl_sqlalchemy$sql$sqltypes$$$function__119_as_json,
    impl_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none,
    impl_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none,
    impl_sqlalchemy$sql$sqltypes$$$function__124__str_impl,
    impl_sqlalchemy$sql$sqltypes$$$function__125_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__126_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__128_contains,
    impl_sqlalchemy$sql$sqltypes$$$function__129_any,
    impl_sqlalchemy$sql$sqltypes$$$function__130_all,
    impl_sqlalchemy$sql$sqltypes$$$function__131___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__132_hashable,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__134_compare_values,
    impl_sqlalchemy$sql$sqltypes$$$function__135__set_parent,
    impl_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch,
    impl_sqlalchemy$sql$sqltypes$$$function__137___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types,
    impl_sqlalchemy$sql$sqltypes$$$function__139_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__140___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__144___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        PyThreadState *tstate = PyThreadState_GET();

        SET_CURRENT_EXCEPTION_TYPE0_STR_STATE(tstate, PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_sqlalchemy$sql$sqltypes;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        PyThreadState *tstate = PyThreadState_GET();

        SET_CURRENT_EXCEPTION_TYPE0_STR(tstate, PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = MAKE_TUPLE_EMPTY(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = MAKE_TUPLE_EMPTY(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && HAS_ERROR_OCCURRED(tstate)) {
        return NULL;
    }

    if (offset > sizeof(functable_sqlalchemy$sql$sqltypes) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR_STATE(tstate, PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!HAS_ERROR_OCCURRED(tstate));

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!HAS_ERROR_OCCURRED(tstate));
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!HAS_ERROR_OCCURRED(tstate));

    PyCodeObject *code_object = MAKE_CODE_OBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        function_name, // TODO: function_qualname
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_sqlalchemy$sql$sqltypes[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_sqlalchemy$sql$sqltypes,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_sqlalchemy$sql$sqltypes(PyThreadState *tstate, PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("sqlalchemy.sql.sqltypes");

    // Store the module for future use.
    module_sqlalchemy$sql$sqltypes = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants(tstate);

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("sqlalchemy.sql.sqltypes: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader(tstate);

#if PYTHON_VERSION >= 0x300
        patchInspectModule(tstate);
#endif

#endif

        /* The constants only used by this module are created now. */
        NUITKA_PRINT_TRACE("sqlalchemy.sql.sqltypes: Calling createModuleConstants().\n");
        createModuleConstants(tstate);

        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initsqlalchemy$sql$sqltypes\n");

    moduledict_sqlalchemy$sql$sqltypes = MODULE_DICT(module_sqlalchemy$sql$sqltypes);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(tstate, loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_sqlalchemy$sql$sqltypes,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_sqlalchemy$sql$sqltypes,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[407]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_sqlalchemy$sql$sqltypes,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_sqlalchemy$sql$sqltypes,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_sqlalchemy$sql$sqltypes,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_sqlalchemy$sql$sqltypes);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

    UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, _spec_from_module, module_sqlalchemy$sql$sqltypes);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(tstate, spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *outline_59_var___class__ = NULL;
    PyObject *outline_60_var___class__ = NULL;
    PyObject *outline_61_var___class__ = NULL;
    PyObject *tmp_ARRAY$class_creation_1__bases = NULL;
    PyObject *tmp_ARRAY$class_creation_1__bases_orig = NULL;
    PyObject *tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_ARRAY$class_creation_1__metaclass = NULL;
    PyObject *tmp_ARRAY$class_creation_1__prepared = NULL;
    PyObject *tmp_Concatenable$class_creation_1__bases = NULL;
    PyObject *tmp_Concatenable$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Concatenable$class_creation_1__metaclass = NULL;
    PyObject *tmp_Concatenable$class_creation_1__prepared = NULL;
    PyObject *tmp_Enum$class_creation_1__bases = NULL;
    PyObject *tmp_Enum$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Enum$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Enum$class_creation_1__metaclass = NULL;
    PyObject *tmp_Enum$class_creation_1__prepared = NULL;
    PyObject *tmp_Indexable$class_creation_1__bases = NULL;
    PyObject *tmp_Indexable$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Indexable$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Indexable$class_creation_1__metaclass = NULL;
    PyObject *tmp_Indexable$class_creation_1__prepared = NULL;
    PyObject *tmp_JSON$class_creation_1__bases = NULL;
    PyObject *tmp_JSON$class_creation_1__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_1__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_1__prepared = NULL;
    PyObject *tmp_JSON$class_creation_2__bases = NULL;
    PyObject *tmp_JSON$class_creation_2__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_2__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_2__prepared = NULL;
    PyObject *tmp_JSON$class_creation_3__bases = NULL;
    PyObject *tmp_JSON$class_creation_3__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_3__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_3__prepared = NULL;
    PyObject *tmp_JSON$class_creation_4__bases = NULL;
    PyObject *tmp_JSON$class_creation_4__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_4__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_4__prepared = NULL;
    PyObject *tmp_JSON$class_creation_5__bases = NULL;
    PyObject *tmp_JSON$class_creation_5__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_5__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_5__prepared = NULL;
    PyObject *tmp_JSON$class_creation_6__bases = NULL;
    PyObject *tmp_JSON$class_creation_6__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_6__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_6__prepared = NULL;
    PyObject *tmp_NullType$class_creation_1__bases = NULL;
    PyObject *tmp_NullType$class_creation_1__bases_orig = NULL;
    PyObject *tmp_NullType$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_NullType$class_creation_1__metaclass = NULL;
    PyObject *tmp_NullType$class_creation_1__prepared = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__bases_orig = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__bases_orig = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__bases_orig = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__bases_orig = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__bases_orig = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__bases_orig = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__bases_orig = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__bases_orig = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__bases_orig = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_50__bases = NULL;
    PyObject *tmp_class_creation_50__bases_orig = NULL;
    PyObject *tmp_class_creation_50__class_decl_dict = NULL;
    PyObject *tmp_class_creation_50__metaclass = NULL;
    PyObject *tmp_class_creation_50__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    struct Nuitka_FrameObject *frame_5a65c1f3cd718045aeca683403e1dc91;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_75f2c57f48de7f65993f72e91d187b17_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
    struct Nuitka_FrameObject *frame_e762a9c8047516daa4dceddc9f2e5957_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
    struct Nuitka_FrameObject *frame_1080cb4523efb9e11c011fbeef244b79_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
    struct Nuitka_FrameObject *frame_9f1d76f2c17e00828ed93f00ad49345e_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
    struct Nuitka_FrameObject *frame_6b334b8e84140766ea2a2c48e4cc6da8_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
    struct Nuitka_FrameObject *frame_2e9b49da47d6b813f3dd71d96927e452_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
    struct Nuitka_FrameObject *frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407 = NULL;
    struct Nuitka_FrameObject *frame_7e0a7e2812bb27d237297241fe6989c6_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422 = NULL;
    struct Nuitka_FrameObject *frame_86aba5b77bc70fc0ed4ba448dadf0054_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492 = NULL;
    struct Nuitka_FrameObject *frame_d0c7b8998b645ef155c09c24d41e5bbb_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524 = NULL;
    struct Nuitka_FrameObject *frame_90429f579f65edfed5bb20042f4d56bb_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564 = NULL;
    struct Nuitka_FrameObject *frame_54943b13ceda71184ed82a93ac937d21_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576 = NULL;
    struct Nuitka_FrameObject *frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588 = NULL;
    struct Nuitka_FrameObject *frame_93ab42ae09729d32d6aad62ca2b84cc0_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757 = NULL;
    struct Nuitka_FrameObject *frame_740032a89ce339f80c267509d81f7b0c_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812 = NULL;
    struct Nuitka_FrameObject *frame_c33964dacf05de3b8e27bb7381d65481_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874 = NULL;
    struct Nuitka_FrameObject *frame_733436556b4801d5a2c36025fb0cf1c6_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912 = NULL;
    struct Nuitka_FrameObject *frame_b5e1e0d46725f66c0a5f4cafc203c477_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946 = NULL;
    struct Nuitka_FrameObject *frame_6525230dd834556a5ea96a0e502bf46d_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010 = NULL;
    struct Nuitka_FrameObject *frame_f8f3ab6c748eca6533ae055e87cb8240_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034 = NULL;
    struct Nuitka_FrameObject *frame_62856119e973c2139b9d90410c2122c0_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235 = NULL;
    struct Nuitka_FrameObject *frame_d1322356761a4f091d578e3e4d3ef86d_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636 = NULL;
    struct Nuitka_FrameObject *frame_ba366a441b50a6232c0aa6e461f23fbe_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786 = NULL;
    struct Nuitka_FrameObject *frame_39df2453d6fb60af2ea62ec656d9cbf3_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888 = NULL;
    struct Nuitka_FrameObject *frame_868a81aa74d6b5d9a95205292210ecdc_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014 = NULL;
    struct Nuitka_FrameObject *frame_1c8e3afcf516b03fba3866eb8e1f7215_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042 = NULL;
    struct Nuitka_FrameObject *frame_22d8b375575a4d8b7105af74825d9603_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138 = NULL;
    struct Nuitka_FrameObject *frame_92e0acdc6a2b51632727ea04a42f7c95_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419 = NULL;
    struct Nuitka_FrameObject *frame_617178a6477bb261ad5c1f7f5ed099af_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457 = NULL;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465 = NULL;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473 = NULL;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481 = NULL;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489 = NULL;
    struct Nuitka_FrameObject *frame_3166cd2ac67daff286dcc8c5c35c8827_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690 = NULL;
    struct Nuitka_FrameObject *frame_1aee6cd68ba24b711b0f9bedf3986f58_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817 = NULL;
    struct Nuitka_FrameObject *frame_f28e91ec0caa03e3b8b0d624a94edb1c_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032 = NULL;
    struct Nuitka_FrameObject *frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062 = NULL;
    struct Nuitka_FrameObject *frame_7e74b4770480c918562fcc5293ddb28e_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069 = NULL;
    struct Nuitka_FrameObject *frame_e52dd4ad0daaa8166caadb00c935fe40_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076 = NULL;
    struct Nuitka_FrameObject *frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083 = NULL;
    struct Nuitka_FrameObject *frame_41e824f3ef0fb094cf721c44af492978_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090 = NULL;
    struct Nuitka_FrameObject *frame_a2597828719d4625ef239a03f74439c9_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100 = NULL;
    struct Nuitka_FrameObject *frame_59cb959a308297ac8b18f492da0a1a46_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107 = NULL;
    struct Nuitka_FrameObject *frame_091b6b548a57da5064965fa8688ac505_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114 = NULL;
    struct Nuitka_FrameObject *frame_dfe327ff5836e31b39a8ce11fee836fe_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144 = NULL;
    struct Nuitka_FrameObject *frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151 = NULL;
    struct Nuitka_FrameObject *frame_5473aa3463cee3c896f5c80a7480a46b_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158 = NULL;
    struct Nuitka_FrameObject *frame_10cc212bc35c1c061cff66148cbcde29_45;
    NUITKA_MAY_BE_UNUSED char const *type_description_45 = NULL;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165 = NULL;
    struct Nuitka_FrameObject *frame_e67aba58ee7cffc472020a4e437023ab_46;
    NUITKA_MAY_BE_UNUSED char const *type_description_46 = NULL;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172 = NULL;
    struct Nuitka_FrameObject *frame_4555bb417febc5f1629be12ff210a7df_47;
    NUITKA_MAY_BE_UNUSED char const *type_description_47 = NULL;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182 = NULL;
    struct Nuitka_FrameObject *frame_97502711f14333c2557dbb4ac6c98933_48;
    NUITKA_MAY_BE_UNUSED char const *type_description_48 = NULL;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189 = NULL;
    struct Nuitka_FrameObject *frame_efb6aa783c8a63761ab6fb473645f613_49;
    NUITKA_MAY_BE_UNUSED char const *type_description_49 = NULL;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196 = NULL;
    struct Nuitka_FrameObject *frame_34d08d8a15c465efbfb1fc847c832d1c_50;
    NUITKA_MAY_BE_UNUSED char const *type_description_50 = NULL;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203 = NULL;
    struct Nuitka_FrameObject *frame_94afccca9abf825c4a97ad1a236cd068_51;
    NUITKA_MAY_BE_UNUSED char const *type_description_51 = NULL;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210 = NULL;
    struct Nuitka_FrameObject *frame_00fd667e5f00277515915ec46fe4428c_52;
    NUITKA_MAY_BE_UNUSED char const *type_description_52 = NULL;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217 = NULL;
    struct Nuitka_FrameObject *frame_ebb156a6494af1a2b90ffe41aca76ade_53;
    NUITKA_MAY_BE_UNUSED char const *type_description_53 = NULL;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224 = NULL;
    struct Nuitka_FrameObject *frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54;
    NUITKA_MAY_BE_UNUSED char const *type_description_54 = NULL;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231 = NULL;
    struct Nuitka_FrameObject *frame_939d93e6e8558ba0251076c1f17301ee_55;
    NUITKA_MAY_BE_UNUSED char const *type_description_55 = NULL;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238 = NULL;
    struct Nuitka_FrameObject *frame_9da7d3048fabb152669b327b244fe974_56;
    NUITKA_MAY_BE_UNUSED char const *type_description_56 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272 = NULL;
    struct Nuitka_FrameObject *frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57;
    NUITKA_MAY_BE_UNUSED char const *type_description_57 = NULL;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_177;
    PyObject *exception_keeper_type_178;
    PyObject *exception_keeper_value_178;
    PyTracebackObject *exception_keeper_tb_178;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_178;
    PyObject *exception_keeper_type_179;
    PyObject *exception_keeper_value_179;
    PyTracebackObject *exception_keeper_tb_179;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_179;
    PyObject *exception_keeper_type_180;
    PyObject *exception_keeper_value_180;
    PyTracebackObject *exception_keeper_tb_180;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_180;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284 = NULL;
    struct Nuitka_FrameObject *frame_d446368a098e659ab1ad32b845c5299e_58;
    NUITKA_MAY_BE_UNUSED char const *type_description_58 = NULL;
    PyObject *exception_keeper_type_181;
    PyObject *exception_keeper_value_181;
    PyTracebackObject *exception_keeper_tb_181;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_181;
    PyObject *exception_keeper_type_182;
    PyObject *exception_keeper_value_182;
    PyTracebackObject *exception_keeper_tb_182;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_182;
    PyObject *exception_keeper_type_183;
    PyObject *exception_keeper_value_183;
    PyTracebackObject *exception_keeper_tb_183;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_183;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300 = NULL;
    PyObject *exception_keeper_type_184;
    PyObject *exception_keeper_value_184;
    PyTracebackObject *exception_keeper_tb_184;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_184;
    PyObject *exception_keeper_type_185;
    PyObject *exception_keeper_value_185;
    PyTracebackObject *exception_keeper_tb_185;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_185;
    PyObject *exception_keeper_type_186;
    PyObject *exception_keeper_value_186;
    PyTracebackObject *exception_keeper_tb_186;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_186;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[400];
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[401], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[402], tmp_assign_source_2);
    }
    frame_5a65c1f3cd718045aeca683403e1dc91 = MAKE_MODULE_FRAME(codeobj_5a65c1f3cd718045aeca683403e1dc91, module_sqlalchemy$sql$sqltypes);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStackCompiledFrame(tstate, frame_5a65c1f3cd718045aeca683403e1dc91);
    assert(Py_REFCNT(frame_5a65c1f3cd718045aeca683403e1dc91) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[403]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[403]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_1, mod_consts[404], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[403]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[403]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_2, mod_consts[405], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[406], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[40];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[52];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 12;
        tmp_assign_source_4 = IMPORT_MODULE5(tstate, tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[40], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[108];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = Py_None;
        tmp_level_value_2 = mod_consts[52];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 13;
        tmp_assign_source_5 = IMPORT_MODULE5(tstate, tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[91];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = Py_None;
        tmp_level_value_3 = mod_consts[52];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 14;
        tmp_assign_source_6 = IMPORT_MODULE5(tstate, tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_assign_source_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[91], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[346];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = Py_None;
        tmp_level_value_4 = mod_consts[52];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 15;
        tmp_assign_source_7 = IMPORT_MODULE5(tstate, tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_assign_source_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[346], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_5;
        PyObject *tmp_globals_arg_value_5;
        PyObject *tmp_locals_arg_value_5;
        PyObject *tmp_fromlist_value_5;
        PyObject *tmp_level_value_5;
        tmp_name_value_5 = mod_consts[407];
        tmp_globals_arg_value_5 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_5 = Py_None;
        tmp_fromlist_value_5 = mod_consts[408];
        tmp_level_value_5 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 17;
        tmp_import_name_from_1 = IMPORT_MODULE5(tstate, tmp_name_value_5, tmp_globals_arg_value_5, tmp_locals_arg_value_5, tmp_fromlist_value_5, tmp_level_value_5);
        if (tmp_import_name_from_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_1,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[310],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_1, mod_consts[310]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[310], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_value_6;
        PyObject *tmp_globals_arg_value_6;
        PyObject *tmp_locals_arg_value_6;
        PyObject *tmp_fromlist_value_6;
        PyObject *tmp_level_value_6;
        tmp_name_value_6 = mod_consts[407];
        tmp_globals_arg_value_6 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_6 = Py_None;
        tmp_fromlist_value_6 = mod_consts[409];
        tmp_level_value_6 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 18;
        tmp_import_name_from_2 = IMPORT_MODULE5(tstate, tmp_name_value_6, tmp_globals_arg_value_6, tmp_locals_arg_value_6, tmp_fromlist_value_6, tmp_level_value_6);
        if (tmp_import_name_from_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_2,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[336],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_2, mod_consts[336]);
        }

        Py_DECREF(tmp_import_name_from_2);
        if (tmp_assign_source_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[336], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_value_7;
        PyObject *tmp_globals_arg_value_7;
        PyObject *tmp_locals_arg_value_7;
        PyObject *tmp_fromlist_value_7;
        PyObject *tmp_level_value_7;
        tmp_name_value_7 = mod_consts[407];
        tmp_globals_arg_value_7 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_7 = Py_None;
        tmp_fromlist_value_7 = mod_consts[410];
        tmp_level_value_7 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 19;
        tmp_import_name_from_3 = IMPORT_MODULE5(tstate, tmp_name_value_7, tmp_globals_arg_value_7, tmp_locals_arg_value_7, tmp_fromlist_value_7, tmp_level_value_7);
        if (tmp_import_name_from_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_3,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[6],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_3, mod_consts[6]);
        }

        Py_DECREF(tmp_import_name_from_3);
        if (tmp_assign_source_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_4;
        PyObject *tmp_name_value_8;
        PyObject *tmp_globals_arg_value_8;
        PyObject *tmp_locals_arg_value_8;
        PyObject *tmp_fromlist_value_8;
        PyObject *tmp_level_value_8;
        tmp_name_value_8 = mod_consts[407];
        tmp_globals_arg_value_8 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_8 = Py_None;
        tmp_fromlist_value_8 = mod_consts[411];
        tmp_level_value_8 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 20;
        tmp_import_name_from_4 = IMPORT_MODULE5(tstate, tmp_name_value_8, tmp_globals_arg_value_8, tmp_locals_arg_value_8, tmp_fromlist_value_8, tmp_level_value_8);
        if (tmp_import_name_from_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 20;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_4,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[312],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_4, mod_consts[312]);
        }

        Py_DECREF(tmp_import_name_from_4);
        if (tmp_assign_source_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 20;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[312], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_5;
        PyObject *tmp_name_value_9;
        PyObject *tmp_globals_arg_value_9;
        PyObject *tmp_locals_arg_value_9;
        PyObject *tmp_fromlist_value_9;
        PyObject *tmp_level_value_9;
        tmp_name_value_9 = mod_consts[407];
        tmp_globals_arg_value_9 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_9 = Py_None;
        tmp_fromlist_value_9 = mod_consts[412];
        tmp_level_value_9 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 21;
        tmp_import_name_from_5 = IMPORT_MODULE5(tstate, tmp_name_value_9, tmp_globals_arg_value_9, tmp_locals_arg_value_9, tmp_fromlist_value_9, tmp_level_value_9);
        if (tmp_import_name_from_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_5,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[413],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_5, mod_consts[413]);
        }

        Py_DECREF(tmp_import_name_from_5);
        if (tmp_assign_source_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_6;
        PyObject *tmp_name_value_10;
        PyObject *tmp_globals_arg_value_10;
        PyObject *tmp_locals_arg_value_10;
        PyObject *tmp_fromlist_value_10;
        PyObject *tmp_level_value_10;
        tmp_name_value_10 = mod_consts[414];
        tmp_globals_arg_value_10 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_10 = Py_None;
        tmp_fromlist_value_10 = mod_consts[415];
        tmp_level_value_10 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 22;
        tmp_import_name_from_6 = IMPORT_MODULE5(tstate, tmp_name_value_10, tmp_globals_arg_value_10, tmp_locals_arg_value_10, tmp_fromlist_value_10, tmp_level_value_10);
        if (tmp_import_name_from_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_6,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[157],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_6, mod_consts[157]);
        }

        Py_DECREF(tmp_import_name_from_6);
        if (tmp_assign_source_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157], tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_7;
        PyObject *tmp_name_value_11;
        PyObject *tmp_globals_arg_value_11;
        PyObject *tmp_locals_arg_value_11;
        PyObject *tmp_fromlist_value_11;
        PyObject *tmp_level_value_11;
        tmp_name_value_11 = mod_consts[414];
        tmp_globals_arg_value_11 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_11 = Py_None;
        tmp_fromlist_value_11 = mod_consts[416];
        tmp_level_value_11 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 23;
        tmp_import_name_from_7 = IMPORT_MODULE5(tstate, tmp_name_value_11, tmp_globals_arg_value_11, tmp_locals_arg_value_11, tmp_fromlist_value_11, tmp_level_value_11);
        if (tmp_import_name_from_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_7,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[182],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_7, mod_consts[182]);
        }

        Py_DECREF(tmp_import_name_from_7);
        if (tmp_assign_source_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[182], tmp_assign_source_14);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_8;
        PyObject *tmp_name_value_12;
        PyObject *tmp_globals_arg_value_12;
        PyObject *tmp_locals_arg_value_12;
        PyObject *tmp_fromlist_value_12;
        PyObject *tmp_level_value_12;
        tmp_name_value_12 = mod_consts[414];
        tmp_globals_arg_value_12 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_12 = Py_None;
        tmp_fromlist_value_12 = mod_consts[417];
        tmp_level_value_12 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 24;
        tmp_import_name_from_8 = IMPORT_MODULE5(tstate, tmp_name_value_12, tmp_globals_arg_value_12, tmp_locals_arg_value_12, tmp_fromlist_value_12, tmp_level_value_12);
        if (tmp_import_name_from_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_8,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[376],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_15 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_8, mod_consts[376]);
        }

        Py_DECREF(tmp_import_name_from_8);
        if (tmp_assign_source_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[376], tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_value_13;
        PyObject *tmp_globals_arg_value_13;
        PyObject *tmp_locals_arg_value_13;
        PyObject *tmp_fromlist_value_13;
        PyObject *tmp_level_value_13;
        tmp_name_value_13 = mod_consts[336];
        tmp_globals_arg_value_13 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_13 = Py_None;
        tmp_fromlist_value_13 = mod_consts[418];
        tmp_level_value_13 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 25;
        tmp_import_name_from_9 = IMPORT_MODULE5(tstate, tmp_name_value_13, tmp_globals_arg_value_13, tmp_locals_arg_value_13, tmp_fromlist_value_13, tmp_level_value_13);
        if (tmp_import_name_from_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_16 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_9,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[245],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_16 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_9, mod_consts[245]);
        }

        Py_DECREF(tmp_import_name_from_9);
        if (tmp_assign_source_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[245], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_value_14;
        PyObject *tmp_globals_arg_value_14;
        PyObject *tmp_locals_arg_value_14;
        PyObject *tmp_fromlist_value_14;
        PyObject *tmp_level_value_14;
        tmp_name_value_14 = mod_consts[336];
        tmp_globals_arg_value_14 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_14 = Py_None;
        tmp_fromlist_value_14 = mod_consts[419];
        tmp_level_value_14 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 26;
        tmp_import_name_from_10 = IMPORT_MODULE5(tstate, tmp_name_value_14, tmp_globals_arg_value_14, tmp_locals_arg_value_14, tmp_fromlist_value_14, tmp_level_value_14);
        if (tmp_import_name_from_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_10)) {
            tmp_assign_source_17 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_10,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[129],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_17 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_10, mod_consts[129]);
        }

        Py_DECREF(tmp_import_name_from_10);
        if (tmp_assign_source_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[129], tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_import_name_from_11;
        PyObject *tmp_name_value_15;
        PyObject *tmp_globals_arg_value_15;
        PyObject *tmp_locals_arg_value_15;
        PyObject *tmp_fromlist_value_15;
        PyObject *tmp_level_value_15;
        tmp_name_value_15 = mod_consts[336];
        tmp_globals_arg_value_15 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_15 = Py_None;
        tmp_fromlist_value_15 = mod_consts[420];
        tmp_level_value_15 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 27;
        tmp_import_name_from_11 = IMPORT_MODULE5(tstate, tmp_name_value_15, tmp_globals_arg_value_15, tmp_locals_arg_value_15, tmp_fromlist_value_15, tmp_level_value_15);
        if (tmp_import_name_from_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_11)) {
            tmp_assign_source_18 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_11,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[359],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_18 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_11, mod_consts[359]);
        }

        Py_DECREF(tmp_import_name_from_11);
        if (tmp_assign_source_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[359], tmp_assign_source_18);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_12;
        PyObject *tmp_name_value_16;
        PyObject *tmp_globals_arg_value_16;
        PyObject *tmp_locals_arg_value_16;
        PyObject *tmp_fromlist_value_16;
        PyObject *tmp_level_value_16;
        tmp_name_value_16 = mod_consts[336];
        tmp_globals_arg_value_16 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_16 = Py_None;
        tmp_fromlist_value_16 = mod_consts[421];
        tmp_level_value_16 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 28;
        tmp_import_name_from_12 = IMPORT_MODULE5(tstate, tmp_name_value_16, tmp_globals_arg_value_16, tmp_locals_arg_value_16, tmp_fromlist_value_16, tmp_level_value_16);
        if (tmp_import_name_from_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_12)) {
            tmp_assign_source_19 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_12,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[422],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_19 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_12, mod_consts[422]);
        }

        Py_DECREF(tmp_import_name_from_12);
        if (tmp_assign_source_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[243], tmp_assign_source_19);
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_import_name_from_13;
        PyObject *tmp_name_value_17;
        PyObject *tmp_globals_arg_value_17;
        PyObject *tmp_locals_arg_value_17;
        PyObject *tmp_fromlist_value_17;
        PyObject *tmp_level_value_17;
        tmp_name_value_17 = mod_consts[423];
        tmp_globals_arg_value_17 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_17 = Py_None;
        tmp_fromlist_value_17 = mod_consts[424];
        tmp_level_value_17 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 29;
        tmp_import_name_from_13 = IMPORT_MODULE5(tstate, tmp_name_value_17, tmp_globals_arg_value_17, tmp_locals_arg_value_17, tmp_fromlist_value_17, tmp_level_value_17);
        if (tmp_import_name_from_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_13)) {
            tmp_assign_source_20 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_13,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[425],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_20 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_13, mod_consts[425]);
        }

        Py_DECREF(tmp_import_name_from_13);
        if (tmp_assign_source_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[425], tmp_assign_source_20);
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_import_name_from_14;
        PyObject *tmp_name_value_18;
        PyObject *tmp_globals_arg_value_18;
        PyObject *tmp_locals_arg_value_18;
        PyObject *tmp_fromlist_value_18;
        PyObject *tmp_level_value_18;
        tmp_name_value_18 = mod_consts[423];
        tmp_globals_arg_value_18 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_18 = Py_None;
        tmp_fromlist_value_18 = mod_consts[426];
        tmp_level_value_18 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 30;
        tmp_import_name_from_14 = IMPORT_MODULE5(tstate, tmp_name_value_18, tmp_globals_arg_value_18, tmp_locals_arg_value_18, tmp_fromlist_value_18, tmp_level_value_18);
        if (tmp_import_name_from_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_14)) {
            tmp_assign_source_21 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_14,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[427],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_21 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_14, mod_consts[427]);
        }

        Py_DECREF(tmp_import_name_from_14);
        if (tmp_assign_source_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[427], tmp_assign_source_21);
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_import_name_from_15;
        PyObject *tmp_name_value_19;
        PyObject *tmp_globals_arg_value_19;
        PyObject *tmp_locals_arg_value_19;
        PyObject *tmp_fromlist_value_19;
        PyObject *tmp_level_value_19;
        tmp_name_value_19 = mod_consts[413];
        tmp_globals_arg_value_19 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_19 = Py_None;
        tmp_fromlist_value_19 = mod_consts[428];
        tmp_level_value_19 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 31;
        tmp_import_name_from_15 = IMPORT_MODULE5(tstate, tmp_name_value_19, tmp_globals_arg_value_19, tmp_locals_arg_value_19, tmp_fromlist_value_19, tmp_level_value_19);
        if (tmp_import_name_from_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_15)) {
            tmp_assign_source_22 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_15,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[429],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_22 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_15, mod_consts[429]);
        }

        Py_DECREF(tmp_import_name_from_15);
        if (tmp_assign_source_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[429], tmp_assign_source_22);
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_import_name_from_16;
        PyObject *tmp_name_value_20;
        PyObject *tmp_globals_arg_value_20;
        PyObject *tmp_locals_arg_value_20;
        PyObject *tmp_fromlist_value_20;
        PyObject *tmp_level_value_20;
        tmp_name_value_20 = mod_consts[413];
        tmp_globals_arg_value_20 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_20 = Py_None;
        tmp_fromlist_value_20 = mod_consts[430];
        tmp_level_value_20 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 32;
        tmp_import_name_from_16 = IMPORT_MODULE5(tstate, tmp_name_value_20, tmp_globals_arg_value_20, tmp_locals_arg_value_20, tmp_fromlist_value_20, tmp_level_value_20);
        if (tmp_import_name_from_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_16)) {
            tmp_assign_source_23 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_16,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[431],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_23 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_16, mod_consts[431]);
        }

        Py_DECREF(tmp_import_name_from_16);
        if (tmp_assign_source_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[431], tmp_assign_source_23);
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_import_name_from_17;
        PyObject *tmp_name_value_21;
        PyObject *tmp_globals_arg_value_21;
        PyObject *tmp_locals_arg_value_21;
        PyObject *tmp_fromlist_value_21;
        PyObject *tmp_level_value_21;
        tmp_name_value_21 = mod_consts[413];
        tmp_globals_arg_value_21 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_21 = Py_None;
        tmp_fromlist_value_21 = mod_consts[432];
        tmp_level_value_21 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 33;
        tmp_import_name_from_17 = IMPORT_MODULE5(tstate, tmp_name_value_21, tmp_globals_arg_value_21, tmp_locals_arg_value_21, tmp_fromlist_value_21, tmp_level_value_21);
        if (tmp_import_name_from_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_17)) {
            tmp_assign_source_24 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_17,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[5],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_24 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_17, mod_consts[5]);
        }

        Py_DECREF(tmp_import_name_from_17);
        if (tmp_assign_source_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[5], tmp_assign_source_24);
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_import_name_from_18;
        PyObject *tmp_name_value_22;
        PyObject *tmp_globals_arg_value_22;
        PyObject *tmp_locals_arg_value_22;
        PyObject *tmp_fromlist_value_22;
        PyObject *tmp_level_value_22;
        tmp_name_value_22 = mod_consts[413];
        tmp_globals_arg_value_22 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_22 = Py_None;
        tmp_fromlist_value_22 = mod_consts[433];
        tmp_level_value_22 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 34;
        tmp_import_name_from_18 = IMPORT_MODULE5(tstate, tmp_name_value_22, tmp_globals_arg_value_22, tmp_locals_arg_value_22, tmp_fromlist_value_22, tmp_level_value_22);
        if (tmp_import_name_from_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_18)) {
            tmp_assign_source_25 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_18,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[434],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_25 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_18, mod_consts[434]);
        }

        Py_DECREF(tmp_import_name_from_18);
        if (tmp_assign_source_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[434], tmp_assign_source_25);
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_import_name_from_19;
        PyObject *tmp_name_value_23;
        PyObject *tmp_globals_arg_value_23;
        PyObject *tmp_locals_arg_value_23;
        PyObject *tmp_fromlist_value_23;
        PyObject *tmp_level_value_23;
        tmp_name_value_23 = mod_consts[413];
        tmp_globals_arg_value_23 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_23 = Py_None;
        tmp_fromlist_value_23 = mod_consts[435];
        tmp_level_value_23 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 35;
        tmp_import_name_from_19 = IMPORT_MODULE5(tstate, tmp_name_value_23, tmp_globals_arg_value_23, tmp_locals_arg_value_23, tmp_fromlist_value_23, tmp_level_value_23);
        if (tmp_import_name_from_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_19)) {
            tmp_assign_source_26 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_19,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[436],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_26 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_19, mod_consts[436]);
        }

        Py_DECREF(tmp_import_name_from_19);
        if (tmp_assign_source_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436], tmp_assign_source_26);
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_import_name_from_20;
        PyObject *tmp_name_value_24;
        PyObject *tmp_globals_arg_value_24;
        PyObject *tmp_locals_arg_value_24;
        PyObject *tmp_fromlist_value_24;
        PyObject *tmp_level_value_24;
        tmp_name_value_24 = mod_consts[413];
        tmp_globals_arg_value_24 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_24 = Py_None;
        tmp_fromlist_value_24 = mod_consts[437];
        tmp_level_value_24 = mod_consts[272];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 36;
        tmp_import_name_from_20 = IMPORT_MODULE5(tstate, tmp_name_value_24, tmp_globals_arg_value_24, tmp_locals_arg_value_24, tmp_fromlist_value_24, tmp_level_value_24);
        if (tmp_import_name_from_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_20)) {
            tmp_assign_source_27 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_20,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[143],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_27 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_20, mod_consts[143]);
        }

        Py_DECREF(tmp_import_name_from_20);
        if (tmp_assign_source_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[143], tmp_assign_source_27);
    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_import_name_from_21;
        PyObject *tmp_name_value_25;
        PyObject *tmp_globals_arg_value_25;
        PyObject *tmp_locals_arg_value_25;
        PyObject *tmp_fromlist_value_25;
        PyObject *tmp_level_value_25;
        tmp_name_value_25 = mod_consts[407];
        tmp_globals_arg_value_25 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_25 = Py_None;
        tmp_fromlist_value_25 = mod_consts[438];
        tmp_level_value_25 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 37;
        tmp_import_name_from_21 = IMPORT_MODULE5(tstate, tmp_name_value_25, tmp_globals_arg_value_25, tmp_locals_arg_value_25, tmp_fromlist_value_25, tmp_level_value_25);
        if (tmp_import_name_from_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_21)) {
            tmp_assign_source_28 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_21,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[134],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_28 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_21, mod_consts[134]);
        }

        Py_DECREF(tmp_import_name_from_21);
        if (tmp_assign_source_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[134], tmp_assign_source_28);
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_import_name_from_22;
        PyObject *tmp_name_value_26;
        PyObject *tmp_globals_arg_value_26;
        PyObject *tmp_locals_arg_value_26;
        PyObject *tmp_fromlist_value_26;
        PyObject *tmp_level_value_26;
        tmp_name_value_26 = mod_consts[407];
        tmp_globals_arg_value_26 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_26 = Py_None;
        tmp_fromlist_value_26 = mod_consts[440];
        tmp_level_value_26 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 38;
        tmp_import_name_from_22 = IMPORT_MODULE5(tstate, tmp_name_value_26, tmp_globals_arg_value_26, tmp_locals_arg_value_26, tmp_fromlist_value_26, tmp_level_value_26);
        if (tmp_import_name_from_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_22)) {
            tmp_assign_source_29 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_22,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[19],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_29 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_22, mod_consts[19]);
        }

        Py_DECREF(tmp_import_name_from_22);
        if (tmp_assign_source_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_29);
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_import_name_from_23;
        PyObject *tmp_name_value_27;
        PyObject *tmp_globals_arg_value_27;
        PyObject *tmp_locals_arg_value_27;
        PyObject *tmp_fromlist_value_27;
        PyObject *tmp_level_value_27;
        tmp_name_value_27 = mod_consts[407];
        tmp_globals_arg_value_27 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_27 = Py_None;
        tmp_fromlist_value_27 = mod_consts[441];
        tmp_level_value_27 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 39;
        tmp_import_name_from_23 = IMPORT_MODULE5(tstate, tmp_name_value_27, tmp_globals_arg_value_27, tmp_locals_arg_value_27, tmp_fromlist_value_27, tmp_level_value_27);
        if (tmp_import_name_from_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_23)) {
            tmp_assign_source_30 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_23,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[395],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_30 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_23, mod_consts[395]);
        }

        Py_DECREF(tmp_import_name_from_23);
        if (tmp_assign_source_30 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[395], tmp_assign_source_30);
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_import_name_from_24;
        PyObject *tmp_name_value_28;
        PyObject *tmp_globals_arg_value_28;
        PyObject *tmp_locals_arg_value_28;
        PyObject *tmp_fromlist_value_28;
        PyObject *tmp_level_value_28;
        tmp_name_value_28 = mod_consts[407];
        tmp_globals_arg_value_28 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_28 = Py_None;
        tmp_fromlist_value_28 = mod_consts[442];
        tmp_level_value_28 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 40;
        tmp_import_name_from_24 = IMPORT_MODULE5(tstate, tmp_name_value_28, tmp_globals_arg_value_28, tmp_locals_arg_value_28, tmp_fromlist_value_28, tmp_level_value_28);
        if (tmp_import_name_from_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_24)) {
            tmp_assign_source_31 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_24,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[60],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_31 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_24, mod_consts[60]);
        }

        Py_DECREF(tmp_import_name_from_24);
        if (tmp_assign_source_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[60], tmp_assign_source_31);
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_import_name_from_25;
        PyObject *tmp_name_value_29;
        PyObject *tmp_globals_arg_value_29;
        PyObject *tmp_locals_arg_value_29;
        PyObject *tmp_fromlist_value_29;
        PyObject *tmp_level_value_29;
        tmp_name_value_29 = mod_consts[407];
        tmp_globals_arg_value_29 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_29 = Py_None;
        tmp_fromlist_value_29 = mod_consts[443];
        tmp_level_value_29 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 41;
        tmp_import_name_from_25 = IMPORT_MODULE5(tstate, tmp_name_value_29, tmp_globals_arg_value_29, tmp_locals_arg_value_29, tmp_fromlist_value_29, tmp_level_value_29);
        if (tmp_import_name_from_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_25)) {
            tmp_assign_source_32 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_25,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[43],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_32 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_25, mod_consts[43]);
        }

        Py_DECREF(tmp_import_name_from_25);
        if (tmp_assign_source_32 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43], tmp_assign_source_32);
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_import_name_from_26;
        PyObject *tmp_name_value_30;
        PyObject *tmp_globals_arg_value_30;
        PyObject *tmp_locals_arg_value_30;
        PyObject *tmp_fromlist_value_30;
        PyObject *tmp_level_value_30;
        tmp_name_value_30 = mod_consts[43];
        tmp_globals_arg_value_30 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_30 = Py_None;
        tmp_fromlist_value_30 = mod_consts[444];
        tmp_level_value_30 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 42;
        tmp_import_name_from_26 = IMPORT_MODULE5(tstate, tmp_name_value_30, tmp_globals_arg_value_30, tmp_locals_arg_value_30, tmp_fromlist_value_30, tmp_level_value_30);
        if (tmp_import_name_from_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_26)) {
            tmp_assign_source_33 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_26,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[224],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_33 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_26, mod_consts[224]);
        }

        Py_DECREF(tmp_import_name_from_26);
        if (tmp_assign_source_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[224], tmp_assign_source_33);
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_import_name_from_27;
        PyObject *tmp_name_value_31;
        PyObject *tmp_globals_arg_value_31;
        PyObject *tmp_locals_arg_value_31;
        PyObject *tmp_fromlist_value_31;
        PyObject *tmp_level_value_31;
        tmp_name_value_31 = mod_consts[43];
        tmp_globals_arg_value_31 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_31 = Py_None;
        tmp_fromlist_value_31 = mod_consts[445];
        tmp_level_value_31 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 43;
        tmp_import_name_from_27 = IMPORT_MODULE5(tstate, tmp_name_value_31, tmp_globals_arg_value_31, tmp_locals_arg_value_31, tmp_fromlist_value_31, tmp_level_value_31);
        if (tmp_import_name_from_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_27)) {
            tmp_assign_source_34 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_27,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[227],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_34 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_27, mod_consts[227]);
        }

        Py_DECREF(tmp_import_name_from_27);
        if (tmp_assign_source_34 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[227], tmp_assign_source_34);
    }
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_import_name_from_28;
        PyObject *tmp_name_value_32;
        PyObject *tmp_globals_arg_value_32;
        PyObject *tmp_locals_arg_value_32;
        PyObject *tmp_fromlist_value_32;
        PyObject *tmp_level_value_32;
        tmp_name_value_32 = mod_consts[43];
        tmp_globals_arg_value_32 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_32 = Py_None;
        tmp_fromlist_value_32 = mod_consts[446];
        tmp_level_value_32 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 44;
        tmp_import_name_from_28 = IMPORT_MODULE5(tstate, tmp_name_value_32, tmp_globals_arg_value_32, tmp_locals_arg_value_32, tmp_fromlist_value_32, tmp_level_value_32);
        if (tmp_import_name_from_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_28)) {
            tmp_assign_source_35 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_28,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[219],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_35 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_28, mod_consts[219]);
        }

        Py_DECREF(tmp_import_name_from_28);
        if (tmp_assign_source_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[219], tmp_assign_source_35);
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_import_name_from_29;
        PyObject *tmp_name_value_33;
        PyObject *tmp_globals_arg_value_33;
        PyObject *tmp_locals_arg_value_33;
        PyObject *tmp_fromlist_value_33;
        PyObject *tmp_level_value_33;
        tmp_name_value_33 = mod_consts[43];
        tmp_globals_arg_value_33 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_33 = Py_None;
        tmp_fromlist_value_33 = mod_consts[447];
        tmp_level_value_33 = mod_consts[439];
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 45;
        tmp_import_name_from_29 = IMPORT_MODULE5(tstate, tmp_name_value_33, tmp_globals_arg_value_33, tmp_locals_arg_value_33, tmp_fromlist_value_33, tmp_level_value_33);
        if (tmp_import_name_from_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_29)) {
            tmp_assign_source_36 = IMPORT_NAME_OR_MODULE(
                tstate,
                tmp_import_name_from_29,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[259],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_36 = IMPORT_NAME_FROM_MODULE(tstate, tmp_import_name_from_29, mod_consts[259]);
        }

        Py_DECREF(tmp_import_name_from_29);
        if (tmp_assign_source_36 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[259], tmp_assign_source_36);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = mod_consts[448];
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_37 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_37;
    }
    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_metaclass_value_1;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_1 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[52];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_1, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_39 = SELECT_METACLASS(tstate, tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_39;
    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_2 = tmp_class_creation_1__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_2, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_3, mod_consts[449]);
        if (tmp_called_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_tuple_element_1 = mod_consts[450];
        tmp_args_value_1 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 48;
        tmp_assign_source_40 = CALL_FUNCTION(tstate, tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_40;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_4 = tmp_class_creation_1__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_4, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_mod_expr_left_1;
        PyObject *tmp_mod_expr_right_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_name_value_34;
        PyObject *tmp_default_value_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_mod_expr_left_1 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_5 = tmp_class_creation_1__metaclass;
        tmp_name_value_34 = mod_consts[201];
        tmp_default_value_1 = mod_consts[453];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tstate, tmp_expression_value_5, tmp_name_value_34, tmp_default_value_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_mod_expr_right_1 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_6 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_6 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_6, mod_consts[201]);
            Py_DECREF(tmp_expression_value_6);
            if (tmp_tuple_element_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_mod_expr_right_1);
        goto try_except_handler_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_1, tmp_mod_expr_right_1);
        Py_DECREF(tmp_mod_expr_right_1);
        if (tmp_raise_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 48;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_1;
    }
    branch_no_2:;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_41;
    }
    branch_end_1:;
    {
        PyObject *tmp_assign_source_42;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[456];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[450];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        frame_75f2c57f48de7f65993f72e91d187b17_2 = MAKE_CLASS_FRAME(tstate, codeobj_75f2c57f48de7f65993f72e91d187b17, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_75f2c57f48de7f65993f72e91d187b17_2);
        assert(Py_REFCNT(frame_75f2c57f48de7f65993f72e91d187b17_2) == 2);

        // Framed code:
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_2;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_4 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_2;
            } else {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            tmp_called_value_2 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[458]);

            if (unlikely(tmp_called_value_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_called_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }


            tmp_args_element_value_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();

            frame_75f2c57f48de7f65993f72e91d187b17_2->m_frame.f_lineno = 57;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            tmp_called_value_3 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();

            frame_75f2c57f48de7f65993f72e91d187b17_2->m_frame.f_lineno = 57;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_3, tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_2);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_2:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_expression_value_7;
            tmp_expression_value_7 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[436]);

            if (tmp_expression_value_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

                    if (unlikely(tmp_expression_value_7 == NULL)) {
                        tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
                    }

                    if (tmp_expression_value_7 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 61;
                        type_description_2 = "o";
                        goto try_except_handler_4;
                    }
                    Py_INCREF(tmp_expression_value_7);
                } else {
                    goto try_except_handler_4;
                }
            }

            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_7, mod_consts[9]);
            Py_DECREF(tmp_expression_value_7);
            if (tmp_tuple_element_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_assign_source_43 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_43, 0, tmp_tuple_element_3);
            assert(tmp__LookupExpressionAdapter$class_creation_1__bases_orig == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__bases_orig = tmp_assign_source_43;
        }
        {
            PyObject *tmp_assign_source_44;
            PyObject *tmp_dircall_arg1_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
            tmp_dircall_arg1_2 = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_2);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
                tmp_assign_source_44 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_44 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__bases == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__bases = tmp_assign_source_44;
        }
        {
            PyObject *tmp_assign_source_45;
            tmp_assign_source_45 = MAKE_DICT_EMPTY();
            assert(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = tmp_assign_source_45;
        }
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_metaclass_value_2;
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_2;
            PyObject *tmp_type_arg_3;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_subscript_value_2;
            PyObject *tmp_bases_value_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_truth_name_2 = CHECK_IF_TRUE(tmp__LookupExpressionAdapter$class_creation_1__bases);
            if (tmp_truth_name_2 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_condition_result_5 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_3;
            } else {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_expression_value_8 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            tmp_subscript_value_2 = mod_consts[52];
            tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_8, tmp_subscript_value_2, 0);
            if (tmp_type_arg_3 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
            Py_DECREF(tmp_type_arg_3);
            if (tmp_metaclass_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_2);
            condexpr_end_3:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_bases_value_2 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            tmp_assign_source_46 = SELECT_METACLASS(tstate, tmp_metaclass_value_2, tmp_bases_value_2);
            Py_DECREF(tmp_metaclass_value_2);
            if (tmp_assign_source_46 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__metaclass == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__metaclass = tmp_assign_source_46;
        }
        {
            bool tmp_condition_result_6;
            PyObject *tmp_expression_value_9;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_expression_value_9 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_9, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_6 != false) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_47;
            PyObject *tmp_called_value_4;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_expression_value_10 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_called_value_4 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_10, mod_consts[449]);
            if (tmp_called_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_tuple_element_4 = mod_consts[9];
            tmp_args_value_2 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_tuple_element_4 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_4);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            frame_75f2c57f48de7f65993f72e91d187b17_2->m_frame.f_lineno = 61;
            tmp_assign_source_47 = CALL_FUNCTION(tstate, tmp_called_value_4, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_47 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__prepared == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__prepared = tmp_assign_source_47;
        }
        {
            bool tmp_condition_result_7;
            PyObject *tmp_operand_value_2;
            PyObject *tmp_expression_value_11;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
            tmp_expression_value_11 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_11, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_operand_value_2 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
            assert(!(tmp_res == -1));
            tmp_condition_result_7 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_7 != false) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
        }
        branch_yes_4:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_raise_value_2;
            PyObject *tmp_mod_expr_left_2;
            PyObject *tmp_mod_expr_right_2;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_expression_value_12;
            PyObject *tmp_name_value_35;
            PyObject *tmp_default_value_2;
            tmp_raise_type_2 = PyExc_TypeError;
            tmp_mod_expr_left_2 = mod_consts[452];
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_expression_value_12 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_name_value_35 = mod_consts[201];
            tmp_default_value_2 = mod_consts[453];
            tmp_tuple_element_5 = BUILTIN_GETATTR(tstate, tmp_expression_value_12, tmp_name_value_35, tmp_default_value_2);
            if (tmp_tuple_element_5 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_mod_expr_right_2 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_13;
                PyObject *tmp_type_arg_4;
                PyTuple_SET_ITEM(tmp_mod_expr_right_2, 0, tmp_tuple_element_5);
                CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
                tmp_type_arg_4 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
                tmp_expression_value_13 = BUILTIN_TYPE1(tmp_type_arg_4);
                assert(!(tmp_expression_value_13 == NULL));
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_13, mod_consts[201]);
                Py_DECREF(tmp_expression_value_13);
                if (tmp_tuple_element_5 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 61;
                    type_description_2 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_2, 1, tmp_tuple_element_5);
            }
            goto tuple_build_noexception_2;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_mod_expr_right_2);
            goto try_except_handler_4;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_2:;
            tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_2, tmp_mod_expr_right_2);
            Py_DECREF(tmp_mod_expr_right_2);
            if (tmp_raise_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            exception_type = tmp_raise_type_2;
            Py_INCREF(tmp_raise_type_2);
            exception_value = tmp_raise_value_2;
            exception_lineno = 61;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_4;
        }
        branch_no_4:;
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_48;
            tmp_assign_source_48 = MAKE_DICT_EMPTY();
            assert(tmp__LookupExpressionAdapter$class_creation_1__prepared == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__prepared = tmp_assign_source_48;
        }
        branch_end_3:;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
            tmp_set_locals_2 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[460];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        frame_e762a9c8047516daa4dceddc9f2e5957_3 = MAKE_CLASS_FRAME(tstate, codeobj_e762a9c8047516daa4dceddc9f2e5957, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e762a9c8047516daa4dceddc9f2e5957_3);
        assert(Py_REFCNT(frame_e762a9c8047516daa4dceddc9f2e5957_3) == 2);

        // Framed code:
        {
            PyObject *tmp_called_instance_1;
            tmp_called_instance_1 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[43]);

            if (tmp_called_instance_1 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_1 == NULL)) {
                        tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_1 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 62;
                        type_description_3 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_1);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            frame_e762a9c8047516daa4dceddc9f2e5957_3->m_frame.f_lineno = 62;
            tmp_dictset_value = CALL_METHOD_NO_ARGS(tstate, tmp_called_instance_1, mod_consts[461]);
            Py_DECREF(tmp_called_instance_1);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;
                type_description_3 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[4], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;
                type_description_3 = "o";
                goto frame_exception_exit_3;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_3 = "o";
            goto frame_exception_exit_3;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_1;
        frame_exception_exit_3:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e762a9c8047516daa4dceddc9f2e5957_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e762a9c8047516daa4dceddc9f2e5957_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e762a9c8047516daa4dceddc9f2e5957_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e762a9c8047516daa4dceddc9f2e5957_3,
            type_description_3,
            outline_1_var___class__
        );



        assertFrameObject(frame_e762a9c8047516daa4dceddc9f2e5957_3);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_2;
        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_2:;
        type_description_2 = "o";
        goto try_except_handler_6;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
            tmp_condition_result_8 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_8 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_6;
            }
            if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
        }
        branch_yes_5:;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp_dictset_value = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        branch_no_5:;
        {
            PyObject *tmp_assign_source_49;
            PyObject *tmp_called_value_5;
            PyObject *tmp_args_value_3;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kwargs_value_3;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_called_value_5 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_tuple_element_6 = mod_consts[9];
            tmp_args_value_3 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_tuple_element_6 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_6);
            tmp_tuple_element_6 = locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61;
            PyTuple_SET_ITEM0(tmp_args_value_3, 2, tmp_tuple_element_6);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_kwargs_value_3 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            frame_75f2c57f48de7f65993f72e91d187b17_2->m_frame.f_lineno = 61;
            tmp_assign_source_49 = CALL_FUNCTION(tstate, tmp_called_value_5, tmp_args_value_3, tmp_kwargs_value_3);
            Py_DECREF(tmp_args_value_3);
            if (tmp_assign_source_49 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_6;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_49;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_dictset_value = outline_1_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_6;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61);
        locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61);
        locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 61;
        goto try_except_handler_4;
        outline_result_2:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_4;
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__bases);
        tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_2;
        // End of try:
        try_end_1:;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__bases);
        tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_2;
        frame_exception_exit_2:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_75f2c57f48de7f65993f72e91d187b17_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_75f2c57f48de7f65993f72e91d187b17_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_75f2c57f48de7f65993f72e91d187b17_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_75f2c57f48de7f65993f72e91d187b17_2,
            type_description_2,
            outline_0_var___class__
        );



        assertFrameObject(frame_75f2c57f48de7f65993f72e91d187b17_2);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_1;
        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_1:;

        goto try_except_handler_3;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_1__bases;
            tmp_cmp_expr_right_2 = mod_consts[448];
            tmp_condition_result_9 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_9 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_3;
            }
            if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
        }
        branch_yes_6:;
        tmp_dictset_value = mod_consts[448];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        branch_no_6:;
        {
            PyObject *tmp_assign_source_50;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_6 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_7 = mod_consts[450];
            tmp_args_value_4 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_7 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_7);
            tmp_tuple_element_7 = locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_1__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 48;
            tmp_assign_source_50 = CALL_FUNCTION(tstate, tmp_called_value_6, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_50 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_3;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_50;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_42 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_42);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48);
        locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48);
        locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 48;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450], tmp_assign_source_42);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_dircall_arg1_3;
        tmp_dircall_arg1_3 = mod_consts[448];
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_51 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_51 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_51;
    }
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_52;
    }
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_metaclass_value_3;
        nuitka_bool tmp_condition_result_10;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_3 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_condition_result_10 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_14 = tmp_class_creation_2__bases;
        tmp_subscript_value_3 = mod_consts[52];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_14, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_3 = tmp_class_creation_2__bases;
        tmp_assign_source_53 = SELECT_METACLASS(tstate, tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_53;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_expression_value_15;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_15 = tmp_class_creation_2__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_15, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_condition_result_11 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_16 = tmp_class_creation_2__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_16, mod_consts[449]);
        if (tmp_called_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_tuple_element_8 = mod_consts[8];
        tmp_args_value_5 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_8 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_2__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 79;
        tmp_assign_source_54 = CALL_FUNCTION(tstate, tmp_called_value_7, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_54;
    }
    {
        bool tmp_condition_result_12;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_17;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_17 = tmp_class_creation_2__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_17, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_operand_value_3 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_12 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_mod_expr_left_3;
        PyObject *tmp_mod_expr_right_3;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_name_value_36;
        PyObject *tmp_default_value_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_mod_expr_left_3 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_18 = tmp_class_creation_2__metaclass;
        tmp_name_value_36 = mod_consts[201];
        tmp_default_value_3 = mod_consts[453];
        tmp_tuple_element_9 = BUILTIN_GETATTR(tstate, tmp_expression_value_18, tmp_name_value_36, tmp_default_value_3);
        if (tmp_tuple_element_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_mod_expr_right_3 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_19;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_mod_expr_right_3, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_6 = tmp_class_creation_2__prepared;
            tmp_expression_value_19 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_19 == NULL));
            tmp_tuple_element_9 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_19, mod_consts[201]);
            Py_DECREF(tmp_expression_value_19);
            if (tmp_tuple_element_9 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_3, 1, tmp_tuple_element_9);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_mod_expr_right_3);
        goto try_except_handler_7;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_3, tmp_mod_expr_right_3);
        Py_DECREF(tmp_mod_expr_right_3);
        if (tmp_raise_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 79;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_7;
    }
    branch_no_8:;
    goto branch_end_7;
    branch_no_7:;
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_55;
    }
    branch_end_7:;
    {
        PyObject *tmp_assign_source_56;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_3 = tmp_class_creation_2__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[465];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[8];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        frame_1080cb4523efb9e11c011fbeef244b79_4 = MAKE_CLASS_FRAME(tstate, codeobj_1080cb4523efb9e11c011fbeef244b79, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_1080cb4523efb9e11c011fbeef244b79_4);
        assert(Py_REFCNT(frame_1080cb4523efb9e11c011fbeef244b79_4) == 2);

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_57;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_expression_value_20;
            tmp_expression_value_20 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[436]);

            if (tmp_expression_value_20 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_20 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

                    if (unlikely(tmp_expression_value_20 == NULL)) {
                        tmp_expression_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
                    }

                    if (tmp_expression_value_20 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 84;
                        type_description_2 = "o";
                        goto try_except_handler_10;
                    }
                    Py_INCREF(tmp_expression_value_20);
                } else {
                    goto try_except_handler_10;
                }
            }

            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_20, mod_consts[9]);
            Py_DECREF(tmp_expression_value_20);
            if (tmp_tuple_element_10 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_assign_source_57 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_57, 0, tmp_tuple_element_10);
            assert(tmp_Concatenable$class_creation_1__bases_orig == NULL);
            tmp_Concatenable$class_creation_1__bases_orig = tmp_assign_source_57;
        }
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_dircall_arg1_4;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
            tmp_dircall_arg1_4 = tmp_Concatenable$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_4);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
                tmp_assign_source_58 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_58 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__bases == NULL);
            tmp_Concatenable$class_creation_1__bases = tmp_assign_source_58;
        }
        {
            PyObject *tmp_assign_source_59;
            tmp_assign_source_59 = MAKE_DICT_EMPTY();
            assert(tmp_Concatenable$class_creation_1__class_decl_dict == NULL);
            tmp_Concatenable$class_creation_1__class_decl_dict = tmp_assign_source_59;
        }
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_metaclass_value_4;
            nuitka_bool tmp_condition_result_13;
            int tmp_truth_name_4;
            PyObject *tmp_type_arg_7;
            PyObject *tmp_expression_value_21;
            PyObject *tmp_subscript_value_4;
            PyObject *tmp_bases_value_4;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_truth_name_4 = CHECK_IF_TRUE(tmp_Concatenable$class_creation_1__bases);
            if (tmp_truth_name_4 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_condition_result_13 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_5;
            } else {
                goto condexpr_false_5;
            }
            condexpr_true_5:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_expression_value_21 = tmp_Concatenable$class_creation_1__bases;
            tmp_subscript_value_4 = mod_consts[52];
            tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_21, tmp_subscript_value_4, 0);
            if (tmp_type_arg_7 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
            Py_DECREF(tmp_type_arg_7);
            if (tmp_metaclass_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            goto condexpr_end_5;
            condexpr_false_5:;
            tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_4);
            condexpr_end_5:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_bases_value_4 = tmp_Concatenable$class_creation_1__bases;
            tmp_assign_source_60 = SELECT_METACLASS(tstate, tmp_metaclass_value_4, tmp_bases_value_4);
            Py_DECREF(tmp_metaclass_value_4);
            if (tmp_assign_source_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__metaclass == NULL);
            tmp_Concatenable$class_creation_1__metaclass = tmp_assign_source_60;
        }
        {
            bool tmp_condition_result_14;
            PyObject *tmp_expression_value_22;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_expression_value_22 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_22, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_condition_result_14 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_14 != false) {
                goto branch_yes_9;
            } else {
                goto branch_no_9;
            }
        }
        branch_yes_9:;
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_called_value_8;
            PyObject *tmp_expression_value_23;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_expression_value_23 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_called_value_8 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_23, mod_consts[449]);
            if (tmp_called_value_8 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_tuple_element_11 = mod_consts[9];
            tmp_args_value_6 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_tuple_element_11 = tmp_Concatenable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_6 = tmp_Concatenable$class_creation_1__class_decl_dict;
            frame_1080cb4523efb9e11c011fbeef244b79_4->m_frame.f_lineno = 84;
            tmp_assign_source_61 = CALL_FUNCTION(tstate, tmp_called_value_8, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_called_value_8);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_61 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__prepared == NULL);
            tmp_Concatenable$class_creation_1__prepared = tmp_assign_source_61;
        }
        {
            bool tmp_condition_result_15;
            PyObject *tmp_operand_value_4;
            PyObject *tmp_expression_value_24;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
            tmp_expression_value_24 = tmp_Concatenable$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_24, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_operand_value_4 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
            assert(!(tmp_res == -1));
            tmp_condition_result_15 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_15 != false) {
                goto branch_yes_10;
            } else {
                goto branch_no_10;
            }
        }
        branch_yes_10:;
        {
            PyObject *tmp_raise_type_4;
            PyObject *tmp_raise_value_4;
            PyObject *tmp_mod_expr_left_4;
            PyObject *tmp_mod_expr_right_4;
            PyObject *tmp_tuple_element_12;
            PyObject *tmp_expression_value_25;
            PyObject *tmp_name_value_37;
            PyObject *tmp_default_value_4;
            tmp_raise_type_4 = PyExc_TypeError;
            tmp_mod_expr_left_4 = mod_consts[452];
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_expression_value_25 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_name_value_37 = mod_consts[201];
            tmp_default_value_4 = mod_consts[453];
            tmp_tuple_element_12 = BUILTIN_GETATTR(tstate, tmp_expression_value_25, tmp_name_value_37, tmp_default_value_4);
            if (tmp_tuple_element_12 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_mod_expr_right_4 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_26;
                PyObject *tmp_type_arg_8;
                PyTuple_SET_ITEM(tmp_mod_expr_right_4, 0, tmp_tuple_element_12);
                CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
                tmp_type_arg_8 = tmp_Concatenable$class_creation_1__prepared;
                tmp_expression_value_26 = BUILTIN_TYPE1(tmp_type_arg_8);
                assert(!(tmp_expression_value_26 == NULL));
                tmp_tuple_element_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_26, mod_consts[201]);
                Py_DECREF(tmp_expression_value_26);
                if (tmp_tuple_element_12 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 84;
                    type_description_2 = "o";
                    goto tuple_build_exception_4;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_4, 1, tmp_tuple_element_12);
            }
            goto tuple_build_noexception_4;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_4:;
            Py_DECREF(tmp_mod_expr_right_4);
            goto try_except_handler_10;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_4:;
            tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_4, tmp_mod_expr_right_4);
            Py_DECREF(tmp_mod_expr_right_4);
            if (tmp_raise_value_4 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            exception_type = tmp_raise_type_4;
            Py_INCREF(tmp_raise_type_4);
            exception_value = tmp_raise_value_4;
            exception_lineno = 84;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_10;
        }
        branch_no_10:;
        goto branch_end_9;
        branch_no_9:;
        {
            PyObject *tmp_assign_source_62;
            tmp_assign_source_62 = MAKE_DICT_EMPTY();
            assert(tmp_Concatenable$class_creation_1__prepared == NULL);
            tmp_Concatenable$class_creation_1__prepared = tmp_assign_source_62;
        }
        branch_end_9:;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
            tmp_set_locals_4 = tmp_Concatenable$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        tmp_dictset_value = mod_consts[466];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        frame_9f1d76f2c17e00828ed93f00ad49345e_5 = MAKE_CLASS_FRAME(tstate, codeobj_9f1d76f2c17e00828ed93f00ad49345e, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_9f1d76f2c17e00828ed93f00ad49345e_5);
        assert(Py_REFCNT(frame_9f1d76f2c17e00828ed93f00ad49345e_5) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_3 = "o";
            goto frame_exception_exit_5;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_3;
        frame_exception_exit_5:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9f1d76f2c17e00828ed93f00ad49345e_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9f1d76f2c17e00828ed93f00ad49345e_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9f1d76f2c17e00828ed93f00ad49345e_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9f1d76f2c17e00828ed93f00ad49345e_5,
            type_description_3,
            outline_3_var___class__
        );



        assertFrameObject(frame_9f1d76f2c17e00828ed93f00ad49345e_5);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_4;
        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_4:;
        type_description_2 = "o";
        goto try_except_handler_12;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_cmp_expr_left_3 = tmp_Concatenable$class_creation_1__bases;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
            tmp_cmp_expr_right_3 = tmp_Concatenable$class_creation_1__bases_orig;
            tmp_condition_result_16 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_16 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_12;
            }
            if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
                goto branch_yes_11;
            } else {
                goto branch_no_11;
            }
        }
        branch_yes_11:;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Concatenable$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        branch_no_11:;
        {
            PyObject *tmp_assign_source_63;
            PyObject *tmp_called_value_9;
            PyObject *tmp_args_value_7;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_kwargs_value_7;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_called_value_9 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_tuple_element_13 = mod_consts[9];
            tmp_args_value_7 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_tuple_element_13 = tmp_Concatenable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_13);
            tmp_tuple_element_13 = locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84;
            PyTuple_SET_ITEM0(tmp_args_value_7, 2, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_7 = tmp_Concatenable$class_creation_1__class_decl_dict;
            frame_1080cb4523efb9e11c011fbeef244b79_4->m_frame.f_lineno = 84;
            tmp_assign_source_63 = CALL_FUNCTION(tstate, tmp_called_value_9, tmp_args_value_7, tmp_kwargs_value_7);
            Py_DECREF(tmp_args_value_7);
            if (tmp_assign_source_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_12;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_63;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_dictset_value = outline_3_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_12;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84);
        locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
        goto try_return_handler_11;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84);
        locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 84;
        goto try_except_handler_10;
        outline_result_4:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_10;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_Concatenable$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__bases);
        tmp_Concatenable$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__class_decl_dict);
        tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__metaclass);
        tmp_Concatenable$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__prepared);
        tmp_Concatenable$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto frame_exception_exit_4;
        // End of try:
        try_end_3:;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
        Py_DECREF(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_Concatenable$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
        Py_DECREF(tmp_Concatenable$class_creation_1__bases);
        tmp_Concatenable$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Concatenable$class_creation_1__class_decl_dict);
        tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
        Py_DECREF(tmp_Concatenable$class_creation_1__metaclass);
        tmp_Concatenable$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
        Py_DECREF(tmp_Concatenable$class_creation_1__prepared);
        tmp_Concatenable$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_4;
        frame_exception_exit_4:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1080cb4523efb9e11c011fbeef244b79_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1080cb4523efb9e11c011fbeef244b79_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1080cb4523efb9e11c011fbeef244b79_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1080cb4523efb9e11c011fbeef244b79_4,
            type_description_2,
            outline_2_var___class__
        );



        assertFrameObject(frame_1080cb4523efb9e11c011fbeef244b79_4);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_3;
        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_3:;

        goto try_except_handler_9;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_2__bases;
            tmp_cmp_expr_right_4 = mod_consts[448];
            tmp_condition_result_17 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_17 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_9;
            }
            if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
        }
        branch_yes_12:;
        tmp_dictset_value = mod_consts[448];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_64;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_10 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_14 = mod_consts[8];
            tmp_args_value_8 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_14 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_14);
            tmp_tuple_element_14 = locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_2__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 79;
            tmp_assign_source_64 = CALL_FUNCTION(tstate, tmp_called_value_10, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_64 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_9;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_64;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_56 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_56);
        goto try_return_handler_9;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79);
        locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
        goto try_return_handler_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79);
        locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 79;
        goto try_except_handler_7;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8], tmp_assign_source_56);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_dircall_arg1_5;
        tmp_dircall_arg1_5 = mod_consts[448];
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_65 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_65 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_65;
    }
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_66;
    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_metaclass_value_5;
        nuitka_bool tmp_condition_result_18;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_5 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_condition_result_18 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_27 = tmp_class_creation_3__bases;
        tmp_subscript_value_5 = mod_consts[52];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_27, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_5 = tmp_class_creation_3__bases;
        tmp_assign_source_67 = SELECT_METACLASS(tstate, tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_67 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_67;
    }
    {
        bool tmp_condition_result_19;
        PyObject *tmp_expression_value_28;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_28 = tmp_class_creation_3__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_28, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    {
        PyObject *tmp_assign_source_68;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_29;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_15;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_29 = tmp_class_creation_3__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_29, mod_consts[449]);
        if (tmp_called_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_tuple_element_15 = mod_consts[468];
        tmp_args_value_9 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_15);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_15 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_15);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_3__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 99;
        tmp_assign_source_68 = CALL_FUNCTION(tstate, tmp_called_value_11, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_68 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_68;
    }
    {
        bool tmp_condition_result_20;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_30;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_30 = tmp_class_creation_3__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_30, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_operand_value_5 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        assert(!(tmp_res == -1));
        tmp_condition_result_20 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_20 != false) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_mod_expr_left_5;
        PyObject *tmp_mod_expr_right_5;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_name_value_38;
        PyObject *tmp_default_value_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_mod_expr_left_5 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_31 = tmp_class_creation_3__metaclass;
        tmp_name_value_38 = mod_consts[201];
        tmp_default_value_5 = mod_consts[453];
        tmp_tuple_element_16 = BUILTIN_GETATTR(tstate, tmp_expression_value_31, tmp_name_value_38, tmp_default_value_5);
        if (tmp_tuple_element_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_mod_expr_right_5 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_32;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_mod_expr_right_5, 0, tmp_tuple_element_16);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_10 = tmp_class_creation_3__prepared;
            tmp_expression_value_32 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_32 == NULL));
            tmp_tuple_element_16 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_32, mod_consts[201]);
            Py_DECREF(tmp_expression_value_32);
            if (tmp_tuple_element_16 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_5, 1, tmp_tuple_element_16);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_mod_expr_right_5);
        goto try_except_handler_13;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_5, tmp_mod_expr_right_5);
        Py_DECREF(tmp_mod_expr_right_5);
        if (tmp_raise_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 99;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_13;
    }
    branch_no_14:;
    goto branch_end_13;
    branch_no_13:;
    {
        PyObject *tmp_assign_source_69;
        tmp_assign_source_69 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_69;
    }
    branch_end_13:;
    {
        PyObject *tmp_assign_source_70;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_5 = tmp_class_creation_3__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        tmp_dictset_value = mod_consts[469];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        tmp_dictset_value = mod_consts[468];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        frame_6b334b8e84140766ea2a2c48e4cc6da8_6 = MAKE_CLASS_FRAME(tstate, codeobj_6b334b8e84140766ea2a2c48e4cc6da8, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_6b334b8e84140766ea2a2c48e4cc6da8_6);
        assert(Py_REFCNT(frame_6b334b8e84140766ea2a2c48e4cc6da8_6) == 2);

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_71;
            PyObject *tmp_tuple_element_17;
            PyObject *tmp_expression_value_33;
            tmp_expression_value_33 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[436]);

            if (tmp_expression_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_33 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

                    if (unlikely(tmp_expression_value_33 == NULL)) {
                        tmp_expression_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
                    }

                    if (tmp_expression_value_33 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 109;
                        type_description_2 = "o";
                        goto try_except_handler_16;
                    }
                    Py_INCREF(tmp_expression_value_33);
                } else {
                    goto try_except_handler_16;
                }
            }

            tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_33, mod_consts[9]);
            Py_DECREF(tmp_expression_value_33);
            if (tmp_tuple_element_17 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_assign_source_71 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_71, 0, tmp_tuple_element_17);
            assert(tmp_Indexable$class_creation_1__bases_orig == NULL);
            tmp_Indexable$class_creation_1__bases_orig = tmp_assign_source_71;
        }
        {
            PyObject *tmp_assign_source_72;
            PyObject *tmp_dircall_arg1_6;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
            tmp_dircall_arg1_6 = tmp_Indexable$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_6);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
                tmp_assign_source_72 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_72 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__bases == NULL);
            tmp_Indexable$class_creation_1__bases = tmp_assign_source_72;
        }
        {
            PyObject *tmp_assign_source_73;
            tmp_assign_source_73 = MAKE_DICT_EMPTY();
            assert(tmp_Indexable$class_creation_1__class_decl_dict == NULL);
            tmp_Indexable$class_creation_1__class_decl_dict = tmp_assign_source_73;
        }
        {
            PyObject *tmp_assign_source_74;
            PyObject *tmp_metaclass_value_6;
            nuitka_bool tmp_condition_result_21;
            int tmp_truth_name_6;
            PyObject *tmp_type_arg_11;
            PyObject *tmp_expression_value_34;
            PyObject *tmp_subscript_value_6;
            PyObject *tmp_bases_value_6;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_truth_name_6 = CHECK_IF_TRUE(tmp_Indexable$class_creation_1__bases);
            if (tmp_truth_name_6 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_condition_result_21 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_7;
            } else {
                goto condexpr_false_7;
            }
            condexpr_true_7:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_expression_value_34 = tmp_Indexable$class_creation_1__bases;
            tmp_subscript_value_6 = mod_consts[52];
            tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_34, tmp_subscript_value_6, 0);
            if (tmp_type_arg_11 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
            Py_DECREF(tmp_type_arg_11);
            if (tmp_metaclass_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            goto condexpr_end_7;
            condexpr_false_7:;
            tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_6);
            condexpr_end_7:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_bases_value_6 = tmp_Indexable$class_creation_1__bases;
            tmp_assign_source_74 = SELECT_METACLASS(tstate, tmp_metaclass_value_6, tmp_bases_value_6);
            Py_DECREF(tmp_metaclass_value_6);
            if (tmp_assign_source_74 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__metaclass == NULL);
            tmp_Indexable$class_creation_1__metaclass = tmp_assign_source_74;
        }
        {
            bool tmp_condition_result_22;
            PyObject *tmp_expression_value_35;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_expression_value_35 = tmp_Indexable$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_35, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_condition_result_22 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_22 != false) {
                goto branch_yes_15;
            } else {
                goto branch_no_15;
            }
        }
        branch_yes_15:;
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_called_value_12;
            PyObject *tmp_expression_value_36;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_expression_value_36 = tmp_Indexable$class_creation_1__metaclass;
            tmp_called_value_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_36, mod_consts[449]);
            if (tmp_called_value_12 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_tuple_element_18 = mod_consts[9];
            tmp_args_value_10 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_tuple_element_18 = tmp_Indexable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_10 = tmp_Indexable$class_creation_1__class_decl_dict;
            frame_6b334b8e84140766ea2a2c48e4cc6da8_6->m_frame.f_lineno = 109;
            tmp_assign_source_75 = CALL_FUNCTION(tstate, tmp_called_value_12, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_75 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__prepared == NULL);
            tmp_Indexable$class_creation_1__prepared = tmp_assign_source_75;
        }
        {
            bool tmp_condition_result_23;
            PyObject *tmp_operand_value_6;
            PyObject *tmp_expression_value_37;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
            tmp_expression_value_37 = tmp_Indexable$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_37, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_operand_value_6 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
            assert(!(tmp_res == -1));
            tmp_condition_result_23 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_23 != false) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
        }
        branch_yes_16:;
        {
            PyObject *tmp_raise_type_6;
            PyObject *tmp_raise_value_6;
            PyObject *tmp_mod_expr_left_6;
            PyObject *tmp_mod_expr_right_6;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_expression_value_38;
            PyObject *tmp_name_value_39;
            PyObject *tmp_default_value_6;
            tmp_raise_type_6 = PyExc_TypeError;
            tmp_mod_expr_left_6 = mod_consts[452];
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_expression_value_38 = tmp_Indexable$class_creation_1__metaclass;
            tmp_name_value_39 = mod_consts[201];
            tmp_default_value_6 = mod_consts[453];
            tmp_tuple_element_19 = BUILTIN_GETATTR(tstate, tmp_expression_value_38, tmp_name_value_39, tmp_default_value_6);
            if (tmp_tuple_element_19 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_mod_expr_right_6 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_39;
                PyObject *tmp_type_arg_12;
                PyTuple_SET_ITEM(tmp_mod_expr_right_6, 0, tmp_tuple_element_19);
                CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
                tmp_type_arg_12 = tmp_Indexable$class_creation_1__prepared;
                tmp_expression_value_39 = BUILTIN_TYPE1(tmp_type_arg_12);
                assert(!(tmp_expression_value_39 == NULL));
                tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_39, mod_consts[201]);
                Py_DECREF(tmp_expression_value_39);
                if (tmp_tuple_element_19 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 109;
                    type_description_2 = "o";
                    goto tuple_build_exception_6;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_6, 1, tmp_tuple_element_19);
            }
            goto tuple_build_noexception_6;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_6:;
            Py_DECREF(tmp_mod_expr_right_6);
            goto try_except_handler_16;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_6:;
            tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_6, tmp_mod_expr_right_6);
            Py_DECREF(tmp_mod_expr_right_6);
            if (tmp_raise_value_6 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            exception_type = tmp_raise_type_6;
            Py_INCREF(tmp_raise_type_6);
            exception_value = tmp_raise_value_6;
            exception_lineno = 109;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_16;
        }
        branch_no_16:;
        goto branch_end_15;
        branch_no_15:;
        {
            PyObject *tmp_assign_source_76;
            tmp_assign_source_76 = MAKE_DICT_EMPTY();
            assert(tmp_Indexable$class_creation_1__prepared == NULL);
            tmp_Indexable$class_creation_1__prepared = tmp_assign_source_76;
        }
        branch_end_15:;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
            tmp_set_locals_6 = tmp_Indexable$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        tmp_dictset_value = mod_consts[470];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        frame_2e9b49da47d6b813f3dd71d96927e452_7 = MAKE_CLASS_FRAME(tstate, codeobj_2e9b49da47d6b813f3dd71d96927e452, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_2e9b49da47d6b813f3dd71d96927e452_7);
        assert(Py_REFCNT(frame_2e9b49da47d6b813f3dd71d96927e452_7) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[14], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_3 = "o";
            goto frame_exception_exit_7;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[451], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_3 = "o";
            goto frame_exception_exit_7;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_5;
        frame_exception_exit_7:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2e9b49da47d6b813f3dd71d96927e452_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2e9b49da47d6b813f3dd71d96927e452_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2e9b49da47d6b813f3dd71d96927e452_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2e9b49da47d6b813f3dd71d96927e452_7,
            type_description_3,
            outline_5_var___class__
        );



        assertFrameObject(frame_2e9b49da47d6b813f3dd71d96927e452_7);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_6;
        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_6:;
        type_description_2 = "o";
        goto try_except_handler_18;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_cmp_expr_left_5 = tmp_Indexable$class_creation_1__bases;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
            tmp_cmp_expr_right_5 = tmp_Indexable$class_creation_1__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_17;
            } else {
                goto branch_no_17;
            }
        }
        branch_yes_17:;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Indexable$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        branch_no_17:;
        {
            PyObject *tmp_assign_source_77;
            PyObject *tmp_called_value_13;
            PyObject *tmp_args_value_11;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kwargs_value_11;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_called_value_13 = tmp_Indexable$class_creation_1__metaclass;
            tmp_tuple_element_20 = mod_consts[9];
            tmp_args_value_11 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_tuple_element_20 = tmp_Indexable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_20);
            tmp_tuple_element_20 = locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109;
            PyTuple_SET_ITEM0(tmp_args_value_11, 2, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_11 = tmp_Indexable$class_creation_1__class_decl_dict;
            frame_6b334b8e84140766ea2a2c48e4cc6da8_6->m_frame.f_lineno = 109;
            tmp_assign_source_77 = CALL_FUNCTION(tstate, tmp_called_value_13, tmp_args_value_11, tmp_kwargs_value_11);
            Py_DECREF(tmp_args_value_11);
            if (tmp_assign_source_77 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_77;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_dictset_value = outline_5_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_18;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109);
        locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
        goto try_return_handler_17;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109);
        locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 109;
        goto try_except_handler_16;
        outline_result_6:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_16;
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Indexable$class_creation_1__bases_orig);
        tmp_Indexable$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__bases);
        tmp_Indexable$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__class_decl_dict);
        tmp_Indexable$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__metaclass);
        tmp_Indexable$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__prepared);
        tmp_Indexable$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto frame_exception_exit_6;
        // End of try:
        try_end_5:;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
        Py_DECREF(tmp_Indexable$class_creation_1__bases_orig);
        tmp_Indexable$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
        Py_DECREF(tmp_Indexable$class_creation_1__bases);
        tmp_Indexable$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Indexable$class_creation_1__class_decl_dict);
        tmp_Indexable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
        Py_DECREF(tmp_Indexable$class_creation_1__metaclass);
        tmp_Indexable$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
        Py_DECREF(tmp_Indexable$class_creation_1__prepared);
        tmp_Indexable$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_6;
        frame_exception_exit_6:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6b334b8e84140766ea2a2c48e4cc6da8_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6b334b8e84140766ea2a2c48e4cc6da8_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6b334b8e84140766ea2a2c48e4cc6da8_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6b334b8e84140766ea2a2c48e4cc6da8_6,
            type_description_2,
            outline_4_var___class__
        );



        assertFrameObject(frame_6b334b8e84140766ea2a2c48e4cc6da8_6);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_5;
        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_5:;

        goto try_except_handler_15;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_25;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_3__bases;
            tmp_cmp_expr_right_6 = mod_consts[448];
            tmp_condition_result_25 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_25 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_15;
            }
            if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
                goto branch_yes_18;
            } else {
                goto branch_no_18;
            }
        }
        branch_yes_18:;
        tmp_dictset_value = mod_consts[448];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        branch_no_18:;
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_called_value_14;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_21;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_14 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_21 = mod_consts[468];
            tmp_args_value_12 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_21 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_21);
            tmp_tuple_element_21 = locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_3__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 99;
            tmp_assign_source_78 = CALL_FUNCTION(tstate, tmp_called_value_14, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_78 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_15;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_78;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_70 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_70);
        goto try_return_handler_15;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99);
        locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
        goto try_return_handler_14;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99);
        locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 99;
        goto try_except_handler_13;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468], tmp_assign_source_70);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_tuple_element_22;
        tmp_tuple_element_22 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_22 == NULL)) {
            tmp_tuple_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
        }

        if (tmp_tuple_element_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_assign_source_79 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_79, 0, tmp_tuple_element_22);
        tmp_tuple_element_22 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_22 == NULL)) {
            tmp_tuple_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto tuple_build_exception_7;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_79, 1, tmp_tuple_element_22);
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_assign_source_79);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_79;
    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_80 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_80 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_80;
    }
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_81;
    }
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_metaclass_value_7;
        nuitka_bool tmp_condition_result_26;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_40;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_7 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_condition_result_26 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_40 = tmp_class_creation_4__bases;
        tmp_subscript_value_7 = mod_consts[52];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_40, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_7 = tmp_class_creation_4__bases;
        tmp_assign_source_82 = SELECT_METACLASS(tstate, tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_82 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_82;
    }
    {
        bool tmp_condition_result_27;
        PyObject *tmp_expression_value_41;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_41 = tmp_class_creation_4__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_41, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_condition_result_27 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_42;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_42 = tmp_class_creation_4__metaclass;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_42, mod_consts[449]);
        if (tmp_called_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_tuple_element_23 = mod_consts[55];
        tmp_args_value_13 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_23);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_23 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_23);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_4__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 126;
        tmp_assign_source_83 = CALL_FUNCTION(tstate, tmp_called_value_15, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_83 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_83;
    }
    {
        bool tmp_condition_result_28;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_43;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_43 = tmp_class_creation_4__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_43, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_operand_value_7 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_28 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_28 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_mod_expr_left_7;
        PyObject *tmp_mod_expr_right_7;
        PyObject *tmp_tuple_element_24;
        PyObject *tmp_expression_value_44;
        PyObject *tmp_name_value_40;
        PyObject *tmp_default_value_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_mod_expr_left_7 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_44 = tmp_class_creation_4__metaclass;
        tmp_name_value_40 = mod_consts[201];
        tmp_default_value_7 = mod_consts[453];
        tmp_tuple_element_24 = BUILTIN_GETATTR(tstate, tmp_expression_value_44, tmp_name_value_40, tmp_default_value_7);
        if (tmp_tuple_element_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_mod_expr_right_7 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_45;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_mod_expr_right_7, 0, tmp_tuple_element_24);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_14 = tmp_class_creation_4__prepared;
            tmp_expression_value_45 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_45 == NULL));
            tmp_tuple_element_24 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_45, mod_consts[201]);
            Py_DECREF(tmp_expression_value_45);
            if (tmp_tuple_element_24 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_7, 1, tmp_tuple_element_24);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_mod_expr_right_7);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_7, tmp_mod_expr_right_7);
        Py_DECREF(tmp_mod_expr_right_7);
        if (tmp_raise_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 126;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_19;
    }
    branch_no_20:;
    goto branch_end_19;
    branch_no_19:;
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_84;
    }
    branch_end_19:;
    {
        PyObject *tmp_assign_source_85;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_7 = tmp_class_creation_4__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[473];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[55];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8 = MAKE_CLASS_FRAME(tstate, codeobj_197892e6e6e68e40d8fdf1bb40b8d4f4, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8);
        assert(Py_REFCNT(frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[474];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            PyObject *tmp_called_instance_2;
            tmp_called_instance_2 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_called_instance_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_2 == NULL)) {
                        tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_2 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 142;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_called_instance_2);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 142;
            tmp_dictset_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_2,
                mod_consts[476],
                &PyTuple_GET_ITEM(mod_consts[477], 0)
            );

            Py_DECREF(tmp_called_instance_2);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[56], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        {
            PyObject *tmp_called_instance_3;
            tmp_called_instance_3 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_called_instance_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_3 == NULL)) {
                        tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_3 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 155;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_called_instance_3);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 155;
            tmp_dictset_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_3,
                mod_consts[476],
                &PyTuple_GET_ITEM(mod_consts[478], 0)
            );

            Py_DECREF(tmp_called_instance_3);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[479], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        {
            PyObject *tmp_called_instance_4;
            tmp_called_instance_4 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_called_instance_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_4 == NULL)) {
                        tmp_called_instance_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_4 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 169;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_called_instance_4);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 169;
            tmp_dictset_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_4,
                mod_consts[476],
                &PyTuple_GET_ITEM(mod_consts[480], 0)
            );

            Py_DECREF(tmp_called_instance_4);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[58], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        {
            PyObject *tmp_called_instance_5;
            tmp_called_instance_5 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_called_instance_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_5 == NULL)) {
                        tmp_called_instance_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_5 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 184;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_called_instance_5);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 184;
            tmp_dictset_value = CALL_METHOD_WITH_ARGS2(
                tstate,
                tmp_called_instance_5,
                mod_consts[476],
                &PyTuple_GET_ITEM(mod_consts[481], 0)
            );

            Py_DECREF(tmp_called_instance_5);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[482], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        {
            PyObject *tmp_called_value_16;
            PyObject *tmp_called_value_17;
            PyObject *tmp_expression_value_46;
            PyObject *tmp_args_element_value_3;
            PyObject *tmp_defaults_1;
            tmp_expression_value_46 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_expression_value_46 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_46 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_46 == NULL)) {
                        tmp_expression_value_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_expression_value_46 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 203;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_expression_value_46);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            tmp_called_value_17 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_46, mod_consts[483]);
            Py_DECREF(tmp_expression_value_46);
            if (tmp_called_value_17 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 203;
            tmp_called_value_16 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_17, &PyTuple_GET_ITEM(mod_consts[484], 0), mod_consts[485]);
            Py_DECREF(tmp_called_value_17);
            if (tmp_called_value_16 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_defaults_1 = mod_consts[486];
            Py_INCREF(tmp_defaults_1);


            tmp_args_element_value_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(tmp_defaults_1);

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 203;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_16, tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_16);
            Py_DECREF(tmp_args_element_value_3);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 219;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            nuitka_bool tmp_condition_result_29;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_element_value_4;
            PyObject *tmp_called_value_19;
            PyObject *tmp_args_element_value_5;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 385;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_condition_result_29 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_9;
            } else {
                goto condexpr_false_9;
            }
            condexpr_true_9:;
            tmp_called_value_18 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[458]);

            if (unlikely(tmp_called_value_18 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 385;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_called_value_18 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 385;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }


            tmp_args_element_value_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 385;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_18, tmp_args_element_value_4);
            Py_DECREF(tmp_called_value_18);
            Py_DECREF(tmp_args_element_value_4);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 385;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            goto condexpr_end_9;
            condexpr_false_9:;
            tmp_called_value_19 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_5 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 385;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_19, tmp_args_element_value_5);
            Py_DECREF(tmp_args_element_value_5);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 385;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            condexpr_end_9:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_called_value_20;
            PyObject *tmp_args_element_value_6;
            PyObject *tmp_classmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[494]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_condition_result_30 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_10;
            } else {
                goto condexpr_false_10;
            }
            condexpr_true_10:;
            tmp_called_value_20 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[494]);

            if (unlikely(tmp_called_value_20 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[494]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_called_value_20 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }


            tmp_args_element_value_6 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();

            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame.f_lineno = 395;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_20, tmp_args_element_value_6);
            Py_DECREF(tmp_called_value_20);
            Py_DECREF(tmp_args_element_value_6);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            goto condexpr_end_10;
            condexpr_false_10:;


            tmp_classmethod_arg_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();

            tmp_dictset_value = BUILTIN_CLASSMETHOD(tstate, tmp_classmethod_arg_1);
            Py_DECREF(tmp_classmethod_arg_1);
            assert(!(tmp_dictset_value == NULL));
            condexpr_end_10:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[495], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_7;
        frame_exception_exit_8:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8,
            type_description_2,
            outline_6_var___class__
        );



        assertFrameObject(frame_197892e6e6e68e40d8fdf1bb40b8d4f4_8);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_7;
        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_21;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_31 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_31 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_21;
            }
            if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
                goto branch_yes_21;
            } else {
                goto branch_no_21;
            }
        }
        branch_yes_21:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        branch_no_21:;
        {
            PyObject *tmp_assign_source_86;
            PyObject *tmp_called_value_21;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_25;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_21 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_25 = mod_consts[55];
            tmp_args_value_14 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_25 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_25);
            tmp_tuple_element_25 = locals_sqlalchemy$sql$sqltypes$$$class__7_String_126;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_4__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 126;
            tmp_assign_source_86 = CALL_FUNCTION(tstate, tmp_called_value_21, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_86 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_21;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_86;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_85 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_85);
        goto try_return_handler_21;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126);
        locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126);
        locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto try_except_handler_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 126;
        goto try_except_handler_19;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55], tmp_assign_source_85);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_tuple_element_26;
        tmp_tuple_element_26 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_tuple_element_26 == NULL)) {
            tmp_tuple_element_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_tuple_element_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_assign_source_87 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_87, 0, tmp_tuple_element_26);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_87;
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_88 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_88 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_88;
    }
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_89;
    }
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_metaclass_value_8;
        nuitka_bool tmp_condition_result_32;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_47;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_8 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_condition_result_32 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_47 = tmp_class_creation_5__bases;
        tmp_subscript_value_8 = mod_consts[52];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_47, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_8 = tmp_class_creation_5__bases;
        tmp_assign_source_90 = SELECT_METACLASS(tstate, tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_90 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_90;
    }
    {
        bool tmp_condition_result_33;
        PyObject *tmp_expression_value_48;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_48 = tmp_class_creation_5__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_48, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_condition_result_33 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_33 != false) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_called_value_22;
        PyObject *tmp_expression_value_49;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_49 = tmp_class_creation_5__metaclass;
        tmp_called_value_22 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_49, mod_consts[449]);
        if (tmp_called_value_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_tuple_element_27 = mod_consts[497];
        tmp_args_value_15 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_27 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_5__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 407;
        tmp_assign_source_91 = CALL_FUNCTION(tstate, tmp_called_value_22, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_22);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_91 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_91;
    }
    {
        bool tmp_condition_result_34;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_50;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_50 = tmp_class_creation_5__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_50, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_operand_value_8 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        assert(!(tmp_res == -1));
        tmp_condition_result_34 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_34 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_mod_expr_left_8;
        PyObject *tmp_mod_expr_right_8;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_expression_value_51;
        PyObject *tmp_name_value_41;
        PyObject *tmp_default_value_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_mod_expr_left_8 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_51 = tmp_class_creation_5__metaclass;
        tmp_name_value_41 = mod_consts[201];
        tmp_default_value_8 = mod_consts[453];
        tmp_tuple_element_28 = BUILTIN_GETATTR(tstate, tmp_expression_value_51, tmp_name_value_41, tmp_default_value_8);
        if (tmp_tuple_element_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        tmp_mod_expr_right_8 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_52;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_mod_expr_right_8, 0, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_16 = tmp_class_creation_5__prepared;
            tmp_expression_value_52 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_52 == NULL));
            tmp_tuple_element_28 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_52, mod_consts[201]);
            Py_DECREF(tmp_expression_value_52);
            if (tmp_tuple_element_28 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 407;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_8, 1, tmp_tuple_element_28);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_mod_expr_right_8);
        goto try_except_handler_22;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_8, tmp_mod_expr_right_8);
        Py_DECREF(tmp_mod_expr_right_8);
        if (tmp_raise_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_22;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 407;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_22;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_92;
        tmp_assign_source_92 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_92;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_93;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_8 = tmp_class_creation_5__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_24;
        }
        tmp_dictset_value = mod_consts[498];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_24;
        }
        tmp_dictset_value = mod_consts[497];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_24;
        }
        frame_7e0a7e2812bb27d237297241fe6989c6_9 = MAKE_CLASS_FRAME(tstate, codeobj_7e0a7e2812bb27d237297241fe6989c6, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_7e0a7e2812bb27d237297241fe6989c6_9);
        assert(Py_REFCNT(frame_7e0a7e2812bb27d237297241fe6989c6_9) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[499];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_8;
        frame_exception_exit_9:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7e0a7e2812bb27d237297241fe6989c6_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7e0a7e2812bb27d237297241fe6989c6_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7e0a7e2812bb27d237297241fe6989c6_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7e0a7e2812bb27d237297241fe6989c6_9,
            type_description_2,
            outline_7_var___class__
        );



        assertFrameObject(frame_7e0a7e2812bb27d237297241fe6989c6_9);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_8;
        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_24;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_35;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_35 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_35 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 407;

                goto try_except_handler_24;
            }
            if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;

            goto try_except_handler_24;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_94;
            PyObject *tmp_called_value_23;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_29;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_23 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_29 = mod_consts[497];
            tmp_args_value_16 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_29);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_29 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_29);
            tmp_tuple_element_29 = locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_29);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_5__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 407;
            tmp_assign_source_94 = CALL_FUNCTION(tstate, tmp_called_value_23, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_94 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 407;

                goto try_except_handler_24;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_94;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_93 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_93);
        goto try_return_handler_24;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407);
        locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407 = NULL;
        goto try_return_handler_23;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407);
        locals_sqlalchemy$sql$sqltypes$$$class__8_Text_407 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto try_except_handler_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 407;
        goto try_except_handler_22;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[497], tmp_assign_source_93);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_tuple_element_30;
        tmp_tuple_element_30 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_tuple_element_30 == NULL)) {
            tmp_tuple_element_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_tuple_element_30 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_assign_source_95 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_95, 0, tmp_tuple_element_30);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_95;
    }
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_96 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_96 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_96;
    }
    {
        PyObject *tmp_assign_source_97;
        tmp_assign_source_97 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_97;
    }
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_metaclass_value_9;
        nuitka_bool tmp_condition_result_36;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_53;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_9 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_condition_result_36 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_53 = tmp_class_creation_6__bases;
        tmp_subscript_value_9 = mod_consts[52];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_53, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_9 = tmp_class_creation_6__bases;
        tmp_assign_source_98 = SELECT_METACLASS(tstate, tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_98 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_98;
    }
    {
        bool tmp_condition_result_37;
        PyObject *tmp_expression_value_54;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_54 = tmp_class_creation_6__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_54, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_condition_result_37 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_37 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_called_value_24;
        PyObject *tmp_expression_value_55;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_31;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_55 = tmp_class_creation_6__metaclass;
        tmp_called_value_24 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_55, mod_consts[449]);
        if (tmp_called_value_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_tuple_element_31 = mod_consts[69];
        tmp_args_value_17 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_31);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_31 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_31);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_6__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 422;
        tmp_assign_source_99 = CALL_FUNCTION(tstate, tmp_called_value_24, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_24);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_99;
    }
    {
        bool tmp_condition_result_38;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_56;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_56 = tmp_class_creation_6__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_56, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_operand_value_9 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_38 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_38 != false) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_mod_expr_left_9;
        PyObject *tmp_mod_expr_right_9;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_expression_value_57;
        PyObject *tmp_name_value_42;
        PyObject *tmp_default_value_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_mod_expr_left_9 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_57 = tmp_class_creation_6__metaclass;
        tmp_name_value_42 = mod_consts[201];
        tmp_default_value_9 = mod_consts[453];
        tmp_tuple_element_32 = BUILTIN_GETATTR(tstate, tmp_expression_value_57, tmp_name_value_42, tmp_default_value_9);
        if (tmp_tuple_element_32 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        tmp_mod_expr_right_9 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_58;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_mod_expr_right_9, 0, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_18 = tmp_class_creation_6__prepared;
            tmp_expression_value_58 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_58 == NULL));
            tmp_tuple_element_32 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_58, mod_consts[201]);
            Py_DECREF(tmp_expression_value_58);
            if (tmp_tuple_element_32 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 422;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_9, 1, tmp_tuple_element_32);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_mod_expr_right_9);
        goto try_except_handler_25;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_9, tmp_mod_expr_right_9);
        Py_DECREF(tmp_mod_expr_right_9);
        if (tmp_raise_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_25;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 422;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_25;
    }
    branch_no_26:;
    goto branch_end_25;
    branch_no_25:;
    {
        PyObject *tmp_assign_source_100;
        tmp_assign_source_100 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_100;
    }
    branch_end_25:;
    {
        PyObject *tmp_assign_source_101;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_9 = tmp_class_creation_6__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_27;
        }
        tmp_dictset_value = mod_consts[500];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_27;
        }
        tmp_dictset_value = mod_consts[69];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_27;
        }
        frame_86aba5b77bc70fc0ed4ba448dadf0054_10 = MAKE_CLASS_FRAME(tstate, codeobj_86aba5b77bc70fc0ed4ba448dadf0054, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_86aba5b77bc70fc0ed4ba448dadf0054_10);
        assert(Py_REFCNT(frame_86aba5b77bc70fc0ed4ba448dadf0054_10) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[501];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 476;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = mod_consts[278];
            Py_INCREF(tmp_defaults_2);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(tmp_defaults_2);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 478;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_9;
        frame_exception_exit_10:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_86aba5b77bc70fc0ed4ba448dadf0054_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_86aba5b77bc70fc0ed4ba448dadf0054_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_86aba5b77bc70fc0ed4ba448dadf0054_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_86aba5b77bc70fc0ed4ba448dadf0054_10,
            type_description_2,
            outline_8_var___class__
        );



        assertFrameObject(frame_86aba5b77bc70fc0ed4ba448dadf0054_10);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_9;
        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_27;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_39;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_39 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_39 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 422;

                goto try_except_handler_27;
            }
            if (tmp_condition_result_39 == NUITKA_BOOL_TRUE) {
                goto branch_yes_27;
            } else {
                goto branch_no_27;
            }
        }
        branch_yes_27:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;

            goto try_except_handler_27;
        }
        branch_no_27:;
        {
            PyObject *tmp_assign_source_102;
            PyObject *tmp_called_value_25;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_33;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_25 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_33 = mod_consts[69];
            tmp_args_value_18 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_33 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_33);
            tmp_tuple_element_33 = locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_6__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 422;
            tmp_assign_source_102 = CALL_FUNCTION(tstate, tmp_called_value_25, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_102 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 422;

                goto try_except_handler_27;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_102;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_101 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_101);
        goto try_return_handler_27;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422);
        locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422 = NULL;
        goto try_return_handler_26;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422);
        locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_422 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto try_except_handler_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 422;
        goto try_except_handler_25;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69], tmp_assign_source_101);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_tuple_element_34;
        tmp_tuple_element_34 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[497]);

        if (unlikely(tmp_tuple_element_34 == NULL)) {
            tmp_tuple_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[497]);
        }

        if (tmp_tuple_element_34 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_assign_source_103 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_103, 0, tmp_tuple_element_34);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_103;
    }
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_104 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_104 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_104;
    }
    {
        PyObject *tmp_assign_source_105;
        tmp_assign_source_105 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_105;
    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_metaclass_value_10;
        nuitka_bool tmp_condition_result_40;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_59;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_10 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_condition_result_40 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_59 = tmp_class_creation_7__bases;
        tmp_subscript_value_10 = mod_consts[52];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_59, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_10 = tmp_class_creation_7__bases;
        tmp_assign_source_106 = SELECT_METACLASS(tstate, tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_106 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_106;
    }
    {
        bool tmp_condition_result_41;
        PyObject *tmp_expression_value_60;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_60 = tmp_class_creation_7__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_60, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_condition_result_41 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_41 != false) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_assign_source_107;
        PyObject *tmp_called_value_26;
        PyObject *tmp_expression_value_61;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_61 = tmp_class_creation_7__metaclass;
        tmp_called_value_26 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_61, mod_consts[449]);
        if (tmp_called_value_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_tuple_element_35 = mod_consts[72];
        tmp_args_value_19 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_35 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_7__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 492;
        tmp_assign_source_107 = CALL_FUNCTION(tstate, tmp_called_value_26, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_26);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_107 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_107;
    }
    {
        bool tmp_condition_result_42;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_62;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_62 = tmp_class_creation_7__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_62, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_operand_value_10 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_42 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_42 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_mod_expr_left_10;
        PyObject *tmp_mod_expr_right_10;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_expression_value_63;
        PyObject *tmp_name_value_43;
        PyObject *tmp_default_value_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_mod_expr_left_10 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_63 = tmp_class_creation_7__metaclass;
        tmp_name_value_43 = mod_consts[201];
        tmp_default_value_10 = mod_consts[453];
        tmp_tuple_element_36 = BUILTIN_GETATTR(tstate, tmp_expression_value_63, tmp_name_value_43, tmp_default_value_10);
        if (tmp_tuple_element_36 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        tmp_mod_expr_right_10 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_64;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_mod_expr_right_10, 0, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_20 = tmp_class_creation_7__prepared;
            tmp_expression_value_64 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_64 == NULL));
            tmp_tuple_element_36 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_64, mod_consts[201]);
            Py_DECREF(tmp_expression_value_64);
            if (tmp_tuple_element_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 492;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_10, 1, tmp_tuple_element_36);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_mod_expr_right_10);
        goto try_except_handler_28;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_10, tmp_mod_expr_right_10);
        Py_DECREF(tmp_mod_expr_right_10);
        if (tmp_raise_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_28;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 492;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_28;
    }
    branch_no_29:;
    goto branch_end_28;
    branch_no_28:;
    {
        PyObject *tmp_assign_source_108;
        tmp_assign_source_108 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_108;
    }
    branch_end_28:;
    {
        PyObject *tmp_assign_source_109;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_10 = tmp_class_creation_7__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_30;
        }
        tmp_dictset_value = mod_consts[503];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_30;
        }
        tmp_dictset_value = mod_consts[72];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_30;
        }
        frame_d0c7b8998b645ef155c09c24d41e5bbb_11 = MAKE_CLASS_FRAME(tstate, codeobj_d0c7b8998b645ef155c09c24d41e5bbb, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_d0c7b8998b645ef155c09c24d41e5bbb_11);
        assert(Py_REFCNT(frame_d0c7b8998b645ef155c09c24d41e5bbb_11) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[504];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 505;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = mod_consts[278];
            Py_INCREF(tmp_defaults_3);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(tmp_defaults_3);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 507;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[495], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 520;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_10;
        frame_exception_exit_11:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d0c7b8998b645ef155c09c24d41e5bbb_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d0c7b8998b645ef155c09c24d41e5bbb_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d0c7b8998b645ef155c09c24d41e5bbb_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d0c7b8998b645ef155c09c24d41e5bbb_11,
            type_description_2,
            outline_9_var___class__
        );



        assertFrameObject(frame_d0c7b8998b645ef155c09c24d41e5bbb_11);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_10;
        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_30;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_43;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_43 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_43 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 492;

                goto try_except_handler_30;
            }
            if (tmp_condition_result_43 == NUITKA_BOOL_TRUE) {
                goto branch_yes_30;
            } else {
                goto branch_no_30;
            }
        }
        branch_yes_30:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;

            goto try_except_handler_30;
        }
        branch_no_30:;
        {
            PyObject *tmp_assign_source_110;
            PyObject *tmp_called_value_27;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_37;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_27 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_37 = mod_consts[72];
            tmp_args_value_20 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_37 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_37);
            tmp_tuple_element_37 = locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_7__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 492;
            tmp_assign_source_110 = CALL_FUNCTION(tstate, tmp_called_value_27, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_110 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 492;

                goto try_except_handler_30;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_110;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_109 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_109);
        goto try_return_handler_30;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492);
        locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492 = NULL;
        goto try_return_handler_29;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492);
        locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_492 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto try_except_handler_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_29 = exception_type;
        exception_keeper_value_29 = exception_value;
        exception_keeper_tb_29 = exception_tb;
        exception_keeper_lineno_29 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;
        exception_lineno = exception_keeper_lineno_29;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 492;
        goto try_except_handler_28;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72], tmp_assign_source_109);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_tuple_element_38;
        tmp_tuple_element_38 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_38 == NULL)) {
            tmp_tuple_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_assign_source_111 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_111, 0, tmp_tuple_element_38);
        tmp_tuple_element_38 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_38 == NULL)) {
            tmp_tuple_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto tuple_build_exception_12;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_111, 1, tmp_tuple_element_38);
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_assign_source_111);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_112 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_112 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_112;
    }
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_113;
    }
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_metaclass_value_11;
        nuitka_bool tmp_condition_result_44;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_65;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_11 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_condition_result_44 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_65 = tmp_class_creation_8__bases;
        tmp_subscript_value_11 = mod_consts[52];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_65, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_14:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_11 = tmp_class_creation_8__bases;
        tmp_assign_source_114 = SELECT_METACLASS(tstate, tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_114 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_114;
    }
    {
        bool tmp_condition_result_45;
        PyObject *tmp_expression_value_66;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_66 = tmp_class_creation_8__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_66, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_condition_result_45 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_45 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_called_value_28;
        PyObject *tmp_expression_value_67;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_67 = tmp_class_creation_8__metaclass;
        tmp_called_value_28 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_67, mod_consts[449]);
        if (tmp_called_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_tuple_element_39 = mod_consts[77];
        tmp_args_value_21 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_39 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_8__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 524;
        tmp_assign_source_115 = CALL_FUNCTION(tstate, tmp_called_value_28, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_28);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_115 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_115;
    }
    {
        bool tmp_condition_result_46;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_68;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_68 = tmp_class_creation_8__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_68, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_operand_value_11 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        assert(!(tmp_res == -1));
        tmp_condition_result_46 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_46 != false) {
            goto branch_yes_32;
        } else {
            goto branch_no_32;
        }
    }
    branch_yes_32:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_mod_expr_left_11;
        PyObject *tmp_mod_expr_right_11;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_expression_value_69;
        PyObject *tmp_name_value_44;
        PyObject *tmp_default_value_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_mod_expr_left_11 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_69 = tmp_class_creation_8__metaclass;
        tmp_name_value_44 = mod_consts[201];
        tmp_default_value_11 = mod_consts[453];
        tmp_tuple_element_40 = BUILTIN_GETATTR(tstate, tmp_expression_value_69, tmp_name_value_44, tmp_default_value_11);
        if (tmp_tuple_element_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        tmp_mod_expr_right_11 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_70;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_mod_expr_right_11, 0, tmp_tuple_element_40);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_22 = tmp_class_creation_8__prepared;
            tmp_expression_value_70 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_70 == NULL));
            tmp_tuple_element_40 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_70, mod_consts[201]);
            Py_DECREF(tmp_expression_value_70);
            if (tmp_tuple_element_40 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_11, 1, tmp_tuple_element_40);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_mod_expr_right_11);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_11, tmp_mod_expr_right_11);
        Py_DECREF(tmp_mod_expr_right_11);
        if (tmp_raise_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_31;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 524;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_31;
    }
    branch_no_32:;
    goto branch_end_31;
    branch_no_31:;
    {
        PyObject *tmp_assign_source_116;
        tmp_assign_source_116 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_116;
    }
    branch_end_31:;
    {
        PyObject *tmp_assign_source_117;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_11 = tmp_class_creation_8__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_33;
        }
        tmp_dictset_value = mod_consts[507];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_33;
        }
        tmp_dictset_value = mod_consts[77];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_33;
        }
        frame_90429f579f65edfed5bb20042f4d56bb_12 = MAKE_CLASS_FRAME(tstate, codeobj_90429f579f65edfed5bb20042f4d56bb, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_90429f579f65edfed5bb20042f4d56bb_12);
        assert(Py_REFCNT(frame_90429f579f65edfed5bb20042f4d56bb_12) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[508];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 528;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            nuitka_bool tmp_condition_result_47;
            PyObject *tmp_called_value_29;
            PyObject *tmp_args_element_value_7;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_element_value_8;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_condition_result_47 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_47 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_15;
            } else {
                goto condexpr_false_15;
            }
            condexpr_true_15:;
            tmp_called_value_29 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[458]);

            if (unlikely(tmp_called_value_29 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_called_value_29 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }


            tmp_args_element_value_7 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();

            frame_90429f579f65edfed5bb20042f4d56bb_12->m_frame.f_lineno = 533;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_29, tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_7);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            goto condexpr_end_15;
            condexpr_false_15:;
            tmp_called_value_30 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_8 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();

            frame_90429f579f65edfed5bb20042f4d56bb_12->m_frame.f_lineno = 533;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_30, tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_8);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            condexpr_end_15:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 534;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_value_9;
            tmp_called_instance_6 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[43]);

            if (tmp_called_instance_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_6 == NULL)) {
                        tmp_called_instance_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_6 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 543;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_instance_6);
                } else {
                    goto frame_exception_exit_12;
                }
            }



            tmp_args_element_value_9 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations();

            frame_90429f579f65edfed5bb20042f4d56bb_12->m_frame.f_lineno = 543;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_6, mod_consts[512], tmp_args_element_value_9);
            Py_DECREF(tmp_called_instance_6);
            Py_DECREF(tmp_args_element_value_9);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 543;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 544;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_11;
        frame_exception_exit_12:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_90429f579f65edfed5bb20042f4d56bb_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_90429f579f65edfed5bb20042f4d56bb_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_90429f579f65edfed5bb20042f4d56bb_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_90429f579f65edfed5bb20042f4d56bb_12,
            type_description_2,
            outline_10_var___class__
        );



        assertFrameObject(frame_90429f579f65edfed5bb20042f4d56bb_12);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_11;
        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_33;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_48 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_48 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto try_except_handler_33;
            }
            if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
                goto branch_yes_33;
            } else {
                goto branch_no_33;
            }
        }
        branch_yes_33:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_33;
        }
        branch_no_33:;
        {
            PyObject *tmp_assign_source_118;
            PyObject *tmp_called_value_31;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_41;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_31 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_41 = mod_consts[77];
            tmp_args_value_22 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_41 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_41);
            tmp_tuple_element_41 = locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_8__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 524;
            tmp_assign_source_118 = CALL_FUNCTION(tstate, tmp_called_value_31, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto try_except_handler_33;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_118;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_117 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_117);
        goto try_return_handler_33;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_33:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524);
        locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524 = NULL;
        goto try_return_handler_32;
        // Exception handler code:
        try_except_handler_33:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524);
        locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_524 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto try_except_handler_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_32:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 524;
        goto try_except_handler_31;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77], tmp_assign_source_117);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_tuple_element_42;
        tmp_tuple_element_42 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_tuple_element_42 == NULL)) {
            tmp_tuple_element_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_tuple_element_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_assign_source_119 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_119, 0, tmp_tuple_element_42);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_120 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_120 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_120;
    }
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_121;
    }
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_metaclass_value_12;
        nuitka_bool tmp_condition_result_49;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_12 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_condition_result_49 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_49 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_71 = tmp_class_creation_9__bases;
        tmp_subscript_value_12 = mod_consts[52];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_71, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_16:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_12 = tmp_class_creation_9__bases;
        tmp_assign_source_122 = SELECT_METACLASS(tstate, tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_122 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_122;
    }
    {
        bool tmp_condition_result_50;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_72 = tmp_class_creation_9__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_72, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_condition_result_50 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_50 != false) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_called_value_32;
        PyObject *tmp_expression_value_73;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_73 = tmp_class_creation_9__metaclass;
        tmp_called_value_32 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_73, mod_consts[449]);
        if (tmp_called_value_32 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_tuple_element_43 = mod_consts[514];
        tmp_args_value_23 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_43 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_9__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 564;
        tmp_assign_source_123 = CALL_FUNCTION(tstate, tmp_called_value_32, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_32);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_123 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_123;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_74;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_74 = tmp_class_creation_9__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_74, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_operand_value_12 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_51 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_mod_expr_left_12;
        PyObject *tmp_mod_expr_right_12;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_expression_value_75;
        PyObject *tmp_name_value_45;
        PyObject *tmp_default_value_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_mod_expr_left_12 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_75 = tmp_class_creation_9__metaclass;
        tmp_name_value_45 = mod_consts[201];
        tmp_default_value_12 = mod_consts[453];
        tmp_tuple_element_44 = BUILTIN_GETATTR(tstate, tmp_expression_value_75, tmp_name_value_45, tmp_default_value_12);
        if (tmp_tuple_element_44 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        tmp_mod_expr_right_12 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_76;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_mod_expr_right_12, 0, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_24 = tmp_class_creation_9__prepared;
            tmp_expression_value_76 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_76 == NULL));
            tmp_tuple_element_44 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_76, mod_consts[201]);
            Py_DECREF(tmp_expression_value_76);
            if (tmp_tuple_element_44 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 564;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_12, 1, tmp_tuple_element_44);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_mod_expr_right_12);
        goto try_except_handler_34;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_12, tmp_mod_expr_right_12);
        Py_DECREF(tmp_mod_expr_right_12);
        if (tmp_raise_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_34;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 564;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_34;
    }
    branch_no_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        PyObject *tmp_assign_source_124;
        tmp_assign_source_124 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_124;
    }
    branch_end_34:;
    {
        PyObject *tmp_assign_source_125;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_12 = tmp_class_creation_9__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_36;
        }
        tmp_dictset_value = mod_consts[515];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_36;
        }
        tmp_dictset_value = mod_consts[514];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_36;
        }
        frame_54943b13ceda71184ed82a93ac937d21_13 = MAKE_CLASS_FRAME(tstate, codeobj_54943b13ceda71184ed82a93ac937d21, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_54943b13ceda71184ed82a93ac937d21_13);
        assert(Py_REFCNT(frame_54943b13ceda71184ed82a93ac937d21_13) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[516];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_12;
        frame_exception_exit_13:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_54943b13ceda71184ed82a93ac937d21_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_54943b13ceda71184ed82a93ac937d21_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_54943b13ceda71184ed82a93ac937d21_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_54943b13ceda71184ed82a93ac937d21_13,
            type_description_2,
            outline_11_var___class__
        );



        assertFrameObject(frame_54943b13ceda71184ed82a93ac937d21_13);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_12;
        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_36;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_52;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_52 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_52 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 564;

                goto try_except_handler_36;
            }
            if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
                goto branch_yes_36;
            } else {
                goto branch_no_36;
            }
        }
        branch_yes_36:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;

            goto try_except_handler_36;
        }
        branch_no_36:;
        {
            PyObject *tmp_assign_source_126;
            PyObject *tmp_called_value_33;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_45;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_33 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_45 = mod_consts[514];
            tmp_args_value_24 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_45 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_45);
            tmp_tuple_element_45 = locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_9__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 564;
            tmp_assign_source_126 = CALL_FUNCTION(tstate, tmp_called_value_33, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_126 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 564;

                goto try_except_handler_36;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_126;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_125 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_125);
        goto try_return_handler_36;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_36:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564);
        locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564 = NULL;
        goto try_return_handler_35;
        // Exception handler code:
        try_except_handler_36:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564);
        locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_564 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto try_except_handler_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_35:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 564;
        goto try_except_handler_34;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[514], tmp_assign_source_125);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_tuple_element_46;
        tmp_tuple_element_46 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_tuple_element_46 == NULL)) {
            tmp_tuple_element_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_tuple_element_46 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_assign_source_127 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_127, 0, tmp_tuple_element_46);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_127;
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_128 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_128 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_128;
    }
    {
        PyObject *tmp_assign_source_129;
        tmp_assign_source_129 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_129;
    }
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_metaclass_value_13;
        nuitka_bool tmp_condition_result_53;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_77;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_13 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_condition_result_53 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_53 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_77 = tmp_class_creation_10__bases;
        tmp_subscript_value_13 = mod_consts[52];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_77, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        goto condexpr_end_17;
        condexpr_false_17:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_13 = tmp_class_creation_10__bases;
        tmp_assign_source_130 = SELECT_METACLASS(tstate, tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_130 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_130;
    }
    {
        bool tmp_condition_result_54;
        PyObject *tmp_expression_value_78;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_78 = tmp_class_creation_10__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_78, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_condition_result_54 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_54 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_called_value_34;
        PyObject *tmp_expression_value_79;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_47;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_79 = tmp_class_creation_10__metaclass;
        tmp_called_value_34 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_79, mod_consts[449]);
        if (tmp_called_value_34 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_tuple_element_47 = mod_consts[517];
        tmp_args_value_25 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_47);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_47 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_47);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_10__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 576;
        tmp_assign_source_131 = CALL_FUNCTION(tstate, tmp_called_value_34, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_34);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_131 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_131;
    }
    {
        bool tmp_condition_result_55;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_80;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_80 = tmp_class_creation_10__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_80, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_operand_value_13 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_mod_expr_left_13;
        PyObject *tmp_mod_expr_right_13;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_name_value_46;
        PyObject *tmp_default_value_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_mod_expr_left_13 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_81 = tmp_class_creation_10__metaclass;
        tmp_name_value_46 = mod_consts[201];
        tmp_default_value_13 = mod_consts[453];
        tmp_tuple_element_48 = BUILTIN_GETATTR(tstate, tmp_expression_value_81, tmp_name_value_46, tmp_default_value_13);
        if (tmp_tuple_element_48 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        tmp_mod_expr_right_13 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_82;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_mod_expr_right_13, 0, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_26 = tmp_class_creation_10__prepared;
            tmp_expression_value_82 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_82 == NULL));
            tmp_tuple_element_48 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_82, mod_consts[201]);
            Py_DECREF(tmp_expression_value_82);
            if (tmp_tuple_element_48 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 576;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_13, 1, tmp_tuple_element_48);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_mod_expr_right_13);
        goto try_except_handler_37;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_13, tmp_mod_expr_right_13);
        Py_DECREF(tmp_mod_expr_right_13);
        if (tmp_raise_value_13 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_37;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 576;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_37;
    }
    branch_no_38:;
    goto branch_end_37;
    branch_no_37:;
    {
        PyObject *tmp_assign_source_132;
        tmp_assign_source_132 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_132;
    }
    branch_end_37:;
    {
        PyObject *tmp_assign_source_133;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_13 = tmp_class_creation_10__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_39;
        }
        tmp_dictset_value = mod_consts[518];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_39;
        }
        tmp_dictset_value = mod_consts[517];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_39;
        }
        frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14 = MAKE_CLASS_FRAME(tstate, codeobj_85e67b94f7bca4a3b2dfb333a43fc3c5, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14);
        assert(Py_REFCNT(frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[519];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_13;
        frame_exception_exit_14:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14,
            type_description_2,
            outline_12_var___class__
        );



        assertFrameObject(frame_85e67b94f7bca4a3b2dfb333a43fc3c5_14);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_13;
        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_39;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_56;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_56 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_56 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 576;

                goto try_except_handler_39;
            }
            if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
                goto branch_yes_39;
            } else {
                goto branch_no_39;
            }
        }
        branch_yes_39:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;

            goto try_except_handler_39;
        }
        branch_no_39:;
        {
            PyObject *tmp_assign_source_134;
            PyObject *tmp_called_value_35;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_49;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_35 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_49 = mod_consts[517];
            tmp_args_value_26 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_49 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_49);
            tmp_tuple_element_49 = locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_10__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 576;
            tmp_assign_source_134 = CALL_FUNCTION(tstate, tmp_called_value_35, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_134 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 576;

                goto try_except_handler_39;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_134;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_133 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_133);
        goto try_return_handler_39;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576);
        locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576 = NULL;
        goto try_return_handler_38;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576);
        locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_576 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto try_except_handler_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 576;
        goto try_except_handler_37;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[517], tmp_assign_source_133);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_tuple_element_50;
        tmp_tuple_element_50 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_50 == NULL)) {
            tmp_tuple_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_assign_source_135 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_135, 0, tmp_tuple_element_50);
        tmp_tuple_element_50 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_50 == NULL)) {
            tmp_tuple_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto tuple_build_exception_16;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_135, 1, tmp_tuple_element_50);
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_assign_source_135);
        goto try_except_handler_40;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_135;
    }
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_136 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_136 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_136;
    }
    {
        PyObject *tmp_assign_source_137;
        tmp_assign_source_137 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_137;
    }
    {
        PyObject *tmp_assign_source_138;
        PyObject *tmp_metaclass_value_14;
        nuitka_bool tmp_condition_result_57;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_14 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_condition_result_57 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_57 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_83 = tmp_class_creation_11__bases;
        tmp_subscript_value_14 = mod_consts[52];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_83, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_18:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_14 = tmp_class_creation_11__bases;
        tmp_assign_source_138 = SELECT_METACLASS(tstate, tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_138 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_138;
    }
    {
        bool tmp_condition_result_58;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_84 = tmp_class_creation_11__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_84, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_condition_result_58 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_58 != false) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_assign_source_139;
        PyObject *tmp_called_value_36;
        PyObject *tmp_expression_value_85;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_51;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_85 = tmp_class_creation_11__metaclass;
        tmp_called_value_36 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_85, mod_consts[449]);
        if (tmp_called_value_36 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_tuple_element_51 = mod_consts[78];
        tmp_args_value_27 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_51);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_51 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_51);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_11__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 588;
        tmp_assign_source_139 = CALL_FUNCTION(tstate, tmp_called_value_36, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_36);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_139 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_139;
    }
    {
        bool tmp_condition_result_59;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_86;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_86 = tmp_class_creation_11__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_86, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_operand_value_14 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        assert(!(tmp_res == -1));
        tmp_condition_result_59 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_mod_expr_left_14;
        PyObject *tmp_mod_expr_right_14;
        PyObject *tmp_tuple_element_52;
        PyObject *tmp_expression_value_87;
        PyObject *tmp_name_value_47;
        PyObject *tmp_default_value_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_mod_expr_left_14 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_87 = tmp_class_creation_11__metaclass;
        tmp_name_value_47 = mod_consts[201];
        tmp_default_value_14 = mod_consts[453];
        tmp_tuple_element_52 = BUILTIN_GETATTR(tstate, tmp_expression_value_87, tmp_name_value_47, tmp_default_value_14);
        if (tmp_tuple_element_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        tmp_mod_expr_right_14 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_88;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_mod_expr_right_14, 0, tmp_tuple_element_52);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_28 = tmp_class_creation_11__prepared;
            tmp_expression_value_88 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_88 == NULL));
            tmp_tuple_element_52 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_88, mod_consts[201]);
            Py_DECREF(tmp_expression_value_88);
            if (tmp_tuple_element_52 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 588;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_14, 1, tmp_tuple_element_52);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_mod_expr_right_14);
        goto try_except_handler_40;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_14, tmp_mod_expr_right_14);
        Py_DECREF(tmp_mod_expr_right_14);
        if (tmp_raise_value_14 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_40;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 588;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_40;
    }
    branch_no_41:;
    goto branch_end_40;
    branch_no_40:;
    {
        PyObject *tmp_assign_source_140;
        tmp_assign_source_140 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_140;
    }
    branch_end_40:;
    {
        PyObject *tmp_assign_source_141;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_14 = tmp_class_creation_11__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[520];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[78];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_42;
        }
        frame_93ab42ae09729d32d6aad62ca2b84cc0_15 = MAKE_CLASS_FRAME(tstate, codeobj_93ab42ae09729d32d6aad62ca2b84cc0, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_93ab42ae09729d32d6aad62ca2b84cc0_15);
        assert(Py_REFCNT(frame_93ab42ae09729d32d6aad62ca2b84cc0_15) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[521];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 621;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = mod_consts[522];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[89], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 623;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = mod_consts[523];
            Py_INCREF(tmp_defaults_4);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(tmp_defaults_4);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 625;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_called_value_37;
            PyObject *tmp_args_element_value_10;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_element_value_11;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 679;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_condition_result_60 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_19;
            } else {
                goto condexpr_false_19;
            }
            condexpr_true_19:;
            tmp_called_value_37 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[458]);

            if (unlikely(tmp_called_value_37 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 679;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }

            if (tmp_called_value_37 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 679;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }


            tmp_args_element_value_10 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();

            frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame.f_lineno = 679;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_37, tmp_args_element_value_10);
            Py_DECREF(tmp_called_value_37);
            Py_DECREF(tmp_args_element_value_10);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 679;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            goto condexpr_end_19;
            condexpr_false_19:;
            tmp_called_value_38 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_11 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();

            frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame.f_lineno = 679;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_38, tmp_args_element_value_11);
            Py_DECREF(tmp_args_element_value_11);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 679;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            condexpr_end_19:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[101], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 680;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 688;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 691;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            nuitka_bool tmp_condition_result_61;
            PyObject *tmp_called_value_39;
            PyObject *tmp_args_element_value_12;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_element_value_13;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_condition_result_61 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_20;
            } else {
                goto condexpr_false_20;
            }
            condexpr_true_20:;
            tmp_called_value_39 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[458]);

            if (unlikely(tmp_called_value_39 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }

            if (tmp_called_value_39 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }


            tmp_args_element_value_12 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();

            frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame.f_lineno = 697;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_39, tmp_args_element_value_12);
            Py_DECREF(tmp_called_value_39);
            Py_DECREF(tmp_args_element_value_12);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            goto condexpr_end_20;
            condexpr_false_20:;
            tmp_called_value_40 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_13 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();

            frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame.f_lineno = 697;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_40, tmp_args_element_value_13);
            Py_DECREF(tmp_args_element_value_13);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            condexpr_end_20:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 698;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 704;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 710;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_args_element_value_14;
            tmp_called_instance_7 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[43]);

            if (tmp_called_instance_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_7 == NULL)) {
                        tmp_called_instance_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_7 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 739;
                        type_description_2 = "o";
                        goto frame_exception_exit_15;
                    }
                    Py_INCREF(tmp_called_instance_7);
                } else {
                    goto frame_exception_exit_15;
                }
            }



            tmp_args_element_value_14 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations();

            frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame.f_lineno = 739;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_7, mod_consts[512], tmp_args_element_value_14);
            Py_DECREF(tmp_called_instance_7);
            Py_DECREF(tmp_args_element_value_14);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 739;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 740;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_14;
        frame_exception_exit_15:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_93ab42ae09729d32d6aad62ca2b84cc0_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_93ab42ae09729d32d6aad62ca2b84cc0_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_93ab42ae09729d32d6aad62ca2b84cc0_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_93ab42ae09729d32d6aad62ca2b84cc0_15,
            type_description_2,
            outline_13_var___class__
        );



        assertFrameObject(frame_93ab42ae09729d32d6aad62ca2b84cc0_15);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_14;
        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_42;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_62;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_62 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_62 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 588;

                goto try_except_handler_42;
            }
            if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
                goto branch_yes_42;
            } else {
                goto branch_no_42;
            }
        }
        branch_yes_42:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 588;

            goto try_except_handler_42;
        }
        branch_no_42:;
        {
            PyObject *tmp_assign_source_142;
            PyObject *tmp_called_value_41;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_53;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_41 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_53 = mod_consts[78];
            tmp_args_value_28 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_53);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_53 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_53);
            tmp_tuple_element_53 = locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_53);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_11__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 588;
            tmp_assign_source_142 = CALL_FUNCTION(tstate, tmp_called_value_41, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_142 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 588;

                goto try_except_handler_42;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_142;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_141 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_141);
        goto try_return_handler_42;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588);
        locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588 = NULL;
        goto try_return_handler_41;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588);
        locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_588 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto try_except_handler_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_41:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 588;
        goto try_except_handler_40;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78], tmp_assign_source_141);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_tuple_element_54;
        tmp_tuple_element_54 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_tuple_element_54 == NULL)) {
            tmp_tuple_element_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
        }

        if (tmp_tuple_element_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_assign_source_143 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_143, 0, tmp_tuple_element_54);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_144 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_144 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_144;
    }
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_145;
    }
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_metaclass_value_15;
        nuitka_bool tmp_condition_result_63;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_89;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_15 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_condition_result_63 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_63 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_89 = tmp_class_creation_12__bases;
        tmp_subscript_value_15 = mod_consts[52];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_89, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        goto condexpr_end_21;
        condexpr_false_21:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_15 = tmp_class_creation_12__bases;
        tmp_assign_source_146 = SELECT_METACLASS(tstate, tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_146 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_146;
    }
    {
        bool tmp_condition_result_64;
        PyObject *tmp_expression_value_90;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_90 = tmp_class_creation_12__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_90, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_condition_result_64 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_64 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_assign_source_147;
        PyObject *tmp_called_value_42;
        PyObject *tmp_expression_value_91;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_55;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_91 = tmp_class_creation_12__metaclass;
        tmp_called_value_42 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_91, mod_consts[449]);
        if (tmp_called_value_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_tuple_element_55 = mod_consts[329];
        tmp_args_value_29 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_55);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_55 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_55);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_12__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 757;
        tmp_assign_source_147 = CALL_FUNCTION(tstate, tmp_called_value_42, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_42);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_147 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_147;
    }
    {
        bool tmp_condition_result_65;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_92;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_92 = tmp_class_creation_12__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_92, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_operand_value_15 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_65 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_65 != false) {
            goto branch_yes_44;
        } else {
            goto branch_no_44;
        }
    }
    branch_yes_44:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_mod_expr_left_15;
        PyObject *tmp_mod_expr_right_15;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_expression_value_93;
        PyObject *tmp_name_value_48;
        PyObject *tmp_default_value_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_mod_expr_left_15 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_93 = tmp_class_creation_12__metaclass;
        tmp_name_value_48 = mod_consts[201];
        tmp_default_value_15 = mod_consts[453];
        tmp_tuple_element_56 = BUILTIN_GETATTR(tstate, tmp_expression_value_93, tmp_name_value_48, tmp_default_value_15);
        if (tmp_tuple_element_56 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        tmp_mod_expr_right_15 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_94;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_mod_expr_right_15, 0, tmp_tuple_element_56);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_30 = tmp_class_creation_12__prepared;
            tmp_expression_value_94 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_94 == NULL));
            tmp_tuple_element_56 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_94, mod_consts[201]);
            Py_DECREF(tmp_expression_value_94);
            if (tmp_tuple_element_56 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 757;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_15, 1, tmp_tuple_element_56);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_mod_expr_right_15);
        goto try_except_handler_43;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_15, tmp_mod_expr_right_15);
        Py_DECREF(tmp_mod_expr_right_15);
        if (tmp_raise_value_15 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_43;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 757;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_43;
    }
    branch_no_44:;
    goto branch_end_43;
    branch_no_43:;
    {
        PyObject *tmp_assign_source_148;
        tmp_assign_source_148 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_148;
    }
    branch_end_43:;
    {
        PyObject *tmp_assign_source_149;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_15 = tmp_class_creation_12__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[532];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[329];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_45;
        }
        frame_740032a89ce339f80c267509d81f7b0c_16 = MAKE_CLASS_FRAME(tstate, codeobj_740032a89ce339f80c267509d81f7b0c, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_740032a89ce339f80c267509d81f7b0c_16);
        assert(Py_REFCNT(frame_740032a89ce339f80c267509d81f7b0c_16) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[533];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 768;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[85], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = mod_consts[534];
            Py_INCREF(tmp_defaults_5);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(tmp_defaults_5);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 772;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 801;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_15;
        frame_exception_exit_16:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_740032a89ce339f80c267509d81f7b0c_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_740032a89ce339f80c267509d81f7b0c_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_740032a89ce339f80c267509d81f7b0c_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_740032a89ce339f80c267509d81f7b0c_16,
            type_description_2,
            outline_14_var___class__
        );



        assertFrameObject(frame_740032a89ce339f80c267509d81f7b0c_16);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_15;
        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_45;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_66;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_66 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_66 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 757;

                goto try_except_handler_45;
            }
            if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
                goto branch_yes_45;
            } else {
                goto branch_no_45;
            }
        }
        branch_yes_45:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;

            goto try_except_handler_45;
        }
        branch_no_45:;
        {
            PyObject *tmp_assign_source_150;
            PyObject *tmp_called_value_43;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_57;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_43 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_57 = mod_consts[329];
            tmp_args_value_30 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_57 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_57);
            tmp_tuple_element_57 = locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_12__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 757;
            tmp_assign_source_150 = CALL_FUNCTION(tstate, tmp_called_value_43, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_150 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 757;

                goto try_except_handler_45;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_150;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_149 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_149);
        goto try_return_handler_45;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757);
        locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757 = NULL;
        goto try_return_handler_44;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757);
        locals_sqlalchemy$sql$sqltypes$$$class__15_Float_757 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto try_except_handler_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 757;
        goto try_except_handler_43;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[329], tmp_assign_source_149);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_tuple_element_58;
        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_58 == NULL)) {
            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_58 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_assign_source_151 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_151, 0, tmp_tuple_element_58);
        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_58 == NULL)) {
            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_58 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto tuple_build_exception_19;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_151, 1, tmp_tuple_element_58);
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_assign_source_151);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_151;
    }
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_152 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_152 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_152;
    }
    {
        PyObject *tmp_assign_source_153;
        tmp_assign_source_153 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_153;
    }
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_metaclass_value_16;
        nuitka_bool tmp_condition_result_67;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_95;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_16;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_16 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_condition_result_67 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_67 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_95 = tmp_class_creation_13__bases;
        tmp_subscript_value_16 = mod_consts[52];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_95, tmp_subscript_value_16, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_22:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_16 = tmp_class_creation_13__bases;
        tmp_assign_source_154 = SELECT_METACLASS(tstate, tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_154 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_154;
    }
    {
        bool tmp_condition_result_68;
        PyObject *tmp_expression_value_96;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_96 = tmp_class_creation_13__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_96, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_condition_result_68 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_68 != false) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_called_value_44;
        PyObject *tmp_expression_value_97;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_59;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_97 = tmp_class_creation_13__metaclass;
        tmp_called_value_44 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_97, mod_consts[449]);
        if (tmp_called_value_44 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_tuple_element_59 = mod_consts[109];
        tmp_args_value_31 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_59 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_13__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 812;
        tmp_assign_source_155 = CALL_FUNCTION(tstate, tmp_called_value_44, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_44);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_155 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_155;
    }
    {
        bool tmp_condition_result_69;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_98;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_98 = tmp_class_creation_13__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_98, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_operand_value_16 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_69 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_mod_expr_left_16;
        PyObject *tmp_mod_expr_right_16;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_expression_value_99;
        PyObject *tmp_name_value_49;
        PyObject *tmp_default_value_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_mod_expr_left_16 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_99 = tmp_class_creation_13__metaclass;
        tmp_name_value_49 = mod_consts[201];
        tmp_default_value_16 = mod_consts[453];
        tmp_tuple_element_60 = BUILTIN_GETATTR(tstate, tmp_expression_value_99, tmp_name_value_49, tmp_default_value_16);
        if (tmp_tuple_element_60 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        tmp_mod_expr_right_16 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_100;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_mod_expr_right_16, 0, tmp_tuple_element_60);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_32 = tmp_class_creation_13__prepared;
            tmp_expression_value_100 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_100 == NULL));
            tmp_tuple_element_60 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_100, mod_consts[201]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_tuple_element_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 812;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_16, 1, tmp_tuple_element_60);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_mod_expr_right_16);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_16, tmp_mod_expr_right_16);
        Py_DECREF(tmp_mod_expr_right_16);
        if (tmp_raise_value_16 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_46;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 812;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_46;
    }
    branch_no_47:;
    goto branch_end_46;
    branch_no_46:;
    {
        PyObject *tmp_assign_source_156;
        tmp_assign_source_156 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_156;
    }
    branch_end_46:;
    {
        PyObject *tmp_assign_source_157;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_16 = tmp_class_creation_13__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[537];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[109];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_48;
        }
        frame_c33964dacf05de3b8e27bb7381d65481_17 = MAKE_CLASS_FRAME(tstate, codeobj_c33964dacf05de3b8e27bb7381d65481, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_c33964dacf05de3b8e27bb7381d65481_17);
        assert(Py_REFCNT(frame_c33964dacf05de3b8e27bb7381d65481_17) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[108];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 831;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = mod_consts[538];
            Py_INCREF(tmp_defaults_6);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(tmp_defaults_6);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 833;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 848;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32__resolve_for_literal();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[399], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 851;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            nuitka_bool tmp_condition_result_70;
            PyObject *tmp_called_value_45;
            PyObject *tmp_args_element_value_15;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_element_value_16;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 858;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_condition_result_70 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_23;
            } else {
                goto condexpr_false_23;
            }
            condexpr_true_23:;
            tmp_called_value_45 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[458]);

            if (unlikely(tmp_called_value_45 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 858;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_called_value_45 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 858;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }


            tmp_args_element_value_15 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33_python_type();

            frame_c33964dacf05de3b8e27bb7381d65481_17->m_frame.f_lineno = 858;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_45, tmp_args_element_value_15);
            Py_DECREF(tmp_called_value_45);
            Py_DECREF(tmp_args_element_value_15);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 858;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            goto condexpr_end_23;
            condexpr_false_23:;
            tmp_called_value_46 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_16 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33_python_type();

            frame_c33964dacf05de3b8e27bb7381d65481_17->m_frame.f_lineno = 858;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_46, tmp_args_element_value_16);
            Py_DECREF(tmp_args_element_value_16);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 858;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            condexpr_end_23:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 859;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_value_17;
            tmp_called_instance_8 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[43]);

            if (tmp_called_instance_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_8 == NULL)) {
                        tmp_called_instance_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_8 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 862;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_called_instance_8);
                } else {
                    goto frame_exception_exit_17;
                }
            }



            tmp_args_element_value_17 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34__expression_adaptations();

            frame_c33964dacf05de3b8e27bb7381d65481_17->m_frame.f_lineno = 862;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_8, mod_consts[512], tmp_args_element_value_17);
            Py_DECREF(tmp_called_instance_8);
            Py_DECREF(tmp_args_element_value_17);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 862;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 863;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_16;
        frame_exception_exit_17:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c33964dacf05de3b8e27bb7381d65481_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c33964dacf05de3b8e27bb7381d65481_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c33964dacf05de3b8e27bb7381d65481_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c33964dacf05de3b8e27bb7381d65481_17,
            type_description_2,
            outline_15_var___class__
        );



        assertFrameObject(frame_c33964dacf05de3b8e27bb7381d65481_17);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_16;
        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_48;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_71;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_71 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_71 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 812;

                goto try_except_handler_48;
            }
            if (tmp_condition_result_71 == NUITKA_BOOL_TRUE) {
                goto branch_yes_48;
            } else {
                goto branch_no_48;
            }
        }
        branch_yes_48:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;

            goto try_except_handler_48;
        }
        branch_no_48:;
        {
            PyObject *tmp_assign_source_158;
            PyObject *tmp_called_value_47;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_61;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_47 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_61 = mod_consts[109];
            tmp_args_value_32 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_61);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_61 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_61);
            tmp_tuple_element_61 = locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_61);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_13__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 812;
            tmp_assign_source_158 = CALL_FUNCTION(tstate, tmp_called_value_47, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_158 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 812;

                goto try_except_handler_48;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_158;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_157 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_157);
        goto try_return_handler_48;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_48:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812);
        locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812 = NULL;
        goto try_return_handler_47;
        // Exception handler code:
        try_except_handler_48:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812);
        locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_812 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto try_except_handler_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_47 = exception_type;
        exception_keeper_value_47 = exception_value;
        exception_keeper_tb_47 = exception_tb;
        exception_keeper_lineno_47 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;
        exception_lineno = exception_keeper_lineno_47;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 812;
        goto try_except_handler_46;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109], tmp_assign_source_157);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_tuple_element_62;
        tmp_tuple_element_62 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_62 == NULL)) {
            tmp_tuple_element_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_assign_source_159 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_159, 0, tmp_tuple_element_62);
        tmp_tuple_element_62 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_62 == NULL)) {
            tmp_tuple_element_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto tuple_build_exception_21;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_159, 1, tmp_tuple_element_62);
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_assign_source_159);
        goto try_except_handler_49;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_160 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_160 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_160;
    }
    {
        PyObject *tmp_assign_source_161;
        tmp_assign_source_161 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_161;
    }
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_metaclass_value_17;
        nuitka_bool tmp_condition_result_72;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_101;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_17;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_17 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_condition_result_72 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_101 = tmp_class_creation_14__bases;
        tmp_subscript_value_17 = mod_consts[52];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_101, tmp_subscript_value_17, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_24:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_17 = tmp_class_creation_14__bases;
        tmp_assign_source_162 = SELECT_METACLASS(tstate, tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_162 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_162;
    }
    {
        bool tmp_condition_result_73;
        PyObject *tmp_expression_value_102;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_102 = tmp_class_creation_14__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_102, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_condition_result_73 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_73 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    {
        PyObject *tmp_assign_source_163;
        PyObject *tmp_called_value_48;
        PyObject *tmp_expression_value_103;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_63;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_103 = tmp_class_creation_14__metaclass;
        tmp_called_value_48 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_103, mod_consts[449]);
        if (tmp_called_value_48 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_tuple_element_63 = mod_consts[76];
        tmp_args_value_33 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_63);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_63 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_63);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_14__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 874;
        tmp_assign_source_163 = CALL_FUNCTION(tstate, tmp_called_value_48, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_48);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_163 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_163;
    }
    {
        bool tmp_condition_result_74;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_104;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_104 = tmp_class_creation_14__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_104, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_operand_value_17 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        assert(!(tmp_res == -1));
        tmp_condition_result_74 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_74 != false) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_mod_expr_left_17;
        PyObject *tmp_mod_expr_right_17;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_expression_value_105;
        PyObject *tmp_name_value_50;
        PyObject *tmp_default_value_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_mod_expr_left_17 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_105 = tmp_class_creation_14__metaclass;
        tmp_name_value_50 = mod_consts[201];
        tmp_default_value_17 = mod_consts[453];
        tmp_tuple_element_64 = BUILTIN_GETATTR(tstate, tmp_expression_value_105, tmp_name_value_50, tmp_default_value_17);
        if (tmp_tuple_element_64 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        tmp_mod_expr_right_17 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_106;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_mod_expr_right_17, 0, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_34 = tmp_class_creation_14__prepared;
            tmp_expression_value_106 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_106 == NULL));
            tmp_tuple_element_64 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_106, mod_consts[201]);
            Py_DECREF(tmp_expression_value_106);
            if (tmp_tuple_element_64 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 874;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_17, 1, tmp_tuple_element_64);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_mod_expr_right_17);
        goto try_except_handler_49;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_17, tmp_mod_expr_right_17);
        Py_DECREF(tmp_mod_expr_right_17);
        if (tmp_raise_value_17 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_49;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 874;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_49;
    }
    branch_no_50:;
    goto branch_end_49;
    branch_no_49:;
    {
        PyObject *tmp_assign_source_164;
        tmp_assign_source_164 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_164;
    }
    branch_end_49:;
    {
        PyObject *tmp_assign_source_165;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_17 = tmp_class_creation_14__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[544];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[76];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_51;
        }
        frame_733436556b4801d5a2c36025fb0cf1c6_18 = MAKE_CLASS_FRAME(tstate, codeobj_733436556b4801d5a2c36025fb0cf1c6, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_733436556b4801d5a2c36025fb0cf1c6_18);
        assert(Py_REFCNT(frame_733436556b4801d5a2c36025fb0cf1c6_18) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[110];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 878;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 880;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            nuitka_bool tmp_condition_result_75;
            PyObject *tmp_called_value_49;
            PyObject *tmp_args_element_value_18;
            PyObject *tmp_called_value_50;
            PyObject *tmp_args_element_value_19;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_condition_result_75 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_25;
            } else {
                goto condexpr_false_25;
            }
            condexpr_true_25:;
            tmp_called_value_49 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[458]);

            if (unlikely(tmp_called_value_49 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 883;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_called_value_49 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }


            tmp_args_element_value_18 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36_python_type();

            frame_733436556b4801d5a2c36025fb0cf1c6_18->m_frame.f_lineno = 883;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_49, tmp_args_element_value_18);
            Py_DECREF(tmp_called_value_49);
            Py_DECREF(tmp_args_element_value_18);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            goto condexpr_end_25;
            condexpr_false_25:;
            tmp_called_value_50 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_19 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36_python_type();

            frame_733436556b4801d5a2c36025fb0cf1c6_18->m_frame.f_lineno = 883;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_50, tmp_args_element_value_19);
            Py_DECREF(tmp_args_element_value_19);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            condexpr_end_25:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 884;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_args_element_value_20;
            tmp_called_instance_9 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[43]);

            if (tmp_called_instance_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_9 == NULL)) {
                        tmp_called_instance_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_9 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 887;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_called_instance_9);
                } else {
                    goto frame_exception_exit_18;
                }
            }



            tmp_args_element_value_20 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37__expression_adaptations();

            frame_733436556b4801d5a2c36025fb0cf1c6_18->m_frame.f_lineno = 887;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_9, mod_consts[512], tmp_args_element_value_20);
            Py_DECREF(tmp_called_instance_9);
            Py_DECREF(tmp_args_element_value_20);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 887;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_17;
        frame_exception_exit_18:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_733436556b4801d5a2c36025fb0cf1c6_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_733436556b4801d5a2c36025fb0cf1c6_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_733436556b4801d5a2c36025fb0cf1c6_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_733436556b4801d5a2c36025fb0cf1c6_18,
            type_description_2,
            outline_16_var___class__
        );



        assertFrameObject(frame_733436556b4801d5a2c36025fb0cf1c6_18);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_17;
        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_51;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_76;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_76 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_76 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 874;

                goto try_except_handler_51;
            }
            if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
                goto branch_yes_51;
            } else {
                goto branch_no_51;
            }
        }
        branch_yes_51:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;

            goto try_except_handler_51;
        }
        branch_no_51:;
        {
            PyObject *tmp_assign_source_166;
            PyObject *tmp_called_value_51;
            PyObject *tmp_args_value_34;
            PyObject *tmp_tuple_element_65;
            PyObject *tmp_kwargs_value_34;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_51 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_65 = mod_consts[76];
            tmp_args_value_34 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_65 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_65);
            tmp_tuple_element_65 = locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874;
            PyTuple_SET_ITEM0(tmp_args_value_34, 2, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_34 = tmp_class_creation_14__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 874;
            tmp_assign_source_166 = CALL_FUNCTION(tstate, tmp_called_value_51, tmp_args_value_34, tmp_kwargs_value_34);
            Py_DECREF(tmp_args_value_34);
            if (tmp_assign_source_166 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 874;

                goto try_except_handler_51;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_166;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_assign_source_165 = outline_16_var___class__;
        Py_INCREF(tmp_assign_source_165);
        goto try_return_handler_51;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_51:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874);
        locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874 = NULL;
        goto try_return_handler_50;
        // Exception handler code:
        try_except_handler_51:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874);
        locals_sqlalchemy$sql$sqltypes$$$class__17_Date_874 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto try_except_handler_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_50 = exception_type;
        exception_keeper_value_50 = exception_value;
        exception_keeper_tb_50 = exception_tb;
        exception_keeper_lineno_50 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;
        exception_lineno = exception_keeper_lineno_50;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 874;
        goto try_except_handler_49;
        outline_result_17:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76], tmp_assign_source_165);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_keeper_lineno_51 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_51;
    exception_value = exception_keeper_value_51;
    exception_tb = exception_keeper_tb_51;
    exception_lineno = exception_keeper_lineno_51;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_tuple_element_66;
        tmp_tuple_element_66 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_66 == NULL)) {
            tmp_tuple_element_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_66 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_assign_source_167 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_167, 0, tmp_tuple_element_66);
        tmp_tuple_element_66 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_66 == NULL)) {
            tmp_tuple_element_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_66 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto tuple_build_exception_23;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_167, 1, tmp_tuple_element_66);
        goto tuple_build_noexception_23;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_23:;
        Py_DECREF(tmp_assign_source_167);
        goto try_except_handler_52;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_23:;
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_167;
    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_168 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_168 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_168;
    }
    {
        PyObject *tmp_assign_source_169;
        tmp_assign_source_169 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_169;
    }
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_metaclass_value_18;
        nuitka_bool tmp_condition_result_77;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_107;
        PyObject *tmp_subscript_value_18;
        PyObject *tmp_bases_value_18;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_18 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_condition_result_77 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_107 = tmp_class_creation_15__bases;
        tmp_subscript_value_18 = mod_consts[52];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_107, tmp_subscript_value_18, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_26:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_18 = tmp_class_creation_15__bases;
        tmp_assign_source_170 = SELECT_METACLASS(tstate, tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_170 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_170;
    }
    {
        bool tmp_condition_result_78;
        PyObject *tmp_expression_value_108;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_108 = tmp_class_creation_15__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_108, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_condition_result_78 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_78 != false) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_called_value_52;
        PyObject *tmp_expression_value_109;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_kwargs_value_35;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_109 = tmp_class_creation_15__metaclass;
        tmp_called_value_52 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_109, mod_consts[449]);
        if (tmp_called_value_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_tuple_element_67 = mod_consts[111];
        tmp_args_value_35 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_67);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_67 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_67);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_35 = tmp_class_creation_15__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 912;
        tmp_assign_source_171 = CALL_FUNCTION(tstate, tmp_called_value_52, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_called_value_52);
        Py_DECREF(tmp_args_value_35);
        if (tmp_assign_source_171 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_171;
    }
    {
        bool tmp_condition_result_79;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_110;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_110 = tmp_class_creation_15__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_110, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_operand_value_18 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_79 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_79 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_mod_expr_left_18;
        PyObject *tmp_mod_expr_right_18;
        PyObject *tmp_tuple_element_68;
        PyObject *tmp_expression_value_111;
        PyObject *tmp_name_value_51;
        PyObject *tmp_default_value_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_mod_expr_left_18 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_111 = tmp_class_creation_15__metaclass;
        tmp_name_value_51 = mod_consts[201];
        tmp_default_value_18 = mod_consts[453];
        tmp_tuple_element_68 = BUILTIN_GETATTR(tstate, tmp_expression_value_111, tmp_name_value_51, tmp_default_value_18);
        if (tmp_tuple_element_68 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        tmp_mod_expr_right_18 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_112;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_mod_expr_right_18, 0, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_36 = tmp_class_creation_15__prepared;
            tmp_expression_value_112 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_112 == NULL));
            tmp_tuple_element_68 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_112, mod_consts[201]);
            Py_DECREF(tmp_expression_value_112);
            if (tmp_tuple_element_68 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;

                goto tuple_build_exception_24;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_18, 1, tmp_tuple_element_68);
        }
        goto tuple_build_noexception_24;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_24:;
        Py_DECREF(tmp_mod_expr_right_18);
        goto try_except_handler_52;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_24:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_18, tmp_mod_expr_right_18);
        Py_DECREF(tmp_mod_expr_right_18);
        if (tmp_raise_value_18 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_52;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 912;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_52;
    }
    branch_no_53:;
    goto branch_end_52;
    branch_no_52:;
    {
        PyObject *tmp_assign_source_172;
        tmp_assign_source_172 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_172;
    }
    branch_end_52:;
    {
        PyObject *tmp_assign_source_173;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_18 = tmp_class_creation_15__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[548];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[111];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_54;
        }
        frame_b5e1e0d46725f66c0a5f4cafc203c477_19 = MAKE_CLASS_FRAME(tstate, codeobj_b5e1e0d46725f66c0a5f4cafc203c477, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_b5e1e0d46725f66c0a5f4cafc203c477_19);
        assert(Py_REFCNT(frame_b5e1e0d46725f66c0a5f4cafc203c477_19) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[112];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 916;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        {
            PyObject *tmp_defaults_7;
            tmp_defaults_7 = mod_consts[538];
            Py_INCREF(tmp_defaults_7);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38___init__(tmp_defaults_7);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 918;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 921;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        {
            nuitka_bool tmp_condition_result_80;
            PyObject *tmp_called_value_53;
            PyObject *tmp_args_element_value_21;
            PyObject *tmp_called_value_54;
            PyObject *tmp_args_element_value_22;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_condition_result_80 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_27;
            } else {
                goto condexpr_false_27;
            }
            condexpr_true_27:;
            tmp_called_value_53 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[458]);

            if (unlikely(tmp_called_value_53 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }

            if (tmp_called_value_53 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }


            tmp_args_element_value_21 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40_python_type();

            frame_b5e1e0d46725f66c0a5f4cafc203c477_19->m_frame.f_lineno = 924;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_53, tmp_args_element_value_21);
            Py_DECREF(tmp_called_value_53);
            Py_DECREF(tmp_args_element_value_21);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            goto condexpr_end_27;
            condexpr_false_27:;
            tmp_called_value_54 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_22 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40_python_type();

            frame_b5e1e0d46725f66c0a5f4cafc203c477_19->m_frame.f_lineno = 924;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_54, tmp_args_element_value_22);
            Py_DECREF(tmp_args_element_value_22);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            condexpr_end_27:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 925;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41__resolve_for_literal();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[399], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 928;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        {
            PyObject *tmp_called_instance_10;
            PyObject *tmp_args_element_value_23;
            tmp_called_instance_10 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[43]);

            if (tmp_called_instance_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_10 == NULL)) {
                        tmp_called_instance_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_10 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 935;
                        type_description_2 = "o";
                        goto frame_exception_exit_19;
                    }
                    Py_INCREF(tmp_called_instance_10);
                } else {
                    goto frame_exception_exit_19;
                }
            }



            tmp_args_element_value_23 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42__expression_adaptations();

            frame_b5e1e0d46725f66c0a5f4cafc203c477_19->m_frame.f_lineno = 935;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_10, mod_consts[512], tmp_args_element_value_23);
            Py_DECREF(tmp_called_instance_10);
            Py_DECREF(tmp_args_element_value_23);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 935;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 936;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_18;
        frame_exception_exit_19:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b5e1e0d46725f66c0a5f4cafc203c477_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b5e1e0d46725f66c0a5f4cafc203c477_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b5e1e0d46725f66c0a5f4cafc203c477_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b5e1e0d46725f66c0a5f4cafc203c477_19,
            type_description_2,
            outline_17_var___class__
        );



        assertFrameObject(frame_b5e1e0d46725f66c0a5f4cafc203c477_19);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_18;
        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_54;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_81;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_81 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_81 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;

                goto try_except_handler_54;
            }
            if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
                goto branch_yes_54;
            } else {
                goto branch_no_54;
            }
        }
        branch_yes_54:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 912;

            goto try_except_handler_54;
        }
        branch_no_54:;
        {
            PyObject *tmp_assign_source_174;
            PyObject *tmp_called_value_55;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_69;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_55 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_69 = mod_consts[111];
            tmp_args_value_36 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_69);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_69 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_69);
            tmp_tuple_element_69 = locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_69);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_15__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 912;
            tmp_assign_source_174 = CALL_FUNCTION(tstate, tmp_called_value_55, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_174 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;

                goto try_except_handler_54;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_174;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_173 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_173);
        goto try_return_handler_54;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_54:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912);
        locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912 = NULL;
        goto try_return_handler_53;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912);
        locals_sqlalchemy$sql$sqltypes$$$class__18_Time_912 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto try_except_handler_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 912;
        goto try_except_handler_52;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111], tmp_assign_source_173);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_keeper_lineno_54 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_54;
    exception_value = exception_keeper_value_54;
    exception_tb = exception_keeper_tb_54;
    exception_lineno = exception_keeper_lineno_54;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_tuple_element_70;
        tmp_tuple_element_70 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_70 == NULL)) {
            tmp_tuple_element_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_70 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_assign_source_175 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_175, 0, tmp_tuple_element_70);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_175;
    }
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_176 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_176 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_176;
    }
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_177;
    }
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_metaclass_value_19;
        nuitka_bool tmp_condition_result_82;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_113;
        PyObject *tmp_subscript_value_19;
        PyObject *tmp_bases_value_19;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_19 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_condition_result_82 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_113 = tmp_class_creation_16__bases;
        tmp_subscript_value_19 = mod_consts[52];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_113, tmp_subscript_value_19, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_28:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_19 = tmp_class_creation_16__bases;
        tmp_assign_source_178 = SELECT_METACLASS(tstate, tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_178 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_178;
    }
    {
        bool tmp_condition_result_83;
        PyObject *tmp_expression_value_114;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_114 = tmp_class_creation_16__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_114, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_condition_result_83 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_83 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_assign_source_179;
        PyObject *tmp_called_value_56;
        PyObject *tmp_expression_value_115;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_115 = tmp_class_creation_16__metaclass;
        tmp_called_value_56 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_115, mod_consts[449]);
        if (tmp_called_value_56 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_tuple_element_71 = mod_consts[123];
        tmp_args_value_37 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_71);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_71 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_71);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_16__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 946;
        tmp_assign_source_179 = CALL_FUNCTION(tstate, tmp_called_value_56, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_56);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_179 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_179;
    }
    {
        bool tmp_condition_result_84;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_116;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_116 = tmp_class_creation_16__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_116, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_operand_value_19 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_84 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_84 != false) {
            goto branch_yes_56;
        } else {
            goto branch_no_56;
        }
    }
    branch_yes_56:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_mod_expr_left_19;
        PyObject *tmp_mod_expr_right_19;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_expression_value_117;
        PyObject *tmp_name_value_52;
        PyObject *tmp_default_value_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_mod_expr_left_19 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_117 = tmp_class_creation_16__metaclass;
        tmp_name_value_52 = mod_consts[201];
        tmp_default_value_19 = mod_consts[453];
        tmp_tuple_element_72 = BUILTIN_GETATTR(tstate, tmp_expression_value_117, tmp_name_value_52, tmp_default_value_19);
        if (tmp_tuple_element_72 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        tmp_mod_expr_right_19 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_118;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_mod_expr_right_19, 0, tmp_tuple_element_72);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_38 = tmp_class_creation_16__prepared;
            tmp_expression_value_118 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_118 == NULL));
            tmp_tuple_element_72 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_118, mod_consts[201]);
            Py_DECREF(tmp_expression_value_118);
            if (tmp_tuple_element_72 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 946;

                goto tuple_build_exception_25;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_19, 1, tmp_tuple_element_72);
        }
        goto tuple_build_noexception_25;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_25:;
        Py_DECREF(tmp_mod_expr_right_19);
        goto try_except_handler_55;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_25:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_19, tmp_mod_expr_right_19);
        Py_DECREF(tmp_mod_expr_right_19);
        if (tmp_raise_value_19 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_55;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 946;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_55;
    }
    branch_no_56:;
    goto branch_end_55;
    branch_no_55:;
    {
        PyObject *tmp_assign_source_180;
        tmp_assign_source_180 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_180;
    }
    branch_end_55:;
    {
        PyObject *tmp_assign_source_181;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_19 = tmp_class_creation_16__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[554];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[123];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_57;
        }
        frame_6525230dd834556a5ea96a0e502bf46d_20 = MAKE_CLASS_FRAME(tstate, codeobj_6525230dd834556a5ea96a0e502bf46d, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_6525230dd834556a5ea96a0e502bf46d_20);
        assert(Py_REFCNT(frame_6525230dd834556a5ea96a0e502bf46d_20) == 2);

        // Framed code:
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = mod_consts[278];
            Py_INCREF(tmp_defaults_8);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43___init__(tmp_defaults_8);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 950;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 953;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            nuitka_bool tmp_condition_result_85;
            PyObject *tmp_called_value_57;
            PyObject *tmp_args_element_value_24;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_element_value_25;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 960;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_condition_result_85 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_29;
            } else {
                goto condexpr_false_29;
            }
            condexpr_true_29:;
            tmp_called_value_57 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[458]);

            if (unlikely(tmp_called_value_57 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 960;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_called_value_57 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 960;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }


            tmp_args_element_value_24 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_python_type();

            frame_6525230dd834556a5ea96a0e502bf46d_20->m_frame.f_lineno = 960;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_57, tmp_args_element_value_24);
            Py_DECREF(tmp_called_value_57);
            Py_DECREF(tmp_args_element_value_24);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 960;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            goto condexpr_end_29;
            condexpr_false_29:;
            tmp_called_value_58 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_25 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_python_type();

            frame_6525230dd834556a5ea96a0e502bf46d_20->m_frame.f_lineno = 960;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_58, tmp_args_element_value_25);
            Py_DECREF(tmp_args_element_value_25);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 960;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            condexpr_end_29:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 961;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            nuitka_bool tmp_condition_result_86;
            PyObject *tmp_expression_value_119;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_20;
            tmp_expression_value_119 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[43]);

            if (tmp_expression_value_119 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_119 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_119 == NULL)) {
                        tmp_expression_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_expression_value_119 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 983;
                        type_description_2 = "o";
                        goto frame_exception_exit_20;
                    }
                    Py_INCREF(tmp_expression_value_119);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_119, mod_consts[559]);
            Py_DECREF(tmp_expression_value_119);
            if (tmp_attribute_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 983;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_truth_name_20 = CHECK_IF_TRUE(tmp_attribute_value_1);
            if (tmp_truth_name_20 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_attribute_value_1);

                exception_lineno = 983;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_condition_result_86 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_attribute_value_1);
            if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
                goto branch_yes_57;
            } else {
                goto branch_no_57;
            }
        }
        branch_yes_57:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 985;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        goto branch_end_57;
        branch_no_57:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 990;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        branch_end_57:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49_coerce_compared_value();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[124], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 998;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1006;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_19;
        frame_exception_exit_20:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6525230dd834556a5ea96a0e502bf46d_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6525230dd834556a5ea96a0e502bf46d_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6525230dd834556a5ea96a0e502bf46d_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6525230dd834556a5ea96a0e502bf46d_20,
            type_description_2,
            outline_18_var___class__
        );



        assertFrameObject(frame_6525230dd834556a5ea96a0e502bf46d_20);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_19;
        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_57;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_87;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_87 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_87 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 946;

                goto try_except_handler_57;
            }
            if (tmp_condition_result_87 == NUITKA_BOOL_TRUE) {
                goto branch_yes_58;
            } else {
                goto branch_no_58;
            }
        }
        branch_yes_58:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;

            goto try_except_handler_57;
        }
        branch_no_58:;
        {
            PyObject *tmp_assign_source_182;
            PyObject *tmp_called_value_59;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_73;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_59 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_73 = mod_consts[123];
            tmp_args_value_38 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_73 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_73);
            tmp_tuple_element_73 = locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_16__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 946;
            tmp_assign_source_182 = CALL_FUNCTION(tstate, tmp_called_value_59, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_182 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 946;

                goto try_except_handler_57;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_182;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_assign_source_181 = outline_18_var___class__;
        Py_INCREF(tmp_assign_source_181);
        goto try_return_handler_57;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_57:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946);
        locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946 = NULL;
        goto try_return_handler_56;
        // Exception handler code:
        try_except_handler_57:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946);
        locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_946 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto try_except_handler_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_56 = exception_type;
        exception_keeper_value_56 = exception_value;
        exception_keeper_tb_56 = exception_tb;
        exception_keeper_lineno_56 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;
        exception_lineno = exception_keeper_lineno_56;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 946;
        goto try_except_handler_55;
        outline_result_19:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123], tmp_assign_source_181);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_keeper_lineno_57 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_57;
    exception_value = exception_keeper_value_57;
    exception_tb = exception_keeper_tb_57;
    exception_lineno = exception_keeper_lineno_57;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_tuple_element_74;
        tmp_tuple_element_74 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123]);

        if (unlikely(tmp_tuple_element_74 == NULL)) {
            tmp_tuple_element_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[123]);
        }

        if (tmp_tuple_element_74 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_assign_source_183 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_183, 0, tmp_tuple_element_74);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_183;
    }
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_184 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_184 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_184;
    }
    {
        PyObject *tmp_assign_source_185;
        tmp_assign_source_185 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_185;
    }
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_metaclass_value_20;
        nuitka_bool tmp_condition_result_88;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_120;
        PyObject *tmp_subscript_value_20;
        PyObject *tmp_bases_value_20;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_21 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_condition_result_88 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_120 = tmp_class_creation_17__bases;
        tmp_subscript_value_20 = mod_consts[52];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_120, tmp_subscript_value_20, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_30:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_20 = tmp_class_creation_17__bases;
        tmp_assign_source_186 = SELECT_METACLASS(tstate, tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_186 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_186;
    }
    {
        bool tmp_condition_result_89;
        PyObject *tmp_expression_value_121;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_121 = tmp_class_creation_17__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_121, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_condition_result_89 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_89 != false) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_called_value_60;
        PyObject *tmp_expression_value_122;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_122 = tmp_class_creation_17__metaclass;
        tmp_called_value_60 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_122, mod_consts[449]);
        if (tmp_called_value_60 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_tuple_element_75 = mod_consts[563];
        tmp_args_value_39 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_75 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_17__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1010;
        tmp_assign_source_187 = CALL_FUNCTION(tstate, tmp_called_value_60, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_60);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_187 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_187;
    }
    {
        bool tmp_condition_result_90;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_123;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_123 = tmp_class_creation_17__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_123, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_operand_value_20 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        assert(!(tmp_res == -1));
        tmp_condition_result_90 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_90 != false) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_mod_expr_left_20;
        PyObject *tmp_mod_expr_right_20;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_expression_value_124;
        PyObject *tmp_name_value_53;
        PyObject *tmp_default_value_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_mod_expr_left_20 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_124 = tmp_class_creation_17__metaclass;
        tmp_name_value_53 = mod_consts[201];
        tmp_default_value_20 = mod_consts[453];
        tmp_tuple_element_76 = BUILTIN_GETATTR(tstate, tmp_expression_value_124, tmp_name_value_53, tmp_default_value_20);
        if (tmp_tuple_element_76 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        tmp_mod_expr_right_20 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_125;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_mod_expr_right_20, 0, tmp_tuple_element_76);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_40 = tmp_class_creation_17__prepared;
            tmp_expression_value_125 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_125 == NULL));
            tmp_tuple_element_76 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_125, mod_consts[201]);
            Py_DECREF(tmp_expression_value_125);
            if (tmp_tuple_element_76 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1010;

                goto tuple_build_exception_26;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_20, 1, tmp_tuple_element_76);
        }
        goto tuple_build_noexception_26;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_26:;
        Py_DECREF(tmp_mod_expr_right_20);
        goto try_except_handler_58;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_26:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_20, tmp_mod_expr_right_20);
        Py_DECREF(tmp_mod_expr_right_20);
        if (tmp_raise_value_20 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_58;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 1010;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_58;
    }
    branch_no_60:;
    goto branch_end_59;
    branch_no_59:;
    {
        PyObject *tmp_assign_source_188;
        tmp_assign_source_188 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_188;
    }
    branch_end_59:;
    {
        PyObject *tmp_assign_source_189;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_20 = tmp_class_creation_17__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[564];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[563];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_60;
        }
        frame_f8f3ab6c748eca6533ae055e87cb8240_21 = MAKE_CLASS_FRAME(tstate, codeobj_f8f3ab6c748eca6533ae055e87cb8240, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_f8f3ab6c748eca6533ae055e87cb8240_21);
        assert(Py_REFCNT(frame_f8f3ab6c748eca6533ae055e87cb8240_21) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[565];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1020;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_defaults_9;
            tmp_defaults_9 = mod_consts[278];
            Py_INCREF(tmp_defaults_9);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(tmp_defaults_9);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1022;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_20;
        frame_exception_exit_21:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f8f3ab6c748eca6533ae055e87cb8240_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f8f3ab6c748eca6533ae055e87cb8240_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f8f3ab6c748eca6533ae055e87cb8240_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f8f3ab6c748eca6533ae055e87cb8240_21,
            type_description_2,
            outline_19_var___class__
        );



        assertFrameObject(frame_f8f3ab6c748eca6533ae055e87cb8240_21);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_20;
        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_60;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_91;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_91 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_91 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1010;

                goto try_except_handler_60;
            }
            if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
                goto branch_yes_61;
            } else {
                goto branch_no_61;
            }
        }
        branch_yes_61:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;

            goto try_except_handler_60;
        }
        branch_no_61:;
        {
            PyObject *tmp_assign_source_190;
            PyObject *tmp_called_value_61;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_77;
            PyObject *tmp_kwargs_value_40;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_61 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_77 = mod_consts[563];
            tmp_args_value_40 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_77 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_77);
            tmp_tuple_element_77 = locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_40 = tmp_class_creation_17__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1010;
            tmp_assign_source_190 = CALL_FUNCTION(tstate, tmp_called_value_61, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_190 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1010;

                goto try_except_handler_60;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_190;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_189 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_189);
        goto try_return_handler_60;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010);
        locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010 = NULL;
        goto try_return_handler_59;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010);
        locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_1010 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto try_except_handler_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_59 = exception_type;
        exception_keeper_value_59 = exception_value;
        exception_keeper_tb_59 = exception_tb;
        exception_keeper_lineno_59 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;
        exception_lineno = exception_keeper_lineno_59;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 1010;
        goto try_except_handler_58;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[563], tmp_assign_source_189);
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_58:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_keeper_lineno_60 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_60;
    exception_value = exception_keeper_value_60;
    exception_tb = exception_keeper_tb_60;
    exception_lineno = exception_keeper_lineno_60;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_tuple_element_78;
        tmp_tuple_element_78 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[376]);

        if (unlikely(tmp_tuple_element_78 == NULL)) {
            tmp_tuple_element_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[376]);
        }

        if (tmp_tuple_element_78 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_assign_source_191 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_191, 0, tmp_tuple_element_78);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_191;
    }
    {
        PyObject *tmp_assign_source_192;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_192 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_192 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_192;
    }
    {
        PyObject *tmp_assign_source_193;
        tmp_assign_source_193 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_193;
    }
    {
        PyObject *tmp_assign_source_194;
        PyObject *tmp_metaclass_value_21;
        nuitka_bool tmp_condition_result_92;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_126;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_21;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_22 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_condition_result_92 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_126 = tmp_class_creation_18__bases;
        tmp_subscript_value_21 = mod_consts[52];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_126, tmp_subscript_value_21, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        goto condexpr_end_31;
        condexpr_false_31:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_21 = tmp_class_creation_18__bases;
        tmp_assign_source_194 = SELECT_METACLASS(tstate, tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_194 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_194;
    }
    {
        bool tmp_condition_result_93;
        PyObject *tmp_expression_value_127;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_127 = tmp_class_creation_18__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_127, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_condition_result_93 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_93 != false) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_assign_source_195;
        PyObject *tmp_called_value_62;
        PyObject *tmp_expression_value_128;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_79;
        PyObject *tmp_kwargs_value_41;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_128 = tmp_class_creation_18__metaclass;
        tmp_called_value_62 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_128, mod_consts[449]);
        if (tmp_called_value_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_tuple_element_79 = mod_consts[159];
        tmp_args_value_41 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_79);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_79 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_79);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_41 = tmp_class_creation_18__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1034;
        tmp_assign_source_195 = CALL_FUNCTION(tstate, tmp_called_value_62, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_called_value_62);
        Py_DECREF(tmp_args_value_41);
        if (tmp_assign_source_195 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_195;
    }
    {
        bool tmp_condition_result_94;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_129;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_129 = tmp_class_creation_18__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_129, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_operand_value_21 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_94 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_94 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_mod_expr_left_21;
        PyObject *tmp_mod_expr_right_21;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_expression_value_130;
        PyObject *tmp_name_value_54;
        PyObject *tmp_default_value_21;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_mod_expr_left_21 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_130 = tmp_class_creation_18__metaclass;
        tmp_name_value_54 = mod_consts[201];
        tmp_default_value_21 = mod_consts[453];
        tmp_tuple_element_80 = BUILTIN_GETATTR(tstate, tmp_expression_value_130, tmp_name_value_54, tmp_default_value_21);
        if (tmp_tuple_element_80 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        tmp_mod_expr_right_21 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_131;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_mod_expr_right_21, 0, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_42 = tmp_class_creation_18__prepared;
            tmp_expression_value_131 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_131 == NULL));
            tmp_tuple_element_80 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_131, mod_consts[201]);
            Py_DECREF(tmp_expression_value_131);
            if (tmp_tuple_element_80 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1034;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_21, 1, tmp_tuple_element_80);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_mod_expr_right_21);
        goto try_except_handler_61;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_21, tmp_mod_expr_right_21);
        Py_DECREF(tmp_mod_expr_right_21);
        if (tmp_raise_value_21 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_61;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_21;
        exception_lineno = 1034;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_61;
    }
    branch_no_63:;
    goto branch_end_62;
    branch_no_62:;
    {
        PyObject *tmp_assign_source_196;
        tmp_assign_source_196 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_196;
    }
    branch_end_62:;
    {
        PyObject *tmp_assign_source_197;
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_21 = tmp_class_creation_18__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_63;
        }
        tmp_dictset_value = mod_consts[567];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_63;
        }
        tmp_dictset_value = mod_consts[159];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_63;
        }
        frame_62856119e973c2139b9d90410c2122c0_22 = MAKE_CLASS_FRAME(tstate, codeobj_62856119e973c2139b9d90410c2122c0, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_62856119e973c2139b9d90410c2122c0_22);
        assert(Py_REFCNT(frame_62856119e973c2139b9d90410c2122c0_22) == 2);

        // Framed code:
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[568], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_defaults_10;
            tmp_defaults_10 = mod_consts[569];
            Py_INCREF(tmp_defaults_10);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52___init__(tmp_defaults_10);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1059;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[377], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1089;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[149], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1092;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[142], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1100;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[145], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[152], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            nuitka_bool tmp_condition_result_95;
            PyObject *tmp_called_value_63;
            PyObject *tmp_args_element_value_26;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_element_value_27;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1161;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_condition_result_95 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_95 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_32;
            } else {
                goto condexpr_false_32;
            }
            condexpr_true_32:;
            tmp_called_value_63 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[458]);

            if (unlikely(tmp_called_value_63 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1161;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_called_value_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1161;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }


            tmp_args_element_value_26 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();

            frame_62856119e973c2139b9d90410c2122c0_22->m_frame.f_lineno = 1161;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_63, tmp_args_element_value_26);
            Py_DECREF(tmp_called_value_63);
            Py_DECREF(tmp_args_element_value_26);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1161;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            goto condexpr_end_32;
            condexpr_false_32:;
            tmp_called_value_64 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_27 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();

            frame_62856119e973c2139b9d90410c2122c0_22->m_frame.f_lineno = 1161;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_64, tmp_args_element_value_27);
            Py_DECREF(tmp_args_element_value_27);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1161;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            condexpr_end_32:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[156], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1162;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            PyObject *tmp_defaults_11;
            tmp_defaults_11 = mod_consts[577];
            Py_INCREF(tmp_defaults_11);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(tmp_defaults_11);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[160], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1165;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            PyObject *tmp_defaults_12;
            tmp_defaults_12 = mod_consts[577];
            Py_INCREF(tmp_defaults_12);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(tmp_defaults_12);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[163], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1174;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[150], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1183;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[151], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[138], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1199;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[140], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1207;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[165], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1215;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_21;
        frame_exception_exit_22:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_62856119e973c2139b9d90410c2122c0_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_62856119e973c2139b9d90410c2122c0_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_62856119e973c2139b9d90410c2122c0_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_62856119e973c2139b9d90410c2122c0_22,
            type_description_2,
            outline_20_var___class__
        );



        assertFrameObject(frame_62856119e973c2139b9d90410c2122c0_22);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_21;
        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_63;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_96 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_96 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1034;

                goto try_except_handler_63;
            }
            if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
                goto branch_yes_64;
            } else {
                goto branch_no_64;
            }
        }
        branch_yes_64:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;

            goto try_except_handler_63;
        }
        branch_no_64:;
        {
            PyObject *tmp_assign_source_198;
            PyObject *tmp_called_value_65;
            PyObject *tmp_args_value_42;
            PyObject *tmp_tuple_element_81;
            PyObject *tmp_kwargs_value_42;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_65 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_81 = mod_consts[159];
            tmp_args_value_42 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_81 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_81);
            tmp_tuple_element_81 = locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034;
            PyTuple_SET_ITEM0(tmp_args_value_42, 2, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_42 = tmp_class_creation_18__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1034;
            tmp_assign_source_198 = CALL_FUNCTION(tstate, tmp_called_value_65, tmp_args_value_42, tmp_kwargs_value_42);
            Py_DECREF(tmp_args_value_42);
            if (tmp_assign_source_198 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1034;

                goto try_except_handler_63;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_198;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_assign_source_197 = outline_20_var___class__;
        Py_INCREF(tmp_assign_source_197);
        goto try_return_handler_63;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_63:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034);
        locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034 = NULL;
        goto try_return_handler_62;
        // Exception handler code:
        try_except_handler_63:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034);
        locals_sqlalchemy$sql$sqltypes$$$class__21_SchemaType_1034 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto try_except_handler_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_62:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_62 = exception_type;
        exception_keeper_value_62 = exception_value;
        exception_keeper_tb_62 = exception_tb;
        exception_keeper_lineno_62 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;
        exception_lineno = exception_keeper_lineno_62;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 1034;
        goto try_except_handler_61;
        outline_result_21:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159], tmp_assign_source_197);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_keeper_lineno_63 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_63;
    exception_value = exception_keeper_value_63;
    exception_tb = exception_keeper_tb_63;
    exception_lineno = exception_keeper_lineno_63;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_199;
        PyObject *tmp_tuple_element_82;
        tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[429]);

        if (unlikely(tmp_tuple_element_82 == NULL)) {
            tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[429]);
        }

        if (tmp_tuple_element_82 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_assign_source_199 = MAKE_TUPLE_EMPTY(3);
        PyTuple_SET_ITEM0(tmp_assign_source_199, 0, tmp_tuple_element_82);
        tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_tuple_element_82 == NULL)) {
            tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_tuple_element_82 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto tuple_build_exception_28;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_199, 1, tmp_tuple_element_82);
        tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_tuple_element_82 == NULL)) {
            tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_tuple_element_82 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto tuple_build_exception_28;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_199, 2, tmp_tuple_element_82);
        goto tuple_build_noexception_28;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_28:;
        Py_DECREF(tmp_assign_source_199);
        goto try_except_handler_64;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_28:;
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_199;
    }
    {
        PyObject *tmp_assign_source_200;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_200 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_200 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_200;
    }
    {
        PyObject *tmp_assign_source_201;
        tmp_assign_source_201 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_201;
    }
    {
        PyObject *tmp_assign_source_202;
        PyObject *tmp_metaclass_value_22;
        nuitka_bool tmp_condition_result_97;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_132;
        PyObject *tmp_subscript_value_22;
        PyObject *tmp_bases_value_22;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_23 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_condition_result_97 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_132 = tmp_class_creation_19__bases;
        tmp_subscript_value_22 = mod_consts[52];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_132, tmp_subscript_value_22, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        goto condexpr_end_33;
        condexpr_false_33:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_22 = tmp_class_creation_19__bases;
        tmp_assign_source_202 = SELECT_METACLASS(tstate, tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_202 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_202;
    }
    {
        bool tmp_condition_result_98;
        PyObject *tmp_expression_value_133;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_133 = tmp_class_creation_19__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_133, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_condition_result_98 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_98 != false) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    {
        PyObject *tmp_assign_source_203;
        PyObject *tmp_called_value_66;
        PyObject *tmp_expression_value_134;
        PyObject *tmp_args_value_43;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_kwargs_value_43;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_134 = tmp_class_creation_19__metaclass;
        tmp_called_value_66 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_134, mod_consts[449]);
        if (tmp_called_value_66 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_tuple_element_83 = mod_consts[199];
        tmp_args_value_43 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_83 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_43 = tmp_class_creation_19__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1235;
        tmp_assign_source_203 = CALL_FUNCTION(tstate, tmp_called_value_66, tmp_args_value_43, tmp_kwargs_value_43);
        Py_DECREF(tmp_called_value_66);
        Py_DECREF(tmp_args_value_43);
        if (tmp_assign_source_203 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_203;
    }
    {
        bool tmp_condition_result_99;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_135;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_135 = tmp_class_creation_19__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_135, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_operand_value_22 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_99 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_99 != false) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_mod_expr_left_22;
        PyObject *tmp_mod_expr_right_22;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_expression_value_136;
        PyObject *tmp_name_value_55;
        PyObject *tmp_default_value_22;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_mod_expr_left_22 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_136 = tmp_class_creation_19__metaclass;
        tmp_name_value_55 = mod_consts[201];
        tmp_default_value_22 = mod_consts[453];
        tmp_tuple_element_84 = BUILTIN_GETATTR(tstate, tmp_expression_value_136, tmp_name_value_55, tmp_default_value_22);
        if (tmp_tuple_element_84 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        tmp_mod_expr_right_22 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_137;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_mod_expr_right_22, 0, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_44 = tmp_class_creation_19__prepared;
            tmp_expression_value_137 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_137 == NULL));
            tmp_tuple_element_84 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_137, mod_consts[201]);
            Py_DECREF(tmp_expression_value_137);
            if (tmp_tuple_element_84 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1235;

                goto tuple_build_exception_29;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_22, 1, tmp_tuple_element_84);
        }
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_mod_expr_right_22);
        goto try_except_handler_64;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_22, tmp_mod_expr_right_22);
        Py_DECREF(tmp_mod_expr_right_22);
        if (tmp_raise_value_22 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_64;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_22;
        exception_lineno = 1235;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_64;
    }
    branch_no_66:;
    goto branch_end_65;
    branch_no_65:;
    {
        PyObject *tmp_assign_source_204;
        tmp_assign_source_204 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_204;
    }
    branch_end_65:;
    {
        PyObject *tmp_assign_source_205;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_22 = tmp_class_creation_19__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[585];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[199];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_66;
        }
        frame_d1322356761a4f091d578e3e4d3ef86d_23 = MAKE_CLASS_FRAME(tstate, codeobj_d1322356761a4f091d578e3e4d3ef86d, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_d1322356761a4f091d578e3e4d3ef86d_23);
        assert(Py_REFCNT(frame_d1322356761a4f091d578e3e4d3ef86d_23) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[586];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1313;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_called_value_67;
            PyObject *tmp_called_value_68;
            PyObject *tmp_expression_value_138;
            PyObject *tmp_args_element_value_28;
            tmp_expression_value_138 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[43]);

            if (tmp_expression_value_138 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_138 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_138 == NULL)) {
                        tmp_expression_value_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_expression_value_138 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1315;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_expression_value_138);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            tmp_called_value_68 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_138, mod_consts[483]);
            Py_DECREF(tmp_expression_value_138);
            if (tmp_called_value_68 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1315;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1315;
            tmp_called_value_67 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_68, &PyTuple_GET_ITEM(mod_consts[587], 0), mod_consts[588]);
            Py_DECREF(tmp_called_value_68);
            if (tmp_called_value_67 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1315;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_28 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1315;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_67, tmp_args_element_value_28);
            Py_DECREF(tmp_called_value_67);
            Py_DECREF(tmp_args_element_value_28);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1315;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1324;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            nuitka_bool tmp_condition_result_100;
            PyObject *tmp_called_value_69;
            PyObject *tmp_args_element_value_29;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_element_value_30;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_condition_result_100 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_34;
            } else {
                goto condexpr_false_34;
            }
            condexpr_true_34:;
            tmp_called_value_69 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (unlikely(tmp_called_value_69 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1466;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_called_value_69 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_29 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1466;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_69, tmp_args_element_value_29);
            Py_DECREF(tmp_called_value_69);
            Py_DECREF(tmp_args_element_value_29);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            goto condexpr_end_34;
            condexpr_false_34:;
            tmp_called_value_70 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_30 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1466;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_70, tmp_args_element_value_30);
            Py_DECREF(tmp_args_element_value_30);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            condexpr_end_34:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[238], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1467;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[171], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1473;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[187], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1547;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[189], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1581;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            nuitka_bool tmp_condition_result_101;
            PyObject *tmp_called_value_71;
            PyObject *tmp_args_element_value_31;
            PyObject *tmp_called_value_72;
            PyObject *tmp_args_element_value_32;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1595;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_condition_result_101 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_101 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_35;
            } else {
                goto condexpr_false_35;
            }
            condexpr_true_35:;
            tmp_called_value_71 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (unlikely(tmp_called_value_71 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1595;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_called_value_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1595;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_31 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1595;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_71, tmp_args_element_value_31);
            Py_DECREF(tmp_called_value_71);
            Py_DECREF(tmp_args_element_value_31);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1595;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            goto condexpr_end_35;
            condexpr_false_35:;
            tmp_called_value_72 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_32 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1595;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_72, tmp_args_element_value_32);
            Py_DECREF(tmp_args_element_value_32);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1595;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            condexpr_end_35:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[181], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1596;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            nuitka_bool tmp_condition_result_102;
            PyObject *tmp_called_value_73;
            PyObject *tmp_args_element_value_33;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_element_value_34;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1602;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_condition_result_102 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_36;
            } else {
                goto condexpr_false_36;
            }
            condexpr_true_36:;
            tmp_called_value_73 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (unlikely(tmp_called_value_73 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1602;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_called_value_73 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1602;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_33 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1602;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_73, tmp_args_element_value_33);
            Py_DECREF(tmp_called_value_73);
            Py_DECREF(tmp_args_element_value_33);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1602;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            goto condexpr_end_36;
            condexpr_false_36:;
            tmp_called_value_74 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_34 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1602;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_74, tmp_args_element_value_34);
            Py_DECREF(tmp_args_element_value_34);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1602;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            condexpr_end_36:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[287], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1603;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[223], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1606;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_206;
            PyObject *tmp_tuple_element_85;
            PyObject *tmp_expression_value_139;
            tmp_expression_value_139 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[55]);

            if (tmp_expression_value_139 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_139 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

                    if (unlikely(tmp_expression_value_139 == NULL)) {
                        tmp_expression_value_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
                    }

                    if (tmp_expression_value_139 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1636;
                        type_description_2 = "o";
                        goto try_except_handler_67;
                    }
                    Py_INCREF(tmp_expression_value_139);
                } else {
                    goto try_except_handler_67;
                }
            }

            tmp_tuple_element_85 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_139, mod_consts[9]);
            Py_DECREF(tmp_expression_value_139);
            if (tmp_tuple_element_85 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_assign_source_206 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_206, 0, tmp_tuple_element_85);
            assert(tmp_Enum$class_creation_1__bases_orig == NULL);
            tmp_Enum$class_creation_1__bases_orig = tmp_assign_source_206;
        }
        {
            PyObject *tmp_assign_source_207;
            PyObject *tmp_dircall_arg1_23;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
            tmp_dircall_arg1_23 = tmp_Enum$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_23);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
                tmp_assign_source_207 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_207 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            assert(tmp_Enum$class_creation_1__bases == NULL);
            tmp_Enum$class_creation_1__bases = tmp_assign_source_207;
        }
        {
            PyObject *tmp_assign_source_208;
            tmp_assign_source_208 = MAKE_DICT_EMPTY();
            assert(tmp_Enum$class_creation_1__class_decl_dict == NULL);
            tmp_Enum$class_creation_1__class_decl_dict = tmp_assign_source_208;
        }
        {
            PyObject *tmp_assign_source_209;
            PyObject *tmp_metaclass_value_23;
            nuitka_bool tmp_condition_result_103;
            int tmp_truth_name_24;
            PyObject *tmp_type_arg_45;
            PyObject *tmp_expression_value_140;
            PyObject *tmp_subscript_value_23;
            PyObject *tmp_bases_value_23;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_truth_name_24 = CHECK_IF_TRUE(tmp_Enum$class_creation_1__bases);
            if (tmp_truth_name_24 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_condition_result_103 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_103 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_37;
            } else {
                goto condexpr_false_37;
            }
            condexpr_true_37:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_expression_value_140 = tmp_Enum$class_creation_1__bases;
            tmp_subscript_value_23 = mod_consts[52];
            tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_140, tmp_subscript_value_23, 0);
            if (tmp_type_arg_45 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
            Py_DECREF(tmp_type_arg_45);
            if (tmp_metaclass_value_23 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            goto condexpr_end_37;
            condexpr_false_37:;
            tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_23);
            condexpr_end_37:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_bases_value_23 = tmp_Enum$class_creation_1__bases;
            tmp_assign_source_209 = SELECT_METACLASS(tstate, tmp_metaclass_value_23, tmp_bases_value_23);
            Py_DECREF(tmp_metaclass_value_23);
            if (tmp_assign_source_209 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            assert(tmp_Enum$class_creation_1__metaclass == NULL);
            tmp_Enum$class_creation_1__metaclass = tmp_assign_source_209;
        }
        {
            bool tmp_condition_result_104;
            PyObject *tmp_expression_value_141;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_expression_value_141 = tmp_Enum$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_141, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_condition_result_104 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_104 != false) {
                goto branch_yes_67;
            } else {
                goto branch_no_67;
            }
        }
        branch_yes_67:;
        {
            PyObject *tmp_assign_source_210;
            PyObject *tmp_called_value_75;
            PyObject *tmp_expression_value_142;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_86;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_expression_value_142 = tmp_Enum$class_creation_1__metaclass;
            tmp_called_value_75 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_142, mod_consts[449]);
            if (tmp_called_value_75 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_tuple_element_86 = mod_consts[9];
            tmp_args_value_44 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_tuple_element_86 = tmp_Enum$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_kwargs_value_44 = tmp_Enum$class_creation_1__class_decl_dict;
            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1636;
            tmp_assign_source_210 = CALL_FUNCTION(tstate, tmp_called_value_75, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_called_value_75);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_210 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            assert(tmp_Enum$class_creation_1__prepared == NULL);
            tmp_Enum$class_creation_1__prepared = tmp_assign_source_210;
        }
        {
            bool tmp_condition_result_105;
            PyObject *tmp_operand_value_23;
            PyObject *tmp_expression_value_143;
            CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
            tmp_expression_value_143 = tmp_Enum$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_143, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_operand_value_23 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
            assert(!(tmp_res == -1));
            tmp_condition_result_105 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_105 != false) {
                goto branch_yes_68;
            } else {
                goto branch_no_68;
            }
        }
        branch_yes_68:;
        {
            PyObject *tmp_raise_type_23;
            PyObject *tmp_raise_value_23;
            PyObject *tmp_mod_expr_left_23;
            PyObject *tmp_mod_expr_right_23;
            PyObject *tmp_tuple_element_87;
            PyObject *tmp_expression_value_144;
            PyObject *tmp_name_value_56;
            PyObject *tmp_default_value_23;
            tmp_raise_type_23 = PyExc_TypeError;
            tmp_mod_expr_left_23 = mod_consts[452];
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_expression_value_144 = tmp_Enum$class_creation_1__metaclass;
            tmp_name_value_56 = mod_consts[201];
            tmp_default_value_23 = mod_consts[453];
            tmp_tuple_element_87 = BUILTIN_GETATTR(tstate, tmp_expression_value_144, tmp_name_value_56, tmp_default_value_23);
            if (tmp_tuple_element_87 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            tmp_mod_expr_right_23 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_145;
                PyObject *tmp_type_arg_46;
                PyTuple_SET_ITEM(tmp_mod_expr_right_23, 0, tmp_tuple_element_87);
                CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
                tmp_type_arg_46 = tmp_Enum$class_creation_1__prepared;
                tmp_expression_value_145 = BUILTIN_TYPE1(tmp_type_arg_46);
                assert(!(tmp_expression_value_145 == NULL));
                tmp_tuple_element_87 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_145, mod_consts[201]);
                Py_DECREF(tmp_expression_value_145);
                if (tmp_tuple_element_87 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1636;
                    type_description_2 = "o";
                    goto tuple_build_exception_30;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_23, 1, tmp_tuple_element_87);
            }
            goto tuple_build_noexception_30;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_30:;
            Py_DECREF(tmp_mod_expr_right_23);
            goto try_except_handler_67;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_30:;
            tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_23, tmp_mod_expr_right_23);
            Py_DECREF(tmp_mod_expr_right_23);
            if (tmp_raise_value_23 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_67;
            }
            exception_type = tmp_raise_type_23;
            Py_INCREF(tmp_raise_type_23);
            exception_value = tmp_raise_value_23;
            exception_lineno = 1636;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_67;
        }
        branch_no_68:;
        goto branch_end_67;
        branch_no_67:;
        {
            PyObject *tmp_assign_source_211;
            tmp_assign_source_211 = MAKE_DICT_EMPTY();
            assert(tmp_Enum$class_creation_1__prepared == NULL);
            tmp_Enum$class_creation_1__prepared = tmp_assign_source_211;
        }
        branch_end_67:;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
            tmp_set_locals_23 = tmp_Enum$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1636;
            type_description_2 = "o";
            goto try_except_handler_69;
        }
        tmp_dictset_value = mod_consts[597];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1636;
            type_description_2 = "o";
            goto try_except_handler_69;
        }
        frame_ba366a441b50a6232c0aa6e461f23fbe_24 = MAKE_CLASS_FRAME(tstate, codeobj_ba366a441b50a6232c0aa6e461f23fbe, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_ba366a441b50a6232c0aa6e461f23fbe_24);
        assert(Py_REFCNT(frame_ba366a441b50a6232c0aa6e461f23fbe_24) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1637;
            type_description_3 = "o";
            goto frame_exception_exit_24;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_22;
        frame_exception_exit_24:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ba366a441b50a6232c0aa6e461f23fbe_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ba366a441b50a6232c0aa6e461f23fbe_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ba366a441b50a6232c0aa6e461f23fbe_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ba366a441b50a6232c0aa6e461f23fbe_24,
            type_description_3,
            outline_22_var___class__
        );



        assertFrameObject(frame_ba366a441b50a6232c0aa6e461f23fbe_24);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_23;
        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_23:;
        type_description_2 = "o";
        goto try_except_handler_69;
        skip_nested_handling_22:;
        {
            nuitka_bool tmp_condition_result_106;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_cmp_expr_left_22 = tmp_Enum$class_creation_1__bases;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
            tmp_cmp_expr_right_22 = tmp_Enum$class_creation_1__bases_orig;
            tmp_condition_result_106 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_106 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_69;
            }
            if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
                goto branch_yes_69;
            } else {
                goto branch_no_69;
            }
        }
        branch_yes_69:;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Enum$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1636;
            type_description_2 = "o";
            goto try_except_handler_69;
        }
        branch_no_69:;
        {
            PyObject *tmp_assign_source_212;
            PyObject *tmp_called_value_76;
            PyObject *tmp_args_value_45;
            PyObject *tmp_tuple_element_88;
            PyObject *tmp_kwargs_value_45;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_called_value_76 = tmp_Enum$class_creation_1__metaclass;
            tmp_tuple_element_88 = mod_consts[9];
            tmp_args_value_45 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_88);
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_tuple_element_88 = tmp_Enum$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_88);
            tmp_tuple_element_88 = locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636;
            PyTuple_SET_ITEM0(tmp_args_value_45, 2, tmp_tuple_element_88);
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_kwargs_value_45 = tmp_Enum$class_creation_1__class_decl_dict;
            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1636;
            tmp_assign_source_212 = CALL_FUNCTION(tstate, tmp_called_value_76, tmp_args_value_45, tmp_kwargs_value_45);
            Py_DECREF(tmp_args_value_45);
            if (tmp_assign_source_212 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto try_except_handler_69;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_212;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_dictset_value = outline_22_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_69;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_69:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636);
        locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636 = NULL;
        goto try_return_handler_68;
        // Exception handler code:
        try_except_handler_69:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636);
        locals_sqlalchemy$sql$sqltypes$$$class__23_Comparator_1636 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto try_except_handler_68;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_65 = exception_type;
        exception_keeper_value_65 = exception_value;
        exception_keeper_tb_65 = exception_tb;
        exception_keeper_lineno_65 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;
        exception_lineno = exception_keeper_lineno_65;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 1636;
        goto try_except_handler_67;
        outline_result_23:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1636;
            type_description_2 = "o";
            goto try_except_handler_67;
        }
        goto try_end_22;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Enum$class_creation_1__bases_orig);
        tmp_Enum$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__bases);
        tmp_Enum$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__class_decl_dict);
        tmp_Enum$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__metaclass);
        tmp_Enum$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__prepared);
        tmp_Enum$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto frame_exception_exit_23;
        // End of try:
        try_end_22:;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
        Py_DECREF(tmp_Enum$class_creation_1__bases_orig);
        tmp_Enum$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
        Py_DECREF(tmp_Enum$class_creation_1__bases);
        tmp_Enum$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Enum$class_creation_1__class_decl_dict);
        tmp_Enum$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
        Py_DECREF(tmp_Enum$class_creation_1__metaclass);
        tmp_Enum$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
        Py_DECREF(tmp_Enum$class_creation_1__prepared);
        tmp_Enum$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 1647;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1647;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1647;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[256], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1649;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[600], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1666;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_defaults_13;
            tmp_defaults_13 = mod_consts[538];
            Py_INCREF(tmp_defaults_13);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_as_generic(tmp_defaults_13);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[602], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1677;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt_to_emulated();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[604], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79_adapt();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[152], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1708;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__should_create_constraint();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[246], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1713;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            PyObject *tmp_called_value_77;
            PyObject *tmp_called_instance_11;
            PyObject *tmp_args_element_value_35;
            tmp_called_instance_11 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[43]);

            if (tmp_called_instance_11 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_11 == NULL)) {
                        tmp_called_instance_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_11 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1720;
                        type_description_2 = "o";
                        goto frame_exception_exit_23;
                    }
                    Py_INCREF(tmp_called_instance_11);
                } else {
                    goto frame_exception_exit_23;
                }
            }

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1720;
            tmp_called_value_77 = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_11,
                mod_consts[608],
                PyTuple_GET_ITEM(mod_consts[609], 0)
            );

            Py_DECREF(tmp_called_instance_11);
            if (tmp_called_value_77 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1720;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_35 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81__set_table();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1720;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_77, tmp_args_element_value_35);
            Py_DECREF(tmp_called_value_77);
            Py_DECREF(tmp_args_element_value_35);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1720;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[142], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1721;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1752;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1763;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_copy();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[145], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1775;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            nuitka_bool tmp_condition_result_107;
            PyObject *tmp_called_value_78;
            PyObject *tmp_args_element_value_36;
            PyObject *tmp_called_value_79;
            PyObject *tmp_args_element_value_37;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1778;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_condition_result_107 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_107 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_38;
            } else {
                goto condexpr_false_38;
            }
            condexpr_true_38:;
            tmp_called_value_78 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[458]);

            if (unlikely(tmp_called_value_78 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1778;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_called_value_78 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1778;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_36 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86_python_type();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1778;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_78, tmp_args_element_value_36);
            Py_DECREF(tmp_called_value_78);
            Py_DECREF(tmp_args_element_value_36);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1778;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            goto condexpr_end_38;
            condexpr_false_38:;
            tmp_called_value_79 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_37 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86_python_type();

            frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame.f_lineno = 1778;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_79, tmp_args_element_value_37);
            Py_DECREF(tmp_args_element_value_37);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1778;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            condexpr_end_38:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1779;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_23;
        frame_exception_exit_23:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d1322356761a4f091d578e3e4d3ef86d_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d1322356761a4f091d578e3e4d3ef86d_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d1322356761a4f091d578e3e4d3ef86d_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d1322356761a4f091d578e3e4d3ef86d_23,
            type_description_2,
            outline_21_var___class__
        );



        assertFrameObject(frame_d1322356761a4f091d578e3e4d3ef86d_23);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_22;
        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_22:;

        goto try_except_handler_66;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_23 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_23 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_108 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_108 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1235;

                goto try_except_handler_66;
            }
            if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
                goto branch_yes_70;
            } else {
                goto branch_no_70;
            }
        }
        branch_yes_70:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1235;

            goto try_except_handler_66;
        }
        branch_no_70:;
        {
            PyObject *tmp_assign_source_213;
            PyObject *tmp_called_value_80;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_89;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_80 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_89 = mod_consts[199];
            tmp_args_value_46 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_89);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_89 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_89);
            tmp_tuple_element_89 = locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_89);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_19__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1235;
            tmp_assign_source_213 = CALL_FUNCTION(tstate, tmp_called_value_80, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_213 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1235;

                goto try_except_handler_66;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_213;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_205 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_205);
        goto try_return_handler_66;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_66:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235);
        locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235 = NULL;
        goto try_return_handler_65;
        // Exception handler code:
        try_except_handler_66:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235);
        locals_sqlalchemy$sql$sqltypes$$$class__22_Enum_1235 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto try_except_handler_65;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_65:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_68 = exception_type;
        exception_keeper_value_68 = exception_value;
        exception_keeper_tb_68 = exception_tb;
        exception_keeper_lineno_68 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;
        exception_lineno = exception_keeper_lineno_68;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 1235;
        goto try_except_handler_64;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[199], tmp_assign_source_205);
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_keeper_lineno_69 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_69;
    exception_value = exception_keeper_value_69;
    exception_tb = exception_keeper_tb_69;
    exception_lineno = exception_keeper_lineno_69;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_214;
        PyObject *tmp_tuple_element_90;
        tmp_tuple_element_90 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[434]);

        if (unlikely(tmp_tuple_element_90 == NULL)) {
            tmp_tuple_element_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[434]);
        }

        if (tmp_tuple_element_90 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_assign_source_214 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_214, 0, tmp_tuple_element_90);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_214;
    }
    {
        PyObject *tmp_assign_source_215;
        PyObject *tmp_dircall_arg1_24;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_24 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_24);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
            tmp_assign_source_215 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_215 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_215;
    }
    {
        PyObject *tmp_assign_source_216;
        tmp_assign_source_216 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_216;
    }
    {
        PyObject *tmp_assign_source_217;
        PyObject *tmp_metaclass_value_24;
        nuitka_bool tmp_condition_result_109;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_47;
        PyObject *tmp_expression_value_146;
        PyObject *tmp_subscript_value_24;
        PyObject *tmp_bases_value_24;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_25 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_condition_result_109 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_109 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_146 = tmp_class_creation_20__bases;
        tmp_subscript_value_24 = mod_consts[52];
        tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_146, tmp_subscript_value_24, 0);
        if (tmp_type_arg_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
        Py_DECREF(tmp_type_arg_47);
        if (tmp_metaclass_value_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        goto condexpr_end_39;
        condexpr_false_39:;
        tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_24);
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_24 = tmp_class_creation_20__bases;
        tmp_assign_source_217 = SELECT_METACLASS(tstate, tmp_metaclass_value_24, tmp_bases_value_24);
        Py_DECREF(tmp_metaclass_value_24);
        if (tmp_assign_source_217 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_217;
    }
    {
        bool tmp_condition_result_110;
        PyObject *tmp_expression_value_147;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_147 = tmp_class_creation_20__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_147, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_condition_result_110 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_110 != false) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_assign_source_218;
        PyObject *tmp_called_value_81;
        PyObject *tmp_expression_value_148;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_91;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_148 = tmp_class_creation_20__metaclass;
        tmp_called_value_81 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_148, mod_consts[449]);
        if (tmp_called_value_81 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_tuple_element_91 = mod_consts[262];
        tmp_args_value_47 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_91);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_91 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_91);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_20__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1786;
        tmp_assign_source_218 = CALL_FUNCTION(tstate, tmp_called_value_81, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_218 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_218;
    }
    {
        bool tmp_condition_result_111;
        PyObject *tmp_operand_value_24;
        PyObject *tmp_expression_value_149;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_149 = tmp_class_creation_20__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_149, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_operand_value_24 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_111 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_111 != false) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_raise_type_24;
        PyObject *tmp_raise_value_24;
        PyObject *tmp_mod_expr_left_24;
        PyObject *tmp_mod_expr_right_24;
        PyObject *tmp_tuple_element_92;
        PyObject *tmp_expression_value_150;
        PyObject *tmp_name_value_57;
        PyObject *tmp_default_value_24;
        tmp_raise_type_24 = PyExc_TypeError;
        tmp_mod_expr_left_24 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_150 = tmp_class_creation_20__metaclass;
        tmp_name_value_57 = mod_consts[201];
        tmp_default_value_24 = mod_consts[453];
        tmp_tuple_element_92 = BUILTIN_GETATTR(tstate, tmp_expression_value_150, tmp_name_value_57, tmp_default_value_24);
        if (tmp_tuple_element_92 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        tmp_mod_expr_right_24 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_151;
            PyObject *tmp_type_arg_48;
            PyTuple_SET_ITEM(tmp_mod_expr_right_24, 0, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_48 = tmp_class_creation_20__prepared;
            tmp_expression_value_151 = BUILTIN_TYPE1(tmp_type_arg_48);
            assert(!(tmp_expression_value_151 == NULL));
            tmp_tuple_element_92 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_151, mod_consts[201]);
            Py_DECREF(tmp_expression_value_151);
            if (tmp_tuple_element_92 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1786;

                goto tuple_build_exception_31;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_24, 1, tmp_tuple_element_92);
        }
        goto tuple_build_noexception_31;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_31:;
        Py_DECREF(tmp_mod_expr_right_24);
        goto try_except_handler_70;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_31:;
        tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_24, tmp_mod_expr_right_24);
        Py_DECREF(tmp_mod_expr_right_24);
        if (tmp_raise_value_24 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_70;
        }
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_value = tmp_raise_value_24;
        exception_lineno = 1786;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_70;
    }
    branch_no_72:;
    goto branch_end_71;
    branch_no_71:;
    {
        PyObject *tmp_assign_source_219;
        tmp_assign_source_219 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_219;
    }
    branch_end_71:;
    {
        PyObject *tmp_assign_source_220;
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_24 = tmp_class_creation_20__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[616];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[262];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_72;
        }
        frame_39df2453d6fb60af2ea62ec656d9cbf3_25 = MAKE_CLASS_FRAME(tstate, codeobj_39df2453d6fb60af2ea62ec656d9cbf3, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_39df2453d6fb60af2ea62ec656d9cbf3_25);
        assert(Py_REFCNT(frame_39df2453d6fb60af2ea62ec656d9cbf3_25) == 2);

        // Framed code:
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[563]);

        if (tmp_dictset_value == NULL) {
            if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                tmp_dictset_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[563]);

                if (unlikely(tmp_dictset_value == NULL)) {
                    tmp_dictset_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[563]);
                }

                if (tmp_dictset_value == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1799;
                    type_description_2 = "o";
                    goto frame_exception_exit_25;
                }
                Py_INCREF(tmp_dictset_value);
            } else {
                goto frame_exception_exit_25;
            }
        }

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[146], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1799;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[617], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1800;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }
        {
            PyObject *tmp_defaults_14;
            PyObject *tmp_tuple_element_93;
            PyObject *tmp_expression_value_152;
            tmp_expression_value_152 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[259]);

            if (tmp_expression_value_152 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_152 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[259]);

                    if (unlikely(tmp_expression_value_152 == NULL)) {
                        tmp_expression_value_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[259]);
                    }

                    if (tmp_expression_value_152 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1804;
                        type_description_2 = "o";
                        goto frame_exception_exit_25;
                    }
                    Py_INCREF(tmp_expression_value_152);
                } else {
                    goto frame_exception_exit_25;
                }
            }

            tmp_tuple_element_93 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_152, mod_consts[618]);
            Py_DECREF(tmp_expression_value_152);
            if (tmp_tuple_element_93 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1804;
                type_description_2 = "o";
                goto frame_exception_exit_25;
            }
            tmp_defaults_14 = MAKE_TUPLE_EMPTY(4);
            PyTuple_SET_ITEM(tmp_defaults_14, 0, tmp_tuple_element_93);
            tmp_tuple_element_93 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_14, 1, tmp_tuple_element_93);
            tmp_tuple_element_93 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_14, 2, tmp_tuple_element_93);
            tmp_tuple_element_93 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_14, 3, tmp_tuple_element_93);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___init__(tmp_defaults_14);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1802;
                type_description_2 = "o";
                goto frame_exception_exit_25;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88___reduce__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[620], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1838;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1841;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1861;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91_compare_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[624], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1881;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_24;
        frame_exception_exit_25:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_39df2453d6fb60af2ea62ec656d9cbf3_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_39df2453d6fb60af2ea62ec656d9cbf3_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_39df2453d6fb60af2ea62ec656d9cbf3_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_39df2453d6fb60af2ea62ec656d9cbf3_25,
            type_description_2,
            outline_23_var___class__
        );



        assertFrameObject(frame_39df2453d6fb60af2ea62ec656d9cbf3_25);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_24;
        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;

        goto try_except_handler_72;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_112;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_112 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_112 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1786;

                goto try_except_handler_72;
            }
            if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
                goto branch_yes_73;
            } else {
                goto branch_no_73;
            }
        }
        branch_yes_73:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;

            goto try_except_handler_72;
        }
        branch_no_73:;
        {
            PyObject *tmp_assign_source_221;
            PyObject *tmp_called_value_82;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_94;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_82 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_94 = mod_consts[262];
            tmp_args_value_48 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_94 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_94);
            tmp_tuple_element_94 = locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_20__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1786;
            tmp_assign_source_221 = CALL_FUNCTION(tstate, tmp_called_value_82, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_221 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1786;

                goto try_except_handler_72;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_221;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_assign_source_220 = outline_23_var___class__;
        Py_INCREF(tmp_assign_source_220);
        goto try_return_handler_72;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_72:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786);
        locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786 = NULL;
        goto try_return_handler_71;
        // Exception handler code:
        try_except_handler_72:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786);
        locals_sqlalchemy$sql$sqltypes$$$class__24_PickleType_1786 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto try_except_handler_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_71 = exception_type;
        exception_keeper_value_71 = exception_value;
        exception_keeper_tb_71 = exception_tb;
        exception_keeper_lineno_71 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;
        exception_lineno = exception_keeper_lineno_71;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 1786;
        goto try_except_handler_70;
        outline_result_24:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[262], tmp_assign_source_220);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_70:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_keeper_lineno_72 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_72;
    exception_value = exception_keeper_value_72;
    exception_tb = exception_keeper_tb_72;
    exception_lineno = exception_keeper_lineno_72;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_tuple_element_95;
        tmp_tuple_element_95 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[429]);

        if (unlikely(tmp_tuple_element_95 == NULL)) {
            tmp_tuple_element_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[429]);
        }

        if (tmp_tuple_element_95 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_assign_source_222 = MAKE_TUPLE_EMPTY(3);
        PyTuple_SET_ITEM0(tmp_assign_source_222, 0, tmp_tuple_element_95);
        tmp_tuple_element_95 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_95 == NULL)) {
            tmp_tuple_element_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_95 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto tuple_build_exception_32;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_222, 1, tmp_tuple_element_95);
        tmp_tuple_element_95 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_tuple_element_95 == NULL)) {
            tmp_tuple_element_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[159]);
        }

        if (tmp_tuple_element_95 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto tuple_build_exception_32;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_222, 2, tmp_tuple_element_95);
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_assign_source_222);
        goto try_except_handler_73;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_222;
    }
    {
        PyObject *tmp_assign_source_223;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_223 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_223 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_223;
    }
    {
        PyObject *tmp_assign_source_224;
        tmp_assign_source_224 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_224;
    }
    {
        PyObject *tmp_assign_source_225;
        PyObject *tmp_metaclass_value_25;
        nuitka_bool tmp_condition_result_113;
        int tmp_truth_name_26;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_subscript_value_25;
        PyObject *tmp_bases_value_25;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_26 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_condition_result_113 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_113 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_153 = tmp_class_creation_21__bases;
        tmp_subscript_value_25 = mod_consts[52];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_153, tmp_subscript_value_25, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_40:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_25 = tmp_class_creation_21__bases;
        tmp_assign_source_225 = SELECT_METACLASS(tstate, tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_225 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_225;
    }
    {
        bool tmp_condition_result_114;
        PyObject *tmp_expression_value_154;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_154 = tmp_class_creation_21__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_154, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_condition_result_114 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_114 != false) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_226;
        PyObject *tmp_called_value_83;
        PyObject *tmp_expression_value_155;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_155 = tmp_class_creation_21__metaclass;
        tmp_called_value_83 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_155, mod_consts[449]);
        if (tmp_called_value_83 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_tuple_element_96 = mod_consts[322];
        tmp_args_value_49 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_96);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_96 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_96);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_21__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1888;
        tmp_assign_source_226 = CALL_FUNCTION(tstate, tmp_called_value_83, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_83);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_226 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_226;
    }
    {
        bool tmp_condition_result_115;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_156;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_156 = tmp_class_creation_21__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_156, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_operand_value_25 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_115 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_115 != false) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_mod_expr_left_25;
        PyObject *tmp_mod_expr_right_25;
        PyObject *tmp_tuple_element_97;
        PyObject *tmp_expression_value_157;
        PyObject *tmp_name_value_58;
        PyObject *tmp_default_value_25;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_mod_expr_left_25 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_157 = tmp_class_creation_21__metaclass;
        tmp_name_value_58 = mod_consts[201];
        tmp_default_value_25 = mod_consts[453];
        tmp_tuple_element_97 = BUILTIN_GETATTR(tstate, tmp_expression_value_157, tmp_name_value_58, tmp_default_value_25);
        if (tmp_tuple_element_97 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        tmp_mod_expr_right_25 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_158;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_mod_expr_right_25, 0, tmp_tuple_element_97);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_50 = tmp_class_creation_21__prepared;
            tmp_expression_value_158 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_158 == NULL));
            tmp_tuple_element_97 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_158, mod_consts[201]);
            Py_DECREF(tmp_expression_value_158);
            if (tmp_tuple_element_97 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto tuple_build_exception_33;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_25, 1, tmp_tuple_element_97);
        }
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_mod_expr_right_25);
        goto try_except_handler_73;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_25, tmp_mod_expr_right_25);
        Py_DECREF(tmp_mod_expr_right_25);
        if (tmp_raise_value_25 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_73;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_25;
        exception_lineno = 1888;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_73;
    }
    branch_no_75:;
    goto branch_end_74;
    branch_no_74:;
    {
        PyObject *tmp_assign_source_227;
        tmp_assign_source_227 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_227;
    }
    branch_end_74:;
    {
        PyObject *tmp_assign_source_228;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_25 = tmp_class_creation_21__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[626];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[322];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_75;
        }
        frame_868a81aa74d6b5d9a95205292210ecdc_26 = MAKE_CLASS_FRAME(tstate, codeobj_868a81aa74d6b5d9a95205292210ecdc, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_868a81aa74d6b5d9a95205292210ecdc_26);
        assert(Py_REFCNT(frame_868a81aa74d6b5d9a95205292210ecdc_26) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[627];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1908;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[287], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1909;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }
        {
            PyObject *tmp_defaults_15;
            tmp_defaults_15 = mod_consts[628];
            Py_INCREF(tmp_defaults_15);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92___init__(tmp_defaults_15);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1911;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__should_create_constraint();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[246], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }
        {
            PyObject *tmp_called_value_84;
            PyObject *tmp_called_instance_12;
            PyObject *tmp_args_element_value_38;
            tmp_called_instance_12 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[43]);

            if (tmp_called_instance_12 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_12 == NULL)) {
                        tmp_called_instance_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_12 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1947;
                        type_description_2 = "o";
                        goto frame_exception_exit_26;
                    }
                    Py_INCREF(tmp_called_instance_12);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame.f_lineno = 1947;
            tmp_called_value_84 = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_12,
                mod_consts[608],
                PyTuple_GET_ITEM(mod_consts[609], 0)
            );

            Py_DECREF(tmp_called_instance_12);
            if (tmp_called_value_84 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }


            tmp_args_element_value_38 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94__set_table();

            frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame.f_lineno = 1947;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_84, tmp_args_element_value_38);
            Py_DECREF(tmp_called_value_84);
            Py_DECREF(tmp_args_element_value_38);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[142], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1948;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }
        {
            nuitka_bool tmp_condition_result_116;
            PyObject *tmp_called_value_85;
            PyObject *tmp_args_element_value_39;
            PyObject *tmp_called_value_86;
            PyObject *tmp_args_element_value_40;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1966;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_condition_result_116 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_41;
            } else {
                goto condexpr_false_41;
            }
            condexpr_true_41:;
            tmp_called_value_85 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[458]);

            if (unlikely(tmp_called_value_85 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1966;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }

            if (tmp_called_value_85 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1966;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }


            tmp_args_element_value_39 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95_python_type();

            frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame.f_lineno = 1966;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_85, tmp_args_element_value_39);
            Py_DECREF(tmp_called_value_85);
            Py_DECREF(tmp_args_element_value_39);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1966;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            goto condexpr_end_41;
            condexpr_false_41:;
            tmp_called_value_86 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_40 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95_python_type();

            frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame.f_lineno = 1966;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_86, tmp_args_element_value_40);
            Py_DECREF(tmp_args_element_value_40);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1966;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            condexpr_end_41:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1967;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }
        {
            nuitka_bool tmp_condition_result_117;
            PyObject *tmp_called_value_87;
            PyObject *tmp_call_arg_element_1;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[633]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1970;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_condition_result_117 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_117 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_42;
            } else {
                goto condexpr_false_42;
            }
            condexpr_true_42:;
            tmp_called_value_87 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[633]);

            if (unlikely(tmp_called_value_87 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[633]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 1970;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }

            if (tmp_called_value_87 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1970;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_call_arg_element_1 = MAKE_LIST3(Py_None,Py_True,Py_False);
            frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame.f_lineno = 1970;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_87, tmp_call_arg_element_1);
            Py_DECREF(tmp_called_value_87);
            Py_DECREF(tmp_call_arg_element_1);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1970;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            goto condexpr_end_42;
            condexpr_false_42:;
            tmp_dictset_value = mod_consts[634];
            Py_INCREF(tmp_dictset_value);
            condexpr_end_42:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[273], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1970;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96__strict_as_bool();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[281], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1972;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1982;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1992;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_25;
        frame_exception_exit_26:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_868a81aa74d6b5d9a95205292210ecdc_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_868a81aa74d6b5d9a95205292210ecdc_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_868a81aa74d6b5d9a95205292210ecdc_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_868a81aa74d6b5d9a95205292210ecdc_26,
            type_description_2,
            outline_24_var___class__
        );



        assertFrameObject(frame_868a81aa74d6b5d9a95205292210ecdc_26);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_25;
        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_75;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_118;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_118 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_118 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto try_except_handler_75;
            }
            if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
                goto branch_yes_76;
            } else {
                goto branch_no_76;
            }
        }
        branch_yes_76:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_75;
        }
        branch_no_76:;
        {
            PyObject *tmp_assign_source_229;
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_98;
            PyObject *tmp_kwargs_value_50;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_88 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_98 = mod_consts[322];
            tmp_args_value_50 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_98 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_98);
            tmp_tuple_element_98 = locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_50 = tmp_class_creation_21__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 1888;
            tmp_assign_source_229 = CALL_FUNCTION(tstate, tmp_called_value_88, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_229 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto try_except_handler_75;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_229;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_228 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_228);
        goto try_return_handler_75;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_75:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888);
        locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888 = NULL;
        goto try_return_handler_74;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888);
        locals_sqlalchemy$sql$sqltypes$$$class__25_Boolean_1888 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto try_except_handler_74;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 1888;
        goto try_except_handler_73;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[322], tmp_assign_source_228);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_keeper_lineno_75 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_75;
    exception_value = exception_keeper_value_75;
    exception_tb = exception_keeper_tb_75;
    exception_lineno = exception_keeper_lineno_75;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_tuple_element_99;
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[450]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[450]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_assign_source_230 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_230, 0, tmp_tuple_element_99);
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto tuple_build_exception_34;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_230, 1, tmp_tuple_element_99);
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_assign_source_230);
        goto try_except_handler_76;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_230;
    }
    {
        PyObject *tmp_assign_source_231;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_231 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_231 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_231;
    }
    {
        PyObject *tmp_assign_source_232;
        tmp_assign_source_232 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_232;
    }
    {
        PyObject *tmp_assign_source_233;
        PyObject *tmp_metaclass_value_26;
        nuitka_bool tmp_condition_result_119;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_159;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_26;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_27 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_condition_result_119 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_119 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_43;
        } else {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_159 = tmp_class_creation_22__bases;
        tmp_subscript_value_26 = mod_consts[52];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_159, tmp_subscript_value_26, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        goto condexpr_end_43;
        condexpr_false_43:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_26 = tmp_class_creation_22__bases;
        tmp_assign_source_233 = SELECT_METACLASS(tstate, tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_233 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_233;
    }
    {
        bool tmp_condition_result_120;
        PyObject *tmp_expression_value_160;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_160 = tmp_class_creation_22__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_160, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_condition_result_120 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_120 != false) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    {
        PyObject *tmp_assign_source_234;
        PyObject *tmp_called_value_89;
        PyObject *tmp_expression_value_161;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_kwargs_value_51;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_161 = tmp_class_creation_22__metaclass;
        tmp_called_value_89 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_161, mod_consts[449]);
        if (tmp_called_value_89 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_tuple_element_100 = mod_consts[292];
        tmp_args_value_51 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_100 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_51 = tmp_class_creation_22__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2014;
        tmp_assign_source_234 = CALL_FUNCTION(tstate, tmp_called_value_89, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_called_value_89);
        Py_DECREF(tmp_args_value_51);
        if (tmp_assign_source_234 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_234;
    }
    {
        bool tmp_condition_result_121;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_162;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_162 = tmp_class_creation_22__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_162, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_operand_value_26 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        assert(!(tmp_res == -1));
        tmp_condition_result_121 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_121 != false) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_mod_expr_left_26;
        PyObject *tmp_mod_expr_right_26;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_expression_value_163;
        PyObject *tmp_name_value_59;
        PyObject *tmp_default_value_26;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_mod_expr_left_26 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_163 = tmp_class_creation_22__metaclass;
        tmp_name_value_59 = mod_consts[201];
        tmp_default_value_26 = mod_consts[453];
        tmp_tuple_element_101 = BUILTIN_GETATTR(tstate, tmp_expression_value_163, tmp_name_value_59, tmp_default_value_26);
        if (tmp_tuple_element_101 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        tmp_mod_expr_right_26 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_164;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_mod_expr_right_26, 0, tmp_tuple_element_101);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_52 = tmp_class_creation_22__prepared;
            tmp_expression_value_164 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_164 == NULL));
            tmp_tuple_element_101 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_164, mod_consts[201]);
            Py_DECREF(tmp_expression_value_164);
            if (tmp_tuple_element_101 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2014;

                goto tuple_build_exception_35;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_26, 1, tmp_tuple_element_101);
        }
        goto tuple_build_noexception_35;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_35:;
        Py_DECREF(tmp_mod_expr_right_26);
        goto try_except_handler_76;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_35:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_26, tmp_mod_expr_right_26);
        Py_DECREF(tmp_mod_expr_right_26);
        if (tmp_raise_value_26 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_76;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_26;
        exception_lineno = 2014;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_76;
    }
    branch_no_78:;
    goto branch_end_77;
    branch_no_77:;
    {
        PyObject *tmp_assign_source_235;
        tmp_assign_source_235 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_235;
    }
    branch_end_77:;
    {
        PyObject *tmp_assign_source_236;
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_26 = tmp_class_creation_22__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_78;
        }
        tmp_dictset_value = mod_consts[292];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_78;
        }
        frame_1c8e3afcf516b03fba3866eb8e1f7215_27 = MAKE_CLASS_FRAME(tstate, codeobj_1c8e3afcf516b03fba3866eb8e1f7215, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_1c8e3afcf516b03fba3866eb8e1f7215_27);
        assert(Py_REFCNT(frame_1c8e3afcf516b03fba3866eb8e1f7215_27) == 2);

        // Framed code:
        {
            PyObject *tmp_called_instance_13;
            PyObject *tmp_args_element_value_41;
            tmp_called_instance_13 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[43]);

            if (tmp_called_instance_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_13 == NULL)) {
                        tmp_called_instance_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_13 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2015;
                        type_description_2 = "o";
                        goto frame_exception_exit_27;
                    }
                    Py_INCREF(tmp_called_instance_13);
                } else {
                    goto frame_exception_exit_27;
                }
            }



            tmp_args_element_value_41 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__expression_adaptations();

            frame_1c8e3afcf516b03fba3866eb8e1f7215_27->m_frame.f_lineno = 2015;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_13, mod_consts[512], tmp_args_element_value_41);
            Py_DECREF(tmp_called_instance_13);
            Py_DECREF(tmp_args_element_value_41);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2015;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2016;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }
        {
            nuitka_bool tmp_condition_result_122;
            PyObject *tmp_called_value_90;
            PyObject *tmp_args_element_value_42;
            PyObject *tmp_called_value_91;
            PyObject *tmp_args_element_value_43;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2033;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_condition_result_122 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_122 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_44;
            } else {
                goto condexpr_false_44;
            }
            condexpr_true_44:;
            tmp_called_value_90 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[458]);

            if (unlikely(tmp_called_value_90 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2033;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }

            if (tmp_called_value_90 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2033;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }


            tmp_args_element_value_42 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101__type_affinity();

            frame_1c8e3afcf516b03fba3866eb8e1f7215_27->m_frame.f_lineno = 2033;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_90, tmp_args_element_value_42);
            Py_DECREF(tmp_called_value_90);
            Py_DECREF(tmp_args_element_value_42);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2033;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            goto condexpr_end_44;
            condexpr_false_44:;
            tmp_called_value_91 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_43 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101__type_affinity();

            frame_1c8e3afcf516b03fba3866eb8e1f7215_27->m_frame.f_lineno = 2033;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_91, tmp_args_element_value_43);
            Py_DECREF(tmp_args_element_value_43);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2033;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            condexpr_end_44:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[1], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102_coerce_compared_value();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[124], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2037;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_26;
        frame_exception_exit_27:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1c8e3afcf516b03fba3866eb8e1f7215_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1c8e3afcf516b03fba3866eb8e1f7215_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1c8e3afcf516b03fba3866eb8e1f7215_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1c8e3afcf516b03fba3866eb8e1f7215_27,
            type_description_2,
            outline_25_var___class__
        );



        assertFrameObject(frame_1c8e3afcf516b03fba3866eb8e1f7215_27);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_26;
        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_78;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_123;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_123 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_123 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2014;

                goto try_except_handler_78;
            }
            if (tmp_condition_result_123 == NUITKA_BOOL_TRUE) {
                goto branch_yes_79;
            } else {
                goto branch_no_79;
            }
        }
        branch_yes_79:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;

            goto try_except_handler_78;
        }
        branch_no_79:;
        {
            PyObject *tmp_assign_source_237;
            PyObject *tmp_called_value_92;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_102;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_92 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_102 = mod_consts[292];
            tmp_args_value_52 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_102 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_102);
            tmp_tuple_element_102 = locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_22__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2014;
            tmp_assign_source_237 = CALL_FUNCTION(tstate, tmp_called_value_92, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_237 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2014;

                goto try_except_handler_78;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_237;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_assign_source_236 = outline_25_var___class__;
        Py_INCREF(tmp_assign_source_236);
        goto try_return_handler_78;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_78:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014);
        locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014 = NULL;
        goto try_return_handler_77;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014);
        locals_sqlalchemy$sql$sqltypes$$$class__26__AbstractInterval_2014 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto try_except_handler_77;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_77:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_77:;
        exception_keeper_type_77 = exception_type;
        exception_keeper_value_77 = exception_value;
        exception_keeper_tb_77 = exception_tb;
        exception_keeper_lineno_77 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;
        exception_lineno = exception_keeper_lineno_77;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 2014;
        goto try_except_handler_76;
        outline_result_26:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[292], tmp_assign_source_236);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_76:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_keeper_lineno_78 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_78;
    exception_value = exception_keeper_value_78;
    exception_tb = exception_keeper_tb_78;
    exception_lineno = exception_keeper_lineno_78;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_tuple_element_103;
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[429]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[429]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_assign_source_238 = MAKE_TUPLE_EMPTY(3);
        PyTuple_SET_ITEM0(tmp_assign_source_238, 0, tmp_tuple_element_103);
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[292]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[292]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto tuple_build_exception_36;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_238, 1, tmp_tuple_element_103);
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[434]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[434]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto tuple_build_exception_36;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_238, 2, tmp_tuple_element_103);
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_assign_source_238);
        goto try_except_handler_79;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_238;
    }
    {
        PyObject *tmp_assign_source_239;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_239 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_239 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_239;
    }
    {
        PyObject *tmp_assign_source_240;
        tmp_assign_source_240 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_240;
    }
    {
        PyObject *tmp_assign_source_241;
        PyObject *tmp_metaclass_value_27;
        nuitka_bool tmp_condition_result_124;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_165;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_27;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_28 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_condition_result_124 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_45;
        } else {
            goto condexpr_false_45;
        }
        condexpr_true_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_165 = tmp_class_creation_23__bases;
        tmp_subscript_value_27 = mod_consts[52];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_165, tmp_subscript_value_27, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        goto condexpr_end_45;
        condexpr_false_45:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_27 = tmp_class_creation_23__bases;
        tmp_assign_source_241 = SELECT_METACLASS(tstate, tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_241 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_241;
    }
    {
        bool tmp_condition_result_125;
        PyObject *tmp_expression_value_166;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_166 = tmp_class_creation_23__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_166, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_condition_result_125 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_125 != false) {
            goto branch_yes_80;
        } else {
            goto branch_no_80;
        }
    }
    branch_yes_80:;
    {
        PyObject *tmp_assign_source_242;
        PyObject *tmp_called_value_93;
        PyObject *tmp_expression_value_167;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_167 = tmp_class_creation_23__metaclass;
        tmp_called_value_93 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_167, mod_consts[449]);
        if (tmp_called_value_93 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_tuple_element_104 = mod_consts[80];
        tmp_args_value_53 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_104 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_23__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2042;
        tmp_assign_source_242 = CALL_FUNCTION(tstate, tmp_called_value_93, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_93);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_242 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_242;
    }
    {
        bool tmp_condition_result_126;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_168;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_168 = tmp_class_creation_23__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_168, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_operand_value_27 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_126 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_126 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_mod_expr_left_27;
        PyObject *tmp_mod_expr_right_27;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_expression_value_169;
        PyObject *tmp_name_value_60;
        PyObject *tmp_default_value_27;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_mod_expr_left_27 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_169 = tmp_class_creation_23__metaclass;
        tmp_name_value_60 = mod_consts[201];
        tmp_default_value_27 = mod_consts[453];
        tmp_tuple_element_105 = BUILTIN_GETATTR(tstate, tmp_expression_value_169, tmp_name_value_60, tmp_default_value_27);
        if (tmp_tuple_element_105 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        tmp_mod_expr_right_27 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_170;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_mod_expr_right_27, 0, tmp_tuple_element_105);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_54 = tmp_class_creation_23__prepared;
            tmp_expression_value_170 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_170 == NULL));
            tmp_tuple_element_105 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_170, mod_consts[201]);
            Py_DECREF(tmp_expression_value_170);
            if (tmp_tuple_element_105 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2042;

                goto tuple_build_exception_37;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_27, 1, tmp_tuple_element_105);
        }
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_mod_expr_right_27);
        goto try_except_handler_79;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_27, tmp_mod_expr_right_27);
        Py_DECREF(tmp_mod_expr_right_27);
        if (tmp_raise_value_27 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_79;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_27;
        exception_lineno = 2042;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_79;
    }
    branch_no_81:;
    goto branch_end_80;
    branch_no_80:;
    {
        PyObject *tmp_assign_source_243;
        tmp_assign_source_243 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_243;
    }
    branch_end_80:;
    {
        PyObject *tmp_assign_source_244;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_27 = tmp_class_creation_23__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_81;
        }
        tmp_dictset_value = mod_consts[642];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_81;
        }
        tmp_dictset_value = mod_consts[80];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_81;
        }
        frame_22d8b375575a4d8b7105af74825d9603_28 = MAKE_CLASS_FRAME(tstate, codeobj_22d8b375575a4d8b7105af74825d9603, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_22d8b375575a4d8b7105af74825d9603_28);
        assert(Py_REFCNT(frame_22d8b375575a4d8b7105af74825d9603_28) == 2);

        // Framed code:
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[109]);

        if (tmp_dictset_value == NULL) {
            if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                tmp_dictset_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

                if (unlikely(tmp_dictset_value == NULL)) {
                    tmp_dictset_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
                }

                if (tmp_dictset_value == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2060;
                    type_description_2 = "o";
                    goto frame_exception_exit_28;
                }
                Py_INCREF(tmp_dictset_value);
            } else {
                goto frame_exception_exit_28;
            }
        }

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[146], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2060;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }
        {
            nuitka_bool tmp_condition_result_127;
            PyObject *tmp_expression_value_171;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_29;
            tmp_expression_value_171 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[224]);

            if (tmp_expression_value_171 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_171 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[224]);

                    if (unlikely(tmp_expression_value_171 == NULL)) {
                        tmp_expression_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[224]);
                    }

                    if (tmp_expression_value_171 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2061;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_expression_value_171);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_171, mod_consts[559]);
            Py_DECREF(tmp_expression_value_171);
            if (tmp_attribute_value_2 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2061;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_truth_name_29 = CHECK_IF_TRUE(tmp_attribute_value_2);
            if (tmp_truth_name_29 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_attribute_value_2);

                exception_lineno = 2061;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_condition_result_127 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_attribute_value_2);
            if (tmp_condition_result_127 == NUITKA_BOOL_TRUE) {
                goto branch_yes_82;
            } else {
                goto branch_no_82;
            }
        }
        branch_yes_82:;
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_expression_value_172;
            tmp_expression_value_172 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[107]);

            if (tmp_expression_value_172 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_172 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

                    if (unlikely(tmp_expression_value_172 == NULL)) {
                        tmp_expression_value_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
                    }

                    if (tmp_expression_value_172 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2062;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_expression_value_172);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_172, mod_consts[108]);
            Py_DECREF(tmp_expression_value_172);
            if (tmp_called_instance_14 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2062;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            frame_22d8b375575a4d8b7105af74825d9603_28->m_frame.f_lineno = 2062;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_14,
                mod_consts[643],
                PyTuple_GET_ITEM(mod_consts[644], 0)
            );

            Py_DECREF(tmp_called_instance_14);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2062;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[293], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2062;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        goto branch_end_82;
        branch_no_82:;
        {
            PyObject *tmp_called_value_94;
            PyObject *tmp_expression_value_173;
            PyObject *tmp_called_value_95;
            PyObject *tmp_expression_value_174;
            PyObject *tmp_expression_value_175;
            PyObject *tmp_args_element_value_44;
            PyObject *tmp_args_element_value_45;
            PyObject *tmp_expression_value_176;
            PyObject *tmp_expression_value_177;
            tmp_expression_value_175 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[107]);

            if (tmp_expression_value_175 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_175 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

                    if (unlikely(tmp_expression_value_175 == NULL)) {
                        tmp_expression_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
                    }

                    if (tmp_expression_value_175 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2064;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_expression_value_175);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_expression_value_174 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_175, mod_consts[108]);
            Py_DECREF(tmp_expression_value_175);
            if (tmp_expression_value_174 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_called_value_95 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_174, mod_consts[645]);
            Py_DECREF(tmp_expression_value_174);
            if (tmp_called_value_95 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_args_element_value_44 = mod_consts[52];
            tmp_expression_value_177 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[107]);

            if (tmp_expression_value_177 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_177 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

                    if (unlikely(tmp_expression_value_177 == NULL)) {
                        tmp_expression_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
                    }

                    if (tmp_expression_value_177 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_95);

                        exception_lineno = 2064;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_expression_value_177);
                } else {
                    goto frame_exception_exit_28;
                }
            }

            tmp_expression_value_176 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_177, mod_consts[102]);
            Py_DECREF(tmp_expression_value_177);
            if (tmp_expression_value_176 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_95);

                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_args_element_value_45 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_176, mod_consts[646]);
            Py_DECREF(tmp_expression_value_176);
            if (tmp_args_element_value_45 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_95);

                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            frame_22d8b375575a4d8b7105af74825d9603_28->m_frame.f_lineno = 2064;
            {
                PyObject *call_args[] = {tmp_args_element_value_44, tmp_args_element_value_45};
                tmp_expression_value_173 = CALL_FUNCTION_WITH_ARGS2(tstate, tmp_called_value_95, call_args);
            }

            Py_DECREF(tmp_called_value_95);
            Py_DECREF(tmp_args_element_value_45);
            if (tmp_expression_value_173 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_called_value_94 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_173, mod_consts[30]);
            Py_DECREF(tmp_expression_value_173);
            if (tmp_called_value_94 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            frame_22d8b375575a4d8b7105af74825d9603_28->m_frame.f_lineno = 2064;
            tmp_dictset_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_94, &PyTuple_GET_ITEM(mod_consts[278], 0), mod_consts[647]);
            Py_DECREF(tmp_called_value_94);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[293], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        branch_end_82:;
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[617], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2067;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }
        {
            PyObject *tmp_defaults_16;
            tmp_defaults_16 = mod_consts[648];
            Py_INCREF(tmp_defaults_16);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103___init__(tmp_defaults_16);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2069;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        {
            nuitka_bool tmp_condition_result_128;
            PyObject *tmp_called_value_96;
            PyObject *tmp_args_element_value_46;
            PyObject *tmp_called_value_97;
            PyObject *tmp_args_element_value_47;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2091;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_condition_result_128 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_46;
            } else {
                goto condexpr_false_46;
            }
            condexpr_true_46:;
            tmp_called_value_96 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[458]);

            if (unlikely(tmp_called_value_96 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2091;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }

            if (tmp_called_value_96 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2091;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }


            tmp_args_element_value_46 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_python_type();

            frame_22d8b375575a4d8b7105af74825d9603_28->m_frame.f_lineno = 2091;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_96, tmp_args_element_value_46);
            Py_DECREF(tmp_called_value_96);
            Py_DECREF(tmp_args_element_value_46);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2091;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            goto condexpr_end_46;
            condexpr_false_46:;
            tmp_called_value_97 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_47 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_python_type();

            frame_22d8b375575a4d8b7105af74825d9603_28->m_frame.f_lineno = 2091;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_97, tmp_args_element_value_47);
            Py_DECREF(tmp_args_element_value_47);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2091;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            condexpr_end_46:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2092;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_adapt_to_emulated();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[604], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2095;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2098;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_27;
        frame_exception_exit_28:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_22d8b375575a4d8b7105af74825d9603_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_22d8b375575a4d8b7105af74825d9603_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_22d8b375575a4d8b7105af74825d9603_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_22d8b375575a4d8b7105af74825d9603_28,
            type_description_2,
            outline_26_var___class__
        );



        assertFrameObject(frame_22d8b375575a4d8b7105af74825d9603_28);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_27;
        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_81;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_129;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_129 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_129 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2042;

                goto try_except_handler_81;
            }
            if (tmp_condition_result_129 == NUITKA_BOOL_TRUE) {
                goto branch_yes_83;
            } else {
                goto branch_no_83;
            }
        }
        branch_yes_83:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;

            goto try_except_handler_81;
        }
        branch_no_83:;
        {
            PyObject *tmp_assign_source_245;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_106;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_98 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_106 = mod_consts[80];
            tmp_args_value_54 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_106 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_106);
            tmp_tuple_element_106 = locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_23__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2042;
            tmp_assign_source_245 = CALL_FUNCTION(tstate, tmp_called_value_98, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_245 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2042;

                goto try_except_handler_81;
            }
            assert(outline_26_var___class__ == NULL);
            outline_26_var___class__ = tmp_assign_source_245;
        }
        CHECK_OBJECT(outline_26_var___class__);
        tmp_assign_source_244 = outline_26_var___class__;
        Py_INCREF(tmp_assign_source_244);
        goto try_return_handler_81;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_81:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042);
        locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042 = NULL;
        goto try_return_handler_80;
        // Exception handler code:
        try_except_handler_81:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042);
        locals_sqlalchemy$sql$sqltypes$$$class__27_Interval_2042 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto try_except_handler_80;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_80:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_80 = exception_type;
        exception_keeper_value_80 = exception_value;
        exception_keeper_tb_80 = exception_tb;
        exception_keeper_lineno_80 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;
        exception_lineno = exception_keeper_lineno_80;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 2042;
        goto try_except_handler_79;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80], tmp_assign_source_244);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_79:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_keeper_lineno_81 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_81;
    exception_value = exception_keeper_value_81;
    exception_tb = exception_keeper_tb_81;
    exception_lineno = exception_keeper_lineno_81;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_246;
        PyObject *tmp_tuple_element_107;
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[468]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_assign_source_246 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_246, 0, tmp_tuple_element_107);
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto tuple_build_exception_38;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_246, 1, tmp_tuple_element_107);
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_assign_source_246);
        goto try_except_handler_82;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_246;
    }
    {
        PyObject *tmp_assign_source_247;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_247 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_247 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_247;
    }
    {
        PyObject *tmp_assign_source_248;
        tmp_assign_source_248 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_248;
    }
    {
        PyObject *tmp_assign_source_249;
        PyObject *tmp_metaclass_value_28;
        nuitka_bool tmp_condition_result_130;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_178;
        PyObject *tmp_subscript_value_28;
        PyObject *tmp_bases_value_28;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_30 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_condition_result_130 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_130 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_47;
        } else {
            goto condexpr_false_47;
        }
        condexpr_true_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_178 = tmp_class_creation_24__bases;
        tmp_subscript_value_28 = mod_consts[52];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_178, tmp_subscript_value_28, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        goto condexpr_end_47;
        condexpr_false_47:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_28 = tmp_class_creation_24__bases;
        tmp_assign_source_249 = SELECT_METACLASS(tstate, tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_249 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_249;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_expression_value_179;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_179 = tmp_class_creation_24__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_179, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_condition_result_131 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_84;
        } else {
            goto branch_no_84;
        }
    }
    branch_yes_84:;
    {
        PyObject *tmp_assign_source_250;
        PyObject *tmp_called_value_99;
        PyObject *tmp_expression_value_180;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_108;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_180 = tmp_class_creation_24__metaclass;
        tmp_called_value_99 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_180, mod_consts[449]);
        if (tmp_called_value_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_tuple_element_108 = mod_consts[315];
        tmp_args_value_55 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_108 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_24__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2138;
        tmp_assign_source_250 = CALL_FUNCTION(tstate, tmp_called_value_99, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_250 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_250;
    }
    {
        bool tmp_condition_result_132;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_181;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_181 = tmp_class_creation_24__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_181, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_operand_value_28 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_132 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_132 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_mod_expr_left_28;
        PyObject *tmp_mod_expr_right_28;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_expression_value_182;
        PyObject *tmp_name_value_61;
        PyObject *tmp_default_value_28;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_mod_expr_left_28 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_182 = tmp_class_creation_24__metaclass;
        tmp_name_value_61 = mod_consts[201];
        tmp_default_value_28 = mod_consts[453];
        tmp_tuple_element_109 = BUILTIN_GETATTR(tstate, tmp_expression_value_182, tmp_name_value_61, tmp_default_value_28);
        if (tmp_tuple_element_109 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        tmp_mod_expr_right_28 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_183;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_mod_expr_right_28, 0, tmp_tuple_element_109);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_56 = tmp_class_creation_24__prepared;
            tmp_expression_value_183 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_183 == NULL));
            tmp_tuple_element_109 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_183, mod_consts[201]);
            Py_DECREF(tmp_expression_value_183);
            if (tmp_tuple_element_109 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2138;

                goto tuple_build_exception_39;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_28, 1, tmp_tuple_element_109);
        }
        goto tuple_build_noexception_39;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_39:;
        Py_DECREF(tmp_mod_expr_right_28);
        goto try_except_handler_82;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_39:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_28, tmp_mod_expr_right_28);
        Py_DECREF(tmp_mod_expr_right_28);
        if (tmp_raise_value_28 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_82;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_28;
        exception_lineno = 2138;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_82;
    }
    branch_no_85:;
    goto branch_end_84;
    branch_no_84:;
    {
        PyObject *tmp_assign_source_251;
        tmp_assign_source_251 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_251;
    }
    branch_end_84:;
    {
        PyObject *tmp_assign_source_252;
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_28 = tmp_class_creation_24__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[654];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[315];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_84;
        }
        frame_92e0acdc6a2b51632727ea04a42f7c95_29 = MAKE_CLASS_FRAME(tstate, codeobj_92e0acdc6a2b51632727ea04a42f7c95, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_92e0acdc6a2b51632727ea04a42f7c95_29);
        assert(Py_REFCNT(frame_92e0acdc6a2b51632727ea04a42f7c95_29) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[315];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[655], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2339;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }
        {
            PyObject *tmp_called_instance_15;
            tmp_called_instance_15 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[43]);

            if (tmp_called_instance_15 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_15 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_15 == NULL)) {
                        tmp_called_instance_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_15 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2340;
                        type_description_2 = "o";
                        goto frame_exception_exit_29;
                    }
                    Py_INCREF(tmp_called_instance_15);
                } else {
                    goto frame_exception_exit_29;
                }
            }

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2340;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_15,
                mod_consts[476],
                PyTuple_GET_ITEM(mod_consts[656], 0)
            );

            Py_DECREF(tmp_called_instance_15);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2340;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[348], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2340;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            PyObject *tmp_defaults_17;
            tmp_defaults_17 = mod_consts[538];
            Py_INCREF(tmp_defaults_17);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108___init__(tmp_defaults_17);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2384;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_253;
            PyObject *tmp_tuple_element_110;
            tmp_tuple_element_110 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[436]);

            if (tmp_tuple_element_110 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_tuple_element_110 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

                    if (unlikely(tmp_tuple_element_110 == NULL)) {
                        tmp_tuple_element_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
                    }

                    if (tmp_tuple_element_110 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2419;
                        type_description_2 = "o";
                        goto try_except_handler_85;
                    }
                    Py_INCREF(tmp_tuple_element_110);
                } else {
                    goto try_except_handler_85;
                }
            }

            tmp_assign_source_253 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_253, 0, tmp_tuple_element_110);
            assert(tmp_JSON$class_creation_1__bases_orig == NULL);
            tmp_JSON$class_creation_1__bases_orig = tmp_assign_source_253;
        }
        {
            PyObject *tmp_assign_source_254;
            PyObject *tmp_dircall_arg1_29;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
            tmp_dircall_arg1_29 = tmp_JSON$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_29);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
                tmp_assign_source_254 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_254 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            assert(tmp_JSON$class_creation_1__bases == NULL);
            tmp_JSON$class_creation_1__bases = tmp_assign_source_254;
        }
        {
            PyObject *tmp_assign_source_255;
            tmp_assign_source_255 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_1__class_decl_dict == NULL);
            tmp_JSON$class_creation_1__class_decl_dict = tmp_assign_source_255;
        }
        {
            PyObject *tmp_assign_source_256;
            PyObject *tmp_metaclass_value_29;
            nuitka_bool tmp_condition_result_133;
            int tmp_truth_name_31;
            PyObject *tmp_type_arg_57;
            PyObject *tmp_expression_value_184;
            PyObject *tmp_subscript_value_29;
            PyObject *tmp_bases_value_29;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_truth_name_31 = CHECK_IF_TRUE(tmp_JSON$class_creation_1__bases);
            if (tmp_truth_name_31 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_condition_result_133 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_133 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_48;
            } else {
                goto condexpr_false_48;
            }
            condexpr_true_48:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_expression_value_184 = tmp_JSON$class_creation_1__bases;
            tmp_subscript_value_29 = mod_consts[52];
            tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_184, tmp_subscript_value_29, 0);
            if (tmp_type_arg_57 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
            Py_DECREF(tmp_type_arg_57);
            if (tmp_metaclass_value_29 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            goto condexpr_end_48;
            condexpr_false_48:;
            tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_29);
            condexpr_end_48:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_bases_value_29 = tmp_JSON$class_creation_1__bases;
            tmp_assign_source_256 = SELECT_METACLASS(tstate, tmp_metaclass_value_29, tmp_bases_value_29);
            Py_DECREF(tmp_metaclass_value_29);
            if (tmp_assign_source_256 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            assert(tmp_JSON$class_creation_1__metaclass == NULL);
            tmp_JSON$class_creation_1__metaclass = tmp_assign_source_256;
        }
        {
            bool tmp_condition_result_134;
            PyObject *tmp_expression_value_185;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_expression_value_185 = tmp_JSON$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_185, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_condition_result_134 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_134 != false) {
                goto branch_yes_86;
            } else {
                goto branch_no_86;
            }
        }
        branch_yes_86:;
        {
            PyObject *tmp_assign_source_257;
            PyObject *tmp_called_value_100;
            PyObject *tmp_expression_value_186;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_111;
            PyObject *tmp_kwargs_value_56;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_expression_value_186 = tmp_JSON$class_creation_1__metaclass;
            tmp_called_value_100 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_186, mod_consts[449]);
            if (tmp_called_value_100 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_tuple_element_111 = mod_consts[658];
            tmp_args_value_56 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_111);
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_tuple_element_111 = tmp_JSON$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_111);
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_kwargs_value_56 = tmp_JSON$class_creation_1__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2419;
            tmp_assign_source_257 = CALL_FUNCTION(tstate, tmp_called_value_100, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_called_value_100);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_257 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            assert(tmp_JSON$class_creation_1__prepared == NULL);
            tmp_JSON$class_creation_1__prepared = tmp_assign_source_257;
        }
        {
            bool tmp_condition_result_135;
            PyObject *tmp_operand_value_29;
            PyObject *tmp_expression_value_187;
            CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
            tmp_expression_value_187 = tmp_JSON$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_187, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_operand_value_29 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
            assert(!(tmp_res == -1));
            tmp_condition_result_135 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_135 != false) {
                goto branch_yes_87;
            } else {
                goto branch_no_87;
            }
        }
        branch_yes_87:;
        {
            PyObject *tmp_raise_type_29;
            PyObject *tmp_raise_value_29;
            PyObject *tmp_mod_expr_left_29;
            PyObject *tmp_mod_expr_right_29;
            PyObject *tmp_tuple_element_112;
            PyObject *tmp_expression_value_188;
            PyObject *tmp_name_value_62;
            PyObject *tmp_default_value_29;
            tmp_raise_type_29 = PyExc_TypeError;
            tmp_mod_expr_left_29 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_expression_value_188 = tmp_JSON$class_creation_1__metaclass;
            tmp_name_value_62 = mod_consts[201];
            tmp_default_value_29 = mod_consts[453];
            tmp_tuple_element_112 = BUILTIN_GETATTR(tstate, tmp_expression_value_188, tmp_name_value_62, tmp_default_value_29);
            if (tmp_tuple_element_112 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            tmp_mod_expr_right_29 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_189;
                PyObject *tmp_type_arg_58;
                PyTuple_SET_ITEM(tmp_mod_expr_right_29, 0, tmp_tuple_element_112);
                CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
                tmp_type_arg_58 = tmp_JSON$class_creation_1__prepared;
                tmp_expression_value_189 = BUILTIN_TYPE1(tmp_type_arg_58);
                assert(!(tmp_expression_value_189 == NULL));
                tmp_tuple_element_112 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_189, mod_consts[201]);
                Py_DECREF(tmp_expression_value_189);
                if (tmp_tuple_element_112 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2419;
                    type_description_2 = "o";
                    goto tuple_build_exception_40;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_29, 1, tmp_tuple_element_112);
            }
            goto tuple_build_noexception_40;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_40:;
            Py_DECREF(tmp_mod_expr_right_29);
            goto try_except_handler_85;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_40:;
            tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_29, tmp_mod_expr_right_29);
            Py_DECREF(tmp_mod_expr_right_29);
            if (tmp_raise_value_29 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_85;
            }
            exception_type = tmp_raise_type_29;
            Py_INCREF(tmp_raise_type_29);
            exception_value = tmp_raise_value_29;
            exception_lineno = 2419;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_85;
        }
        branch_no_87:;
        goto branch_end_86;
        branch_no_86:;
        {
            PyObject *tmp_assign_source_258;
            tmp_assign_source_258 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_1__prepared == NULL);
            tmp_JSON$class_creation_1__prepared = tmp_assign_source_258;
        }
        branch_end_86:;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
            tmp_set_locals_29 = tmp_JSON$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_2 = "o";
            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[659];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_2 = "o";
            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[660];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_2 = "o";
            goto try_except_handler_87;
        }
        frame_617178a6477bb261ad5c1f7f5ed099af_30 = MAKE_CLASS_FRAME(tstate, codeobj_617178a6477bb261ad5c1f7f5ed099af, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_617178a6477bb261ad5c1f7f5ed099af_30);
        assert(Py_REFCNT(frame_617178a6477bb261ad5c1f7f5ed099af_30) == 2);

        // Framed code:
        {
            PyObject *tmp_called_value_101;
            tmp_called_value_101 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[77]);

            if (tmp_called_value_101 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_101 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

                    if (unlikely(tmp_called_value_101 == NULL)) {
                        tmp_called_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
                    }

                    if (tmp_called_value_101 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2422;
                        type_description_3 = "o";
                        goto frame_exception_exit_30;
                    }
                    Py_INCREF(tmp_called_value_101);
                } else {
                    goto frame_exception_exit_30;
                }
            }

            frame_617178a6477bb261ad5c1f7f5ed099af_30->m_frame.f_lineno = 2422;
            tmp_dictset_value = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_101);
            Py_DECREF(tmp_called_value_101);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2422;
                type_description_3 = "o";
                goto frame_exception_exit_30;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[301], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2422;
                type_description_3 = "o";
                goto frame_exception_exit_30;
            }
        }
        {
            PyObject *tmp_called_value_102;
            tmp_called_value_102 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[55]);

            if (tmp_called_value_102 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_value_102 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

                    if (unlikely(tmp_called_value_102 == NULL)) {
                        tmp_called_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
                    }

                    if (tmp_called_value_102 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2423;
                        type_description_3 = "o";
                        goto frame_exception_exit_30;
                    }
                    Py_INCREF(tmp_called_value_102);
                } else {
                    goto frame_exception_exit_30;
                }
            }

            frame_617178a6477bb261ad5c1f7f5ed099af_30->m_frame.f_lineno = 2423;
            tmp_dictset_value = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_102);
            Py_DECREF(tmp_called_value_102);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2423;
                type_description_3 = "o";
                goto frame_exception_exit_30;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[298], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2423;
                type_description_3 = "o";
                goto frame_exception_exit_30;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[302], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2425;
            type_description_3 = "o";
            goto frame_exception_exit_30;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_string_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[306], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;
            type_description_3 = "o";
            goto frame_exception_exit_30;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2431;
            type_description_3 = "o";
            goto frame_exception_exit_30;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2444;
            type_description_3 = "o";
            goto frame_exception_exit_30;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_28;
        frame_exception_exit_30:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_617178a6477bb261ad5c1f7f5ed099af_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_617178a6477bb261ad5c1f7f5ed099af_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_617178a6477bb261ad5c1f7f5ed099af_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_617178a6477bb261ad5c1f7f5ed099af_30,
            type_description_3,
            outline_28_var___class__
        );



        assertFrameObject(frame_617178a6477bb261ad5c1f7f5ed099af_30);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_29;
        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_29:;
        type_description_2 = "o";
        goto try_except_handler_87;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_136;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_cmp_expr_left_28 = tmp_JSON$class_creation_1__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
            tmp_cmp_expr_right_28 = tmp_JSON$class_creation_1__bases_orig;
            tmp_condition_result_136 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_136 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_87;
            }
            if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
                goto branch_yes_88;
            } else {
                goto branch_no_88;
            }
        }
        branch_yes_88:;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_2 = "o";
            goto try_except_handler_87;
        }
        branch_no_88:;
        {
            PyObject *tmp_assign_source_259;
            PyObject *tmp_called_value_103;
            PyObject *tmp_args_value_57;
            PyObject *tmp_tuple_element_113;
            PyObject *tmp_kwargs_value_57;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_called_value_103 = tmp_JSON$class_creation_1__metaclass;
            tmp_tuple_element_113 = mod_consts[658];
            tmp_args_value_57 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_113);
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_tuple_element_113 = tmp_JSON$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_113);
            tmp_tuple_element_113 = locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419;
            PyTuple_SET_ITEM0(tmp_args_value_57, 2, tmp_tuple_element_113);
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_kwargs_value_57 = tmp_JSON$class_creation_1__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2419;
            tmp_assign_source_259 = CALL_FUNCTION(tstate, tmp_called_value_103, tmp_args_value_57, tmp_kwargs_value_57);
            Py_DECREF(tmp_args_value_57);
            if (tmp_assign_source_259 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2419;
                type_description_2 = "o";
                goto try_except_handler_87;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_259;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_dictset_value = outline_28_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_87;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_87:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419);
        locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419 = NULL;
        goto try_return_handler_86;
        // Exception handler code:
        try_except_handler_87:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419);
        locals_sqlalchemy$sql$sqltypes$$$class__29_JSONElementType_2419 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto try_except_handler_86;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_83 = exception_type;
        exception_keeper_value_83 = exception_value;
        exception_keeper_tb_83 = exception_tb;
        exception_keeper_lineno_83 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;
        exception_lineno = exception_keeper_lineno_83;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 2419;
        goto try_except_handler_85;
        outline_result_29:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[658], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_2 = "o";
            goto try_except_handler_85;
        }
        goto try_end_28;
        // Exception handler code:
        try_except_handler_85:;
        exception_keeper_type_84 = exception_type;
        exception_keeper_value_84 = exception_value;
        exception_keeper_tb_84 = exception_tb;
        exception_keeper_lineno_84 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_JSON$class_creation_1__bases_orig);
        tmp_JSON$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__bases);
        tmp_JSON$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__class_decl_dict);
        tmp_JSON$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__metaclass);
        tmp_JSON$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__prepared);
        tmp_JSON$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;
        exception_lineno = exception_keeper_lineno_84;

        goto frame_exception_exit_29;
        // End of try:
        try_end_28:;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_1__bases_orig);
        tmp_JSON$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
        Py_DECREF(tmp_JSON$class_creation_1__bases);
        tmp_JSON$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_1__class_decl_dict);
        tmp_JSON$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
        Py_DECREF(tmp_JSON$class_creation_1__metaclass);
        tmp_JSON$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
        Py_DECREF(tmp_JSON$class_creation_1__prepared);
        tmp_JSON$class_creation_1__prepared = NULL;
        {
            PyObject *tmp_assign_source_260;
            PyObject *tmp_tuple_element_114;
            tmp_tuple_element_114 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[658]);

            if (unlikely(tmp_tuple_element_114 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[658]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2457;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_tuple_element_114 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_assign_source_260 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_260, 0, tmp_tuple_element_114);
            assert(tmp_JSON$class_creation_2__bases_orig == NULL);
            tmp_JSON$class_creation_2__bases_orig = tmp_assign_source_260;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_261;
            PyObject *tmp_dircall_arg1_30;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
            tmp_dircall_arg1_30 = tmp_JSON$class_creation_2__bases_orig;
            Py_INCREF(tmp_dircall_arg1_30);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
                tmp_assign_source_261 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_261 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_2__bases == NULL);
            tmp_JSON$class_creation_2__bases = tmp_assign_source_261;
        }
        {
            PyObject *tmp_assign_source_262;
            tmp_assign_source_262 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_2__class_decl_dict == NULL);
            tmp_JSON$class_creation_2__class_decl_dict = tmp_assign_source_262;
        }
        {
            PyObject *tmp_assign_source_263;
            PyObject *tmp_metaclass_value_30;
            nuitka_bool tmp_condition_result_137;
            int tmp_truth_name_32;
            PyObject *tmp_type_arg_59;
            PyObject *tmp_expression_value_190;
            PyObject *tmp_subscript_value_30;
            PyObject *tmp_bases_value_30;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_truth_name_32 = CHECK_IF_TRUE(tmp_JSON$class_creation_2__bases);
            if (tmp_truth_name_32 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_condition_result_137 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_137 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_49;
            } else {
                goto condexpr_false_49;
            }
            condexpr_true_49:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_expression_value_190 = tmp_JSON$class_creation_2__bases;
            tmp_subscript_value_30 = mod_consts[52];
            tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_190, tmp_subscript_value_30, 0);
            if (tmp_type_arg_59 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
            Py_DECREF(tmp_type_arg_59);
            if (tmp_metaclass_value_30 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            goto condexpr_end_49;
            condexpr_false_49:;
            tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_30);
            condexpr_end_49:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_bases_value_30 = tmp_JSON$class_creation_2__bases;
            tmp_assign_source_263 = SELECT_METACLASS(tstate, tmp_metaclass_value_30, tmp_bases_value_30);
            Py_DECREF(tmp_metaclass_value_30);
            if (tmp_assign_source_263 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_2__metaclass == NULL);
            tmp_JSON$class_creation_2__metaclass = tmp_assign_source_263;
        }
        {
            bool tmp_condition_result_138;
            PyObject *tmp_expression_value_191;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_expression_value_191 = tmp_JSON$class_creation_2__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_191, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_condition_result_138 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_138 != false) {
                goto branch_yes_89;
            } else {
                goto branch_no_89;
            }
        }
        branch_yes_89:;
        {
            PyObject *tmp_assign_source_264;
            PyObject *tmp_called_value_104;
            PyObject *tmp_expression_value_192;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_115;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_expression_value_192 = tmp_JSON$class_creation_2__metaclass;
            tmp_called_value_104 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_192, mod_consts[449]);
            if (tmp_called_value_104 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_tuple_element_115 = mod_consts[665];
            tmp_args_value_58 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_tuple_element_115 = tmp_JSON$class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_kwargs_value_58 = tmp_JSON$class_creation_2__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2457;
            tmp_assign_source_264 = CALL_FUNCTION(tstate, tmp_called_value_104, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_called_value_104);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_264 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_2__prepared == NULL);
            tmp_JSON$class_creation_2__prepared = tmp_assign_source_264;
        }
        {
            bool tmp_condition_result_139;
            PyObject *tmp_operand_value_30;
            PyObject *tmp_expression_value_193;
            CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
            tmp_expression_value_193 = tmp_JSON$class_creation_2__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_193, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_operand_value_30 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
            assert(!(tmp_res == -1));
            tmp_condition_result_139 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_139 != false) {
                goto branch_yes_90;
            } else {
                goto branch_no_90;
            }
        }
        branch_yes_90:;
        {
            PyObject *tmp_raise_type_30;
            PyObject *tmp_raise_value_30;
            PyObject *tmp_mod_expr_left_30;
            PyObject *tmp_mod_expr_right_30;
            PyObject *tmp_tuple_element_116;
            PyObject *tmp_expression_value_194;
            PyObject *tmp_name_value_63;
            PyObject *tmp_default_value_30;
            tmp_raise_type_30 = PyExc_TypeError;
            tmp_mod_expr_left_30 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_expression_value_194 = tmp_JSON$class_creation_2__metaclass;
            tmp_name_value_63 = mod_consts[201];
            tmp_default_value_30 = mod_consts[453];
            tmp_tuple_element_116 = BUILTIN_GETATTR(tstate, tmp_expression_value_194, tmp_name_value_63, tmp_default_value_30);
            if (tmp_tuple_element_116 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_mod_expr_right_30 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_195;
                PyObject *tmp_type_arg_60;
                PyTuple_SET_ITEM(tmp_mod_expr_right_30, 0, tmp_tuple_element_116);
                CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
                tmp_type_arg_60 = tmp_JSON$class_creation_2__prepared;
                tmp_expression_value_195 = BUILTIN_TYPE1(tmp_type_arg_60);
                assert(!(tmp_expression_value_195 == NULL));
                tmp_tuple_element_116 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_195, mod_consts[201]);
                Py_DECREF(tmp_expression_value_195);
                if (tmp_tuple_element_116 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2457;
                    type_description_2 = "o";
                    goto tuple_build_exception_41;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_30, 1, tmp_tuple_element_116);
            }
            goto tuple_build_noexception_41;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_41:;
            Py_DECREF(tmp_mod_expr_right_30);
            goto try_except_handler_88;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_41:;
            tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_30, tmp_mod_expr_right_30);
            Py_DECREF(tmp_mod_expr_right_30);
            if (tmp_raise_value_30 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            exception_type = tmp_raise_type_30;
            Py_INCREF(tmp_raise_type_30);
            exception_value = tmp_raise_value_30;
            exception_lineno = 2457;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_88;
        }
        branch_no_90:;
        goto branch_end_89;
        branch_no_89:;
        {
            PyObject *tmp_assign_source_265;
            tmp_assign_source_265 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_2__prepared == NULL);
            tmp_JSON$class_creation_2__prepared = tmp_assign_source_265;
        }
        branch_end_89:;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
            tmp_set_locals_30 = tmp_JSON$class_creation_2__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2457;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[666];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2457;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[667];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2457;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        {
            nuitka_bool tmp_condition_result_140;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_cmp_expr_left_29 = tmp_JSON$class_creation_2__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
            tmp_cmp_expr_right_29 = tmp_JSON$class_creation_2__bases_orig;
            tmp_condition_result_140 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_140 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_90;
            }
            if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
                goto branch_yes_91;
            } else {
                goto branch_no_91;
            }
        }
        branch_yes_91:;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2457;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        branch_no_91:;
        {
            PyObject *tmp_assign_source_266;
            PyObject *tmp_called_value_105;
            PyObject *tmp_args_value_59;
            PyObject *tmp_tuple_element_117;
            PyObject *tmp_kwargs_value_59;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_called_value_105 = tmp_JSON$class_creation_2__metaclass;
            tmp_tuple_element_117 = mod_consts[665];
            tmp_args_value_59 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_117);
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_tuple_element_117 = tmp_JSON$class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_117);
            tmp_tuple_element_117 = locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457;
            PyTuple_SET_ITEM0(tmp_args_value_59, 2, tmp_tuple_element_117);
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_kwargs_value_59 = tmp_JSON$class_creation_2__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2457;
            tmp_assign_source_266 = CALL_FUNCTION(tstate, tmp_called_value_105, tmp_args_value_59, tmp_kwargs_value_59);
            Py_DECREF(tmp_args_value_59);
            if (tmp_assign_source_266 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2457;
                type_description_2 = "o";
                goto try_except_handler_90;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_266;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_dictset_value = outline_29_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_90;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_90:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457);
        locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457 = NULL;
        goto try_return_handler_89;
        // Exception handler code:
        try_except_handler_90:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457);
        locals_sqlalchemy$sql$sqltypes$$$class__30_JSONIndexType_2457 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto try_except_handler_89;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_89:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_89:;
        exception_keeper_type_86 = exception_type;
        exception_keeper_value_86 = exception_value;
        exception_keeper_tb_86 = exception_tb;
        exception_keeper_lineno_86 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;
        exception_lineno = exception_keeper_lineno_86;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 2457;
        goto try_except_handler_88;
        outline_result_30:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[665], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2457;
            type_description_2 = "o";
            goto try_except_handler_88;
        }
        goto try_end_29;
        // Exception handler code:
        try_except_handler_88:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_2__bases_orig);
        tmp_JSON$class_creation_2__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__bases);
        tmp_JSON$class_creation_2__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__class_decl_dict);
        tmp_JSON$class_creation_2__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__metaclass);
        tmp_JSON$class_creation_2__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__prepared);
        tmp_JSON$class_creation_2__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto frame_exception_exit_29;
        // End of try:
        try_end_29:;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_2__bases_orig);
        tmp_JSON$class_creation_2__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
        Py_DECREF(tmp_JSON$class_creation_2__bases);
        tmp_JSON$class_creation_2__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_2__class_decl_dict);
        tmp_JSON$class_creation_2__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
        Py_DECREF(tmp_JSON$class_creation_2__metaclass);
        tmp_JSON$class_creation_2__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
        Py_DECREF(tmp_JSON$class_creation_2__prepared);
        tmp_JSON$class_creation_2__prepared = NULL;
        {
            PyObject *tmp_assign_source_267;
            PyObject *tmp_tuple_element_118;
            tmp_tuple_element_118 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[665]);

            if (unlikely(tmp_tuple_element_118 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[665]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2465;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_tuple_element_118 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_assign_source_267 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_267, 0, tmp_tuple_element_118);
            assert(tmp_JSON$class_creation_3__bases_orig == NULL);
            tmp_JSON$class_creation_3__bases_orig = tmp_assign_source_267;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_268;
            PyObject *tmp_dircall_arg1_31;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
            tmp_dircall_arg1_31 = tmp_JSON$class_creation_3__bases_orig;
            Py_INCREF(tmp_dircall_arg1_31);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
                tmp_assign_source_268 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_268 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_3__bases == NULL);
            tmp_JSON$class_creation_3__bases = tmp_assign_source_268;
        }
        {
            PyObject *tmp_assign_source_269;
            tmp_assign_source_269 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_3__class_decl_dict == NULL);
            tmp_JSON$class_creation_3__class_decl_dict = tmp_assign_source_269;
        }
        {
            PyObject *tmp_assign_source_270;
            PyObject *tmp_metaclass_value_31;
            nuitka_bool tmp_condition_result_141;
            int tmp_truth_name_33;
            PyObject *tmp_type_arg_61;
            PyObject *tmp_expression_value_196;
            PyObject *tmp_subscript_value_31;
            PyObject *tmp_bases_value_31;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_truth_name_33 = CHECK_IF_TRUE(tmp_JSON$class_creation_3__bases);
            if (tmp_truth_name_33 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_condition_result_141 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_141 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_50;
            } else {
                goto condexpr_false_50;
            }
            condexpr_true_50:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_expression_value_196 = tmp_JSON$class_creation_3__bases;
            tmp_subscript_value_31 = mod_consts[52];
            tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_196, tmp_subscript_value_31, 0);
            if (tmp_type_arg_61 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
            Py_DECREF(tmp_type_arg_61);
            if (tmp_metaclass_value_31 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            goto condexpr_end_50;
            condexpr_false_50:;
            tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_31);
            condexpr_end_50:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_bases_value_31 = tmp_JSON$class_creation_3__bases;
            tmp_assign_source_270 = SELECT_METACLASS(tstate, tmp_metaclass_value_31, tmp_bases_value_31);
            Py_DECREF(tmp_metaclass_value_31);
            if (tmp_assign_source_270 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_3__metaclass == NULL);
            tmp_JSON$class_creation_3__metaclass = tmp_assign_source_270;
        }
        {
            bool tmp_condition_result_142;
            PyObject *tmp_expression_value_197;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_expression_value_197 = tmp_JSON$class_creation_3__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_197, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_condition_result_142 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_142 != false) {
                goto branch_yes_92;
            } else {
                goto branch_no_92;
            }
        }
        branch_yes_92:;
        {
            PyObject *tmp_assign_source_271;
            PyObject *tmp_called_value_106;
            PyObject *tmp_expression_value_198;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_119;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_expression_value_198 = tmp_JSON$class_creation_3__metaclass;
            tmp_called_value_106 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_198, mod_consts[449]);
            if (tmp_called_value_106 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_tuple_element_119 = mod_consts[319];
            tmp_args_value_60 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_tuple_element_119 = tmp_JSON$class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_kwargs_value_60 = tmp_JSON$class_creation_3__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2465;
            tmp_assign_source_271 = CALL_FUNCTION(tstate, tmp_called_value_106, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_called_value_106);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_271 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_3__prepared == NULL);
            tmp_JSON$class_creation_3__prepared = tmp_assign_source_271;
        }
        {
            bool tmp_condition_result_143;
            PyObject *tmp_operand_value_31;
            PyObject *tmp_expression_value_199;
            CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
            tmp_expression_value_199 = tmp_JSON$class_creation_3__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_199, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_operand_value_31 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
            assert(!(tmp_res == -1));
            tmp_condition_result_143 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_143 != false) {
                goto branch_yes_93;
            } else {
                goto branch_no_93;
            }
        }
        branch_yes_93:;
        {
            PyObject *tmp_raise_type_31;
            PyObject *tmp_raise_value_31;
            PyObject *tmp_mod_expr_left_31;
            PyObject *tmp_mod_expr_right_31;
            PyObject *tmp_tuple_element_120;
            PyObject *tmp_expression_value_200;
            PyObject *tmp_name_value_64;
            PyObject *tmp_default_value_31;
            tmp_raise_type_31 = PyExc_TypeError;
            tmp_mod_expr_left_31 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_expression_value_200 = tmp_JSON$class_creation_3__metaclass;
            tmp_name_value_64 = mod_consts[201];
            tmp_default_value_31 = mod_consts[453];
            tmp_tuple_element_120 = BUILTIN_GETATTR(tstate, tmp_expression_value_200, tmp_name_value_64, tmp_default_value_31);
            if (tmp_tuple_element_120 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_mod_expr_right_31 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_201;
                PyObject *tmp_type_arg_62;
                PyTuple_SET_ITEM(tmp_mod_expr_right_31, 0, tmp_tuple_element_120);
                CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
                tmp_type_arg_62 = tmp_JSON$class_creation_3__prepared;
                tmp_expression_value_201 = BUILTIN_TYPE1(tmp_type_arg_62);
                assert(!(tmp_expression_value_201 == NULL));
                tmp_tuple_element_120 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_201, mod_consts[201]);
                Py_DECREF(tmp_expression_value_201);
                if (tmp_tuple_element_120 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2465;
                    type_description_2 = "o";
                    goto tuple_build_exception_42;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_31, 1, tmp_tuple_element_120);
            }
            goto tuple_build_noexception_42;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_42:;
            Py_DECREF(tmp_mod_expr_right_31);
            goto try_except_handler_91;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_42:;
            tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_31, tmp_mod_expr_right_31);
            Py_DECREF(tmp_mod_expr_right_31);
            if (tmp_raise_value_31 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            exception_type = tmp_raise_type_31;
            Py_INCREF(tmp_raise_type_31);
            exception_value = tmp_raise_value_31;
            exception_lineno = 2465;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_91;
        }
        branch_no_93:;
        goto branch_end_92;
        branch_no_92:;
        {
            PyObject *tmp_assign_source_272;
            tmp_assign_source_272 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_3__prepared == NULL);
            tmp_JSON$class_creation_3__prepared = tmp_assign_source_272;
        }
        branch_end_92:;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
            tmp_set_locals_31 = tmp_JSON$class_creation_3__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2465;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[666];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2465;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[668];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2465;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_cmp_expr_left_30 = tmp_JSON$class_creation_3__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
            tmp_cmp_expr_right_30 = tmp_JSON$class_creation_3__bases_orig;
            tmp_condition_result_144 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_144 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_93;
            }
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto branch_yes_94;
            } else {
                goto branch_no_94;
            }
        }
        branch_yes_94:;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2465;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        branch_no_94:;
        {
            PyObject *tmp_assign_source_273;
            PyObject *tmp_called_value_107;
            PyObject *tmp_args_value_61;
            PyObject *tmp_tuple_element_121;
            PyObject *tmp_kwargs_value_61;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_called_value_107 = tmp_JSON$class_creation_3__metaclass;
            tmp_tuple_element_121 = mod_consts[319];
            tmp_args_value_61 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_tuple_element_121 = tmp_JSON$class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_121);
            tmp_tuple_element_121 = locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465;
            PyTuple_SET_ITEM0(tmp_args_value_61, 2, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_kwargs_value_61 = tmp_JSON$class_creation_3__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2465;
            tmp_assign_source_273 = CALL_FUNCTION(tstate, tmp_called_value_107, tmp_args_value_61, tmp_kwargs_value_61);
            Py_DECREF(tmp_args_value_61);
            if (tmp_assign_source_273 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2465;
                type_description_2 = "o";
                goto try_except_handler_93;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_273;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_dictset_value = outline_30_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_93;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_93:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465);
        locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465 = NULL;
        goto try_return_handler_92;
        // Exception handler code:
        try_except_handler_93:;
        exception_keeper_type_88 = exception_type;
        exception_keeper_value_88 = exception_value;
        exception_keeper_tb_88 = exception_tb;
        exception_keeper_lineno_88 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465);
        locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIntIndexType_2465 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;
        exception_lineno = exception_keeper_lineno_88;

        goto try_except_handler_92;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_89 = exception_type;
        exception_keeper_value_89 = exception_value;
        exception_keeper_tb_89 = exception_tb;
        exception_keeper_lineno_89 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;
        exception_lineno = exception_keeper_lineno_89;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 2465;
        goto try_except_handler_91;
        outline_result_31:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[319], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2465;
            type_description_2 = "o";
            goto try_except_handler_91;
        }
        goto try_end_30;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_3__bases_orig);
        tmp_JSON$class_creation_3__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__bases);
        tmp_JSON$class_creation_3__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__class_decl_dict);
        tmp_JSON$class_creation_3__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__metaclass);
        tmp_JSON$class_creation_3__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__prepared);
        tmp_JSON$class_creation_3__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto frame_exception_exit_29;
        // End of try:
        try_end_30:;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_3__bases_orig);
        tmp_JSON$class_creation_3__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
        Py_DECREF(tmp_JSON$class_creation_3__bases);
        tmp_JSON$class_creation_3__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_3__class_decl_dict);
        tmp_JSON$class_creation_3__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
        Py_DECREF(tmp_JSON$class_creation_3__metaclass);
        tmp_JSON$class_creation_3__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
        Py_DECREF(tmp_JSON$class_creation_3__prepared);
        tmp_JSON$class_creation_3__prepared = NULL;
        {
            PyObject *tmp_assign_source_274;
            PyObject *tmp_tuple_element_122;
            tmp_tuple_element_122 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[665]);

            if (unlikely(tmp_tuple_element_122 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[665]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2473;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_tuple_element_122 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_assign_source_274 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_274, 0, tmp_tuple_element_122);
            assert(tmp_JSON$class_creation_4__bases_orig == NULL);
            tmp_JSON$class_creation_4__bases_orig = tmp_assign_source_274;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_275;
            PyObject *tmp_dircall_arg1_32;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
            tmp_dircall_arg1_32 = tmp_JSON$class_creation_4__bases_orig;
            Py_INCREF(tmp_dircall_arg1_32);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
                tmp_assign_source_275 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_275 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_4__bases == NULL);
            tmp_JSON$class_creation_4__bases = tmp_assign_source_275;
        }
        {
            PyObject *tmp_assign_source_276;
            tmp_assign_source_276 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_4__class_decl_dict == NULL);
            tmp_JSON$class_creation_4__class_decl_dict = tmp_assign_source_276;
        }
        {
            PyObject *tmp_assign_source_277;
            PyObject *tmp_metaclass_value_32;
            nuitka_bool tmp_condition_result_145;
            int tmp_truth_name_34;
            PyObject *tmp_type_arg_63;
            PyObject *tmp_expression_value_202;
            PyObject *tmp_subscript_value_32;
            PyObject *tmp_bases_value_32;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_truth_name_34 = CHECK_IF_TRUE(tmp_JSON$class_creation_4__bases);
            if (tmp_truth_name_34 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_condition_result_145 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_145 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_51;
            } else {
                goto condexpr_false_51;
            }
            condexpr_true_51:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_expression_value_202 = tmp_JSON$class_creation_4__bases;
            tmp_subscript_value_32 = mod_consts[52];
            tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_202, tmp_subscript_value_32, 0);
            if (tmp_type_arg_63 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
            Py_DECREF(tmp_type_arg_63);
            if (tmp_metaclass_value_32 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            goto condexpr_end_51;
            condexpr_false_51:;
            tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_32);
            condexpr_end_51:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_bases_value_32 = tmp_JSON$class_creation_4__bases;
            tmp_assign_source_277 = SELECT_METACLASS(tstate, tmp_metaclass_value_32, tmp_bases_value_32);
            Py_DECREF(tmp_metaclass_value_32);
            if (tmp_assign_source_277 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_4__metaclass == NULL);
            tmp_JSON$class_creation_4__metaclass = tmp_assign_source_277;
        }
        {
            bool tmp_condition_result_146;
            PyObject *tmp_expression_value_203;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_expression_value_203 = tmp_JSON$class_creation_4__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_203, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_condition_result_146 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_146 != false) {
                goto branch_yes_95;
            } else {
                goto branch_no_95;
            }
        }
        branch_yes_95:;
        {
            PyObject *tmp_assign_source_278;
            PyObject *tmp_called_value_108;
            PyObject *tmp_expression_value_204;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_123;
            PyObject *tmp_kwargs_value_62;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_expression_value_204 = tmp_JSON$class_creation_4__metaclass;
            tmp_called_value_108 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_204, mod_consts[449]);
            if (tmp_called_value_108 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_tuple_element_123 = mod_consts[320];
            tmp_args_value_62 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_tuple_element_123 = tmp_JSON$class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_kwargs_value_62 = tmp_JSON$class_creation_4__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2473;
            tmp_assign_source_278 = CALL_FUNCTION(tstate, tmp_called_value_108, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_called_value_108);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_278 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_4__prepared == NULL);
            tmp_JSON$class_creation_4__prepared = tmp_assign_source_278;
        }
        {
            bool tmp_condition_result_147;
            PyObject *tmp_operand_value_32;
            PyObject *tmp_expression_value_205;
            CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
            tmp_expression_value_205 = tmp_JSON$class_creation_4__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_205, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_operand_value_32 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
            assert(!(tmp_res == -1));
            tmp_condition_result_147 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_147 != false) {
                goto branch_yes_96;
            } else {
                goto branch_no_96;
            }
        }
        branch_yes_96:;
        {
            PyObject *tmp_raise_type_32;
            PyObject *tmp_raise_value_32;
            PyObject *tmp_mod_expr_left_32;
            PyObject *tmp_mod_expr_right_32;
            PyObject *tmp_tuple_element_124;
            PyObject *tmp_expression_value_206;
            PyObject *tmp_name_value_65;
            PyObject *tmp_default_value_32;
            tmp_raise_type_32 = PyExc_TypeError;
            tmp_mod_expr_left_32 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_expression_value_206 = tmp_JSON$class_creation_4__metaclass;
            tmp_name_value_65 = mod_consts[201];
            tmp_default_value_32 = mod_consts[453];
            tmp_tuple_element_124 = BUILTIN_GETATTR(tstate, tmp_expression_value_206, tmp_name_value_65, tmp_default_value_32);
            if (tmp_tuple_element_124 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_mod_expr_right_32 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_207;
                PyObject *tmp_type_arg_64;
                PyTuple_SET_ITEM(tmp_mod_expr_right_32, 0, tmp_tuple_element_124);
                CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
                tmp_type_arg_64 = tmp_JSON$class_creation_4__prepared;
                tmp_expression_value_207 = BUILTIN_TYPE1(tmp_type_arg_64);
                assert(!(tmp_expression_value_207 == NULL));
                tmp_tuple_element_124 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_207, mod_consts[201]);
                Py_DECREF(tmp_expression_value_207);
                if (tmp_tuple_element_124 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2473;
                    type_description_2 = "o";
                    goto tuple_build_exception_43;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_32, 1, tmp_tuple_element_124);
            }
            goto tuple_build_noexception_43;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_43:;
            Py_DECREF(tmp_mod_expr_right_32);
            goto try_except_handler_94;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_43:;
            tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_32, tmp_mod_expr_right_32);
            Py_DECREF(tmp_mod_expr_right_32);
            if (tmp_raise_value_32 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            exception_type = tmp_raise_type_32;
            Py_INCREF(tmp_raise_type_32);
            exception_value = tmp_raise_value_32;
            exception_lineno = 2473;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_94;
        }
        branch_no_96:;
        goto branch_end_95;
        branch_no_95:;
        {
            PyObject *tmp_assign_source_279;
            tmp_assign_source_279 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_4__prepared == NULL);
            tmp_JSON$class_creation_4__prepared = tmp_assign_source_279;
        }
        branch_end_95:;
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
            tmp_set_locals_32 = tmp_JSON$class_creation_4__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2473;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[666];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2473;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[669];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2473;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        {
            nuitka_bool tmp_condition_result_148;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_cmp_expr_left_31 = tmp_JSON$class_creation_4__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
            tmp_cmp_expr_right_31 = tmp_JSON$class_creation_4__bases_orig;
            tmp_condition_result_148 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_148 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_96;
            }
            if (tmp_condition_result_148 == NUITKA_BOOL_TRUE) {
                goto branch_yes_97;
            } else {
                goto branch_no_97;
            }
        }
        branch_yes_97:;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2473;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        branch_no_97:;
        {
            PyObject *tmp_assign_source_280;
            PyObject *tmp_called_value_109;
            PyObject *tmp_args_value_63;
            PyObject *tmp_tuple_element_125;
            PyObject *tmp_kwargs_value_63;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_called_value_109 = tmp_JSON$class_creation_4__metaclass;
            tmp_tuple_element_125 = mod_consts[320];
            tmp_args_value_63 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_tuple_element_125 = tmp_JSON$class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_125);
            tmp_tuple_element_125 = locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473;
            PyTuple_SET_ITEM0(tmp_args_value_63, 2, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_kwargs_value_63 = tmp_JSON$class_creation_4__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2473;
            tmp_assign_source_280 = CALL_FUNCTION(tstate, tmp_called_value_109, tmp_args_value_63, tmp_kwargs_value_63);
            Py_DECREF(tmp_args_value_63);
            if (tmp_assign_source_280 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2473;
                type_description_2 = "o";
                goto try_except_handler_96;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_280;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_dictset_value = outline_31_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_96;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473);
        locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473 = NULL;
        goto try_return_handler_95;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473);
        locals_sqlalchemy$sql$sqltypes$$$class__32_JSONStrIndexType_2473 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto try_except_handler_95;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_92 = exception_type;
        exception_keeper_value_92 = exception_value;
        exception_keeper_tb_92 = exception_tb;
        exception_keeper_lineno_92 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;
        exception_lineno = exception_keeper_lineno_92;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 2473;
        goto try_except_handler_94;
        outline_result_32:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[320], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2473;
            type_description_2 = "o";
            goto try_except_handler_94;
        }
        goto try_end_31;
        // Exception handler code:
        try_except_handler_94:;
        exception_keeper_type_93 = exception_type;
        exception_keeper_value_93 = exception_value;
        exception_keeper_tb_93 = exception_tb;
        exception_keeper_lineno_93 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_4__bases_orig);
        tmp_JSON$class_creation_4__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__bases);
        tmp_JSON$class_creation_4__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__class_decl_dict);
        tmp_JSON$class_creation_4__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__metaclass);
        tmp_JSON$class_creation_4__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__prepared);
        tmp_JSON$class_creation_4__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;
        exception_lineno = exception_keeper_lineno_93;

        goto frame_exception_exit_29;
        // End of try:
        try_end_31:;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_4__bases_orig);
        tmp_JSON$class_creation_4__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
        Py_DECREF(tmp_JSON$class_creation_4__bases);
        tmp_JSON$class_creation_4__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_4__class_decl_dict);
        tmp_JSON$class_creation_4__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
        Py_DECREF(tmp_JSON$class_creation_4__metaclass);
        tmp_JSON$class_creation_4__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
        Py_DECREF(tmp_JSON$class_creation_4__prepared);
        tmp_JSON$class_creation_4__prepared = NULL;
        {
            PyObject *tmp_assign_source_281;
            PyObject *tmp_tuple_element_126;
            tmp_tuple_element_126 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[658]);

            if (unlikely(tmp_tuple_element_126 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[658]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2481;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_tuple_element_126 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_assign_source_281 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_281, 0, tmp_tuple_element_126);
            assert(tmp_JSON$class_creation_5__bases_orig == NULL);
            tmp_JSON$class_creation_5__bases_orig = tmp_assign_source_281;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_282;
            PyObject *tmp_dircall_arg1_33;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases_orig);
            tmp_dircall_arg1_33 = tmp_JSON$class_creation_5__bases_orig;
            Py_INCREF(tmp_dircall_arg1_33);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
                tmp_assign_source_282 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_282 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_5__bases == NULL);
            tmp_JSON$class_creation_5__bases = tmp_assign_source_282;
        }
        {
            PyObject *tmp_assign_source_283;
            tmp_assign_source_283 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_5__class_decl_dict == NULL);
            tmp_JSON$class_creation_5__class_decl_dict = tmp_assign_source_283;
        }
        {
            PyObject *tmp_assign_source_284;
            PyObject *tmp_metaclass_value_33;
            nuitka_bool tmp_condition_result_149;
            int tmp_truth_name_35;
            PyObject *tmp_type_arg_65;
            PyObject *tmp_expression_value_208;
            PyObject *tmp_subscript_value_33;
            PyObject *tmp_bases_value_33;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_truth_name_35 = CHECK_IF_TRUE(tmp_JSON$class_creation_5__bases);
            if (tmp_truth_name_35 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_condition_result_149 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_149 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_52;
            } else {
                goto condexpr_false_52;
            }
            condexpr_true_52:;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_expression_value_208 = tmp_JSON$class_creation_5__bases;
            tmp_subscript_value_33 = mod_consts[52];
            tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_208, tmp_subscript_value_33, 0);
            if (tmp_type_arg_65 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
            Py_DECREF(tmp_type_arg_65);
            if (tmp_metaclass_value_33 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            goto condexpr_end_52;
            condexpr_false_52:;
            tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_33);
            condexpr_end_52:;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_bases_value_33 = tmp_JSON$class_creation_5__bases;
            tmp_assign_source_284 = SELECT_METACLASS(tstate, tmp_metaclass_value_33, tmp_bases_value_33);
            Py_DECREF(tmp_metaclass_value_33);
            if (tmp_assign_source_284 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_5__metaclass == NULL);
            tmp_JSON$class_creation_5__metaclass = tmp_assign_source_284;
        }
        {
            bool tmp_condition_result_150;
            PyObject *tmp_expression_value_209;
            CHECK_OBJECT(tmp_JSON$class_creation_5__metaclass);
            tmp_expression_value_209 = tmp_JSON$class_creation_5__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_209, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_condition_result_150 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_150 != false) {
                goto branch_yes_98;
            } else {
                goto branch_no_98;
            }
        }
        branch_yes_98:;
        {
            PyObject *tmp_assign_source_285;
            PyObject *tmp_called_value_110;
            PyObject *tmp_expression_value_210;
            PyObject *tmp_args_value_64;
            PyObject *tmp_tuple_element_127;
            PyObject *tmp_kwargs_value_64;
            CHECK_OBJECT(tmp_JSON$class_creation_5__metaclass);
            tmp_expression_value_210 = tmp_JSON$class_creation_5__metaclass;
            tmp_called_value_110 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_210, mod_consts[449]);
            if (tmp_called_value_110 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_tuple_element_127 = mod_consts[316];
            tmp_args_value_64 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_tuple_element_127 = tmp_JSON$class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_JSON$class_creation_5__class_decl_dict);
            tmp_kwargs_value_64 = tmp_JSON$class_creation_5__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2481;
            tmp_assign_source_285 = CALL_FUNCTION(tstate, tmp_called_value_110, tmp_args_value_64, tmp_kwargs_value_64);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_args_value_64);
            if (tmp_assign_source_285 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_5__prepared == NULL);
            tmp_JSON$class_creation_5__prepared = tmp_assign_source_285;
        }
        {
            bool tmp_condition_result_151;
            PyObject *tmp_operand_value_33;
            PyObject *tmp_expression_value_211;
            CHECK_OBJECT(tmp_JSON$class_creation_5__prepared);
            tmp_expression_value_211 = tmp_JSON$class_creation_5__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_211, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_operand_value_33 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
            assert(!(tmp_res == -1));
            tmp_condition_result_151 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_151 != false) {
                goto branch_yes_99;
            } else {
                goto branch_no_99;
            }
        }
        branch_yes_99:;
        {
            PyObject *tmp_raise_type_33;
            PyObject *tmp_raise_value_33;
            PyObject *tmp_mod_expr_left_33;
            PyObject *tmp_mod_expr_right_33;
            PyObject *tmp_tuple_element_128;
            PyObject *tmp_expression_value_212;
            PyObject *tmp_name_value_66;
            PyObject *tmp_default_value_33;
            tmp_raise_type_33 = PyExc_TypeError;
            tmp_mod_expr_left_33 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_5__metaclass);
            tmp_expression_value_212 = tmp_JSON$class_creation_5__metaclass;
            tmp_name_value_66 = mod_consts[201];
            tmp_default_value_33 = mod_consts[453];
            tmp_tuple_element_128 = BUILTIN_GETATTR(tstate, tmp_expression_value_212, tmp_name_value_66, tmp_default_value_33);
            if (tmp_tuple_element_128 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_mod_expr_right_33 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_213;
                PyObject *tmp_type_arg_66;
                PyTuple_SET_ITEM(tmp_mod_expr_right_33, 0, tmp_tuple_element_128);
                CHECK_OBJECT(tmp_JSON$class_creation_5__prepared);
                tmp_type_arg_66 = tmp_JSON$class_creation_5__prepared;
                tmp_expression_value_213 = BUILTIN_TYPE1(tmp_type_arg_66);
                assert(!(tmp_expression_value_213 == NULL));
                tmp_tuple_element_128 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_213, mod_consts[201]);
                Py_DECREF(tmp_expression_value_213);
                if (tmp_tuple_element_128 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2481;
                    type_description_2 = "o";
                    goto tuple_build_exception_44;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_33, 1, tmp_tuple_element_128);
            }
            goto tuple_build_noexception_44;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_44:;
            Py_DECREF(tmp_mod_expr_right_33);
            goto try_except_handler_97;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_44:;
            tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_33, tmp_mod_expr_right_33);
            Py_DECREF(tmp_mod_expr_right_33);
            if (tmp_raise_value_33 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            exception_type = tmp_raise_type_33;
            Py_INCREF(tmp_raise_type_33);
            exception_value = tmp_raise_value_33;
            exception_lineno = 2481;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_97;
        }
        branch_no_99:;
        goto branch_end_98;
        branch_no_98:;
        {
            PyObject *tmp_assign_source_286;
            tmp_assign_source_286 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_5__prepared == NULL);
            tmp_JSON$class_creation_5__prepared = tmp_assign_source_286;
        }
        branch_end_98:;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_JSON$class_creation_5__prepared);
            tmp_set_locals_33 = tmp_JSON$class_creation_5__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2481;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[670];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2481;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[671];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2481;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        {
            nuitka_bool tmp_condition_result_152;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_cmp_expr_left_32 = tmp_JSON$class_creation_5__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases_orig);
            tmp_cmp_expr_right_32 = tmp_JSON$class_creation_5__bases_orig;
            tmp_condition_result_152 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_152 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_99;
            }
            if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
                goto branch_yes_100;
            } else {
                goto branch_no_100;
            }
        }
        branch_yes_100:;
        CHECK_OBJECT(tmp_JSON$class_creation_5__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2481;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        branch_no_100:;
        {
            PyObject *tmp_assign_source_287;
            PyObject *tmp_called_value_111;
            PyObject *tmp_args_value_65;
            PyObject *tmp_tuple_element_129;
            PyObject *tmp_kwargs_value_65;
            CHECK_OBJECT(tmp_JSON$class_creation_5__metaclass);
            tmp_called_value_111 = tmp_JSON$class_creation_5__metaclass;
            tmp_tuple_element_129 = mod_consts[316];
            tmp_args_value_65 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_129);
            CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
            tmp_tuple_element_129 = tmp_JSON$class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_129);
            tmp_tuple_element_129 = locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481;
            PyTuple_SET_ITEM0(tmp_args_value_65, 2, tmp_tuple_element_129);
            CHECK_OBJECT(tmp_JSON$class_creation_5__class_decl_dict);
            tmp_kwargs_value_65 = tmp_JSON$class_creation_5__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2481;
            tmp_assign_source_287 = CALL_FUNCTION(tstate, tmp_called_value_111, tmp_args_value_65, tmp_kwargs_value_65);
            Py_DECREF(tmp_args_value_65);
            if (tmp_assign_source_287 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2481;
                type_description_2 = "o";
                goto try_except_handler_99;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_287;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_dictset_value = outline_32_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_99;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_99:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481);
        locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481 = NULL;
        goto try_return_handler_98;
        // Exception handler code:
        try_except_handler_99:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481);
        locals_sqlalchemy$sql$sqltypes$$$class__33_JSONPathType_2481 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto try_except_handler_98;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 2481;
        goto try_except_handler_97;
        outline_result_33:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[316], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2481;
            type_description_2 = "o";
            goto try_except_handler_97;
        }
        goto try_end_32;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_5__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_5__bases_orig);
        tmp_JSON$class_creation_5__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_5__bases);
        tmp_JSON$class_creation_5__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_5__class_decl_dict);
        tmp_JSON$class_creation_5__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_5__metaclass);
        tmp_JSON$class_creation_5__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_5__prepared);
        tmp_JSON$class_creation_5__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto frame_exception_exit_29;
        // End of try:
        try_end_32:;
        CHECK_OBJECT(tmp_JSON$class_creation_5__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_5__bases_orig);
        tmp_JSON$class_creation_5__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_5__bases);
        Py_DECREF(tmp_JSON$class_creation_5__bases);
        tmp_JSON$class_creation_5__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_5__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_5__class_decl_dict);
        tmp_JSON$class_creation_5__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_5__metaclass);
        Py_DECREF(tmp_JSON$class_creation_5__metaclass);
        tmp_JSON$class_creation_5__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_5__prepared);
        Py_DECREF(tmp_JSON$class_creation_5__prepared);
        tmp_JSON$class_creation_5__prepared = NULL;
        // Tried code:
        {
            PyObject *tmp_assign_source_288;
            PyObject *tmp_tuple_element_130;
            PyObject *tmp_expression_value_214;
            tmp_expression_value_214 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[468]);

            if (tmp_expression_value_214 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_214 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468]);

                    if (unlikely(tmp_expression_value_214 == NULL)) {
                        tmp_expression_value_214 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[468]);
                    }

                    if (tmp_expression_value_214 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2489;
                        type_description_2 = "o";
                        goto try_except_handler_100;
                    }
                    Py_INCREF(tmp_expression_value_214);
                } else {
                    goto try_except_handler_100;
                }
            }

            tmp_tuple_element_130 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_214, mod_consts[9]);
            Py_DECREF(tmp_expression_value_214);
            if (tmp_tuple_element_130 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_assign_source_288 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_215;
                PyTuple_SET_ITEM(tmp_assign_source_288, 0, tmp_tuple_element_130);
                tmp_expression_value_215 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[8]);

                if (tmp_expression_value_215 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_215 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

                        if (unlikely(tmp_expression_value_215 == NULL)) {
                            tmp_expression_value_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
                        }

                        if (tmp_expression_value_215 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2489;
                            type_description_2 = "o";
                            goto tuple_build_exception_45;
                        }
                        Py_INCREF(tmp_expression_value_215);
                    } else {
                        goto tuple_build_exception_45;
                    }
                }

                tmp_tuple_element_130 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_215, mod_consts[9]);
                Py_DECREF(tmp_expression_value_215);
                if (tmp_tuple_element_130 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2489;
                    type_description_2 = "o";
                    goto tuple_build_exception_45;
                }
                PyTuple_SET_ITEM(tmp_assign_source_288, 1, tmp_tuple_element_130);
            }
            goto tuple_build_noexception_45;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_45:;
            Py_DECREF(tmp_assign_source_288);
            goto try_except_handler_100;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_45:;
            assert(tmp_JSON$class_creation_6__bases_orig == NULL);
            tmp_JSON$class_creation_6__bases_orig = tmp_assign_source_288;
        }
        {
            PyObject *tmp_assign_source_289;
            PyObject *tmp_dircall_arg1_34;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases_orig);
            tmp_dircall_arg1_34 = tmp_JSON$class_creation_6__bases_orig;
            Py_INCREF(tmp_dircall_arg1_34);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
                tmp_assign_source_289 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_289 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            assert(tmp_JSON$class_creation_6__bases == NULL);
            tmp_JSON$class_creation_6__bases = tmp_assign_source_289;
        }
        {
            PyObject *tmp_assign_source_290;
            tmp_assign_source_290 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_6__class_decl_dict == NULL);
            tmp_JSON$class_creation_6__class_decl_dict = tmp_assign_source_290;
        }
        {
            PyObject *tmp_assign_source_291;
            PyObject *tmp_metaclass_value_34;
            nuitka_bool tmp_condition_result_153;
            int tmp_truth_name_36;
            PyObject *tmp_type_arg_67;
            PyObject *tmp_expression_value_216;
            PyObject *tmp_subscript_value_34;
            PyObject *tmp_bases_value_34;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_truth_name_36 = CHECK_IF_TRUE(tmp_JSON$class_creation_6__bases);
            if (tmp_truth_name_36 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_condition_result_153 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_153 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_53;
            } else {
                goto condexpr_false_53;
            }
            condexpr_true_53:;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_expression_value_216 = tmp_JSON$class_creation_6__bases;
            tmp_subscript_value_34 = mod_consts[52];
            tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_216, tmp_subscript_value_34, 0);
            if (tmp_type_arg_67 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
            Py_DECREF(tmp_type_arg_67);
            if (tmp_metaclass_value_34 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            goto condexpr_end_53;
            condexpr_false_53:;
            tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_34);
            condexpr_end_53:;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_bases_value_34 = tmp_JSON$class_creation_6__bases;
            tmp_assign_source_291 = SELECT_METACLASS(tstate, tmp_metaclass_value_34, tmp_bases_value_34);
            Py_DECREF(tmp_metaclass_value_34);
            if (tmp_assign_source_291 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            assert(tmp_JSON$class_creation_6__metaclass == NULL);
            tmp_JSON$class_creation_6__metaclass = tmp_assign_source_291;
        }
        {
            bool tmp_condition_result_154;
            PyObject *tmp_expression_value_217;
            CHECK_OBJECT(tmp_JSON$class_creation_6__metaclass);
            tmp_expression_value_217 = tmp_JSON$class_creation_6__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_217, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_condition_result_154 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_154 != false) {
                goto branch_yes_101;
            } else {
                goto branch_no_101;
            }
        }
        branch_yes_101:;
        {
            PyObject *tmp_assign_source_292;
            PyObject *tmp_called_value_112;
            PyObject *tmp_expression_value_218;
            PyObject *tmp_args_value_66;
            PyObject *tmp_tuple_element_131;
            PyObject *tmp_kwargs_value_66;
            CHECK_OBJECT(tmp_JSON$class_creation_6__metaclass);
            tmp_expression_value_218 = tmp_JSON$class_creation_6__metaclass;
            tmp_called_value_112 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_218, mod_consts[449]);
            if (tmp_called_value_112 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_tuple_element_131 = mod_consts[9];
            tmp_args_value_66 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_tuple_element_131 = tmp_JSON$class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_JSON$class_creation_6__class_decl_dict);
            tmp_kwargs_value_66 = tmp_JSON$class_creation_6__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2489;
            tmp_assign_source_292 = CALL_FUNCTION(tstate, tmp_called_value_112, tmp_args_value_66, tmp_kwargs_value_66);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_args_value_66);
            if (tmp_assign_source_292 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            assert(tmp_JSON$class_creation_6__prepared == NULL);
            tmp_JSON$class_creation_6__prepared = tmp_assign_source_292;
        }
        {
            bool tmp_condition_result_155;
            PyObject *tmp_operand_value_34;
            PyObject *tmp_expression_value_219;
            CHECK_OBJECT(tmp_JSON$class_creation_6__prepared);
            tmp_expression_value_219 = tmp_JSON$class_creation_6__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_219, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_operand_value_34 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
            assert(!(tmp_res == -1));
            tmp_condition_result_155 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_155 != false) {
                goto branch_yes_102;
            } else {
                goto branch_no_102;
            }
        }
        branch_yes_102:;
        {
            PyObject *tmp_raise_type_34;
            PyObject *tmp_raise_value_34;
            PyObject *tmp_mod_expr_left_34;
            PyObject *tmp_mod_expr_right_34;
            PyObject *tmp_tuple_element_132;
            PyObject *tmp_expression_value_220;
            PyObject *tmp_name_value_67;
            PyObject *tmp_default_value_34;
            tmp_raise_type_34 = PyExc_TypeError;
            tmp_mod_expr_left_34 = mod_consts[452];
            CHECK_OBJECT(tmp_JSON$class_creation_6__metaclass);
            tmp_expression_value_220 = tmp_JSON$class_creation_6__metaclass;
            tmp_name_value_67 = mod_consts[201];
            tmp_default_value_34 = mod_consts[453];
            tmp_tuple_element_132 = BUILTIN_GETATTR(tstate, tmp_expression_value_220, tmp_name_value_67, tmp_default_value_34);
            if (tmp_tuple_element_132 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            tmp_mod_expr_right_34 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_221;
                PyObject *tmp_type_arg_68;
                PyTuple_SET_ITEM(tmp_mod_expr_right_34, 0, tmp_tuple_element_132);
                CHECK_OBJECT(tmp_JSON$class_creation_6__prepared);
                tmp_type_arg_68 = tmp_JSON$class_creation_6__prepared;
                tmp_expression_value_221 = BUILTIN_TYPE1(tmp_type_arg_68);
                assert(!(tmp_expression_value_221 == NULL));
                tmp_tuple_element_132 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_221, mod_consts[201]);
                Py_DECREF(tmp_expression_value_221);
                if (tmp_tuple_element_132 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2489;
                    type_description_2 = "o";
                    goto tuple_build_exception_46;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_34, 1, tmp_tuple_element_132);
            }
            goto tuple_build_noexception_46;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_46:;
            Py_DECREF(tmp_mod_expr_right_34);
            goto try_except_handler_100;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_46:;
            tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_34, tmp_mod_expr_right_34);
            Py_DECREF(tmp_mod_expr_right_34);
            if (tmp_raise_value_34 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_100;
            }
            exception_type = tmp_raise_type_34;
            Py_INCREF(tmp_raise_type_34);
            exception_value = tmp_raise_value_34;
            exception_lineno = 2489;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_100;
        }
        branch_no_102:;
        goto branch_end_101;
        branch_no_101:;
        {
            PyObject *tmp_assign_source_293;
            tmp_assign_source_293 = MAKE_DICT_EMPTY();
            assert(tmp_JSON$class_creation_6__prepared == NULL);
            tmp_JSON$class_creation_6__prepared = tmp_assign_source_293;
        }
        branch_end_101:;
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_JSON$class_creation_6__prepared);
            tmp_set_locals_34 = tmp_JSON$class_creation_6__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2489;
            type_description_2 = "o";
            goto try_except_handler_102;
        }
        tmp_dictset_value = mod_consts[672];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2489;
            type_description_2 = "o";
            goto try_except_handler_102;
        }
        tmp_dictset_value = mod_consts[673];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2489;
            type_description_2 = "o";
            goto try_except_handler_102;
        }
        frame_3166cd2ac67daff286dcc8c5c35c8827_31 = MAKE_CLASS_FRAME(tstate, codeobj_3166cd2ac67daff286dcc8c5c35c8827, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_3166cd2ac67daff286dcc8c5c35c8827_31);
        assert(Py_REFCNT(frame_3166cd2ac67daff286dcc8c5c35c8827_31) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113__setup_getitem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[14], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2492;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_boolean();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[323], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2519;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_string();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[325], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2535;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_integer();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[327], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2552;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_float();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[330], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2568;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }
        {
            PyObject *tmp_defaults_18;
            tmp_defaults_18 = mod_consts[343];
            Py_INCREF(tmp_defaults_18);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118_as_numeric(tmp_defaults_18);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[333], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2584;
                type_description_3 = "o";
                goto frame_exception_exit_31;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_as_json();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[680], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2603;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120__binary_w_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[321], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2621;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_29;
        frame_exception_exit_31:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3166cd2ac67daff286dcc8c5c35c8827_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3166cd2ac67daff286dcc8c5c35c8827_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3166cd2ac67daff286dcc8c5c35c8827_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3166cd2ac67daff286dcc8c5c35c8827_31,
            type_description_3,
            outline_33_var___class__
        );



        assertFrameObject(frame_3166cd2ac67daff286dcc8c5c35c8827_31);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_30;
        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_30:;
        type_description_2 = "o";
        goto try_except_handler_102;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_156;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_cmp_expr_left_33 = tmp_JSON$class_creation_6__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases_orig);
            tmp_cmp_expr_right_33 = tmp_JSON$class_creation_6__bases_orig;
            tmp_condition_result_156 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_156 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_102;
            }
            if (tmp_condition_result_156 == NUITKA_BOOL_TRUE) {
                goto branch_yes_103;
            } else {
                goto branch_no_103;
            }
        }
        branch_yes_103:;
        CHECK_OBJECT(tmp_JSON$class_creation_6__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2489;
            type_description_2 = "o";
            goto try_except_handler_102;
        }
        branch_no_103:;
        {
            PyObject *tmp_assign_source_294;
            PyObject *tmp_called_value_113;
            PyObject *tmp_args_value_67;
            PyObject *tmp_tuple_element_133;
            PyObject *tmp_kwargs_value_67;
            CHECK_OBJECT(tmp_JSON$class_creation_6__metaclass);
            tmp_called_value_113 = tmp_JSON$class_creation_6__metaclass;
            tmp_tuple_element_133 = mod_consts[9];
            tmp_args_value_67 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
            tmp_tuple_element_133 = tmp_JSON$class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_133);
            tmp_tuple_element_133 = locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489;
            PyTuple_SET_ITEM0(tmp_args_value_67, 2, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_JSON$class_creation_6__class_decl_dict);
            tmp_kwargs_value_67 = tmp_JSON$class_creation_6__class_decl_dict;
            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2489;
            tmp_assign_source_294 = CALL_FUNCTION(tstate, tmp_called_value_113, tmp_args_value_67, tmp_kwargs_value_67);
            Py_DECREF(tmp_args_value_67);
            if (tmp_assign_source_294 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2489;
                type_description_2 = "o";
                goto try_except_handler_102;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_294;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_dictset_value = outline_33_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_102;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489);
        locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489 = NULL;
        goto try_return_handler_101;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489);
        locals_sqlalchemy$sql$sqltypes$$$class__34_Comparator_2489 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto try_except_handler_101;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_98 = exception_type;
        exception_keeper_value_98 = exception_value;
        exception_keeper_tb_98 = exception_tb;
        exception_keeper_lineno_98 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;
        exception_lineno = exception_keeper_lineno_98;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 2489;
        goto try_except_handler_100;
        outline_result_34:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2489;
            type_description_2 = "o";
            goto try_except_handler_100;
        }
        goto try_end_33;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_JSON$class_creation_6__bases_orig);
        tmp_JSON$class_creation_6__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_6__bases);
        tmp_JSON$class_creation_6__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_6__class_decl_dict);
        tmp_JSON$class_creation_6__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_6__metaclass);
        tmp_JSON$class_creation_6__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_6__prepared);
        tmp_JSON$class_creation_6__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto frame_exception_exit_29;
        // End of try:
        try_end_33:;
        CHECK_OBJECT(tmp_JSON$class_creation_6__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_6__bases_orig);
        tmp_JSON$class_creation_6__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_6__bases);
        Py_DECREF(tmp_JSON$class_creation_6__bases);
        tmp_JSON$class_creation_6__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_6__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_6__class_decl_dict);
        tmp_JSON$class_creation_6__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_6__metaclass);
        Py_DECREF(tmp_JSON$class_creation_6__metaclass);
        tmp_JSON$class_creation_6__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_6__prepared);
        Py_DECREF(tmp_JSON$class_creation_6__prepared);
        tmp_JSON$class_creation_6__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2637;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2637;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2637;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }
        {
            nuitka_bool tmp_condition_result_157;
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_element_value_48;
            PyObject *tmp_called_value_115;
            PyObject *tmp_args_element_value_49;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2639;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_condition_result_157 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_157 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_54;
            } else {
                goto condexpr_false_54;
            }
            condexpr_true_54:;
            tmp_called_value_114 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[458]);

            if (unlikely(tmp_called_value_114 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2639;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_called_value_114 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2639;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }


            tmp_args_element_value_48 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_python_type();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2639;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_114, tmp_args_element_value_48);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_args_element_value_48);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2639;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            goto condexpr_end_54;
            condexpr_false_54:;
            tmp_called_value_115 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_49 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_python_type();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2639;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_115, tmp_args_element_value_49);
            Py_DECREF(tmp_args_element_value_49);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2639;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            condexpr_end_54:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2640;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            nuitka_bool tmp_condition_result_158;
            PyObject *tmp_called_value_116;
            PyObject *tmp_args_element_value_50;
            PyObject *tmp_called_value_117;
            PyObject *tmp_args_element_value_51;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2643;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_condition_result_158 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_158 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_55;
            } else {
                goto condexpr_false_55;
            }
            condexpr_true_55:;
            tmp_called_value_116 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[458]);

            if (unlikely(tmp_called_value_116 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2643;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_called_value_116 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2643;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }


            tmp_args_element_value_50 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2643;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_116, tmp_args_element_value_50);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_args_element_value_50);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2643;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            goto condexpr_end_55;
            condexpr_false_55:;
            tmp_called_value_117 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_51 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122_should_evaluate_none();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2643;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_117, tmp_args_element_value_51);
            Py_DECREF(tmp_args_element_value_51);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2643;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            condexpr_end_55:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[684], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2644;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            PyObject *tmp_called_instance_16;
            PyObject *tmp_args_element_value_52;
            tmp_called_instance_16 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[684]);

            if (unlikely(tmp_called_instance_16 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[684]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 2648;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_called_instance_16 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2648;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }


            tmp_args_element_value_52 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_should_evaluate_none();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2648;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_16, mod_consts[686], tmp_args_element_value_52);
            Py_DECREF(tmp_called_instance_16);
            Py_DECREF(tmp_args_element_value_52);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2648;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[684], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2649;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_args_element_value_53;
            tmp_called_instance_17 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[43]);

            if (tmp_called_instance_17 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_17 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_17 == NULL)) {
                        tmp_called_instance_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_17 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2652;
                        type_description_2 = "o";
                        goto frame_exception_exit_29;
                    }
                    Py_INCREF(tmp_called_instance_17);
                } else {
                    goto frame_exception_exit_29;
                }
            }



            tmp_args_element_value_53 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124__str_impl();

            frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame.f_lineno = 2652;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tstate, tmp_called_instance_17, mod_consts[512], tmp_args_element_value_53);
            Py_DECREF(tmp_called_instance_17);
            Py_DECREF(tmp_args_element_value_53);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2652;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[344], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2653;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[252], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2656;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2676;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_30;
        frame_exception_exit_29:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_92e0acdc6a2b51632727ea04a42f7c95_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_92e0acdc6a2b51632727ea04a42f7c95_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_92e0acdc6a2b51632727ea04a42f7c95_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_92e0acdc6a2b51632727ea04a42f7c95_29,
            type_description_2,
            outline_27_var___class__
        );



        assertFrameObject(frame_92e0acdc6a2b51632727ea04a42f7c95_29);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_28;
        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_28:;

        goto try_except_handler_84;
        skip_nested_handling_30:;
        {
            nuitka_bool tmp_condition_result_159;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_34 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_34 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_159 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_159 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2138;

                goto try_except_handler_84;
            }
            if (tmp_condition_result_159 == NUITKA_BOOL_TRUE) {
                goto branch_yes_104;
            } else {
                goto branch_no_104;
            }
        }
        branch_yes_104:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2138;

            goto try_except_handler_84;
        }
        branch_no_104:;
        {
            PyObject *tmp_assign_source_295;
            PyObject *tmp_called_value_118;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_134;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_118 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_134 = mod_consts[315];
            tmp_args_value_68 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_134 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_134);
            tmp_tuple_element_134 = locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138;
            PyTuple_SET_ITEM0(tmp_args_value_68, 2, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_68 = tmp_class_creation_24__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2138;
            tmp_assign_source_295 = CALL_FUNCTION(tstate, tmp_called_value_118, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_295 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2138;

                goto try_except_handler_84;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_295;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_assign_source_252 = outline_27_var___class__;
        Py_INCREF(tmp_assign_source_252);
        goto try_return_handler_84;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_84:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138);
        locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138 = NULL;
        goto try_return_handler_83;
        // Exception handler code:
        try_except_handler_84:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138);
        locals_sqlalchemy$sql$sqltypes$$$class__28_JSON_2138 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto try_except_handler_83;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 2138;
        goto try_except_handler_82;
        outline_result_28:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[315], tmp_assign_source_252);
    }
    goto try_end_34;
    // Exception handler code:
    try_except_handler_82:;
    exception_keeper_type_102 = exception_type;
    exception_keeper_value_102 = exception_value;
    exception_keeper_tb_102 = exception_tb;
    exception_keeper_lineno_102 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_102;
    exception_value = exception_keeper_value_102;
    exception_tb = exception_keeper_tb_102;
    exception_lineno = exception_keeper_lineno_102;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_296;
        PyObject *tmp_tuple_element_135;
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[376]);

        if (unlikely(tmp_tuple_element_135 == NULL)) {
            tmp_tuple_element_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[376]);
        }

        if (tmp_tuple_element_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_assign_source_296 = MAKE_TUPLE_EMPTY(4);
        PyTuple_SET_ITEM0(tmp_assign_source_296, 0, tmp_tuple_element_135);
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468]);

        if (unlikely(tmp_tuple_element_135 == NULL)) {
            tmp_tuple_element_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[468]);
        }

        if (tmp_tuple_element_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto tuple_build_exception_47;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_296, 1, tmp_tuple_element_135);
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_135 == NULL)) {
            tmp_tuple_element_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
        }

        if (tmp_tuple_element_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto tuple_build_exception_47;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_296, 2, tmp_tuple_element_135);
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_135 == NULL)) {
            tmp_tuple_element_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto tuple_build_exception_47;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_296, 3, tmp_tuple_element_135);
        goto tuple_build_noexception_47;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_47:;
        Py_DECREF(tmp_assign_source_296);
        goto try_except_handler_103;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_47:;
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_296;
    }
    {
        PyObject *tmp_assign_source_297;
        PyObject *tmp_dircall_arg1_35;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_35 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_35);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
            tmp_assign_source_297 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_297 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_297;
    }
    {
        PyObject *tmp_assign_source_298;
        tmp_assign_source_298 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_298;
    }
    {
        PyObject *tmp_assign_source_299;
        PyObject *tmp_metaclass_value_35;
        nuitka_bool tmp_condition_result_160;
        int tmp_truth_name_37;
        PyObject *tmp_type_arg_69;
        PyObject *tmp_expression_value_222;
        PyObject *tmp_subscript_value_35;
        PyObject *tmp_bases_value_35;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_37 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_condition_result_160 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_56;
        } else {
            goto condexpr_false_56;
        }
        condexpr_true_56:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_222 = tmp_class_creation_25__bases;
        tmp_subscript_value_35 = mod_consts[52];
        tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_222, tmp_subscript_value_35, 0);
        if (tmp_type_arg_69 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
        Py_DECREF(tmp_type_arg_69);
        if (tmp_metaclass_value_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        goto condexpr_end_56;
        condexpr_false_56:;
        tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_35);
        condexpr_end_56:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_35 = tmp_class_creation_25__bases;
        tmp_assign_source_299 = SELECT_METACLASS(tstate, tmp_metaclass_value_35, tmp_bases_value_35);
        Py_DECREF(tmp_metaclass_value_35);
        if (tmp_assign_source_299 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_299;
    }
    {
        bool tmp_condition_result_161;
        PyObject *tmp_expression_value_223;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_223 = tmp_class_creation_25__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_223, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_condition_result_161 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_161 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    {
        PyObject *tmp_assign_source_300;
        PyObject *tmp_called_value_119;
        PyObject *tmp_expression_value_224;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_136;
        PyObject *tmp_kwargs_value_69;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_224 = tmp_class_creation_25__metaclass;
        tmp_called_value_119 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_224, mod_consts[449]);
        if (tmp_called_value_119 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_tuple_element_136 = mod_consts[169];
        tmp_args_value_69 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_136 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_69 = tmp_class_creation_25__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2690;
        tmp_assign_source_300 = CALL_FUNCTION(tstate, tmp_called_value_119, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_called_value_119);
        Py_DECREF(tmp_args_value_69);
        if (tmp_assign_source_300 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_300;
    }
    {
        bool tmp_condition_result_162;
        PyObject *tmp_operand_value_35;
        PyObject *tmp_expression_value_225;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_225 = tmp_class_creation_25__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_225, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_operand_value_35 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
        assert(!(tmp_res == -1));
        tmp_condition_result_162 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_162 != false) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_raise_type_35;
        PyObject *tmp_raise_value_35;
        PyObject *tmp_mod_expr_left_35;
        PyObject *tmp_mod_expr_right_35;
        PyObject *tmp_tuple_element_137;
        PyObject *tmp_expression_value_226;
        PyObject *tmp_name_value_68;
        PyObject *tmp_default_value_35;
        tmp_raise_type_35 = PyExc_TypeError;
        tmp_mod_expr_left_35 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_226 = tmp_class_creation_25__metaclass;
        tmp_name_value_68 = mod_consts[201];
        tmp_default_value_35 = mod_consts[453];
        tmp_tuple_element_137 = BUILTIN_GETATTR(tstate, tmp_expression_value_226, tmp_name_value_68, tmp_default_value_35);
        if (tmp_tuple_element_137 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        tmp_mod_expr_right_35 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_227;
            PyObject *tmp_type_arg_70;
            PyTuple_SET_ITEM(tmp_mod_expr_right_35, 0, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_70 = tmp_class_creation_25__prepared;
            tmp_expression_value_227 = BUILTIN_TYPE1(tmp_type_arg_70);
            assert(!(tmp_expression_value_227 == NULL));
            tmp_tuple_element_137 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_227, mod_consts[201]);
            Py_DECREF(tmp_expression_value_227);
            if (tmp_tuple_element_137 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2690;

                goto tuple_build_exception_48;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_35, 1, tmp_tuple_element_137);
        }
        goto tuple_build_noexception_48;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_48:;
        Py_DECREF(tmp_mod_expr_right_35);
        goto try_except_handler_103;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_48:;
        tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_35, tmp_mod_expr_right_35);
        Py_DECREF(tmp_mod_expr_right_35);
        if (tmp_raise_value_35 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_103;
        }
        exception_type = tmp_raise_type_35;
        Py_INCREF(tmp_raise_type_35);
        exception_value = tmp_raise_value_35;
        exception_lineno = 2690;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_103;
    }
    branch_no_106:;
    goto branch_end_105;
    branch_no_105:;
    {
        PyObject *tmp_assign_source_301;
        tmp_assign_source_301 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_301;
    }
    branch_end_105:;
    {
        PyObject *tmp_assign_source_302;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_35 = tmp_class_creation_25__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_105;
        }
        tmp_dictset_value = mod_consts[690];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_105;
        }
        tmp_dictset_value = mod_consts[169];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_105;
        }
        frame_1aee6cd68ba24b711b0f9bedf3986f58_32 = MAKE_CLASS_FRAME(tstate, codeobj_1aee6cd68ba24b711b0f9bedf3986f58, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_1aee6cd68ba24b711b0f9bedf3986f58_32);
        assert(Py_REFCNT(frame_1aee6cd68ba24b711b0f9bedf3986f58_32) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[169];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2809;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[691], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2811;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[355], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_303;
            PyObject *tmp_tuple_element_138;
            PyObject *tmp_expression_value_228;
            tmp_expression_value_228 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[468]);

            if (tmp_expression_value_228 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_228 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468]);

                    if (unlikely(tmp_expression_value_228 == NULL)) {
                        tmp_expression_value_228 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[468]);
                    }

                    if (tmp_expression_value_228 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2817;
                        type_description_2 = "o";
                        goto try_except_handler_106;
                    }
                    Py_INCREF(tmp_expression_value_228);
                } else {
                    goto try_except_handler_106;
                }
            }

            tmp_tuple_element_138 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_228, mod_consts[9]);
            Py_DECREF(tmp_expression_value_228);
            if (tmp_tuple_element_138 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_assign_source_303 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_229;
                PyTuple_SET_ITEM(tmp_assign_source_303, 0, tmp_tuple_element_138);
                tmp_expression_value_229 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[8]);

                if (tmp_expression_value_229 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_229 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

                        if (unlikely(tmp_expression_value_229 == NULL)) {
                            tmp_expression_value_229 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[8]);
                        }

                        if (tmp_expression_value_229 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2817;
                            type_description_2 = "o";
                            goto tuple_build_exception_49;
                        }
                        Py_INCREF(tmp_expression_value_229);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_tuple_element_138 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_229, mod_consts[9]);
                Py_DECREF(tmp_expression_value_229);
                if (tmp_tuple_element_138 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2817;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                PyTuple_SET_ITEM(tmp_assign_source_303, 1, tmp_tuple_element_138);
            }
            goto tuple_build_noexception_49;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_49:;
            Py_DECREF(tmp_assign_source_303);
            goto try_except_handler_106;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_49:;
            assert(tmp_ARRAY$class_creation_1__bases_orig == NULL);
            tmp_ARRAY$class_creation_1__bases_orig = tmp_assign_source_303;
        }
        {
            PyObject *tmp_assign_source_304;
            PyObject *tmp_dircall_arg1_36;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
            tmp_dircall_arg1_36 = tmp_ARRAY$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_36);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
                tmp_assign_source_304 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_304 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            assert(tmp_ARRAY$class_creation_1__bases == NULL);
            tmp_ARRAY$class_creation_1__bases = tmp_assign_source_304;
        }
        {
            PyObject *tmp_assign_source_305;
            tmp_assign_source_305 = MAKE_DICT_EMPTY();
            assert(tmp_ARRAY$class_creation_1__class_decl_dict == NULL);
            tmp_ARRAY$class_creation_1__class_decl_dict = tmp_assign_source_305;
        }
        {
            PyObject *tmp_assign_source_306;
            PyObject *tmp_metaclass_value_36;
            nuitka_bool tmp_condition_result_163;
            int tmp_truth_name_38;
            PyObject *tmp_type_arg_71;
            PyObject *tmp_expression_value_230;
            PyObject *tmp_subscript_value_36;
            PyObject *tmp_bases_value_36;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_truth_name_38 = CHECK_IF_TRUE(tmp_ARRAY$class_creation_1__bases);
            if (tmp_truth_name_38 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_condition_result_163 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_163 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_57;
            } else {
                goto condexpr_false_57;
            }
            condexpr_true_57:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_expression_value_230 = tmp_ARRAY$class_creation_1__bases;
            tmp_subscript_value_36 = mod_consts[52];
            tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_230, tmp_subscript_value_36, 0);
            if (tmp_type_arg_71 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
            Py_DECREF(tmp_type_arg_71);
            if (tmp_metaclass_value_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            goto condexpr_end_57;
            condexpr_false_57:;
            tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_36);
            condexpr_end_57:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_bases_value_36 = tmp_ARRAY$class_creation_1__bases;
            tmp_assign_source_306 = SELECT_METACLASS(tstate, tmp_metaclass_value_36, tmp_bases_value_36);
            Py_DECREF(tmp_metaclass_value_36);
            if (tmp_assign_source_306 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            assert(tmp_ARRAY$class_creation_1__metaclass == NULL);
            tmp_ARRAY$class_creation_1__metaclass = tmp_assign_source_306;
        }
        {
            bool tmp_condition_result_164;
            PyObject *tmp_expression_value_231;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_expression_value_231 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_231, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_condition_result_164 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_164 != false) {
                goto branch_yes_107;
            } else {
                goto branch_no_107;
            }
        }
        branch_yes_107:;
        {
            PyObject *tmp_assign_source_307;
            PyObject *tmp_called_value_120;
            PyObject *tmp_expression_value_232;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_139;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_expression_value_232 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_called_value_120 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_232, mod_consts[449]);
            if (tmp_called_value_120 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_tuple_element_139 = mod_consts[9];
            tmp_args_value_70 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_139);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_tuple_element_139 = tmp_ARRAY$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_139);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_kwargs_value_70 = tmp_ARRAY$class_creation_1__class_decl_dict;
            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 2817;
            tmp_assign_source_307 = CALL_FUNCTION(tstate, tmp_called_value_120, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_307 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            assert(tmp_ARRAY$class_creation_1__prepared == NULL);
            tmp_ARRAY$class_creation_1__prepared = tmp_assign_source_307;
        }
        {
            bool tmp_condition_result_165;
            PyObject *tmp_operand_value_36;
            PyObject *tmp_expression_value_233;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
            tmp_expression_value_233 = tmp_ARRAY$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_233, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_operand_value_36 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
            assert(!(tmp_res == -1));
            tmp_condition_result_165 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_165 != false) {
                goto branch_yes_108;
            } else {
                goto branch_no_108;
            }
        }
        branch_yes_108:;
        {
            PyObject *tmp_raise_type_36;
            PyObject *tmp_raise_value_36;
            PyObject *tmp_mod_expr_left_36;
            PyObject *tmp_mod_expr_right_36;
            PyObject *tmp_tuple_element_140;
            PyObject *tmp_expression_value_234;
            PyObject *tmp_name_value_69;
            PyObject *tmp_default_value_36;
            tmp_raise_type_36 = PyExc_TypeError;
            tmp_mod_expr_left_36 = mod_consts[452];
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_expression_value_234 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_name_value_69 = mod_consts[201];
            tmp_default_value_36 = mod_consts[453];
            tmp_tuple_element_140 = BUILTIN_GETATTR(tstate, tmp_expression_value_234, tmp_name_value_69, tmp_default_value_36);
            if (tmp_tuple_element_140 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            tmp_mod_expr_right_36 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_235;
                PyObject *tmp_type_arg_72;
                PyTuple_SET_ITEM(tmp_mod_expr_right_36, 0, tmp_tuple_element_140);
                CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
                tmp_type_arg_72 = tmp_ARRAY$class_creation_1__prepared;
                tmp_expression_value_235 = BUILTIN_TYPE1(tmp_type_arg_72);
                assert(!(tmp_expression_value_235 == NULL));
                tmp_tuple_element_140 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_235, mod_consts[201]);
                Py_DECREF(tmp_expression_value_235);
                if (tmp_tuple_element_140 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2817;
                    type_description_2 = "o";
                    goto tuple_build_exception_50;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_36, 1, tmp_tuple_element_140);
            }
            goto tuple_build_noexception_50;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_50:;
            Py_DECREF(tmp_mod_expr_right_36);
            goto try_except_handler_106;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_50:;
            tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_36, tmp_mod_expr_right_36);
            Py_DECREF(tmp_mod_expr_right_36);
            if (tmp_raise_value_36 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_106;
            }
            exception_type = tmp_raise_type_36;
            Py_INCREF(tmp_raise_type_36);
            exception_value = tmp_raise_value_36;
            exception_lineno = 2817;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_106;
        }
        branch_no_108:;
        goto branch_end_107;
        branch_no_107:;
        {
            PyObject *tmp_assign_source_308;
            tmp_assign_source_308 = MAKE_DICT_EMPTY();
            assert(tmp_ARRAY$class_creation_1__prepared == NULL);
            tmp_ARRAY$class_creation_1__prepared = tmp_assign_source_308;
        }
        branch_end_107:;
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
            tmp_set_locals_36 = tmp_ARRAY$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2817;
            type_description_2 = "o";
            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[692];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2817;
            type_description_2 = "o";
            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[693];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2817;
            type_description_2 = "o";
            goto try_except_handler_108;
        }
        frame_f28e91ec0caa03e3b8b0d624a94edb1c_33 = MAKE_CLASS_FRAME(tstate, codeobj_f28e91ec0caa03e3b8b0d624a94edb1c, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_f28e91ec0caa03e3b8b0d624a94edb1c_33);
        assert(Py_REFCNT(frame_f28e91ec0caa03e3b8b0d624a94edb1c_33) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127__setup_getitem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[14], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2826;
            type_description_3 = "o";
            goto frame_exception_exit_33;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_contains();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[695], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2848;
            type_description_3 = "o";
            goto frame_exception_exit_33;
        }
        {
            PyObject *tmp_called_value_121;
            PyObject *tmp_called_instance_18;
            PyObject *tmp_args_element_value_54;
            PyObject *tmp_defaults_19;
            tmp_called_instance_18 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[43]);

            if (tmp_called_instance_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_18 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_18 == NULL)) {
                        tmp_called_instance_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_18 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2854;
                        type_description_3 = "o";
                        goto frame_exception_exit_33;
                    }
                    Py_INCREF(tmp_called_instance_18);
                } else {
                    goto frame_exception_exit_33;
                }
            }

            frame_f28e91ec0caa03e3b8b0d624a94edb1c_33->m_frame.f_lineno = 2854;
            tmp_called_value_121 = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_18,
                mod_consts[608],
                PyTuple_GET_ITEM(mod_consts[697], 0)
            );

            Py_DECREF(tmp_called_instance_18);
            if (tmp_called_value_121 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2854;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
            tmp_defaults_19 = mod_consts[278];
            Py_INCREF(tmp_defaults_19);


            tmp_args_element_value_54 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129_any(tmp_defaults_19);

            frame_f28e91ec0caa03e3b8b0d624a94edb1c_33->m_frame.f_lineno = 2854;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_121, tmp_args_element_value_54);
            Py_DECREF(tmp_called_value_121);
            Py_DECREF(tmp_args_element_value_54);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2854;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[698], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2855;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
        }
        {
            PyObject *tmp_called_value_122;
            PyObject *tmp_called_instance_19;
            PyObject *tmp_args_element_value_55;
            PyObject *tmp_defaults_20;
            tmp_called_instance_19 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[43]);

            if (tmp_called_instance_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_called_instance_19 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_19 == NULL)) {
                        tmp_called_instance_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
                    }

                    if (tmp_called_instance_19 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2906;
                        type_description_3 = "o";
                        goto frame_exception_exit_33;
                    }
                    Py_INCREF(tmp_called_instance_19);
                } else {
                    goto frame_exception_exit_33;
                }
            }

            frame_f28e91ec0caa03e3b8b0d624a94edb1c_33->m_frame.f_lineno = 2906;
            tmp_called_value_122 = CALL_METHOD_WITH_SINGLE_ARG(
                tstate,
                tmp_called_instance_19,
                mod_consts[608],
                PyTuple_GET_ITEM(mod_consts[697], 0)
            );

            Py_DECREF(tmp_called_instance_19);
            if (tmp_called_value_122 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2906;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
            tmp_defaults_20 = mod_consts[278];
            Py_INCREF(tmp_defaults_20);


            tmp_args_element_value_55 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_all(tmp_defaults_20);

            frame_f28e91ec0caa03e3b8b0d624a94edb1c_33->m_frame.f_lineno = 2906;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_122, tmp_args_element_value_55);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_args_element_value_55);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2906;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[700], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2907;
                type_description_3 = "o";
                goto frame_exception_exit_33;
            }
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_31;
        frame_exception_exit_33:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f28e91ec0caa03e3b8b0d624a94edb1c_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f28e91ec0caa03e3b8b0d624a94edb1c_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f28e91ec0caa03e3b8b0d624a94edb1c_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f28e91ec0caa03e3b8b0d624a94edb1c_33,
            type_description_3,
            outline_35_var___class__
        );



        assertFrameObject(frame_f28e91ec0caa03e3b8b0d624a94edb1c_33);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_32;
        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_32:;
        type_description_2 = "o";
        goto try_except_handler_108;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_166;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_cmp_expr_left_35 = tmp_ARRAY$class_creation_1__bases;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
            tmp_cmp_expr_right_35 = tmp_ARRAY$class_creation_1__bases_orig;
            tmp_condition_result_166 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_166 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_108;
            }
            if (tmp_condition_result_166 == NUITKA_BOOL_TRUE) {
                goto branch_yes_109;
            } else {
                goto branch_no_109;
            }
        }
        branch_yes_109:;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_ARRAY$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2817;
            type_description_2 = "o";
            goto try_except_handler_108;
        }
        branch_no_109:;
        {
            PyObject *tmp_assign_source_309;
            PyObject *tmp_called_value_123;
            PyObject *tmp_args_value_71;
            PyObject *tmp_tuple_element_141;
            PyObject *tmp_kwargs_value_71;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_called_value_123 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_tuple_element_141 = mod_consts[9];
            tmp_args_value_71 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_141);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_tuple_element_141 = tmp_ARRAY$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_141);
            tmp_tuple_element_141 = locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817;
            PyTuple_SET_ITEM0(tmp_args_value_71, 2, tmp_tuple_element_141);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_kwargs_value_71 = tmp_ARRAY$class_creation_1__class_decl_dict;
            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 2817;
            tmp_assign_source_309 = CALL_FUNCTION(tstate, tmp_called_value_123, tmp_args_value_71, tmp_kwargs_value_71);
            Py_DECREF(tmp_args_value_71);
            if (tmp_assign_source_309 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2817;
                type_description_2 = "o";
                goto try_except_handler_108;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_309;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_dictset_value = outline_35_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_108;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817);
        locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817 = NULL;
        goto try_return_handler_107;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817);
        locals_sqlalchemy$sql$sqltypes$$$class__36_Comparator_2817 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto try_except_handler_107;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 2817;
        goto try_except_handler_106;
        outline_result_36:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2817;
            type_description_2 = "o";
            goto try_except_handler_106;
        }
        goto try_end_35;
        // Exception handler code:
        try_except_handler_106:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_ARRAY$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__bases);
        tmp_ARRAY$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__class_decl_dict);
        tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__metaclass);
        tmp_ARRAY$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__prepared);
        tmp_ARRAY$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto frame_exception_exit_32;
        // End of try:
        try_end_35:;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
        Py_DECREF(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_ARRAY$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
        Py_DECREF(tmp_ARRAY$class_creation_1__bases);
        tmp_ARRAY$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ARRAY$class_creation_1__class_decl_dict);
        tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
        Py_DECREF(tmp_ARRAY$class_creation_1__metaclass);
        tmp_ARRAY$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
        Py_DECREF(tmp_ARRAY$class_creation_1__prepared);
        tmp_ARRAY$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 2958;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2958;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2958;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        {
            PyObject *tmp_defaults_21;
            tmp_defaults_21 = mod_consts[702];
            Py_INCREF(tmp_defaults_21);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131___init__(tmp_defaults_21);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2960;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }
        {
            nuitka_bool tmp_condition_result_167;
            PyObject *tmp_called_value_124;
            PyObject *tmp_args_element_value_56;
            PyObject *tmp_called_value_125;
            PyObject *tmp_args_element_value_57;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3006;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            tmp_condition_result_167 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_167 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_58;
            } else {
                goto condexpr_false_58;
            }
            condexpr_true_58:;
            tmp_called_value_124 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[458]);

            if (unlikely(tmp_called_value_124 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 3006;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }

            if (tmp_called_value_124 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3006;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }


            tmp_args_element_value_56 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_hashable();

            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 3006;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_124, tmp_args_element_value_56);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_args_element_value_56);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3006;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            goto condexpr_end_58;
            condexpr_false_58:;
            tmp_called_value_125 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_57 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_hashable();

            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 3006;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_125, tmp_args_element_value_57);
            Py_DECREF(tmp_args_element_value_57);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3006;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            condexpr_end_58:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[655], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3007;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }
        {
            nuitka_bool tmp_condition_result_168;
            PyObject *tmp_called_value_126;
            PyObject *tmp_args_element_value_58;
            PyObject *tmp_called_value_127;
            PyObject *tmp_args_element_value_59;
            tmp_res = MAPPING_HAS_ITEM(tstate, locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[458]);

            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3010;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            tmp_condition_result_168 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_168 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_59;
            } else {
                goto condexpr_false_59;
            }
            condexpr_true_59:;
            tmp_called_value_126 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[458]);

            if (unlikely(tmp_called_value_126 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[458]);
                NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(tstate, exception_value);

                exception_lineno = 3010;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }

            if (tmp_called_value_126 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3010;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }


            tmp_args_element_value_58 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133_python_type();

            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 3010;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_126, tmp_args_element_value_58);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_args_element_value_58);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3010;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            goto condexpr_end_59;
            condexpr_false_59:;
            tmp_called_value_127 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_59 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133_python_type();

            frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame.f_lineno = 3010;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tstate, tmp_called_value_127, tmp_args_element_value_59);
            Py_DECREF(tmp_args_element_value_59);
            if (tmp_dictset_value == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3010;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
            condexpr_end_59:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[257], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3011;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134_compare_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[624], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3014;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        {
            PyObject *tmp_defaults_22;
            tmp_defaults_22 = mod_consts[538];
            Py_INCREF(tmp_defaults_22);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135__set_parent(tmp_defaults_22);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[377], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3017;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136__set_parent_with_dispatch();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[379], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3023;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_32;
        frame_exception_exit_32:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1aee6cd68ba24b711b0f9bedf3986f58_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1aee6cd68ba24b711b0f9bedf3986f58_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1aee6cd68ba24b711b0f9bedf3986f58_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1aee6cd68ba24b711b0f9bedf3986f58_32,
            type_description_2,
            outline_34_var___class__
        );



        assertFrameObject(frame_1aee6cd68ba24b711b0f9bedf3986f58_32);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_31;
        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_31:;

        goto try_except_handler_105;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_169;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_169 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_169 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2690;

                goto try_except_handler_105;
            }
            if (tmp_condition_result_169 == NUITKA_BOOL_TRUE) {
                goto branch_yes_110;
            } else {
                goto branch_no_110;
            }
        }
        branch_yes_110:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 2690;

            goto try_except_handler_105;
        }
        branch_no_110:;
        {
            PyObject *tmp_assign_source_310;
            PyObject *tmp_called_value_128;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_142;
            PyObject *tmp_kwargs_value_72;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_128 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_142 = mod_consts[169];
            tmp_args_value_72 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_72, 0, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_142 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_72, 1, tmp_tuple_element_142);
            tmp_tuple_element_142 = locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690;
            PyTuple_SET_ITEM0(tmp_args_value_72, 2, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_72 = tmp_class_creation_25__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 2690;
            tmp_assign_source_310 = CALL_FUNCTION(tstate, tmp_called_value_128, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_args_value_72);
            if (tmp_assign_source_310 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 2690;

                goto try_except_handler_105;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_310;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_assign_source_302 = outline_34_var___class__;
        Py_INCREF(tmp_assign_source_302);
        goto try_return_handler_105;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_105:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690);
        locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690 = NULL;
        goto try_return_handler_104;
        // Exception handler code:
        try_except_handler_105:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690);
        locals_sqlalchemy$sql$sqltypes$$$class__35_ARRAY_2690 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto try_except_handler_104;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_104:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 2690;
        goto try_except_handler_103;
        outline_result_35:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[169], tmp_assign_source_302);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_103:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_keeper_lineno_108 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_108;
    exception_value = exception_keeper_value_108;
    exception_tb = exception_keeper_tb_108;
    exception_lineno = exception_keeper_lineno_108;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_311;
        PyObject *tmp_tuple_element_143;
        tmp_tuple_element_143 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_143 == NULL)) {
            tmp_tuple_element_143 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_143 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_assign_source_311 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_311, 0, tmp_tuple_element_143);
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_311;
    }
    {
        PyObject *tmp_assign_source_312;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_312 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_312 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_312;
    }
    {
        PyObject *tmp_assign_source_313;
        tmp_assign_source_313 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_313;
    }
    {
        PyObject *tmp_assign_source_314;
        PyObject *tmp_metaclass_value_37;
        nuitka_bool tmp_condition_result_170;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_236;
        PyObject *tmp_subscript_value_37;
        PyObject *tmp_bases_value_37;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_39 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_condition_result_170 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_170 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_60;
        } else {
            goto condexpr_false_60;
        }
        condexpr_true_60:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_236 = tmp_class_creation_26__bases;
        tmp_subscript_value_37 = mod_consts[52];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_236, tmp_subscript_value_37, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        goto condexpr_end_60;
        condexpr_false_60:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_60:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_37 = tmp_class_creation_26__bases;
        tmp_assign_source_314 = SELECT_METACLASS(tstate, tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_314 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_314;
    }
    {
        bool tmp_condition_result_171;
        PyObject *tmp_expression_value_237;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_237 = tmp_class_creation_26__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_237, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_condition_result_171 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_171 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_assign_source_315;
        PyObject *tmp_called_value_129;
        PyObject *tmp_expression_value_238;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_144;
        PyObject *tmp_kwargs_value_73;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_238 = tmp_class_creation_26__metaclass;
        tmp_called_value_129 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_238, mod_consts[449]);
        if (tmp_called_value_129 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_tuple_element_144 = mod_consts[384];
        tmp_args_value_73 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_144 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_73 = tmp_class_creation_26__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3032;
        tmp_assign_source_315 = CALL_FUNCTION(tstate, tmp_called_value_129, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_called_value_129);
        Py_DECREF(tmp_args_value_73);
        if (tmp_assign_source_315 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_315;
    }
    {
        bool tmp_condition_result_172;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_239;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_239 = tmp_class_creation_26__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_239, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_operand_value_37 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_172 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_172 != false) {
            goto branch_yes_112;
        } else {
            goto branch_no_112;
        }
    }
    branch_yes_112:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_mod_expr_left_37;
        PyObject *tmp_mod_expr_right_37;
        PyObject *tmp_tuple_element_145;
        PyObject *tmp_expression_value_240;
        PyObject *tmp_name_value_70;
        PyObject *tmp_default_value_37;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_mod_expr_left_37 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_240 = tmp_class_creation_26__metaclass;
        tmp_name_value_70 = mod_consts[201];
        tmp_default_value_37 = mod_consts[453];
        tmp_tuple_element_145 = BUILTIN_GETATTR(tstate, tmp_expression_value_240, tmp_name_value_70, tmp_default_value_37);
        if (tmp_tuple_element_145 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        tmp_mod_expr_right_37 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_241;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_mod_expr_right_37, 0, tmp_tuple_element_145);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_74 = tmp_class_creation_26__prepared;
            tmp_expression_value_241 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_241 == NULL));
            tmp_tuple_element_145 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_241, mod_consts[201]);
            Py_DECREF(tmp_expression_value_241);
            if (tmp_tuple_element_145 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3032;

                goto tuple_build_exception_51;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_37, 1, tmp_tuple_element_145);
        }
        goto tuple_build_noexception_51;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_51:;
        Py_DECREF(tmp_mod_expr_right_37);
        goto try_except_handler_109;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_51:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_37, tmp_mod_expr_right_37);
        Py_DECREF(tmp_mod_expr_right_37);
        if (tmp_raise_value_37 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_109;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_37;
        exception_lineno = 3032;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_109;
    }
    branch_no_112:;
    goto branch_end_111;
    branch_no_111:;
    {
        PyObject *tmp_assign_source_316;
        tmp_assign_source_316 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_316;
    }
    branch_end_111:;
    {
        PyObject *tmp_assign_source_317;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_37 = tmp_class_creation_26__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[709];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[384];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_111;
        }
        frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34 = MAKE_CLASS_FRAME(tstate, codeobj_25ef1ebb07b4b0baf1f559d5ed63b11e, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34);
        assert(Py_REFCNT(frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34) == 2);

        // Framed code:
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[710], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3035;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137___init__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[70], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3037;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__resolve_values_to_types();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[712], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3044;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[254], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3055;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_33;
        frame_exception_exit_34:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34,
            type_description_2,
            outline_36_var___class__
        );



        assertFrameObject(frame_25ef1ebb07b4b0baf1f559d5ed63b11e_34);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_33;
        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_33:;

        goto try_except_handler_111;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_173;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_173 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_173 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3032;

                goto try_except_handler_111;
            }
            if (tmp_condition_result_173 == NUITKA_BOOL_TRUE) {
                goto branch_yes_113;
            } else {
                goto branch_no_113;
            }
        }
        branch_yes_113:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3032;

            goto try_except_handler_111;
        }
        branch_no_113:;
        {
            PyObject *tmp_assign_source_318;
            PyObject *tmp_called_value_130;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_146;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_130 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_146 = mod_consts[384];
            tmp_args_value_74 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_146 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_146);
            tmp_tuple_element_146 = locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_26__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3032;
            tmp_assign_source_318 = CALL_FUNCTION(tstate, tmp_called_value_130, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_318 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3032;

                goto try_except_handler_111;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_318;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_317 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_317);
        goto try_return_handler_111;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_111:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032);
        locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032 = NULL;
        goto try_return_handler_110;
        // Exception handler code:
        try_except_handler_111:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032);
        locals_sqlalchemy$sql$sqltypes$$$class__37_TupleType_3032 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto try_except_handler_110;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 3032;
        goto try_except_handler_109;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[384], tmp_assign_source_317);
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_109:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_keeper_lineno_111 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_111;
    exception_value = exception_keeper_value_111;
    exception_tb = exception_keeper_tb_111;
    exception_lineno = exception_keeper_lineno_111;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_319;
        PyObject *tmp_tuple_element_147;
        tmp_tuple_element_147 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[329]);

        if (unlikely(tmp_tuple_element_147 == NULL)) {
            tmp_tuple_element_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[329]);
        }

        if (tmp_tuple_element_147 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_assign_source_319 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_319, 0, tmp_tuple_element_147);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_319;
    }
    {
        PyObject *tmp_assign_source_320;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_320 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_320 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_320;
    }
    {
        PyObject *tmp_assign_source_321;
        tmp_assign_source_321 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_321;
    }
    {
        PyObject *tmp_assign_source_322;
        PyObject *tmp_metaclass_value_38;
        nuitka_bool tmp_condition_result_174;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_242;
        PyObject *tmp_subscript_value_38;
        PyObject *tmp_bases_value_38;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_40 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_condition_result_174 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_174 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_61;
        } else {
            goto condexpr_false_61;
        }
        condexpr_true_61:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_242 = tmp_class_creation_27__bases;
        tmp_subscript_value_38 = mod_consts[52];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_242, tmp_subscript_value_38, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        goto condexpr_end_61;
        condexpr_false_61:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_61:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_38 = tmp_class_creation_27__bases;
        tmp_assign_source_322 = SELECT_METACLASS(tstate, tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_322 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_322;
    }
    {
        bool tmp_condition_result_175;
        PyObject *tmp_expression_value_243;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_243 = tmp_class_creation_27__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_243, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_condition_result_175 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_175 != false) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_assign_source_323;
        PyObject *tmp_called_value_131;
        PyObject *tmp_expression_value_244;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_148;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_244 = tmp_class_creation_27__metaclass;
        tmp_called_value_131 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_244, mod_consts[449]);
        if (tmp_called_value_131 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_tuple_element_148 = mod_consts[715];
        tmp_args_value_75 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_148 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_27__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3062;
        tmp_assign_source_323 = CALL_FUNCTION(tstate, tmp_called_value_131, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_131);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_323 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_323;
    }
    {
        bool tmp_condition_result_176;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_245;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_245 = tmp_class_creation_27__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_245, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_operand_value_38 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        assert(!(tmp_res == -1));
        tmp_condition_result_176 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_176 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_mod_expr_left_38;
        PyObject *tmp_mod_expr_right_38;
        PyObject *tmp_tuple_element_149;
        PyObject *tmp_expression_value_246;
        PyObject *tmp_name_value_71;
        PyObject *tmp_default_value_38;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_mod_expr_left_38 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_246 = tmp_class_creation_27__metaclass;
        tmp_name_value_71 = mod_consts[201];
        tmp_default_value_38 = mod_consts[453];
        tmp_tuple_element_149 = BUILTIN_GETATTR(tstate, tmp_expression_value_246, tmp_name_value_71, tmp_default_value_38);
        if (tmp_tuple_element_149 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        tmp_mod_expr_right_38 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_247;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_mod_expr_right_38, 0, tmp_tuple_element_149);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_76 = tmp_class_creation_27__prepared;
            tmp_expression_value_247 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_247 == NULL));
            tmp_tuple_element_149 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_247, mod_consts[201]);
            Py_DECREF(tmp_expression_value_247);
            if (tmp_tuple_element_149 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3062;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_38, 1, tmp_tuple_element_149);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_mod_expr_right_38);
        goto try_except_handler_112;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_38, tmp_mod_expr_right_38);
        Py_DECREF(tmp_mod_expr_right_38);
        if (tmp_raise_value_38 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_112;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_38;
        exception_lineno = 3062;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_112;
    }
    branch_no_115:;
    goto branch_end_114;
    branch_no_114:;
    {
        PyObject *tmp_assign_source_324;
        tmp_assign_source_324 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_324;
    }
    branch_end_114:;
    {
        PyObject *tmp_assign_source_325;
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_38 = tmp_class_creation_27__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[716];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[715];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_114;
        }
        frame_7e74b4770480c918562fcc5293ddb28e_35 = MAKE_CLASS_FRAME(tstate, codeobj_7e74b4770480c918562fcc5293ddb28e, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_7e74b4770480c918562fcc5293ddb28e_35);
        assert(Py_REFCNT(frame_7e74b4770480c918562fcc5293ddb28e_35) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[715];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3066;
            type_description_2 = "o";
            goto frame_exception_exit_35;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_34;
        frame_exception_exit_35:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7e74b4770480c918562fcc5293ddb28e_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7e74b4770480c918562fcc5293ddb28e_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7e74b4770480c918562fcc5293ddb28e_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7e74b4770480c918562fcc5293ddb28e_35,
            type_description_2,
            outline_37_var___class__
        );



        assertFrameObject(frame_7e74b4770480c918562fcc5293ddb28e_35);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_34;
        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_114;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_177;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_177 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_177 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3062;

                goto try_except_handler_114;
            }
            if (tmp_condition_result_177 == NUITKA_BOOL_TRUE) {
                goto branch_yes_116;
            } else {
                goto branch_no_116;
            }
        }
        branch_yes_116:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3062;

            goto try_except_handler_114;
        }
        branch_no_116:;
        {
            PyObject *tmp_assign_source_326;
            PyObject *tmp_called_value_132;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_150;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_132 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_150 = mod_consts[715];
            tmp_args_value_76 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_150 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_150);
            tmp_tuple_element_150 = locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_27__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3062;
            tmp_assign_source_326 = CALL_FUNCTION(tstate, tmp_called_value_132, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_326 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3062;

                goto try_except_handler_114;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_326;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_assign_source_325 = outline_37_var___class__;
        Py_INCREF(tmp_assign_source_325);
        goto try_return_handler_114;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_114:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062);
        locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062 = NULL;
        goto try_return_handler_113;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062);
        locals_sqlalchemy$sql$sqltypes$$$class__38_REAL_3062 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto try_except_handler_113;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 3062;
        goto try_except_handler_112;
        outline_result_38:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[715], tmp_assign_source_325);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_112:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_keeper_lineno_114 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_114;
    exception_value = exception_keeper_value_114;
    exception_tb = exception_keeper_tb_114;
    exception_lineno = exception_keeper_lineno_114;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_327;
        PyObject *tmp_tuple_element_151;
        tmp_tuple_element_151 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[329]);

        if (unlikely(tmp_tuple_element_151 == NULL)) {
            tmp_tuple_element_151 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[329]);
        }

        if (tmp_tuple_element_151 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_assign_source_327 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_327, 0, tmp_tuple_element_151);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_327;
    }
    {
        PyObject *tmp_assign_source_328;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_328 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_328 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_328;
    }
    {
        PyObject *tmp_assign_source_329;
        tmp_assign_source_329 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_329;
    }
    {
        PyObject *tmp_assign_source_330;
        PyObject *tmp_metaclass_value_39;
        nuitka_bool tmp_condition_result_178;
        int tmp_truth_name_41;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_248;
        PyObject *tmp_subscript_value_39;
        PyObject *tmp_bases_value_39;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_41 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_condition_result_178 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_178 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_62;
        } else {
            goto condexpr_false_62;
        }
        condexpr_true_62:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_248 = tmp_class_creation_28__bases;
        tmp_subscript_value_39 = mod_consts[52];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_248, tmp_subscript_value_39, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        goto condexpr_end_62;
        condexpr_false_62:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_62:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_39 = tmp_class_creation_28__bases;
        tmp_assign_source_330 = SELECT_METACLASS(tstate, tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_330 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_330;
    }
    {
        bool tmp_condition_result_179;
        PyObject *tmp_expression_value_249;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_249 = tmp_class_creation_28__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_249, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_condition_result_179 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_179 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    {
        PyObject *tmp_assign_source_331;
        PyObject *tmp_called_value_133;
        PyObject *tmp_expression_value_250;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_152;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_250 = tmp_class_creation_28__metaclass;
        tmp_called_value_133 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_250, mod_consts[449]);
        if (tmp_called_value_133 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_tuple_element_152 = mod_consts[717];
        tmp_args_value_77 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_152 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_28__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3069;
        tmp_assign_source_331 = CALL_FUNCTION(tstate, tmp_called_value_133, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_133);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_331 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_331;
    }
    {
        bool tmp_condition_result_180;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_251;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_251 = tmp_class_creation_28__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_251, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_operand_value_39 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_180 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_180 != false) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_mod_expr_left_39;
        PyObject *tmp_mod_expr_right_39;
        PyObject *tmp_tuple_element_153;
        PyObject *tmp_expression_value_252;
        PyObject *tmp_name_value_72;
        PyObject *tmp_default_value_39;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_mod_expr_left_39 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_252 = tmp_class_creation_28__metaclass;
        tmp_name_value_72 = mod_consts[201];
        tmp_default_value_39 = mod_consts[453];
        tmp_tuple_element_153 = BUILTIN_GETATTR(tstate, tmp_expression_value_252, tmp_name_value_72, tmp_default_value_39);
        if (tmp_tuple_element_153 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        tmp_mod_expr_right_39 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_253;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_mod_expr_right_39, 0, tmp_tuple_element_153);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_78 = tmp_class_creation_28__prepared;
            tmp_expression_value_253 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_253 == NULL));
            tmp_tuple_element_153 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_253, mod_consts[201]);
            Py_DECREF(tmp_expression_value_253);
            if (tmp_tuple_element_153 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3069;

                goto tuple_build_exception_53;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_39, 1, tmp_tuple_element_153);
        }
        goto tuple_build_noexception_53;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_53:;
        Py_DECREF(tmp_mod_expr_right_39);
        goto try_except_handler_115;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_53:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_39, tmp_mod_expr_right_39);
        Py_DECREF(tmp_mod_expr_right_39);
        if (tmp_raise_value_39 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_115;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_39;
        exception_lineno = 3069;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_115;
    }
    branch_no_118:;
    goto branch_end_117;
    branch_no_117:;
    {
        PyObject *tmp_assign_source_332;
        tmp_assign_source_332 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_332;
    }
    branch_end_117:;
    {
        PyObject *tmp_assign_source_333;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_39 = tmp_class_creation_28__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[718];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[717];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_117;
        }
        frame_e52dd4ad0daaa8166caadb00c935fe40_36 = MAKE_CLASS_FRAME(tstate, codeobj_e52dd4ad0daaa8166caadb00c935fe40, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e52dd4ad0daaa8166caadb00c935fe40_36);
        assert(Py_REFCNT(frame_e52dd4ad0daaa8166caadb00c935fe40_36) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[717];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3073;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_35;
        frame_exception_exit_36:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e52dd4ad0daaa8166caadb00c935fe40_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e52dd4ad0daaa8166caadb00c935fe40_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e52dd4ad0daaa8166caadb00c935fe40_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e52dd4ad0daaa8166caadb00c935fe40_36,
            type_description_2,
            outline_38_var___class__
        );



        assertFrameObject(frame_e52dd4ad0daaa8166caadb00c935fe40_36);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_35;
        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_117;
        skip_nested_handling_35:;
        {
            nuitka_bool tmp_condition_result_181;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_181 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_181 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3069;

                goto try_except_handler_117;
            }
            if (tmp_condition_result_181 == NUITKA_BOOL_TRUE) {
                goto branch_yes_119;
            } else {
                goto branch_no_119;
            }
        }
        branch_yes_119:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3069;

            goto try_except_handler_117;
        }
        branch_no_119:;
        {
            PyObject *tmp_assign_source_334;
            PyObject *tmp_called_value_134;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_154;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_134 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_154 = mod_consts[717];
            tmp_args_value_78 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_154 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_154);
            tmp_tuple_element_154 = locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_28__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3069;
            tmp_assign_source_334 = CALL_FUNCTION(tstate, tmp_called_value_134, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_334 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3069;

                goto try_except_handler_117;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_334;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_333 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_333);
        goto try_return_handler_117;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_117:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069);
        locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069 = NULL;
        goto try_return_handler_116;
        // Exception handler code:
        try_except_handler_117:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069);
        locals_sqlalchemy$sql$sqltypes$$$class__39_FLOAT_3069 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto try_except_handler_116;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_116 = exception_type;
        exception_keeper_value_116 = exception_value;
        exception_keeper_tb_116 = exception_tb;
        exception_keeper_lineno_116 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;
        exception_lineno = exception_keeper_lineno_116;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 3069;
        goto try_except_handler_115;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[717], tmp_assign_source_333);
    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_115:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_keeper_lineno_117 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_117;
    exception_value = exception_keeper_value_117;
    exception_tb = exception_keeper_tb_117;
    exception_lineno = exception_keeper_lineno_117;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_335;
        PyObject *tmp_tuple_element_155;
        tmp_tuple_element_155 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_tuple_element_155 == NULL)) {
            tmp_tuple_element_155 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
        }

        if (tmp_tuple_element_155 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_assign_source_335 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_335, 0, tmp_tuple_element_155);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_335;
    }
    {
        PyObject *tmp_assign_source_336;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_336 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_336 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_336;
    }
    {
        PyObject *tmp_assign_source_337;
        tmp_assign_source_337 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_337;
    }
    {
        PyObject *tmp_assign_source_338;
        PyObject *tmp_metaclass_value_40;
        nuitka_bool tmp_condition_result_182;
        int tmp_truth_name_42;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_254;
        PyObject *tmp_subscript_value_40;
        PyObject *tmp_bases_value_40;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_42 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_condition_result_182 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_182 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_63;
        } else {
            goto condexpr_false_63;
        }
        condexpr_true_63:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_254 = tmp_class_creation_29__bases;
        tmp_subscript_value_40 = mod_consts[52];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_254, tmp_subscript_value_40, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        goto condexpr_end_63;
        condexpr_false_63:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_63:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_40 = tmp_class_creation_29__bases;
        tmp_assign_source_338 = SELECT_METACLASS(tstate, tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_338 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_338;
    }
    {
        bool tmp_condition_result_183;
        PyObject *tmp_expression_value_255;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_255 = tmp_class_creation_29__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_255, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_condition_result_183 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_183 != false) {
            goto branch_yes_120;
        } else {
            goto branch_no_120;
        }
    }
    branch_yes_120:;
    {
        PyObject *tmp_assign_source_339;
        PyObject *tmp_called_value_135;
        PyObject *tmp_expression_value_256;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_156;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_256 = tmp_class_creation_29__metaclass;
        tmp_called_value_135 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_256, mod_consts[449]);
        if (tmp_called_value_135 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_tuple_element_156 = mod_consts[719];
        tmp_args_value_79 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_156 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_29__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3076;
        tmp_assign_source_339 = CALL_FUNCTION(tstate, tmp_called_value_135, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_135);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_339 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_339;
    }
    {
        bool tmp_condition_result_184;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_257;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_257 = tmp_class_creation_29__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_257, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_operand_value_40 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_184 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_184 != false) {
            goto branch_yes_121;
        } else {
            goto branch_no_121;
        }
    }
    branch_yes_121:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_mod_expr_left_40;
        PyObject *tmp_mod_expr_right_40;
        PyObject *tmp_tuple_element_157;
        PyObject *tmp_expression_value_258;
        PyObject *tmp_name_value_73;
        PyObject *tmp_default_value_40;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_mod_expr_left_40 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_258 = tmp_class_creation_29__metaclass;
        tmp_name_value_73 = mod_consts[201];
        tmp_default_value_40 = mod_consts[453];
        tmp_tuple_element_157 = BUILTIN_GETATTR(tstate, tmp_expression_value_258, tmp_name_value_73, tmp_default_value_40);
        if (tmp_tuple_element_157 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        tmp_mod_expr_right_40 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_259;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_mod_expr_right_40, 0, tmp_tuple_element_157);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_80 = tmp_class_creation_29__prepared;
            tmp_expression_value_259 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_259 == NULL));
            tmp_tuple_element_157 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_259, mod_consts[201]);
            Py_DECREF(tmp_expression_value_259);
            if (tmp_tuple_element_157 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3076;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_40, 1, tmp_tuple_element_157);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_mod_expr_right_40);
        goto try_except_handler_118;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_40, tmp_mod_expr_right_40);
        Py_DECREF(tmp_mod_expr_right_40);
        if (tmp_raise_value_40 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_118;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_40;
        exception_lineno = 3076;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_118;
    }
    branch_no_121:;
    goto branch_end_120;
    branch_no_120:;
    {
        PyObject *tmp_assign_source_340;
        tmp_assign_source_340 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_340;
    }
    branch_end_120:;
    {
        PyObject *tmp_assign_source_341;
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_40 = tmp_class_creation_29__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[720];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[719];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_120;
        }
        frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37 = MAKE_CLASS_FRAME(tstate, codeobj_4a23c22cbf9d2dca9b11ab750b5dea0b, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37);
        assert(Py_REFCNT(frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[719];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3080;
            type_description_2 = "o";
            goto frame_exception_exit_37;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_36;
        frame_exception_exit_37:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37,
            type_description_2,
            outline_39_var___class__
        );



        assertFrameObject(frame_4a23c22cbf9d2dca9b11ab750b5dea0b_37);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_36;
        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_120;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_185;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_185 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_185 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3076;

                goto try_except_handler_120;
            }
            if (tmp_condition_result_185 == NUITKA_BOOL_TRUE) {
                goto branch_yes_122;
            } else {
                goto branch_no_122;
            }
        }
        branch_yes_122:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3076;

            goto try_except_handler_120;
        }
        branch_no_122:;
        {
            PyObject *tmp_assign_source_342;
            PyObject *tmp_called_value_136;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_158;
            PyObject *tmp_kwargs_value_80;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_136 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_158 = mod_consts[719];
            tmp_args_value_80 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_158 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_158);
            tmp_tuple_element_158 = locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_80 = tmp_class_creation_29__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3076;
            tmp_assign_source_342 = CALL_FUNCTION(tstate, tmp_called_value_136, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_342 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3076;

                goto try_except_handler_120;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_342;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_assign_source_341 = outline_39_var___class__;
        Py_INCREF(tmp_assign_source_341);
        goto try_return_handler_120;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_120:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076);
        locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076 = NULL;
        goto try_return_handler_119;
        // Exception handler code:
        try_except_handler_120:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076);
        locals_sqlalchemy$sql$sqltypes$$$class__40_NUMERIC_3076 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto try_except_handler_119;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_119:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_119:;
        exception_keeper_type_119 = exception_type;
        exception_keeper_value_119 = exception_value;
        exception_keeper_tb_119 = exception_tb;
        exception_keeper_lineno_119 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;
        exception_lineno = exception_keeper_lineno_119;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 3076;
        goto try_except_handler_118;
        outline_result_40:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[719], tmp_assign_source_341);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_118:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_keeper_lineno_120 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_120;
    exception_value = exception_keeper_value_120;
    exception_tb = exception_keeper_tb_120;
    exception_lineno = exception_keeper_lineno_120;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_343;
        PyObject *tmp_tuple_element_159;
        tmp_tuple_element_159 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_tuple_element_159 == NULL)) {
            tmp_tuple_element_159 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
        }

        if (tmp_tuple_element_159 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_assign_source_343 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_343, 0, tmp_tuple_element_159);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_343;
    }
    {
        PyObject *tmp_assign_source_344;
        PyObject *tmp_dircall_arg1_41;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_41 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_41);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_41};
            tmp_assign_source_344 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_344 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_344;
    }
    {
        PyObject *tmp_assign_source_345;
        tmp_assign_source_345 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_345;
    }
    {
        PyObject *tmp_assign_source_346;
        PyObject *tmp_metaclass_value_41;
        nuitka_bool tmp_condition_result_186;
        int tmp_truth_name_43;
        PyObject *tmp_type_arg_81;
        PyObject *tmp_expression_value_260;
        PyObject *tmp_subscript_value_41;
        PyObject *tmp_bases_value_41;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_43 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_condition_result_186 = tmp_truth_name_43 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_186 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_64;
        } else {
            goto condexpr_false_64;
        }
        condexpr_true_64:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_260 = tmp_class_creation_30__bases;
        tmp_subscript_value_41 = mod_consts[52];
        tmp_type_arg_81 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_260, tmp_subscript_value_41, 0);
        if (tmp_type_arg_81 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_metaclass_value_41 = BUILTIN_TYPE1(tmp_type_arg_81);
        Py_DECREF(tmp_type_arg_81);
        if (tmp_metaclass_value_41 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        goto condexpr_end_64;
        condexpr_false_64:;
        tmp_metaclass_value_41 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_41);
        condexpr_end_64:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_41 = tmp_class_creation_30__bases;
        tmp_assign_source_346 = SELECT_METACLASS(tstate, tmp_metaclass_value_41, tmp_bases_value_41);
        Py_DECREF(tmp_metaclass_value_41);
        if (tmp_assign_source_346 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_346;
    }
    {
        bool tmp_condition_result_187;
        PyObject *tmp_expression_value_261;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_261 = tmp_class_creation_30__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_261, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_condition_result_187 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_187 != false) {
            goto branch_yes_123;
        } else {
            goto branch_no_123;
        }
    }
    branch_yes_123:;
    {
        PyObject *tmp_assign_source_347;
        PyObject *tmp_called_value_137;
        PyObject *tmp_expression_value_262;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_160;
        PyObject *tmp_kwargs_value_81;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_262 = tmp_class_creation_30__metaclass;
        tmp_called_value_137 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_262, mod_consts[449]);
        if (tmp_called_value_137 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_tuple_element_160 = mod_consts[721];
        tmp_args_value_81 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_160 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_81 = tmp_class_creation_30__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3083;
        tmp_assign_source_347 = CALL_FUNCTION(tstate, tmp_called_value_137, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_called_value_137);
        Py_DECREF(tmp_args_value_81);
        if (tmp_assign_source_347 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_347;
    }
    {
        bool tmp_condition_result_188;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_263;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_263 = tmp_class_creation_30__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_263, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_operand_value_41 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        assert(!(tmp_res == -1));
        tmp_condition_result_188 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_188 != false) {
            goto branch_yes_124;
        } else {
            goto branch_no_124;
        }
    }
    branch_yes_124:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_41;
        PyObject *tmp_mod_expr_left_41;
        PyObject *tmp_mod_expr_right_41;
        PyObject *tmp_tuple_element_161;
        PyObject *tmp_expression_value_264;
        PyObject *tmp_name_value_74;
        PyObject *tmp_default_value_41;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_mod_expr_left_41 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_264 = tmp_class_creation_30__metaclass;
        tmp_name_value_74 = mod_consts[201];
        tmp_default_value_41 = mod_consts[453];
        tmp_tuple_element_161 = BUILTIN_GETATTR(tstate, tmp_expression_value_264, tmp_name_value_74, tmp_default_value_41);
        if (tmp_tuple_element_161 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        tmp_mod_expr_right_41 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_265;
            PyObject *tmp_type_arg_82;
            PyTuple_SET_ITEM(tmp_mod_expr_right_41, 0, tmp_tuple_element_161);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_82 = tmp_class_creation_30__prepared;
            tmp_expression_value_265 = BUILTIN_TYPE1(tmp_type_arg_82);
            assert(!(tmp_expression_value_265 == NULL));
            tmp_tuple_element_161 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_265, mod_consts[201]);
            Py_DECREF(tmp_expression_value_265);
            if (tmp_tuple_element_161 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3083;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_41, 1, tmp_tuple_element_161);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_mod_expr_right_41);
        goto try_except_handler_121;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_41 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_41, tmp_mod_expr_right_41);
        Py_DECREF(tmp_mod_expr_right_41);
        if (tmp_raise_value_41 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_121;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_41;
        exception_lineno = 3083;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_121;
    }
    branch_no_124:;
    goto branch_end_123;
    branch_no_123:;
    {
        PyObject *tmp_assign_source_348;
        tmp_assign_source_348 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_348;
    }
    branch_end_123:;
    {
        PyObject *tmp_assign_source_349;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_41 = tmp_class_creation_30__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[722];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[721];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_123;
        }
        frame_41e824f3ef0fb094cf721c44af492978_38 = MAKE_CLASS_FRAME(tstate, codeobj_41e824f3ef0fb094cf721c44af492978, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_41e824f3ef0fb094cf721c44af492978_38);
        assert(Py_REFCNT(frame_41e824f3ef0fb094cf721c44af492978_38) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[721];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3087;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_37;
        frame_exception_exit_38:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_41e824f3ef0fb094cf721c44af492978_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_41e824f3ef0fb094cf721c44af492978_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_41e824f3ef0fb094cf721c44af492978_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_41e824f3ef0fb094cf721c44af492978_38,
            type_description_2,
            outline_40_var___class__
        );



        assertFrameObject(frame_41e824f3ef0fb094cf721c44af492978_38);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_37;
        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_123;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_189;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_189 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_189 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3083;

                goto try_except_handler_123;
            }
            if (tmp_condition_result_189 == NUITKA_BOOL_TRUE) {
                goto branch_yes_125;
            } else {
                goto branch_no_125;
            }
        }
        branch_yes_125:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3083;

            goto try_except_handler_123;
        }
        branch_no_125:;
        {
            PyObject *tmp_assign_source_350;
            PyObject *tmp_called_value_138;
            PyObject *tmp_args_value_82;
            PyObject *tmp_tuple_element_162;
            PyObject *tmp_kwargs_value_82;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_138 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_162 = mod_consts[721];
            tmp_args_value_82 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_162 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_162);
            tmp_tuple_element_162 = locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083;
            PyTuple_SET_ITEM0(tmp_args_value_82, 2, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_82 = tmp_class_creation_30__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3083;
            tmp_assign_source_350 = CALL_FUNCTION(tstate, tmp_called_value_138, tmp_args_value_82, tmp_kwargs_value_82);
            Py_DECREF(tmp_args_value_82);
            if (tmp_assign_source_350 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3083;

                goto try_except_handler_123;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_350;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_349 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_349);
        goto try_return_handler_123;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_123:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083);
        locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083 = NULL;
        goto try_return_handler_122;
        // Exception handler code:
        try_except_handler_123:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083);
        locals_sqlalchemy$sql$sqltypes$$$class__41_DECIMAL_3083 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto try_except_handler_122;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_122:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_122 = exception_type;
        exception_keeper_value_122 = exception_value;
        exception_keeper_tb_122 = exception_tb;
        exception_keeper_lineno_122 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;
        exception_lineno = exception_keeper_lineno_122;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 3083;
        goto try_except_handler_121;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[721], tmp_assign_source_349);
    }
    goto try_end_41;
    // Exception handler code:
    try_except_handler_121:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_keeper_lineno_123 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_123;
    exception_value = exception_keeper_value_123;
    exception_tb = exception_keeper_tb_123;
    exception_lineno = exception_keeper_lineno_123;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_351;
        PyObject *tmp_tuple_element_163;
        tmp_tuple_element_163 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_tuple_element_163 == NULL)) {
            tmp_tuple_element_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_tuple_element_163 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_assign_source_351 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_351, 0, tmp_tuple_element_163);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_351;
    }
    {
        PyObject *tmp_assign_source_352;
        PyObject *tmp_dircall_arg1_42;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_42 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_42);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_42};
            tmp_assign_source_352 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_352 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_352;
    }
    {
        PyObject *tmp_assign_source_353;
        tmp_assign_source_353 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_353;
    }
    {
        PyObject *tmp_assign_source_354;
        PyObject *tmp_metaclass_value_42;
        nuitka_bool tmp_condition_result_190;
        int tmp_truth_name_44;
        PyObject *tmp_type_arg_83;
        PyObject *tmp_expression_value_266;
        PyObject *tmp_subscript_value_42;
        PyObject *tmp_bases_value_42;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_44 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_condition_result_190 = tmp_truth_name_44 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_190 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_65;
        } else {
            goto condexpr_false_65;
        }
        condexpr_true_65:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_266 = tmp_class_creation_31__bases;
        tmp_subscript_value_42 = mod_consts[52];
        tmp_type_arg_83 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_266, tmp_subscript_value_42, 0);
        if (tmp_type_arg_83 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_metaclass_value_42 = BUILTIN_TYPE1(tmp_type_arg_83);
        Py_DECREF(tmp_type_arg_83);
        if (tmp_metaclass_value_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        goto condexpr_end_65;
        condexpr_false_65:;
        tmp_metaclass_value_42 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_42);
        condexpr_end_65:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_42 = tmp_class_creation_31__bases;
        tmp_assign_source_354 = SELECT_METACLASS(tstate, tmp_metaclass_value_42, tmp_bases_value_42);
        Py_DECREF(tmp_metaclass_value_42);
        if (tmp_assign_source_354 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_354;
    }
    {
        bool tmp_condition_result_191;
        PyObject *tmp_expression_value_267;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_267 = tmp_class_creation_31__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_267, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_condition_result_191 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_191 != false) {
            goto branch_yes_126;
        } else {
            goto branch_no_126;
        }
    }
    branch_yes_126:;
    {
        PyObject *tmp_assign_source_355;
        PyObject *tmp_called_value_139;
        PyObject *tmp_expression_value_268;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_164;
        PyObject *tmp_kwargs_value_83;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_268 = tmp_class_creation_31__metaclass;
        tmp_called_value_139 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_268, mod_consts[449]);
        if (tmp_called_value_139 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_tuple_element_164 = mod_consts[723];
        tmp_args_value_83 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_164 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_83 = tmp_class_creation_31__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3090;
        tmp_assign_source_355 = CALL_FUNCTION(tstate, tmp_called_value_139, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_called_value_139);
        Py_DECREF(tmp_args_value_83);
        if (tmp_assign_source_355 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_355;
    }
    {
        bool tmp_condition_result_192;
        PyObject *tmp_operand_value_42;
        PyObject *tmp_expression_value_269;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_269 = tmp_class_creation_31__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_269, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_operand_value_42 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_192 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_192 != false) {
            goto branch_yes_127;
        } else {
            goto branch_no_127;
        }
    }
    branch_yes_127:;
    {
        PyObject *tmp_raise_type_42;
        PyObject *tmp_raise_value_42;
        PyObject *tmp_mod_expr_left_42;
        PyObject *tmp_mod_expr_right_42;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_expression_value_270;
        PyObject *tmp_name_value_75;
        PyObject *tmp_default_value_42;
        tmp_raise_type_42 = PyExc_TypeError;
        tmp_mod_expr_left_42 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_270 = tmp_class_creation_31__metaclass;
        tmp_name_value_75 = mod_consts[201];
        tmp_default_value_42 = mod_consts[453];
        tmp_tuple_element_165 = BUILTIN_GETATTR(tstate, tmp_expression_value_270, tmp_name_value_75, tmp_default_value_42);
        if (tmp_tuple_element_165 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        tmp_mod_expr_right_42 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_271;
            PyObject *tmp_type_arg_84;
            PyTuple_SET_ITEM(tmp_mod_expr_right_42, 0, tmp_tuple_element_165);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_84 = tmp_class_creation_31__prepared;
            tmp_expression_value_271 = BUILTIN_TYPE1(tmp_type_arg_84);
            assert(!(tmp_expression_value_271 == NULL));
            tmp_tuple_element_165 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_271, mod_consts[201]);
            Py_DECREF(tmp_expression_value_271);
            if (tmp_tuple_element_165 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3090;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_42, 1, tmp_tuple_element_165);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_mod_expr_right_42);
        goto try_except_handler_124;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_42 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_42, tmp_mod_expr_right_42);
        Py_DECREF(tmp_mod_expr_right_42);
        if (tmp_raise_value_42 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_124;
        }
        exception_type = tmp_raise_type_42;
        Py_INCREF(tmp_raise_type_42);
        exception_value = tmp_raise_value_42;
        exception_lineno = 3090;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_124;
    }
    branch_no_127:;
    goto branch_end_126;
    branch_no_126:;
    {
        PyObject *tmp_assign_source_356;
        tmp_assign_source_356 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_356;
    }
    branch_end_126:;
    {
        PyObject *tmp_assign_source_357;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_42 = tmp_class_creation_31__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[724];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[723];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_126;
        }
        frame_a2597828719d4625ef239a03f74439c9_39 = MAKE_CLASS_FRAME(tstate, codeobj_a2597828719d4625ef239a03f74439c9, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_a2597828719d4625ef239a03f74439c9_39);
        assert(Py_REFCNT(frame_a2597828719d4625ef239a03f74439c9_39) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[723];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3094;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_38;
        frame_exception_exit_39:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a2597828719d4625ef239a03f74439c9_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a2597828719d4625ef239a03f74439c9_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a2597828719d4625ef239a03f74439c9_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a2597828719d4625ef239a03f74439c9_39,
            type_description_2,
            outline_41_var___class__
        );



        assertFrameObject(frame_a2597828719d4625ef239a03f74439c9_39);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_38;
        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_126;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_193;
            PyObject *tmp_cmp_expr_left_42;
            PyObject *tmp_cmp_expr_right_42;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_42 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_42 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_193 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_42, tmp_cmp_expr_right_42);
            if (tmp_condition_result_193 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3090;

                goto try_except_handler_126;
            }
            if (tmp_condition_result_193 == NUITKA_BOOL_TRUE) {
                goto branch_yes_128;
            } else {
                goto branch_no_128;
            }
        }
        branch_yes_128:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3090;

            goto try_except_handler_126;
        }
        branch_no_128:;
        {
            PyObject *tmp_assign_source_358;
            PyObject *tmp_called_value_140;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_166;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_140 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_166 = mod_consts[723];
            tmp_args_value_84 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_166 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_166);
            tmp_tuple_element_166 = locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_31__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3090;
            tmp_assign_source_358 = CALL_FUNCTION(tstate, tmp_called_value_140, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_358 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3090;

                goto try_except_handler_126;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_358;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_357 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_357);
        goto try_return_handler_126;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_126:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090);
        locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090 = NULL;
        goto try_return_handler_125;
        // Exception handler code:
        try_except_handler_126:;
        exception_keeper_type_124 = exception_type;
        exception_keeper_value_124 = exception_value;
        exception_keeper_tb_124 = exception_tb;
        exception_keeper_lineno_124 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090);
        locals_sqlalchemy$sql$sqltypes$$$class__42_INTEGER_3090 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;
        exception_lineno = exception_keeper_lineno_124;

        goto try_except_handler_125;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_125:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_125:;
        exception_keeper_type_125 = exception_type;
        exception_keeper_value_125 = exception_value;
        exception_keeper_tb_125 = exception_tb;
        exception_keeper_lineno_125 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;
        exception_lineno = exception_keeper_lineno_125;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 3090;
        goto try_except_handler_124;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[723], tmp_assign_source_357);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_124:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_keeper_lineno_126 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_126;
    exception_value = exception_keeper_value_126;
    exception_tb = exception_keeper_tb_126;
    exception_lineno = exception_keeper_lineno_126;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    {
        PyObject *tmp_assign_source_359;
        tmp_assign_source_359 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[723]);

        if (unlikely(tmp_assign_source_359 == NULL)) {
            tmp_assign_source_359 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[723]);
        }

        if (tmp_assign_source_359 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3097;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[725], tmp_assign_source_359);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_360;
        PyObject *tmp_tuple_element_167;
        tmp_tuple_element_167 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[514]);

        if (unlikely(tmp_tuple_element_167 == NULL)) {
            tmp_tuple_element_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[514]);
        }

        if (tmp_tuple_element_167 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_assign_source_360 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_360, 0, tmp_tuple_element_167);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_360;
    }
    {
        PyObject *tmp_assign_source_361;
        PyObject *tmp_dircall_arg1_43;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_43 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_43);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_43};
            tmp_assign_source_361 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_361 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_361;
    }
    {
        PyObject *tmp_assign_source_362;
        tmp_assign_source_362 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_362;
    }
    {
        PyObject *tmp_assign_source_363;
        PyObject *tmp_metaclass_value_43;
        nuitka_bool tmp_condition_result_194;
        int tmp_truth_name_45;
        PyObject *tmp_type_arg_85;
        PyObject *tmp_expression_value_272;
        PyObject *tmp_subscript_value_43;
        PyObject *tmp_bases_value_43;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_45 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_condition_result_194 = tmp_truth_name_45 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_194 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_66;
        } else {
            goto condexpr_false_66;
        }
        condexpr_true_66:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_272 = tmp_class_creation_32__bases;
        tmp_subscript_value_43 = mod_consts[52];
        tmp_type_arg_85 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_272, tmp_subscript_value_43, 0);
        if (tmp_type_arg_85 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_metaclass_value_43 = BUILTIN_TYPE1(tmp_type_arg_85);
        Py_DECREF(tmp_type_arg_85);
        if (tmp_metaclass_value_43 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        goto condexpr_end_66;
        condexpr_false_66:;
        tmp_metaclass_value_43 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_43);
        condexpr_end_66:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_43 = tmp_class_creation_32__bases;
        tmp_assign_source_363 = SELECT_METACLASS(tstate, tmp_metaclass_value_43, tmp_bases_value_43);
        Py_DECREF(tmp_metaclass_value_43);
        if (tmp_assign_source_363 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_363;
    }
    {
        bool tmp_condition_result_195;
        PyObject *tmp_expression_value_273;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_273 = tmp_class_creation_32__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_273, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_condition_result_195 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_195 != false) {
            goto branch_yes_129;
        } else {
            goto branch_no_129;
        }
    }
    branch_yes_129:;
    {
        PyObject *tmp_assign_source_364;
        PyObject *tmp_called_value_141;
        PyObject *tmp_expression_value_274;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_168;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_274 = tmp_class_creation_32__metaclass;
        tmp_called_value_141 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_274, mod_consts[449]);
        if (tmp_called_value_141 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_tuple_element_168 = mod_consts[726];
        tmp_args_value_85 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_168 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_32__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3100;
        tmp_assign_source_364 = CALL_FUNCTION(tstate, tmp_called_value_141, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_141);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_364 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_364;
    }
    {
        bool tmp_condition_result_196;
        PyObject *tmp_operand_value_43;
        PyObject *tmp_expression_value_275;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_275 = tmp_class_creation_32__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_275, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_operand_value_43 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_196 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_196 != false) {
            goto branch_yes_130;
        } else {
            goto branch_no_130;
        }
    }
    branch_yes_130:;
    {
        PyObject *tmp_raise_type_43;
        PyObject *tmp_raise_value_43;
        PyObject *tmp_mod_expr_left_43;
        PyObject *tmp_mod_expr_right_43;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_expression_value_276;
        PyObject *tmp_name_value_76;
        PyObject *tmp_default_value_43;
        tmp_raise_type_43 = PyExc_TypeError;
        tmp_mod_expr_left_43 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_276 = tmp_class_creation_32__metaclass;
        tmp_name_value_76 = mod_consts[201];
        tmp_default_value_43 = mod_consts[453];
        tmp_tuple_element_169 = BUILTIN_GETATTR(tstate, tmp_expression_value_276, tmp_name_value_76, tmp_default_value_43);
        if (tmp_tuple_element_169 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        tmp_mod_expr_right_43 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_277;
            PyObject *tmp_type_arg_86;
            PyTuple_SET_ITEM(tmp_mod_expr_right_43, 0, tmp_tuple_element_169);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_86 = tmp_class_creation_32__prepared;
            tmp_expression_value_277 = BUILTIN_TYPE1(tmp_type_arg_86);
            assert(!(tmp_expression_value_277 == NULL));
            tmp_tuple_element_169 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_277, mod_consts[201]);
            Py_DECREF(tmp_expression_value_277);
            if (tmp_tuple_element_169 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3100;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_43, 1, tmp_tuple_element_169);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_mod_expr_right_43);
        goto try_except_handler_127;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_43 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_43, tmp_mod_expr_right_43);
        Py_DECREF(tmp_mod_expr_right_43);
        if (tmp_raise_value_43 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_127;
        }
        exception_type = tmp_raise_type_43;
        Py_INCREF(tmp_raise_type_43);
        exception_value = tmp_raise_value_43;
        exception_lineno = 3100;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_127;
    }
    branch_no_130:;
    goto branch_end_129;
    branch_no_129:;
    {
        PyObject *tmp_assign_source_365;
        tmp_assign_source_365 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_365;
    }
    branch_end_129:;
    {
        PyObject *tmp_assign_source_366;
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_43 = tmp_class_creation_32__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[727];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[726];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_129;
        }
        frame_59cb959a308297ac8b18f492da0a1a46_40 = MAKE_CLASS_FRAME(tstate, codeobj_59cb959a308297ac8b18f492da0a1a46, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_59cb959a308297ac8b18f492da0a1a46_40);
        assert(Py_REFCNT(frame_59cb959a308297ac8b18f492da0a1a46_40) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[726];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3104;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_39;
        frame_exception_exit_40:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_59cb959a308297ac8b18f492da0a1a46_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_59cb959a308297ac8b18f492da0a1a46_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_59cb959a308297ac8b18f492da0a1a46_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_59cb959a308297ac8b18f492da0a1a46_40,
            type_description_2,
            outline_42_var___class__
        );



        assertFrameObject(frame_59cb959a308297ac8b18f492da0a1a46_40);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_39;
        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_129;
        skip_nested_handling_39:;
        {
            nuitka_bool tmp_condition_result_197;
            PyObject *tmp_cmp_expr_left_43;
            PyObject *tmp_cmp_expr_right_43;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_43 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_43 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_197 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_43, tmp_cmp_expr_right_43);
            if (tmp_condition_result_197 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3100;

                goto try_except_handler_129;
            }
            if (tmp_condition_result_197 == NUITKA_BOOL_TRUE) {
                goto branch_yes_131;
            } else {
                goto branch_no_131;
            }
        }
        branch_yes_131:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3100;

            goto try_except_handler_129;
        }
        branch_no_131:;
        {
            PyObject *tmp_assign_source_367;
            PyObject *tmp_called_value_142;
            PyObject *tmp_args_value_86;
            PyObject *tmp_tuple_element_170;
            PyObject *tmp_kwargs_value_86;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_142 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_170 = mod_consts[726];
            tmp_args_value_86 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_170 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_170);
            tmp_tuple_element_170 = locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100;
            PyTuple_SET_ITEM0(tmp_args_value_86, 2, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_86 = tmp_class_creation_32__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3100;
            tmp_assign_source_367 = CALL_FUNCTION(tstate, tmp_called_value_142, tmp_args_value_86, tmp_kwargs_value_86);
            Py_DECREF(tmp_args_value_86);
            if (tmp_assign_source_367 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3100;

                goto try_except_handler_129;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_367;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_assign_source_366 = outline_42_var___class__;
        Py_INCREF(tmp_assign_source_366);
        goto try_return_handler_129;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_129:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100);
        locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100 = NULL;
        goto try_return_handler_128;
        // Exception handler code:
        try_except_handler_129:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100);
        locals_sqlalchemy$sql$sqltypes$$$class__43_SMALLINT_3100 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto try_except_handler_128;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_128 = exception_type;
        exception_keeper_value_128 = exception_value;
        exception_keeper_tb_128 = exception_tb;
        exception_keeper_lineno_128 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;
        exception_lineno = exception_keeper_lineno_128;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 3100;
        goto try_except_handler_127;
        outline_result_43:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[726], tmp_assign_source_366);
    }
    goto try_end_43;
    // Exception handler code:
    try_except_handler_127:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_keeper_lineno_129 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_129;
    exception_value = exception_keeper_value_129;
    exception_tb = exception_keeper_tb_129;
    exception_lineno = exception_keeper_lineno_129;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_368;
        PyObject *tmp_tuple_element_171;
        tmp_tuple_element_171 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[517]);

        if (unlikely(tmp_tuple_element_171 == NULL)) {
            tmp_tuple_element_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[517]);
        }

        if (tmp_tuple_element_171 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_assign_source_368 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_368, 0, tmp_tuple_element_171);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_368;
    }
    {
        PyObject *tmp_assign_source_369;
        PyObject *tmp_dircall_arg1_44;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_44 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_44);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_44};
            tmp_assign_source_369 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_369 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_369;
    }
    {
        PyObject *tmp_assign_source_370;
        tmp_assign_source_370 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_370;
    }
    {
        PyObject *tmp_assign_source_371;
        PyObject *tmp_metaclass_value_44;
        nuitka_bool tmp_condition_result_198;
        int tmp_truth_name_46;
        PyObject *tmp_type_arg_87;
        PyObject *tmp_expression_value_278;
        PyObject *tmp_subscript_value_44;
        PyObject *tmp_bases_value_44;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_46 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_condition_result_198 = tmp_truth_name_46 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_198 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_67;
        } else {
            goto condexpr_false_67;
        }
        condexpr_true_67:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_278 = tmp_class_creation_33__bases;
        tmp_subscript_value_44 = mod_consts[52];
        tmp_type_arg_87 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_278, tmp_subscript_value_44, 0);
        if (tmp_type_arg_87 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_metaclass_value_44 = BUILTIN_TYPE1(tmp_type_arg_87);
        Py_DECREF(tmp_type_arg_87);
        if (tmp_metaclass_value_44 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        goto condexpr_end_67;
        condexpr_false_67:;
        tmp_metaclass_value_44 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_44);
        condexpr_end_67:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_44 = tmp_class_creation_33__bases;
        tmp_assign_source_371 = SELECT_METACLASS(tstate, tmp_metaclass_value_44, tmp_bases_value_44);
        Py_DECREF(tmp_metaclass_value_44);
        if (tmp_assign_source_371 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_371;
    }
    {
        bool tmp_condition_result_199;
        PyObject *tmp_expression_value_279;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_279 = tmp_class_creation_33__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_279, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_condition_result_199 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_199 != false) {
            goto branch_yes_132;
        } else {
            goto branch_no_132;
        }
    }
    branch_yes_132:;
    {
        PyObject *tmp_assign_source_372;
        PyObject *tmp_called_value_143;
        PyObject *tmp_expression_value_280;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_172;
        PyObject *tmp_kwargs_value_87;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_280 = tmp_class_creation_33__metaclass;
        tmp_called_value_143 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_280, mod_consts[449]);
        if (tmp_called_value_143 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_tuple_element_172 = mod_consts[728];
        tmp_args_value_87 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_172 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_87 = tmp_class_creation_33__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3107;
        tmp_assign_source_372 = CALL_FUNCTION(tstate, tmp_called_value_143, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_called_value_143);
        Py_DECREF(tmp_args_value_87);
        if (tmp_assign_source_372 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_372;
    }
    {
        bool tmp_condition_result_200;
        PyObject *tmp_operand_value_44;
        PyObject *tmp_expression_value_281;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_281 = tmp_class_creation_33__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_281, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_operand_value_44 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_44);
        assert(!(tmp_res == -1));
        tmp_condition_result_200 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_200 != false) {
            goto branch_yes_133;
        } else {
            goto branch_no_133;
        }
    }
    branch_yes_133:;
    {
        PyObject *tmp_raise_type_44;
        PyObject *tmp_raise_value_44;
        PyObject *tmp_mod_expr_left_44;
        PyObject *tmp_mod_expr_right_44;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_expression_value_282;
        PyObject *tmp_name_value_77;
        PyObject *tmp_default_value_44;
        tmp_raise_type_44 = PyExc_TypeError;
        tmp_mod_expr_left_44 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_282 = tmp_class_creation_33__metaclass;
        tmp_name_value_77 = mod_consts[201];
        tmp_default_value_44 = mod_consts[453];
        tmp_tuple_element_173 = BUILTIN_GETATTR(tstate, tmp_expression_value_282, tmp_name_value_77, tmp_default_value_44);
        if (tmp_tuple_element_173 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        tmp_mod_expr_right_44 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_283;
            PyObject *tmp_type_arg_88;
            PyTuple_SET_ITEM(tmp_mod_expr_right_44, 0, tmp_tuple_element_173);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_88 = tmp_class_creation_33__prepared;
            tmp_expression_value_283 = BUILTIN_TYPE1(tmp_type_arg_88);
            assert(!(tmp_expression_value_283 == NULL));
            tmp_tuple_element_173 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_283, mod_consts[201]);
            Py_DECREF(tmp_expression_value_283);
            if (tmp_tuple_element_173 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3107;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_44, 1, tmp_tuple_element_173);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_mod_expr_right_44);
        goto try_except_handler_130;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_44 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_44, tmp_mod_expr_right_44);
        Py_DECREF(tmp_mod_expr_right_44);
        if (tmp_raise_value_44 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_130;
        }
        exception_type = tmp_raise_type_44;
        Py_INCREF(tmp_raise_type_44);
        exception_value = tmp_raise_value_44;
        exception_lineno = 3107;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_130;
    }
    branch_no_133:;
    goto branch_end_132;
    branch_no_132:;
    {
        PyObject *tmp_assign_source_373;
        tmp_assign_source_373 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_373;
    }
    branch_end_132:;
    {
        PyObject *tmp_assign_source_374;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_44 = tmp_class_creation_33__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[729];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[728];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_132;
        }
        frame_091b6b548a57da5064965fa8688ac505_41 = MAKE_CLASS_FRAME(tstate, codeobj_091b6b548a57da5064965fa8688ac505, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_091b6b548a57da5064965fa8688ac505_41);
        assert(Py_REFCNT(frame_091b6b548a57da5064965fa8688ac505_41) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[728];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3111;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_40;
        frame_exception_exit_41:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_091b6b548a57da5064965fa8688ac505_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_091b6b548a57da5064965fa8688ac505_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_091b6b548a57da5064965fa8688ac505_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_091b6b548a57da5064965fa8688ac505_41,
            type_description_2,
            outline_43_var___class__
        );



        assertFrameObject(frame_091b6b548a57da5064965fa8688ac505_41);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_40;
        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_132;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_201;
            PyObject *tmp_cmp_expr_left_44;
            PyObject *tmp_cmp_expr_right_44;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_44 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_44 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_201 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_44, tmp_cmp_expr_right_44);
            if (tmp_condition_result_201 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3107;

                goto try_except_handler_132;
            }
            if (tmp_condition_result_201 == NUITKA_BOOL_TRUE) {
                goto branch_yes_134;
            } else {
                goto branch_no_134;
            }
        }
        branch_yes_134:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3107;

            goto try_except_handler_132;
        }
        branch_no_134:;
        {
            PyObject *tmp_assign_source_375;
            PyObject *tmp_called_value_144;
            PyObject *tmp_args_value_88;
            PyObject *tmp_tuple_element_174;
            PyObject *tmp_kwargs_value_88;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_144 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_174 = mod_consts[728];
            tmp_args_value_88 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_174 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_174);
            tmp_tuple_element_174 = locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107;
            PyTuple_SET_ITEM0(tmp_args_value_88, 2, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_88 = tmp_class_creation_33__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3107;
            tmp_assign_source_375 = CALL_FUNCTION(tstate, tmp_called_value_144, tmp_args_value_88, tmp_kwargs_value_88);
            Py_DECREF(tmp_args_value_88);
            if (tmp_assign_source_375 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3107;

                goto try_except_handler_132;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_375;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_374 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_374);
        goto try_return_handler_132;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_132:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107);
        locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107 = NULL;
        goto try_return_handler_131;
        // Exception handler code:
        try_except_handler_132:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107);
        locals_sqlalchemy$sql$sqltypes$$$class__44_BIGINT_3107 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto try_except_handler_131;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_131:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_131 = exception_type;
        exception_keeper_value_131 = exception_value;
        exception_keeper_tb_131 = exception_tb;
        exception_keeper_lineno_131 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_131;
        exception_value = exception_keeper_value_131;
        exception_tb = exception_keeper_tb_131;
        exception_lineno = exception_keeper_lineno_131;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 3107;
        goto try_except_handler_130;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[728], tmp_assign_source_374);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_130:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_keeper_lineno_132 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_132;
    exception_value = exception_keeper_value_132;
    exception_tb = exception_keeper_tb_132;
    exception_lineno = exception_keeper_lineno_132;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_376;
        PyObject *tmp_tuple_element_175;
        tmp_tuple_element_175 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_tuple_element_175 == NULL)) {
            tmp_tuple_element_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_tuple_element_175 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_assign_source_376 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_376, 0, tmp_tuple_element_175);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_376;
    }
    {
        PyObject *tmp_assign_source_377;
        PyObject *tmp_dircall_arg1_45;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_45 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_45);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_45};
            tmp_assign_source_377 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_377 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_377;
    }
    {
        PyObject *tmp_assign_source_378;
        tmp_assign_source_378 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_378;
    }
    {
        PyObject *tmp_assign_source_379;
        PyObject *tmp_metaclass_value_45;
        nuitka_bool tmp_condition_result_202;
        int tmp_truth_name_47;
        PyObject *tmp_type_arg_89;
        PyObject *tmp_expression_value_284;
        PyObject *tmp_subscript_value_45;
        PyObject *tmp_bases_value_45;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_47 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_condition_result_202 = tmp_truth_name_47 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_202 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_68;
        } else {
            goto condexpr_false_68;
        }
        condexpr_true_68:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_284 = tmp_class_creation_34__bases;
        tmp_subscript_value_45 = mod_consts[52];
        tmp_type_arg_89 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_284, tmp_subscript_value_45, 0);
        if (tmp_type_arg_89 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_metaclass_value_45 = BUILTIN_TYPE1(tmp_type_arg_89);
        Py_DECREF(tmp_type_arg_89);
        if (tmp_metaclass_value_45 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        goto condexpr_end_68;
        condexpr_false_68:;
        tmp_metaclass_value_45 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_45);
        condexpr_end_68:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_45 = tmp_class_creation_34__bases;
        tmp_assign_source_379 = SELECT_METACLASS(tstate, tmp_metaclass_value_45, tmp_bases_value_45);
        Py_DECREF(tmp_metaclass_value_45);
        if (tmp_assign_source_379 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_379;
    }
    {
        bool tmp_condition_result_203;
        PyObject *tmp_expression_value_285;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_285 = tmp_class_creation_34__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_285, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_condition_result_203 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_203 != false) {
            goto branch_yes_135;
        } else {
            goto branch_no_135;
        }
    }
    branch_yes_135:;
    {
        PyObject *tmp_assign_source_380;
        PyObject *tmp_called_value_145;
        PyObject *tmp_expression_value_286;
        PyObject *tmp_args_value_89;
        PyObject *tmp_tuple_element_176;
        PyObject *tmp_kwargs_value_89;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_286 = tmp_class_creation_34__metaclass;
        tmp_called_value_145 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_286, mod_consts[449]);
        if (tmp_called_value_145 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_tuple_element_176 = mod_consts[387];
        tmp_args_value_89 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_176 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_89 = tmp_class_creation_34__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3114;
        tmp_assign_source_380 = CALL_FUNCTION(tstate, tmp_called_value_145, tmp_args_value_89, tmp_kwargs_value_89);
        Py_DECREF(tmp_called_value_145);
        Py_DECREF(tmp_args_value_89);
        if (tmp_assign_source_380 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_380;
    }
    {
        bool tmp_condition_result_204;
        PyObject *tmp_operand_value_45;
        PyObject *tmp_expression_value_287;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_287 = tmp_class_creation_34__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_287, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_operand_value_45 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_204 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_204 != false) {
            goto branch_yes_136;
        } else {
            goto branch_no_136;
        }
    }
    branch_yes_136:;
    {
        PyObject *tmp_raise_type_45;
        PyObject *tmp_raise_value_45;
        PyObject *tmp_mod_expr_left_45;
        PyObject *tmp_mod_expr_right_45;
        PyObject *tmp_tuple_element_177;
        PyObject *tmp_expression_value_288;
        PyObject *tmp_name_value_78;
        PyObject *tmp_default_value_45;
        tmp_raise_type_45 = PyExc_TypeError;
        tmp_mod_expr_left_45 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_288 = tmp_class_creation_34__metaclass;
        tmp_name_value_78 = mod_consts[201];
        tmp_default_value_45 = mod_consts[453];
        tmp_tuple_element_177 = BUILTIN_GETATTR(tstate, tmp_expression_value_288, tmp_name_value_78, tmp_default_value_45);
        if (tmp_tuple_element_177 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        tmp_mod_expr_right_45 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_289;
            PyObject *tmp_type_arg_90;
            PyTuple_SET_ITEM(tmp_mod_expr_right_45, 0, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_90 = tmp_class_creation_34__prepared;
            tmp_expression_value_289 = BUILTIN_TYPE1(tmp_type_arg_90);
            assert(!(tmp_expression_value_289 == NULL));
            tmp_tuple_element_177 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_289, mod_consts[201]);
            Py_DECREF(tmp_expression_value_289);
            if (tmp_tuple_element_177 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3114;

                goto tuple_build_exception_59;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_45, 1, tmp_tuple_element_177);
        }
        goto tuple_build_noexception_59;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_59:;
        Py_DECREF(tmp_mod_expr_right_45);
        goto try_except_handler_133;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_59:;
        tmp_raise_value_45 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_45, tmp_mod_expr_right_45);
        Py_DECREF(tmp_mod_expr_right_45);
        if (tmp_raise_value_45 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_133;
        }
        exception_type = tmp_raise_type_45;
        Py_INCREF(tmp_raise_type_45);
        exception_value = tmp_raise_value_45;
        exception_lineno = 3114;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_133;
    }
    branch_no_136:;
    goto branch_end_135;
    branch_no_135:;
    {
        PyObject *tmp_assign_source_381;
        tmp_assign_source_381 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_381;
    }
    branch_end_135:;
    {
        PyObject *tmp_assign_source_382;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_45 = tmp_class_creation_34__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_135;
        }
        tmp_dictset_value = mod_consts[730];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_135;
        }
        tmp_dictset_value = mod_consts[387];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_135;
        }
        frame_dfe327ff5836e31b39a8ce11fee836fe_42 = MAKE_CLASS_FRAME(tstate, codeobj_dfe327ff5836e31b39a8ce11fee836fe, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_dfe327ff5836e31b39a8ce11fee836fe_42);
        assert(Py_REFCNT(frame_dfe327ff5836e31b39a8ce11fee836fe_42) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[387];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3125;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }
        {
            PyObject *tmp_defaults_23;
            tmp_defaults_23 = mod_consts[538];
            Py_INCREF(tmp_defaults_23);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__140___init__(tmp_defaults_23);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[70], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3127;
                type_description_2 = "o";
                goto frame_exception_exit_42;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__141_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[492], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3140;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_41;
        frame_exception_exit_42:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_dfe327ff5836e31b39a8ce11fee836fe_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_dfe327ff5836e31b39a8ce11fee836fe_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_dfe327ff5836e31b39a8ce11fee836fe_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_dfe327ff5836e31b39a8ce11fee836fe_42,
            type_description_2,
            outline_44_var___class__
        );



        assertFrameObject(frame_dfe327ff5836e31b39a8ce11fee836fe_42);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_41;
        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_41:;

        goto try_except_handler_135;
        skip_nested_handling_41:;
        {
            nuitka_bool tmp_condition_result_205;
            PyObject *tmp_cmp_expr_left_45;
            PyObject *tmp_cmp_expr_right_45;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_45 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_45 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_205 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_45, tmp_cmp_expr_right_45);
            if (tmp_condition_result_205 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3114;

                goto try_except_handler_135;
            }
            if (tmp_condition_result_205 == NUITKA_BOOL_TRUE) {
                goto branch_yes_137;
            } else {
                goto branch_no_137;
            }
        }
        branch_yes_137:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3114;

            goto try_except_handler_135;
        }
        branch_no_137:;
        {
            PyObject *tmp_assign_source_383;
            PyObject *tmp_called_value_146;
            PyObject *tmp_args_value_90;
            PyObject *tmp_tuple_element_178;
            PyObject *tmp_kwargs_value_90;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_146 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_178 = mod_consts[387];
            tmp_args_value_90 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_178 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_178);
            tmp_tuple_element_178 = locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114;
            PyTuple_SET_ITEM0(tmp_args_value_90, 2, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_90 = tmp_class_creation_34__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3114;
            tmp_assign_source_383 = CALL_FUNCTION(tstate, tmp_called_value_146, tmp_args_value_90, tmp_kwargs_value_90);
            Py_DECREF(tmp_args_value_90);
            if (tmp_assign_source_383 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3114;

                goto try_except_handler_135;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_383;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_382 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_382);
        goto try_return_handler_135;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_135:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114);
        locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114 = NULL;
        goto try_return_handler_134;
        // Exception handler code:
        try_except_handler_135:;
        exception_keeper_type_133 = exception_type;
        exception_keeper_value_133 = exception_value;
        exception_keeper_tb_133 = exception_tb;
        exception_keeper_lineno_133 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114);
        locals_sqlalchemy$sql$sqltypes$$$class__45_TIMESTAMP_3114 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;
        exception_lineno = exception_keeper_lineno_133;

        goto try_except_handler_134;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_134:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_134:;
        exception_keeper_type_134 = exception_type;
        exception_keeper_value_134 = exception_value;
        exception_keeper_tb_134 = exception_tb;
        exception_keeper_lineno_134 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;
        exception_lineno = exception_keeper_lineno_134;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 3114;
        goto try_except_handler_133;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[387], tmp_assign_source_382);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_133:;
    exception_keeper_type_135 = exception_type;
    exception_keeper_value_135 = exception_value;
    exception_keeper_tb_135 = exception_tb;
    exception_keeper_lineno_135 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_135;
    exception_value = exception_keeper_value_135;
    exception_tb = exception_keeper_tb_135;
    exception_lineno = exception_keeper_lineno_135;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_384;
        PyObject *tmp_tuple_element_179;
        tmp_tuple_element_179 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_tuple_element_179 == NULL)) {
            tmp_tuple_element_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_tuple_element_179 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_assign_source_384 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_384, 0, tmp_tuple_element_179);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_384;
    }
    {
        PyObject *tmp_assign_source_385;
        PyObject *tmp_dircall_arg1_46;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_46 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_46);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_46};
            tmp_assign_source_385 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_385 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_385;
    }
    {
        PyObject *tmp_assign_source_386;
        tmp_assign_source_386 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_386;
    }
    {
        PyObject *tmp_assign_source_387;
        PyObject *tmp_metaclass_value_46;
        nuitka_bool tmp_condition_result_206;
        int tmp_truth_name_48;
        PyObject *tmp_type_arg_91;
        PyObject *tmp_expression_value_290;
        PyObject *tmp_subscript_value_46;
        PyObject *tmp_bases_value_46;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_48 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_condition_result_206 = tmp_truth_name_48 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_206 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_69;
        } else {
            goto condexpr_false_69;
        }
        condexpr_true_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_290 = tmp_class_creation_35__bases;
        tmp_subscript_value_46 = mod_consts[52];
        tmp_type_arg_91 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_290, tmp_subscript_value_46, 0);
        if (tmp_type_arg_91 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_metaclass_value_46 = BUILTIN_TYPE1(tmp_type_arg_91);
        Py_DECREF(tmp_type_arg_91);
        if (tmp_metaclass_value_46 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        goto condexpr_end_69;
        condexpr_false_69:;
        tmp_metaclass_value_46 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_46);
        condexpr_end_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_46 = tmp_class_creation_35__bases;
        tmp_assign_source_387 = SELECT_METACLASS(tstate, tmp_metaclass_value_46, tmp_bases_value_46);
        Py_DECREF(tmp_metaclass_value_46);
        if (tmp_assign_source_387 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_387;
    }
    {
        bool tmp_condition_result_207;
        PyObject *tmp_expression_value_291;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_291 = tmp_class_creation_35__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_291, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_condition_result_207 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_207 != false) {
            goto branch_yes_138;
        } else {
            goto branch_no_138;
        }
    }
    branch_yes_138:;
    {
        PyObject *tmp_assign_source_388;
        PyObject *tmp_called_value_147;
        PyObject *tmp_expression_value_292;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_180;
        PyObject *tmp_kwargs_value_91;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_292 = tmp_class_creation_35__metaclass;
        tmp_called_value_147 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_292, mod_consts[449]);
        if (tmp_called_value_147 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_tuple_element_180 = mod_consts[104];
        tmp_args_value_91 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_180 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_91 = tmp_class_creation_35__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3144;
        tmp_assign_source_388 = CALL_FUNCTION(tstate, tmp_called_value_147, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_called_value_147);
        Py_DECREF(tmp_args_value_91);
        if (tmp_assign_source_388 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_388;
    }
    {
        bool tmp_condition_result_208;
        PyObject *tmp_operand_value_46;
        PyObject *tmp_expression_value_293;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_293 = tmp_class_creation_35__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_293, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_operand_value_46 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_208 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_208 != false) {
            goto branch_yes_139;
        } else {
            goto branch_no_139;
        }
    }
    branch_yes_139:;
    {
        PyObject *tmp_raise_type_46;
        PyObject *tmp_raise_value_46;
        PyObject *tmp_mod_expr_left_46;
        PyObject *tmp_mod_expr_right_46;
        PyObject *tmp_tuple_element_181;
        PyObject *tmp_expression_value_294;
        PyObject *tmp_name_value_79;
        PyObject *tmp_default_value_46;
        tmp_raise_type_46 = PyExc_TypeError;
        tmp_mod_expr_left_46 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_294 = tmp_class_creation_35__metaclass;
        tmp_name_value_79 = mod_consts[201];
        tmp_default_value_46 = mod_consts[453];
        tmp_tuple_element_181 = BUILTIN_GETATTR(tstate, tmp_expression_value_294, tmp_name_value_79, tmp_default_value_46);
        if (tmp_tuple_element_181 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        tmp_mod_expr_right_46 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_295;
            PyObject *tmp_type_arg_92;
            PyTuple_SET_ITEM(tmp_mod_expr_right_46, 0, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_92 = tmp_class_creation_35__prepared;
            tmp_expression_value_295 = BUILTIN_TYPE1(tmp_type_arg_92);
            assert(!(tmp_expression_value_295 == NULL));
            tmp_tuple_element_181 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_295, mod_consts[201]);
            Py_DECREF(tmp_expression_value_295);
            if (tmp_tuple_element_181 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3144;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_46, 1, tmp_tuple_element_181);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_mod_expr_right_46);
        goto try_except_handler_136;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_46 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_46, tmp_mod_expr_right_46);
        Py_DECREF(tmp_mod_expr_right_46);
        if (tmp_raise_value_46 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_136;
        }
        exception_type = tmp_raise_type_46;
        Py_INCREF(tmp_raise_type_46);
        exception_value = tmp_raise_value_46;
        exception_lineno = 3144;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_136;
    }
    branch_no_139:;
    goto branch_end_138;
    branch_no_138:;
    {
        PyObject *tmp_assign_source_389;
        tmp_assign_source_389 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_389;
    }
    branch_end_138:;
    {
        PyObject *tmp_assign_source_390;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_46 = tmp_class_creation_35__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_138;
        }
        tmp_dictset_value = mod_consts[733];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_138;
        }
        tmp_dictset_value = mod_consts[104];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_138;
        }
        frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43 = MAKE_CLASS_FRAME(tstate, codeobj_2fa6fbda509a409a63f59dfdaf2a6a5f, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43);
        assert(Py_REFCNT(frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[104];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3148;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_42;
        frame_exception_exit_43:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43,
            type_description_2,
            outline_45_var___class__
        );



        assertFrameObject(frame_2fa6fbda509a409a63f59dfdaf2a6a5f_43);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_42;
        frame_no_exception_42:;
        goto skip_nested_handling_42;
        nested_frame_exit_42:;

        goto try_except_handler_138;
        skip_nested_handling_42:;
        {
            nuitka_bool tmp_condition_result_209;
            PyObject *tmp_cmp_expr_left_46;
            PyObject *tmp_cmp_expr_right_46;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_46 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_46 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_209 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_46, tmp_cmp_expr_right_46);
            if (tmp_condition_result_209 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3144;

                goto try_except_handler_138;
            }
            if (tmp_condition_result_209 == NUITKA_BOOL_TRUE) {
                goto branch_yes_140;
            } else {
                goto branch_no_140;
            }
        }
        branch_yes_140:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3144;

            goto try_except_handler_138;
        }
        branch_no_140:;
        {
            PyObject *tmp_assign_source_391;
            PyObject *tmp_called_value_148;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_182;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_148 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_182 = mod_consts[104];
            tmp_args_value_92 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_182 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_182);
            tmp_tuple_element_182 = locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_35__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3144;
            tmp_assign_source_391 = CALL_FUNCTION(tstate, tmp_called_value_148, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_391 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3144;

                goto try_except_handler_138;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_391;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_390 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_390);
        goto try_return_handler_138;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_138:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144);
        locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144 = NULL;
        goto try_return_handler_137;
        // Exception handler code:
        try_except_handler_138:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144);
        locals_sqlalchemy$sql$sqltypes$$$class__46_DATETIME_3144 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto try_except_handler_137;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_137 = exception_type;
        exception_keeper_value_137 = exception_value;
        exception_keeper_tb_137 = exception_tb;
        exception_keeper_lineno_137 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;
        exception_lineno = exception_keeper_lineno_137;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 3144;
        goto try_except_handler_136;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[104], tmp_assign_source_390);
    }
    goto try_end_46;
    // Exception handler code:
    try_except_handler_136:;
    exception_keeper_type_138 = exception_type;
    exception_keeper_value_138 = exception_value;
    exception_keeper_tb_138 = exception_tb;
    exception_keeper_lineno_138 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_138;
    exception_value = exception_keeper_value_138;
    exception_tb = exception_keeper_tb_138;
    exception_lineno = exception_keeper_lineno_138;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_392;
        PyObject *tmp_tuple_element_183;
        tmp_tuple_element_183 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_tuple_element_183 == NULL)) {
            tmp_tuple_element_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
        }

        if (tmp_tuple_element_183 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_assign_source_392 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_392, 0, tmp_tuple_element_183);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_392;
    }
    {
        PyObject *tmp_assign_source_393;
        PyObject *tmp_dircall_arg1_47;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_47 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_47);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_47};
            tmp_assign_source_393 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_393 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_393;
    }
    {
        PyObject *tmp_assign_source_394;
        tmp_assign_source_394 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_394;
    }
    {
        PyObject *tmp_assign_source_395;
        PyObject *tmp_metaclass_value_47;
        nuitka_bool tmp_condition_result_210;
        int tmp_truth_name_49;
        PyObject *tmp_type_arg_93;
        PyObject *tmp_expression_value_296;
        PyObject *tmp_subscript_value_47;
        PyObject *tmp_bases_value_47;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_49 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_condition_result_210 = tmp_truth_name_49 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_210 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_70;
        } else {
            goto condexpr_false_70;
        }
        condexpr_true_70:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_296 = tmp_class_creation_36__bases;
        tmp_subscript_value_47 = mod_consts[52];
        tmp_type_arg_93 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_296, tmp_subscript_value_47, 0);
        if (tmp_type_arg_93 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_metaclass_value_47 = BUILTIN_TYPE1(tmp_type_arg_93);
        Py_DECREF(tmp_type_arg_93);
        if (tmp_metaclass_value_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        goto condexpr_end_70;
        condexpr_false_70:;
        tmp_metaclass_value_47 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_47);
        condexpr_end_70:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_47 = tmp_class_creation_36__bases;
        tmp_assign_source_395 = SELECT_METACLASS(tstate, tmp_metaclass_value_47, tmp_bases_value_47);
        Py_DECREF(tmp_metaclass_value_47);
        if (tmp_assign_source_395 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_395;
    }
    {
        bool tmp_condition_result_211;
        PyObject *tmp_expression_value_297;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_297 = tmp_class_creation_36__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_297, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_condition_result_211 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_211 != false) {
            goto branch_yes_141;
        } else {
            goto branch_no_141;
        }
    }
    branch_yes_141:;
    {
        PyObject *tmp_assign_source_396;
        PyObject *tmp_called_value_149;
        PyObject *tmp_expression_value_298;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_184;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_298 = tmp_class_creation_36__metaclass;
        tmp_called_value_149 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_298, mod_consts[449]);
        if (tmp_called_value_149 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_tuple_element_184 = mod_consts[734];
        tmp_args_value_93 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_184 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_36__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3151;
        tmp_assign_source_396 = CALL_FUNCTION(tstate, tmp_called_value_149, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_149);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_396 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_396;
    }
    {
        bool tmp_condition_result_212;
        PyObject *tmp_operand_value_47;
        PyObject *tmp_expression_value_299;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_299 = tmp_class_creation_36__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_299, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_operand_value_47 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_47);
        assert(!(tmp_res == -1));
        tmp_condition_result_212 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_212 != false) {
            goto branch_yes_142;
        } else {
            goto branch_no_142;
        }
    }
    branch_yes_142:;
    {
        PyObject *tmp_raise_type_47;
        PyObject *tmp_raise_value_47;
        PyObject *tmp_mod_expr_left_47;
        PyObject *tmp_mod_expr_right_47;
        PyObject *tmp_tuple_element_185;
        PyObject *tmp_expression_value_300;
        PyObject *tmp_name_value_80;
        PyObject *tmp_default_value_47;
        tmp_raise_type_47 = PyExc_TypeError;
        tmp_mod_expr_left_47 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_300 = tmp_class_creation_36__metaclass;
        tmp_name_value_80 = mod_consts[201];
        tmp_default_value_47 = mod_consts[453];
        tmp_tuple_element_185 = BUILTIN_GETATTR(tstate, tmp_expression_value_300, tmp_name_value_80, tmp_default_value_47);
        if (tmp_tuple_element_185 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        tmp_mod_expr_right_47 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_301;
            PyObject *tmp_type_arg_94;
            PyTuple_SET_ITEM(tmp_mod_expr_right_47, 0, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_94 = tmp_class_creation_36__prepared;
            tmp_expression_value_301 = BUILTIN_TYPE1(tmp_type_arg_94);
            assert(!(tmp_expression_value_301 == NULL));
            tmp_tuple_element_185 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_301, mod_consts[201]);
            Py_DECREF(tmp_expression_value_301);
            if (tmp_tuple_element_185 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3151;

                goto tuple_build_exception_61;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_47, 1, tmp_tuple_element_185);
        }
        goto tuple_build_noexception_61;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_61:;
        Py_DECREF(tmp_mod_expr_right_47);
        goto try_except_handler_139;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_61:;
        tmp_raise_value_47 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_47, tmp_mod_expr_right_47);
        Py_DECREF(tmp_mod_expr_right_47);
        if (tmp_raise_value_47 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_139;
        }
        exception_type = tmp_raise_type_47;
        Py_INCREF(tmp_raise_type_47);
        exception_value = tmp_raise_value_47;
        exception_lineno = 3151;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_139;
    }
    branch_no_142:;
    goto branch_end_141;
    branch_no_141:;
    {
        PyObject *tmp_assign_source_397;
        tmp_assign_source_397 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_397;
    }
    branch_end_141:;
    {
        PyObject *tmp_assign_source_398;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_47 = tmp_class_creation_36__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[735];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[734];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_141;
        }
        frame_5473aa3463cee3c896f5c80a7480a46b_44 = MAKE_CLASS_FRAME(tstate, codeobj_5473aa3463cee3c896f5c80a7480a46b, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_5473aa3463cee3c896f5c80a7480a46b_44);
        assert(Py_REFCNT(frame_5473aa3463cee3c896f5c80a7480a46b_44) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[734];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3155;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_43;
        frame_exception_exit_44:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5473aa3463cee3c896f5c80a7480a46b_44, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5473aa3463cee3c896f5c80a7480a46b_44->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5473aa3463cee3c896f5c80a7480a46b_44, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5473aa3463cee3c896f5c80a7480a46b_44,
            type_description_2,
            outline_46_var___class__
        );



        assertFrameObject(frame_5473aa3463cee3c896f5c80a7480a46b_44);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_43;
        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_43:;

        goto try_except_handler_141;
        skip_nested_handling_43:;
        {
            nuitka_bool tmp_condition_result_213;
            PyObject *tmp_cmp_expr_left_47;
            PyObject *tmp_cmp_expr_right_47;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_47 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_47 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_213 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_47, tmp_cmp_expr_right_47);
            if (tmp_condition_result_213 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3151;

                goto try_except_handler_141;
            }
            if (tmp_condition_result_213 == NUITKA_BOOL_TRUE) {
                goto branch_yes_143;
            } else {
                goto branch_no_143;
            }
        }
        branch_yes_143:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3151;

            goto try_except_handler_141;
        }
        branch_no_143:;
        {
            PyObject *tmp_assign_source_399;
            PyObject *tmp_called_value_150;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_186;
            PyObject *tmp_kwargs_value_94;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_150 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_186 = mod_consts[734];
            tmp_args_value_94 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_94, 0, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_186 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_94, 1, tmp_tuple_element_186);
            tmp_tuple_element_186 = locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151;
            PyTuple_SET_ITEM0(tmp_args_value_94, 2, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_94 = tmp_class_creation_36__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3151;
            tmp_assign_source_399 = CALL_FUNCTION(tstate, tmp_called_value_150, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_args_value_94);
            if (tmp_assign_source_399 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3151;

                goto try_except_handler_141;
            }
            assert(outline_46_var___class__ == NULL);
            outline_46_var___class__ = tmp_assign_source_399;
        }
        CHECK_OBJECT(outline_46_var___class__);
        tmp_assign_source_398 = outline_46_var___class__;
        Py_INCREF(tmp_assign_source_398);
        goto try_return_handler_141;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_141:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151);
        locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151 = NULL;
        goto try_return_handler_140;
        // Exception handler code:
        try_except_handler_141:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151);
        locals_sqlalchemy$sql$sqltypes$$$class__47_DATE_3151 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto try_except_handler_140;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_140 = exception_type;
        exception_keeper_value_140 = exception_value;
        exception_keeper_tb_140 = exception_tb;
        exception_keeper_lineno_140 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;
        exception_lineno = exception_keeper_lineno_140;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 3151;
        goto try_except_handler_139;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[734], tmp_assign_source_398);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_139:;
    exception_keeper_type_141 = exception_type;
    exception_keeper_value_141 = exception_value;
    exception_keeper_tb_141 = exception_tb;
    exception_keeper_lineno_141 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_141;
    exception_value = exception_keeper_value_141;
    exception_tb = exception_keeper_tb_141;
    exception_lineno = exception_keeper_lineno_141;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_400;
        PyObject *tmp_tuple_element_187;
        tmp_tuple_element_187 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

        if (unlikely(tmp_tuple_element_187 == NULL)) {
            tmp_tuple_element_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
        }

        if (tmp_tuple_element_187 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_assign_source_400 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_400, 0, tmp_tuple_element_187);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_400;
    }
    {
        PyObject *tmp_assign_source_401;
        PyObject *tmp_dircall_arg1_48;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_48 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_48);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_48};
            tmp_assign_source_401 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_401 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_401;
    }
    {
        PyObject *tmp_assign_source_402;
        tmp_assign_source_402 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_402;
    }
    {
        PyObject *tmp_assign_source_403;
        PyObject *tmp_metaclass_value_48;
        nuitka_bool tmp_condition_result_214;
        int tmp_truth_name_50;
        PyObject *tmp_type_arg_95;
        PyObject *tmp_expression_value_302;
        PyObject *tmp_subscript_value_48;
        PyObject *tmp_bases_value_48;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_50 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_condition_result_214 = tmp_truth_name_50 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_214 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_71;
        } else {
            goto condexpr_false_71;
        }
        condexpr_true_71:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_302 = tmp_class_creation_37__bases;
        tmp_subscript_value_48 = mod_consts[52];
        tmp_type_arg_95 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_302, tmp_subscript_value_48, 0);
        if (tmp_type_arg_95 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_metaclass_value_48 = BUILTIN_TYPE1(tmp_type_arg_95);
        Py_DECREF(tmp_type_arg_95);
        if (tmp_metaclass_value_48 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        goto condexpr_end_71;
        condexpr_false_71:;
        tmp_metaclass_value_48 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_48);
        condexpr_end_71:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_48 = tmp_class_creation_37__bases;
        tmp_assign_source_403 = SELECT_METACLASS(tstate, tmp_metaclass_value_48, tmp_bases_value_48);
        Py_DECREF(tmp_metaclass_value_48);
        if (tmp_assign_source_403 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_403;
    }
    {
        bool tmp_condition_result_215;
        PyObject *tmp_expression_value_303;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_303 = tmp_class_creation_37__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_303, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_condition_result_215 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_215 != false) {
            goto branch_yes_144;
        } else {
            goto branch_no_144;
        }
    }
    branch_yes_144:;
    {
        PyObject *tmp_assign_source_404;
        PyObject *tmp_called_value_151;
        PyObject *tmp_expression_value_304;
        PyObject *tmp_args_value_95;
        PyObject *tmp_tuple_element_188;
        PyObject *tmp_kwargs_value_95;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_304 = tmp_class_creation_37__metaclass;
        tmp_called_value_151 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_304, mod_consts[449]);
        if (tmp_called_value_151 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_tuple_element_188 = mod_consts[736];
        tmp_args_value_95 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_188 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_95 = tmp_class_creation_37__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3158;
        tmp_assign_source_404 = CALL_FUNCTION(tstate, tmp_called_value_151, tmp_args_value_95, tmp_kwargs_value_95);
        Py_DECREF(tmp_called_value_151);
        Py_DECREF(tmp_args_value_95);
        if (tmp_assign_source_404 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_404;
    }
    {
        bool tmp_condition_result_216;
        PyObject *tmp_operand_value_48;
        PyObject *tmp_expression_value_305;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_305 = tmp_class_creation_37__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_305, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_operand_value_48 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_216 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_216 != false) {
            goto branch_yes_145;
        } else {
            goto branch_no_145;
        }
    }
    branch_yes_145:;
    {
        PyObject *tmp_raise_type_48;
        PyObject *tmp_raise_value_48;
        PyObject *tmp_mod_expr_left_48;
        PyObject *tmp_mod_expr_right_48;
        PyObject *tmp_tuple_element_189;
        PyObject *tmp_expression_value_306;
        PyObject *tmp_name_value_81;
        PyObject *tmp_default_value_48;
        tmp_raise_type_48 = PyExc_TypeError;
        tmp_mod_expr_left_48 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_306 = tmp_class_creation_37__metaclass;
        tmp_name_value_81 = mod_consts[201];
        tmp_default_value_48 = mod_consts[453];
        tmp_tuple_element_189 = BUILTIN_GETATTR(tstate, tmp_expression_value_306, tmp_name_value_81, tmp_default_value_48);
        if (tmp_tuple_element_189 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        tmp_mod_expr_right_48 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_307;
            PyObject *tmp_type_arg_96;
            PyTuple_SET_ITEM(tmp_mod_expr_right_48, 0, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_96 = tmp_class_creation_37__prepared;
            tmp_expression_value_307 = BUILTIN_TYPE1(tmp_type_arg_96);
            assert(!(tmp_expression_value_307 == NULL));
            tmp_tuple_element_189 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_307, mod_consts[201]);
            Py_DECREF(tmp_expression_value_307);
            if (tmp_tuple_element_189 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3158;

                goto tuple_build_exception_62;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_48, 1, tmp_tuple_element_189);
        }
        goto tuple_build_noexception_62;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_62:;
        Py_DECREF(tmp_mod_expr_right_48);
        goto try_except_handler_142;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_62:;
        tmp_raise_value_48 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_48, tmp_mod_expr_right_48);
        Py_DECREF(tmp_mod_expr_right_48);
        if (tmp_raise_value_48 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_142;
        }
        exception_type = tmp_raise_type_48;
        Py_INCREF(tmp_raise_type_48);
        exception_value = tmp_raise_value_48;
        exception_lineno = 3158;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_142;
    }
    branch_no_145:;
    goto branch_end_144;
    branch_no_144:;
    {
        PyObject *tmp_assign_source_405;
        tmp_assign_source_405 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_405;
    }
    branch_end_144:;
    {
        PyObject *tmp_assign_source_406;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_48 = tmp_class_creation_37__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_144;
        }
        tmp_dictset_value = mod_consts[737];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_144;
        }
        tmp_dictset_value = mod_consts[736];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_144;
        }
        frame_10cc212bc35c1c061cff66148cbcde29_45 = MAKE_CLASS_FRAME(tstate, codeobj_10cc212bc35c1c061cff66148cbcde29, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_10cc212bc35c1c061cff66148cbcde29_45);
        assert(Py_REFCNT(frame_10cc212bc35c1c061cff66148cbcde29_45) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[736];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3162;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_44;
        frame_exception_exit_45:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_10cc212bc35c1c061cff66148cbcde29_45, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_10cc212bc35c1c061cff66148cbcde29_45->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_10cc212bc35c1c061cff66148cbcde29_45, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_10cc212bc35c1c061cff66148cbcde29_45,
            type_description_2,
            outline_47_var___class__
        );



        assertFrameObject(frame_10cc212bc35c1c061cff66148cbcde29_45);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_44;
        frame_no_exception_44:;
        goto skip_nested_handling_44;
        nested_frame_exit_44:;

        goto try_except_handler_144;
        skip_nested_handling_44:;
        {
            nuitka_bool tmp_condition_result_217;
            PyObject *tmp_cmp_expr_left_48;
            PyObject *tmp_cmp_expr_right_48;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_48 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_48 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_217 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_48, tmp_cmp_expr_right_48);
            if (tmp_condition_result_217 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3158;

                goto try_except_handler_144;
            }
            if (tmp_condition_result_217 == NUITKA_BOOL_TRUE) {
                goto branch_yes_146;
            } else {
                goto branch_no_146;
            }
        }
        branch_yes_146:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3158;

            goto try_except_handler_144;
        }
        branch_no_146:;
        {
            PyObject *tmp_assign_source_407;
            PyObject *tmp_called_value_152;
            PyObject *tmp_args_value_96;
            PyObject *tmp_tuple_element_190;
            PyObject *tmp_kwargs_value_96;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_152 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_190 = mod_consts[736];
            tmp_args_value_96 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_190 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_190);
            tmp_tuple_element_190 = locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158;
            PyTuple_SET_ITEM0(tmp_args_value_96, 2, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_96 = tmp_class_creation_37__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3158;
            tmp_assign_source_407 = CALL_FUNCTION(tstate, tmp_called_value_152, tmp_args_value_96, tmp_kwargs_value_96);
            Py_DECREF(tmp_args_value_96);
            if (tmp_assign_source_407 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3158;

                goto try_except_handler_144;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_407;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_406 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_406);
        goto try_return_handler_144;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_144:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158);
        locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158 = NULL;
        goto try_return_handler_143;
        // Exception handler code:
        try_except_handler_144:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158);
        locals_sqlalchemy$sql$sqltypes$$$class__48_TIME_3158 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto try_except_handler_143;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_143:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_143 = exception_type;
        exception_keeper_value_143 = exception_value;
        exception_keeper_tb_143 = exception_tb;
        exception_keeper_lineno_143 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;
        exception_lineno = exception_keeper_lineno_143;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 3158;
        goto try_except_handler_142;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[736], tmp_assign_source_406);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_142:;
    exception_keeper_type_144 = exception_type;
    exception_keeper_value_144 = exception_value;
    exception_keeper_tb_144 = exception_tb;
    exception_keeper_lineno_144 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_144;
    exception_value = exception_keeper_value_144;
    exception_tb = exception_keeper_tb_144;
    exception_lineno = exception_keeper_lineno_144;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_408;
        PyObject *tmp_tuple_element_191;
        tmp_tuple_element_191 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[497]);

        if (unlikely(tmp_tuple_element_191 == NULL)) {
            tmp_tuple_element_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[497]);
        }

        if (tmp_tuple_element_191 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_assign_source_408 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_408, 0, tmp_tuple_element_191);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_408;
    }
    {
        PyObject *tmp_assign_source_409;
        PyObject *tmp_dircall_arg1_49;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_49 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_49);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_49};
            tmp_assign_source_409 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_409 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_409;
    }
    {
        PyObject *tmp_assign_source_410;
        tmp_assign_source_410 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_410;
    }
    {
        PyObject *tmp_assign_source_411;
        PyObject *tmp_metaclass_value_49;
        nuitka_bool tmp_condition_result_218;
        int tmp_truth_name_51;
        PyObject *tmp_type_arg_97;
        PyObject *tmp_expression_value_308;
        PyObject *tmp_subscript_value_49;
        PyObject *tmp_bases_value_49;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_51 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_condition_result_218 = tmp_truth_name_51 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_218 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_72;
        } else {
            goto condexpr_false_72;
        }
        condexpr_true_72:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_308 = tmp_class_creation_38__bases;
        tmp_subscript_value_49 = mod_consts[52];
        tmp_type_arg_97 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_308, tmp_subscript_value_49, 0);
        if (tmp_type_arg_97 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_metaclass_value_49 = BUILTIN_TYPE1(tmp_type_arg_97);
        Py_DECREF(tmp_type_arg_97);
        if (tmp_metaclass_value_49 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        goto condexpr_end_72;
        condexpr_false_72:;
        tmp_metaclass_value_49 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_49);
        condexpr_end_72:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_49 = tmp_class_creation_38__bases;
        tmp_assign_source_411 = SELECT_METACLASS(tstate, tmp_metaclass_value_49, tmp_bases_value_49);
        Py_DECREF(tmp_metaclass_value_49);
        if (tmp_assign_source_411 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_411;
    }
    {
        bool tmp_condition_result_219;
        PyObject *tmp_expression_value_309;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_309 = tmp_class_creation_38__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_309, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_condition_result_219 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_219 != false) {
            goto branch_yes_147;
        } else {
            goto branch_no_147;
        }
    }
    branch_yes_147:;
    {
        PyObject *tmp_assign_source_412;
        PyObject *tmp_called_value_153;
        PyObject *tmp_expression_value_310;
        PyObject *tmp_args_value_97;
        PyObject *tmp_tuple_element_192;
        PyObject *tmp_kwargs_value_97;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_310 = tmp_class_creation_38__metaclass;
        tmp_called_value_153 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_310, mod_consts[449]);
        if (tmp_called_value_153 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_tuple_element_192 = mod_consts[738];
        tmp_args_value_97 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_97, 0, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_192 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_97, 1, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_97 = tmp_class_creation_38__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3165;
        tmp_assign_source_412 = CALL_FUNCTION(tstate, tmp_called_value_153, tmp_args_value_97, tmp_kwargs_value_97);
        Py_DECREF(tmp_called_value_153);
        Py_DECREF(tmp_args_value_97);
        if (tmp_assign_source_412 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_412;
    }
    {
        bool tmp_condition_result_220;
        PyObject *tmp_operand_value_49;
        PyObject *tmp_expression_value_311;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_311 = tmp_class_creation_38__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_311, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_operand_value_49 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_220 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_220 != false) {
            goto branch_yes_148;
        } else {
            goto branch_no_148;
        }
    }
    branch_yes_148:;
    {
        PyObject *tmp_raise_type_49;
        PyObject *tmp_raise_value_49;
        PyObject *tmp_mod_expr_left_49;
        PyObject *tmp_mod_expr_right_49;
        PyObject *tmp_tuple_element_193;
        PyObject *tmp_expression_value_312;
        PyObject *tmp_name_value_82;
        PyObject *tmp_default_value_49;
        tmp_raise_type_49 = PyExc_TypeError;
        tmp_mod_expr_left_49 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_312 = tmp_class_creation_38__metaclass;
        tmp_name_value_82 = mod_consts[201];
        tmp_default_value_49 = mod_consts[453];
        tmp_tuple_element_193 = BUILTIN_GETATTR(tstate, tmp_expression_value_312, tmp_name_value_82, tmp_default_value_49);
        if (tmp_tuple_element_193 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        tmp_mod_expr_right_49 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_313;
            PyObject *tmp_type_arg_98;
            PyTuple_SET_ITEM(tmp_mod_expr_right_49, 0, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_98 = tmp_class_creation_38__prepared;
            tmp_expression_value_313 = BUILTIN_TYPE1(tmp_type_arg_98);
            assert(!(tmp_expression_value_313 == NULL));
            tmp_tuple_element_193 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_313, mod_consts[201]);
            Py_DECREF(tmp_expression_value_313);
            if (tmp_tuple_element_193 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3165;

                goto tuple_build_exception_63;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_49, 1, tmp_tuple_element_193);
        }
        goto tuple_build_noexception_63;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_63:;
        Py_DECREF(tmp_mod_expr_right_49);
        goto try_except_handler_145;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_63:;
        tmp_raise_value_49 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_49, tmp_mod_expr_right_49);
        Py_DECREF(tmp_mod_expr_right_49);
        if (tmp_raise_value_49 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_145;
        }
        exception_type = tmp_raise_type_49;
        Py_INCREF(tmp_raise_type_49);
        exception_value = tmp_raise_value_49;
        exception_lineno = 3165;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_145;
    }
    branch_no_148:;
    goto branch_end_147;
    branch_no_147:;
    {
        PyObject *tmp_assign_source_413;
        tmp_assign_source_413 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_413;
    }
    branch_end_147:;
    {
        PyObject *tmp_assign_source_414;
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_49 = tmp_class_creation_38__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[739];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[738];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_147;
        }
        frame_e67aba58ee7cffc472020a4e437023ab_46 = MAKE_CLASS_FRAME(tstate, codeobj_e67aba58ee7cffc472020a4e437023ab, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_e67aba58ee7cffc472020a4e437023ab_46);
        assert(Py_REFCNT(frame_e67aba58ee7cffc472020a4e437023ab_46) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[738];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3169;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_45;
        frame_exception_exit_46:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e67aba58ee7cffc472020a4e437023ab_46, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e67aba58ee7cffc472020a4e437023ab_46->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e67aba58ee7cffc472020a4e437023ab_46, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e67aba58ee7cffc472020a4e437023ab_46,
            type_description_2,
            outline_48_var___class__
        );



        assertFrameObject(frame_e67aba58ee7cffc472020a4e437023ab_46);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_45;
        frame_no_exception_45:;
        goto skip_nested_handling_45;
        nested_frame_exit_45:;

        goto try_except_handler_147;
        skip_nested_handling_45:;
        {
            nuitka_bool tmp_condition_result_221;
            PyObject *tmp_cmp_expr_left_49;
            PyObject *tmp_cmp_expr_right_49;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_49 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_49 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_221 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_49, tmp_cmp_expr_right_49);
            if (tmp_condition_result_221 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3165;

                goto try_except_handler_147;
            }
            if (tmp_condition_result_221 == NUITKA_BOOL_TRUE) {
                goto branch_yes_149;
            } else {
                goto branch_no_149;
            }
        }
        branch_yes_149:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3165;

            goto try_except_handler_147;
        }
        branch_no_149:;
        {
            PyObject *tmp_assign_source_415;
            PyObject *tmp_called_value_154;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_194;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_154 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_194 = mod_consts[738];
            tmp_args_value_98 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_194 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_194);
            tmp_tuple_element_194 = locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_38__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3165;
            tmp_assign_source_415 = CALL_FUNCTION(tstate, tmp_called_value_154, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_415 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3165;

                goto try_except_handler_147;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_415;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_assign_source_414 = outline_48_var___class__;
        Py_INCREF(tmp_assign_source_414);
        goto try_return_handler_147;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_147:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165);
        locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165 = NULL;
        goto try_return_handler_146;
        // Exception handler code:
        try_except_handler_147:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165);
        locals_sqlalchemy$sql$sqltypes$$$class__49_TEXT_3165 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto try_except_handler_146;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_146 = exception_type;
        exception_keeper_value_146 = exception_value;
        exception_keeper_tb_146 = exception_tb;
        exception_keeper_lineno_146 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;
        exception_lineno = exception_keeper_lineno_146;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 3165;
        goto try_except_handler_145;
        outline_result_49:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[738], tmp_assign_source_414);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_145:;
    exception_keeper_type_147 = exception_type;
    exception_keeper_value_147 = exception_value;
    exception_keeper_tb_147 = exception_tb;
    exception_keeper_lineno_147 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_147;
    exception_value = exception_keeper_value_147;
    exception_tb = exception_keeper_tb_147;
    exception_lineno = exception_keeper_lineno_147;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_416;
        PyObject *tmp_tuple_element_195;
        tmp_tuple_element_195 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[497]);

        if (unlikely(tmp_tuple_element_195 == NULL)) {
            tmp_tuple_element_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[497]);
        }

        if (tmp_tuple_element_195 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_assign_source_416 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_416, 0, tmp_tuple_element_195);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_416;
    }
    {
        PyObject *tmp_assign_source_417;
        PyObject *tmp_dircall_arg1_50;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_50 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_50);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_50};
            tmp_assign_source_417 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_417 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_417;
    }
    {
        PyObject *tmp_assign_source_418;
        tmp_assign_source_418 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_418;
    }
    {
        PyObject *tmp_assign_source_419;
        PyObject *tmp_metaclass_value_50;
        nuitka_bool tmp_condition_result_222;
        int tmp_truth_name_52;
        PyObject *tmp_type_arg_99;
        PyObject *tmp_expression_value_314;
        PyObject *tmp_subscript_value_50;
        PyObject *tmp_bases_value_50;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_52 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_condition_result_222 = tmp_truth_name_52 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_222 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_73;
        } else {
            goto condexpr_false_73;
        }
        condexpr_true_73:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_314 = tmp_class_creation_39__bases;
        tmp_subscript_value_50 = mod_consts[52];
        tmp_type_arg_99 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_314, tmp_subscript_value_50, 0);
        if (tmp_type_arg_99 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_metaclass_value_50 = BUILTIN_TYPE1(tmp_type_arg_99);
        Py_DECREF(tmp_type_arg_99);
        if (tmp_metaclass_value_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        goto condexpr_end_73;
        condexpr_false_73:;
        tmp_metaclass_value_50 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_50);
        condexpr_end_73:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_50 = tmp_class_creation_39__bases;
        tmp_assign_source_419 = SELECT_METACLASS(tstate, tmp_metaclass_value_50, tmp_bases_value_50);
        Py_DECREF(tmp_metaclass_value_50);
        if (tmp_assign_source_419 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_419;
    }
    {
        bool tmp_condition_result_223;
        PyObject *tmp_expression_value_315;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_315 = tmp_class_creation_39__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_315, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_condition_result_223 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_223 != false) {
            goto branch_yes_150;
        } else {
            goto branch_no_150;
        }
    }
    branch_yes_150:;
    {
        PyObject *tmp_assign_source_420;
        PyObject *tmp_called_value_155;
        PyObject *tmp_expression_value_316;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_196;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_316 = tmp_class_creation_39__metaclass;
        tmp_called_value_155 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_316, mod_consts[449]);
        if (tmp_called_value_155 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_tuple_element_196 = mod_consts[740];
        tmp_args_value_99 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_196 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_39__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3172;
        tmp_assign_source_420 = CALL_FUNCTION(tstate, tmp_called_value_155, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_155);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_420 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_420;
    }
    {
        bool tmp_condition_result_224;
        PyObject *tmp_operand_value_50;
        PyObject *tmp_expression_value_317;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_317 = tmp_class_creation_39__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_317, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_operand_value_50 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_50);
        assert(!(tmp_res == -1));
        tmp_condition_result_224 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_224 != false) {
            goto branch_yes_151;
        } else {
            goto branch_no_151;
        }
    }
    branch_yes_151:;
    {
        PyObject *tmp_raise_type_50;
        PyObject *tmp_raise_value_50;
        PyObject *tmp_mod_expr_left_50;
        PyObject *tmp_mod_expr_right_50;
        PyObject *tmp_tuple_element_197;
        PyObject *tmp_expression_value_318;
        PyObject *tmp_name_value_83;
        PyObject *tmp_default_value_50;
        tmp_raise_type_50 = PyExc_TypeError;
        tmp_mod_expr_left_50 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_318 = tmp_class_creation_39__metaclass;
        tmp_name_value_83 = mod_consts[201];
        tmp_default_value_50 = mod_consts[453];
        tmp_tuple_element_197 = BUILTIN_GETATTR(tstate, tmp_expression_value_318, tmp_name_value_83, tmp_default_value_50);
        if (tmp_tuple_element_197 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        tmp_mod_expr_right_50 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_319;
            PyObject *tmp_type_arg_100;
            PyTuple_SET_ITEM(tmp_mod_expr_right_50, 0, tmp_tuple_element_197);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_100 = tmp_class_creation_39__prepared;
            tmp_expression_value_319 = BUILTIN_TYPE1(tmp_type_arg_100);
            assert(!(tmp_expression_value_319 == NULL));
            tmp_tuple_element_197 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_319, mod_consts[201]);
            Py_DECREF(tmp_expression_value_319);
            if (tmp_tuple_element_197 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3172;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_50, 1, tmp_tuple_element_197);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_mod_expr_right_50);
        goto try_except_handler_148;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_50 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_50, tmp_mod_expr_right_50);
        Py_DECREF(tmp_mod_expr_right_50);
        if (tmp_raise_value_50 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_148;
        }
        exception_type = tmp_raise_type_50;
        Py_INCREF(tmp_raise_type_50);
        exception_value = tmp_raise_value_50;
        exception_lineno = 3172;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_148;
    }
    branch_no_151:;
    goto branch_end_150;
    branch_no_150:;
    {
        PyObject *tmp_assign_source_421;
        tmp_assign_source_421 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_421;
    }
    branch_end_150:;
    {
        PyObject *tmp_assign_source_422;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_50 = tmp_class_creation_39__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[741];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[740];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_150;
        }
        frame_4555bb417febc5f1629be12ff210a7df_47 = MAKE_CLASS_FRAME(tstate, codeobj_4555bb417febc5f1629be12ff210a7df, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_4555bb417febc5f1629be12ff210a7df_47);
        assert(Py_REFCNT(frame_4555bb417febc5f1629be12ff210a7df_47) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[740];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3179;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_46;
        frame_exception_exit_47:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4555bb417febc5f1629be12ff210a7df_47, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4555bb417febc5f1629be12ff210a7df_47->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4555bb417febc5f1629be12ff210a7df_47, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4555bb417febc5f1629be12ff210a7df_47,
            type_description_2,
            outline_49_var___class__
        );



        assertFrameObject(frame_4555bb417febc5f1629be12ff210a7df_47);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_46;
        frame_no_exception_46:;
        goto skip_nested_handling_46;
        nested_frame_exit_46:;

        goto try_except_handler_150;
        skip_nested_handling_46:;
        {
            nuitka_bool tmp_condition_result_225;
            PyObject *tmp_cmp_expr_left_50;
            PyObject *tmp_cmp_expr_right_50;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_50 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_50 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_225 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_50, tmp_cmp_expr_right_50);
            if (tmp_condition_result_225 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3172;

                goto try_except_handler_150;
            }
            if (tmp_condition_result_225 == NUITKA_BOOL_TRUE) {
                goto branch_yes_152;
            } else {
                goto branch_no_152;
            }
        }
        branch_yes_152:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3172;

            goto try_except_handler_150;
        }
        branch_no_152:;
        {
            PyObject *tmp_assign_source_423;
            PyObject *tmp_called_value_156;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_198;
            PyObject *tmp_kwargs_value_100;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_156 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_198 = mod_consts[740];
            tmp_args_value_100 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_198 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_198);
            tmp_tuple_element_198 = locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_100 = tmp_class_creation_39__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3172;
            tmp_assign_source_423 = CALL_FUNCTION(tstate, tmp_called_value_156, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_423 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3172;

                goto try_except_handler_150;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_423;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_422 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_422);
        goto try_return_handler_150;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_150:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172);
        locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172 = NULL;
        goto try_return_handler_149;
        // Exception handler code:
        try_except_handler_150:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172);
        locals_sqlalchemy$sql$sqltypes$$$class__50_CLOB_3172 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto try_except_handler_149;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_149 = exception_type;
        exception_keeper_value_149 = exception_value;
        exception_keeper_tb_149 = exception_tb;
        exception_keeper_lineno_149 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_149;
        exception_value = exception_keeper_value_149;
        exception_tb = exception_keeper_tb_149;
        exception_lineno = exception_keeper_lineno_149;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 3172;
        goto try_except_handler_148;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[740], tmp_assign_source_422);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_148:;
    exception_keeper_type_150 = exception_type;
    exception_keeper_value_150 = exception_value;
    exception_keeper_tb_150 = exception_tb;
    exception_keeper_lineno_150 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_150;
    exception_value = exception_keeper_value_150;
    exception_tb = exception_keeper_tb_150;
    exception_lineno = exception_keeper_lineno_150;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_424;
        PyObject *tmp_tuple_element_199;
        tmp_tuple_element_199 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_tuple_element_199 == NULL)) {
            tmp_tuple_element_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_tuple_element_199 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_assign_source_424 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_424, 0, tmp_tuple_element_199);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_424;
    }
    {
        PyObject *tmp_assign_source_425;
        PyObject *tmp_dircall_arg1_51;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_51 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_51);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_51};
            tmp_assign_source_425 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_425 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_425;
    }
    {
        PyObject *tmp_assign_source_426;
        tmp_assign_source_426 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_426;
    }
    {
        PyObject *tmp_assign_source_427;
        PyObject *tmp_metaclass_value_51;
        nuitka_bool tmp_condition_result_226;
        int tmp_truth_name_53;
        PyObject *tmp_type_arg_101;
        PyObject *tmp_expression_value_320;
        PyObject *tmp_subscript_value_51;
        PyObject *tmp_bases_value_51;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_53 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_condition_result_226 = tmp_truth_name_53 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_226 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_74;
        } else {
            goto condexpr_false_74;
        }
        condexpr_true_74:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_320 = tmp_class_creation_40__bases;
        tmp_subscript_value_51 = mod_consts[52];
        tmp_type_arg_101 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_320, tmp_subscript_value_51, 0);
        if (tmp_type_arg_101 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_metaclass_value_51 = BUILTIN_TYPE1(tmp_type_arg_101);
        Py_DECREF(tmp_type_arg_101);
        if (tmp_metaclass_value_51 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        goto condexpr_end_74;
        condexpr_false_74:;
        tmp_metaclass_value_51 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_51);
        condexpr_end_74:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_51 = tmp_class_creation_40__bases;
        tmp_assign_source_427 = SELECT_METACLASS(tstate, tmp_metaclass_value_51, tmp_bases_value_51);
        Py_DECREF(tmp_metaclass_value_51);
        if (tmp_assign_source_427 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_427;
    }
    {
        bool tmp_condition_result_227;
        PyObject *tmp_expression_value_321;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_321 = tmp_class_creation_40__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_321, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_condition_result_227 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_227 != false) {
            goto branch_yes_153;
        } else {
            goto branch_no_153;
        }
    }
    branch_yes_153:;
    {
        PyObject *tmp_assign_source_428;
        PyObject *tmp_called_value_157;
        PyObject *tmp_expression_value_322;
        PyObject *tmp_args_value_101;
        PyObject *tmp_tuple_element_200;
        PyObject *tmp_kwargs_value_101;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_322 = tmp_class_creation_40__metaclass;
        tmp_called_value_157 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_322, mod_consts[449]);
        if (tmp_called_value_157 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_tuple_element_200 = mod_consts[742];
        tmp_args_value_101 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_200 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_101 = tmp_class_creation_40__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3182;
        tmp_assign_source_428 = CALL_FUNCTION(tstate, tmp_called_value_157, tmp_args_value_101, tmp_kwargs_value_101);
        Py_DECREF(tmp_called_value_157);
        Py_DECREF(tmp_args_value_101);
        if (tmp_assign_source_428 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_428;
    }
    {
        bool tmp_condition_result_228;
        PyObject *tmp_operand_value_51;
        PyObject *tmp_expression_value_323;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_323 = tmp_class_creation_40__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_323, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_operand_value_51 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_228 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_228 != false) {
            goto branch_yes_154;
        } else {
            goto branch_no_154;
        }
    }
    branch_yes_154:;
    {
        PyObject *tmp_raise_type_51;
        PyObject *tmp_raise_value_51;
        PyObject *tmp_mod_expr_left_51;
        PyObject *tmp_mod_expr_right_51;
        PyObject *tmp_tuple_element_201;
        PyObject *tmp_expression_value_324;
        PyObject *tmp_name_value_84;
        PyObject *tmp_default_value_51;
        tmp_raise_type_51 = PyExc_TypeError;
        tmp_mod_expr_left_51 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_324 = tmp_class_creation_40__metaclass;
        tmp_name_value_84 = mod_consts[201];
        tmp_default_value_51 = mod_consts[453];
        tmp_tuple_element_201 = BUILTIN_GETATTR(tstate, tmp_expression_value_324, tmp_name_value_84, tmp_default_value_51);
        if (tmp_tuple_element_201 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        tmp_mod_expr_right_51 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_325;
            PyObject *tmp_type_arg_102;
            PyTuple_SET_ITEM(tmp_mod_expr_right_51, 0, tmp_tuple_element_201);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_102 = tmp_class_creation_40__prepared;
            tmp_expression_value_325 = BUILTIN_TYPE1(tmp_type_arg_102);
            assert(!(tmp_expression_value_325 == NULL));
            tmp_tuple_element_201 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_325, mod_consts[201]);
            Py_DECREF(tmp_expression_value_325);
            if (tmp_tuple_element_201 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3182;

                goto tuple_build_exception_65;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_51, 1, tmp_tuple_element_201);
        }
        goto tuple_build_noexception_65;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_65:;
        Py_DECREF(tmp_mod_expr_right_51);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_65:;
        tmp_raise_value_51 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_51, tmp_mod_expr_right_51);
        Py_DECREF(tmp_mod_expr_right_51);
        if (tmp_raise_value_51 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_151;
        }
        exception_type = tmp_raise_type_51;
        Py_INCREF(tmp_raise_type_51);
        exception_value = tmp_raise_value_51;
        exception_lineno = 3182;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_151;
    }
    branch_no_154:;
    goto branch_end_153;
    branch_no_153:;
    {
        PyObject *tmp_assign_source_429;
        tmp_assign_source_429 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_429;
    }
    branch_end_153:;
    {
        PyObject *tmp_assign_source_430;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_51 = tmp_class_creation_40__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[743];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[742];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_153;
        }
        frame_97502711f14333c2557dbb4ac6c98933_48 = MAKE_CLASS_FRAME(tstate, codeobj_97502711f14333c2557dbb4ac6c98933, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_97502711f14333c2557dbb4ac6c98933_48);
        assert(Py_REFCNT(frame_97502711f14333c2557dbb4ac6c98933_48) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[742];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3186;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_47;
        frame_exception_exit_48:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_97502711f14333c2557dbb4ac6c98933_48, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_97502711f14333c2557dbb4ac6c98933_48->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_97502711f14333c2557dbb4ac6c98933_48, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_97502711f14333c2557dbb4ac6c98933_48,
            type_description_2,
            outline_50_var___class__
        );



        assertFrameObject(frame_97502711f14333c2557dbb4ac6c98933_48);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_47;
        frame_no_exception_47:;
        goto skip_nested_handling_47;
        nested_frame_exit_47:;

        goto try_except_handler_153;
        skip_nested_handling_47:;
        {
            nuitka_bool tmp_condition_result_229;
            PyObject *tmp_cmp_expr_left_51;
            PyObject *tmp_cmp_expr_right_51;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_51 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_51 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_229 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_51, tmp_cmp_expr_right_51);
            if (tmp_condition_result_229 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3182;

                goto try_except_handler_153;
            }
            if (tmp_condition_result_229 == NUITKA_BOOL_TRUE) {
                goto branch_yes_155;
            } else {
                goto branch_no_155;
            }
        }
        branch_yes_155:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3182;

            goto try_except_handler_153;
        }
        branch_no_155:;
        {
            PyObject *tmp_assign_source_431;
            PyObject *tmp_called_value_158;
            PyObject *tmp_args_value_102;
            PyObject *tmp_tuple_element_202;
            PyObject *tmp_kwargs_value_102;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_158 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_202 = mod_consts[742];
            tmp_args_value_102 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_202 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_202);
            tmp_tuple_element_202 = locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182;
            PyTuple_SET_ITEM0(tmp_args_value_102, 2, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_102 = tmp_class_creation_40__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3182;
            tmp_assign_source_431 = CALL_FUNCTION(tstate, tmp_called_value_158, tmp_args_value_102, tmp_kwargs_value_102);
            Py_DECREF(tmp_args_value_102);
            if (tmp_assign_source_431 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3182;

                goto try_except_handler_153;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_431;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_430 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_430);
        goto try_return_handler_153;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_153:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182);
        locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182 = NULL;
        goto try_return_handler_152;
        // Exception handler code:
        try_except_handler_153:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182);
        locals_sqlalchemy$sql$sqltypes$$$class__51_VARCHAR_3182 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto try_except_handler_152;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_152:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_152:;
        exception_keeper_type_152 = exception_type;
        exception_keeper_value_152 = exception_value;
        exception_keeper_tb_152 = exception_tb;
        exception_keeper_lineno_152 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;
        exception_lineno = exception_keeper_lineno_152;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 3182;
        goto try_except_handler_151;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[742], tmp_assign_source_430);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_151:;
    exception_keeper_type_153 = exception_type;
    exception_keeper_value_153 = exception_value;
    exception_keeper_tb_153 = exception_tb;
    exception_keeper_lineno_153 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_153;
    exception_value = exception_keeper_value_153;
    exception_tb = exception_keeper_tb_153;
    exception_lineno = exception_keeper_lineno_153;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_432;
        PyObject *tmp_tuple_element_203;
        tmp_tuple_element_203 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69]);

        if (unlikely(tmp_tuple_element_203 == NULL)) {
            tmp_tuple_element_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
        }

        if (tmp_tuple_element_203 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_assign_source_432 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_432, 0, tmp_tuple_element_203);
        assert(tmp_class_creation_41__bases_orig == NULL);
        tmp_class_creation_41__bases_orig = tmp_assign_source_432;
    }
    {
        PyObject *tmp_assign_source_433;
        PyObject *tmp_dircall_arg1_52;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dircall_arg1_52 = tmp_class_creation_41__bases_orig;
        Py_INCREF(tmp_dircall_arg1_52);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_52};
            tmp_assign_source_433 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_433 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_41__bases == NULL);
        tmp_class_creation_41__bases = tmp_assign_source_433;
    }
    {
        PyObject *tmp_assign_source_434;
        tmp_assign_source_434 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_41__class_decl_dict == NULL);
        tmp_class_creation_41__class_decl_dict = tmp_assign_source_434;
    }
    {
        PyObject *tmp_assign_source_435;
        PyObject *tmp_metaclass_value_52;
        nuitka_bool tmp_condition_result_230;
        int tmp_truth_name_54;
        PyObject *tmp_type_arg_103;
        PyObject *tmp_expression_value_326;
        PyObject *tmp_subscript_value_52;
        PyObject *tmp_bases_value_52;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_class_creation_41__bases);
        if (tmp_truth_name_54 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_condition_result_230 = tmp_truth_name_54 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_230 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_75;
        } else {
            goto condexpr_false_75;
        }
        condexpr_true_75:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_expression_value_326 = tmp_class_creation_41__bases;
        tmp_subscript_value_52 = mod_consts[52];
        tmp_type_arg_103 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_326, tmp_subscript_value_52, 0);
        if (tmp_type_arg_103 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_metaclass_value_52 = BUILTIN_TYPE1(tmp_type_arg_103);
        Py_DECREF(tmp_type_arg_103);
        if (tmp_metaclass_value_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        goto condexpr_end_75;
        condexpr_false_75:;
        tmp_metaclass_value_52 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_52);
        condexpr_end_75:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_bases_value_52 = tmp_class_creation_41__bases;
        tmp_assign_source_435 = SELECT_METACLASS(tstate, tmp_metaclass_value_52, tmp_bases_value_52);
        Py_DECREF(tmp_metaclass_value_52);
        if (tmp_assign_source_435 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_41__metaclass == NULL);
        tmp_class_creation_41__metaclass = tmp_assign_source_435;
    }
    {
        bool tmp_condition_result_231;
        PyObject *tmp_expression_value_327;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_327 = tmp_class_creation_41__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_327, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_condition_result_231 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_231 != false) {
            goto branch_yes_156;
        } else {
            goto branch_no_156;
        }
    }
    branch_yes_156:;
    {
        PyObject *tmp_assign_source_436;
        PyObject *tmp_called_value_159;
        PyObject *tmp_expression_value_328;
        PyObject *tmp_args_value_103;
        PyObject *tmp_tuple_element_204;
        PyObject *tmp_kwargs_value_103;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_328 = tmp_class_creation_41__metaclass;
        tmp_called_value_159 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_328, mod_consts[449]);
        if (tmp_called_value_159 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_tuple_element_204 = mod_consts[744];
        tmp_args_value_103 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_tuple_element_204 = tmp_class_creation_41__bases;
        PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_kwargs_value_103 = tmp_class_creation_41__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3189;
        tmp_assign_source_436 = CALL_FUNCTION(tstate, tmp_called_value_159, tmp_args_value_103, tmp_kwargs_value_103);
        Py_DECREF(tmp_called_value_159);
        Py_DECREF(tmp_args_value_103);
        if (tmp_assign_source_436 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_436;
    }
    {
        bool tmp_condition_result_232;
        PyObject *tmp_operand_value_52;
        PyObject *tmp_expression_value_329;
        CHECK_OBJECT(tmp_class_creation_41__prepared);
        tmp_expression_value_329 = tmp_class_creation_41__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_329, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_operand_value_52 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_232 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_232 != false) {
            goto branch_yes_157;
        } else {
            goto branch_no_157;
        }
    }
    branch_yes_157:;
    {
        PyObject *tmp_raise_type_52;
        PyObject *tmp_raise_value_52;
        PyObject *tmp_mod_expr_left_52;
        PyObject *tmp_mod_expr_right_52;
        PyObject *tmp_tuple_element_205;
        PyObject *tmp_expression_value_330;
        PyObject *tmp_name_value_85;
        PyObject *tmp_default_value_52;
        tmp_raise_type_52 = PyExc_TypeError;
        tmp_mod_expr_left_52 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_330 = tmp_class_creation_41__metaclass;
        tmp_name_value_85 = mod_consts[201];
        tmp_default_value_52 = mod_consts[453];
        tmp_tuple_element_205 = BUILTIN_GETATTR(tstate, tmp_expression_value_330, tmp_name_value_85, tmp_default_value_52);
        if (tmp_tuple_element_205 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        tmp_mod_expr_right_52 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_331;
            PyObject *tmp_type_arg_104;
            PyTuple_SET_ITEM(tmp_mod_expr_right_52, 0, tmp_tuple_element_205);
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_type_arg_104 = tmp_class_creation_41__prepared;
            tmp_expression_value_331 = BUILTIN_TYPE1(tmp_type_arg_104);
            assert(!(tmp_expression_value_331 == NULL));
            tmp_tuple_element_205 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_331, mod_consts[201]);
            Py_DECREF(tmp_expression_value_331);
            if (tmp_tuple_element_205 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3189;

                goto tuple_build_exception_66;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_52, 1, tmp_tuple_element_205);
        }
        goto tuple_build_noexception_66;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_66:;
        Py_DECREF(tmp_mod_expr_right_52);
        goto try_except_handler_154;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_66:;
        tmp_raise_value_52 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_52, tmp_mod_expr_right_52);
        Py_DECREF(tmp_mod_expr_right_52);
        if (tmp_raise_value_52 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_154;
        }
        exception_type = tmp_raise_type_52;
        Py_INCREF(tmp_raise_type_52);
        exception_value = tmp_raise_value_52;
        exception_lineno = 3189;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_154;
    }
    branch_no_157:;
    goto branch_end_156;
    branch_no_156:;
    {
        PyObject *tmp_assign_source_437;
        tmp_assign_source_437 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_437;
    }
    branch_end_156:;
    {
        PyObject *tmp_assign_source_438;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_set_locals_52 = tmp_class_creation_41__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[745];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[744];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_156;
        }
        frame_efb6aa783c8a63761ab6fb473645f613_49 = MAKE_CLASS_FRAME(tstate, codeobj_efb6aa783c8a63761ab6fb473645f613, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_efb6aa783c8a63761ab6fb473645f613_49);
        assert(Py_REFCNT(frame_efb6aa783c8a63761ab6fb473645f613_49) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[744];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3193;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_48;
        frame_exception_exit_49:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_efb6aa783c8a63761ab6fb473645f613_49, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_efb6aa783c8a63761ab6fb473645f613_49->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_efb6aa783c8a63761ab6fb473645f613_49, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_efb6aa783c8a63761ab6fb473645f613_49,
            type_description_2,
            outline_51_var___class__
        );



        assertFrameObject(frame_efb6aa783c8a63761ab6fb473645f613_49);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_48;
        frame_no_exception_48:;
        goto skip_nested_handling_48;
        nested_frame_exit_48:;

        goto try_except_handler_156;
        skip_nested_handling_48:;
        {
            nuitka_bool tmp_condition_result_233;
            PyObject *tmp_cmp_expr_left_52;
            PyObject *tmp_cmp_expr_right_52;
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_cmp_expr_left_52 = tmp_class_creation_41__bases;
            CHECK_OBJECT(tmp_class_creation_41__bases_orig);
            tmp_cmp_expr_right_52 = tmp_class_creation_41__bases_orig;
            tmp_condition_result_233 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_52, tmp_cmp_expr_right_52);
            if (tmp_condition_result_233 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3189;

                goto try_except_handler_156;
            }
            if (tmp_condition_result_233 == NUITKA_BOOL_TRUE) {
                goto branch_yes_158;
            } else {
                goto branch_no_158;
            }
        }
        branch_yes_158:;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dictset_value = tmp_class_creation_41__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3189;

            goto try_except_handler_156;
        }
        branch_no_158:;
        {
            PyObject *tmp_assign_source_439;
            PyObject *tmp_called_value_160;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_206;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_41__metaclass);
            tmp_called_value_160 = tmp_class_creation_41__metaclass;
            tmp_tuple_element_206 = mod_consts[744];
            tmp_args_value_104 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_tuple_element_206 = tmp_class_creation_41__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_206);
            tmp_tuple_element_206 = locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_41__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3189;
            tmp_assign_source_439 = CALL_FUNCTION(tstate, tmp_called_value_160, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_439 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3189;

                goto try_except_handler_156;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_439;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_438 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_438);
        goto try_return_handler_156;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_156:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189);
        locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189 = NULL;
        goto try_return_handler_155;
        // Exception handler code:
        try_except_handler_156:;
        exception_keeper_type_154 = exception_type;
        exception_keeper_value_154 = exception_value;
        exception_keeper_tb_154 = exception_tb;
        exception_keeper_lineno_154 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189);
        locals_sqlalchemy$sql$sqltypes$$$class__52_NVARCHAR_3189 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;
        exception_lineno = exception_keeper_lineno_154;

        goto try_except_handler_155;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_155 = exception_type;
        exception_keeper_value_155 = exception_value;
        exception_keeper_tb_155 = exception_tb;
        exception_keeper_lineno_155 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;
        exception_lineno = exception_keeper_lineno_155;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 3189;
        goto try_except_handler_154;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[744], tmp_assign_source_438);
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_154:;
    exception_keeper_type_156 = exception_type;
    exception_keeper_value_156 = exception_value;
    exception_keeper_tb_156 = exception_tb;
    exception_keeper_lineno_156 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    Py_XDECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_156;
    exception_value = exception_keeper_value_156;
    exception_tb = exception_keeper_tb_156;
    exception_lineno = exception_keeper_lineno_156;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    CHECK_OBJECT(tmp_class_creation_41__bases_orig);
    Py_DECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_41__bases);
    Py_DECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    Py_DECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_41__metaclass);
    Py_DECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_41__prepared);
    Py_DECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_440;
        PyObject *tmp_tuple_element_207;
        tmp_tuple_element_207 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_tuple_element_207 == NULL)) {
            tmp_tuple_element_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_tuple_element_207 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_assign_source_440 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_440, 0, tmp_tuple_element_207);
        assert(tmp_class_creation_42__bases_orig == NULL);
        tmp_class_creation_42__bases_orig = tmp_assign_source_440;
    }
    {
        PyObject *tmp_assign_source_441;
        PyObject *tmp_dircall_arg1_53;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dircall_arg1_53 = tmp_class_creation_42__bases_orig;
        Py_INCREF(tmp_dircall_arg1_53);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_53};
            tmp_assign_source_441 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_441 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_42__bases == NULL);
        tmp_class_creation_42__bases = tmp_assign_source_441;
    }
    {
        PyObject *tmp_assign_source_442;
        tmp_assign_source_442 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_42__class_decl_dict == NULL);
        tmp_class_creation_42__class_decl_dict = tmp_assign_source_442;
    }
    {
        PyObject *tmp_assign_source_443;
        PyObject *tmp_metaclass_value_53;
        nuitka_bool tmp_condition_result_234;
        int tmp_truth_name_55;
        PyObject *tmp_type_arg_105;
        PyObject *tmp_expression_value_332;
        PyObject *tmp_subscript_value_53;
        PyObject *tmp_bases_value_53;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_class_creation_42__bases);
        if (tmp_truth_name_55 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_condition_result_234 = tmp_truth_name_55 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_234 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_76;
        } else {
            goto condexpr_false_76;
        }
        condexpr_true_76:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_expression_value_332 = tmp_class_creation_42__bases;
        tmp_subscript_value_53 = mod_consts[52];
        tmp_type_arg_105 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_332, tmp_subscript_value_53, 0);
        if (tmp_type_arg_105 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_metaclass_value_53 = BUILTIN_TYPE1(tmp_type_arg_105);
        Py_DECREF(tmp_type_arg_105);
        if (tmp_metaclass_value_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        goto condexpr_end_76;
        condexpr_false_76:;
        tmp_metaclass_value_53 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_53);
        condexpr_end_76:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_bases_value_53 = tmp_class_creation_42__bases;
        tmp_assign_source_443 = SELECT_METACLASS(tstate, tmp_metaclass_value_53, tmp_bases_value_53);
        Py_DECREF(tmp_metaclass_value_53);
        if (tmp_assign_source_443 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_42__metaclass == NULL);
        tmp_class_creation_42__metaclass = tmp_assign_source_443;
    }
    {
        bool tmp_condition_result_235;
        PyObject *tmp_expression_value_333;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_333 = tmp_class_creation_42__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_333, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_condition_result_235 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_235 != false) {
            goto branch_yes_159;
        } else {
            goto branch_no_159;
        }
    }
    branch_yes_159:;
    {
        PyObject *tmp_assign_source_444;
        PyObject *tmp_called_value_161;
        PyObject *tmp_expression_value_334;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_208;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_334 = tmp_class_creation_42__metaclass;
        tmp_called_value_161 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_334, mod_consts[449]);
        if (tmp_called_value_161 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_tuple_element_208 = mod_consts[746];
        tmp_args_value_105 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_tuple_element_208 = tmp_class_creation_42__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_42__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3196;
        tmp_assign_source_444 = CALL_FUNCTION(tstate, tmp_called_value_161, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_161);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_444 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_444;
    }
    {
        bool tmp_condition_result_236;
        PyObject *tmp_operand_value_53;
        PyObject *tmp_expression_value_335;
        CHECK_OBJECT(tmp_class_creation_42__prepared);
        tmp_expression_value_335 = tmp_class_creation_42__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_335, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_operand_value_53 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_53);
        assert(!(tmp_res == -1));
        tmp_condition_result_236 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_236 != false) {
            goto branch_yes_160;
        } else {
            goto branch_no_160;
        }
    }
    branch_yes_160:;
    {
        PyObject *tmp_raise_type_53;
        PyObject *tmp_raise_value_53;
        PyObject *tmp_mod_expr_left_53;
        PyObject *tmp_mod_expr_right_53;
        PyObject *tmp_tuple_element_209;
        PyObject *tmp_expression_value_336;
        PyObject *tmp_name_value_86;
        PyObject *tmp_default_value_53;
        tmp_raise_type_53 = PyExc_TypeError;
        tmp_mod_expr_left_53 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_336 = tmp_class_creation_42__metaclass;
        tmp_name_value_86 = mod_consts[201];
        tmp_default_value_53 = mod_consts[453];
        tmp_tuple_element_209 = BUILTIN_GETATTR(tstate, tmp_expression_value_336, tmp_name_value_86, tmp_default_value_53);
        if (tmp_tuple_element_209 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        tmp_mod_expr_right_53 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_337;
            PyObject *tmp_type_arg_106;
            PyTuple_SET_ITEM(tmp_mod_expr_right_53, 0, tmp_tuple_element_209);
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_type_arg_106 = tmp_class_creation_42__prepared;
            tmp_expression_value_337 = BUILTIN_TYPE1(tmp_type_arg_106);
            assert(!(tmp_expression_value_337 == NULL));
            tmp_tuple_element_209 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_337, mod_consts[201]);
            Py_DECREF(tmp_expression_value_337);
            if (tmp_tuple_element_209 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3196;

                goto tuple_build_exception_67;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_53, 1, tmp_tuple_element_209);
        }
        goto tuple_build_noexception_67;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_67:;
        Py_DECREF(tmp_mod_expr_right_53);
        goto try_except_handler_157;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_67:;
        tmp_raise_value_53 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_53, tmp_mod_expr_right_53);
        Py_DECREF(tmp_mod_expr_right_53);
        if (tmp_raise_value_53 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_157;
        }
        exception_type = tmp_raise_type_53;
        Py_INCREF(tmp_raise_type_53);
        exception_value = tmp_raise_value_53;
        exception_lineno = 3196;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_157;
    }
    branch_no_160:;
    goto branch_end_159;
    branch_no_159:;
    {
        PyObject *tmp_assign_source_445;
        tmp_assign_source_445 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_445;
    }
    branch_end_159:;
    {
        PyObject *tmp_assign_source_446;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_set_locals_53 = tmp_class_creation_42__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[747];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[746];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_159;
        }
        frame_34d08d8a15c465efbfb1fc847c832d1c_50 = MAKE_CLASS_FRAME(tstate, codeobj_34d08d8a15c465efbfb1fc847c832d1c, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_34d08d8a15c465efbfb1fc847c832d1c_50);
        assert(Py_REFCNT(frame_34d08d8a15c465efbfb1fc847c832d1c_50) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[746];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3200;
            type_description_2 = "o";
            goto frame_exception_exit_50;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_49;
        frame_exception_exit_50:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_34d08d8a15c465efbfb1fc847c832d1c_50, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_34d08d8a15c465efbfb1fc847c832d1c_50->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_34d08d8a15c465efbfb1fc847c832d1c_50, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_34d08d8a15c465efbfb1fc847c832d1c_50,
            type_description_2,
            outline_52_var___class__
        );



        assertFrameObject(frame_34d08d8a15c465efbfb1fc847c832d1c_50);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_49;
        frame_no_exception_49:;
        goto skip_nested_handling_49;
        nested_frame_exit_49:;

        goto try_except_handler_159;
        skip_nested_handling_49:;
        {
            nuitka_bool tmp_condition_result_237;
            PyObject *tmp_cmp_expr_left_53;
            PyObject *tmp_cmp_expr_right_53;
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_cmp_expr_left_53 = tmp_class_creation_42__bases;
            CHECK_OBJECT(tmp_class_creation_42__bases_orig);
            tmp_cmp_expr_right_53 = tmp_class_creation_42__bases_orig;
            tmp_condition_result_237 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_53, tmp_cmp_expr_right_53);
            if (tmp_condition_result_237 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3196;

                goto try_except_handler_159;
            }
            if (tmp_condition_result_237 == NUITKA_BOOL_TRUE) {
                goto branch_yes_161;
            } else {
                goto branch_no_161;
            }
        }
        branch_yes_161:;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dictset_value = tmp_class_creation_42__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3196;

            goto try_except_handler_159;
        }
        branch_no_161:;
        {
            PyObject *tmp_assign_source_447;
            PyObject *tmp_called_value_162;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_210;
            PyObject *tmp_kwargs_value_106;
            CHECK_OBJECT(tmp_class_creation_42__metaclass);
            tmp_called_value_162 = tmp_class_creation_42__metaclass;
            tmp_tuple_element_210 = mod_consts[746];
            tmp_args_value_106 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_tuple_element_210 = tmp_class_creation_42__bases;
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_210);
            tmp_tuple_element_210 = locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
            tmp_kwargs_value_106 = tmp_class_creation_42__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3196;
            tmp_assign_source_447 = CALL_FUNCTION(tstate, tmp_called_value_162, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_447 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3196;

                goto try_except_handler_159;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_447;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_446 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_446);
        goto try_return_handler_159;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_159:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196);
        locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196 = NULL;
        goto try_return_handler_158;
        // Exception handler code:
        try_except_handler_159:;
        exception_keeper_type_157 = exception_type;
        exception_keeper_value_157 = exception_value;
        exception_keeper_tb_157 = exception_tb;
        exception_keeper_lineno_157 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196);
        locals_sqlalchemy$sql$sqltypes$$$class__53_CHAR_3196 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;
        exception_lineno = exception_keeper_lineno_157;

        goto try_except_handler_158;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_158:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_158:;
        exception_keeper_type_158 = exception_type;
        exception_keeper_value_158 = exception_value;
        exception_keeper_tb_158 = exception_tb;
        exception_keeper_lineno_158 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_158;
        exception_value = exception_keeper_value_158;
        exception_tb = exception_keeper_tb_158;
        exception_lineno = exception_keeper_lineno_158;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 3196;
        goto try_except_handler_157;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[746], tmp_assign_source_446);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_157:;
    exception_keeper_type_159 = exception_type;
    exception_keeper_value_159 = exception_value;
    exception_keeper_tb_159 = exception_tb;
    exception_keeper_lineno_159 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    Py_XDECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_159;
    exception_value = exception_keeper_value_159;
    exception_tb = exception_keeper_tb_159;
    exception_lineno = exception_keeper_lineno_159;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_42__bases_orig);
    Py_DECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_42__bases);
    Py_DECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    Py_DECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_42__metaclass);
    Py_DECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_42__prepared);
    Py_DECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_448;
        PyObject *tmp_tuple_element_211;
        tmp_tuple_element_211 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69]);

        if (unlikely(tmp_tuple_element_211 == NULL)) {
            tmp_tuple_element_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
        }

        if (tmp_tuple_element_211 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_assign_source_448 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_448, 0, tmp_tuple_element_211);
        assert(tmp_class_creation_43__bases_orig == NULL);
        tmp_class_creation_43__bases_orig = tmp_assign_source_448;
    }
    {
        PyObject *tmp_assign_source_449;
        PyObject *tmp_dircall_arg1_54;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dircall_arg1_54 = tmp_class_creation_43__bases_orig;
        Py_INCREF(tmp_dircall_arg1_54);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_54};
            tmp_assign_source_449 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_449 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_43__bases == NULL);
        tmp_class_creation_43__bases = tmp_assign_source_449;
    }
    {
        PyObject *tmp_assign_source_450;
        tmp_assign_source_450 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_43__class_decl_dict == NULL);
        tmp_class_creation_43__class_decl_dict = tmp_assign_source_450;
    }
    {
        PyObject *tmp_assign_source_451;
        PyObject *tmp_metaclass_value_54;
        nuitka_bool tmp_condition_result_238;
        int tmp_truth_name_56;
        PyObject *tmp_type_arg_107;
        PyObject *tmp_expression_value_338;
        PyObject *tmp_subscript_value_54;
        PyObject *tmp_bases_value_54;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_class_creation_43__bases);
        if (tmp_truth_name_56 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_condition_result_238 = tmp_truth_name_56 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_238 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_77;
        } else {
            goto condexpr_false_77;
        }
        condexpr_true_77:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_expression_value_338 = tmp_class_creation_43__bases;
        tmp_subscript_value_54 = mod_consts[52];
        tmp_type_arg_107 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_338, tmp_subscript_value_54, 0);
        if (tmp_type_arg_107 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_metaclass_value_54 = BUILTIN_TYPE1(tmp_type_arg_107);
        Py_DECREF(tmp_type_arg_107);
        if (tmp_metaclass_value_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        goto condexpr_end_77;
        condexpr_false_77:;
        tmp_metaclass_value_54 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_54);
        condexpr_end_77:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_bases_value_54 = tmp_class_creation_43__bases;
        tmp_assign_source_451 = SELECT_METACLASS(tstate, tmp_metaclass_value_54, tmp_bases_value_54);
        Py_DECREF(tmp_metaclass_value_54);
        if (tmp_assign_source_451 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_43__metaclass == NULL);
        tmp_class_creation_43__metaclass = tmp_assign_source_451;
    }
    {
        bool tmp_condition_result_239;
        PyObject *tmp_expression_value_339;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_339 = tmp_class_creation_43__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_339, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_condition_result_239 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_239 != false) {
            goto branch_yes_162;
        } else {
            goto branch_no_162;
        }
    }
    branch_yes_162:;
    {
        PyObject *tmp_assign_source_452;
        PyObject *tmp_called_value_163;
        PyObject *tmp_expression_value_340;
        PyObject *tmp_args_value_107;
        PyObject *tmp_tuple_element_212;
        PyObject *tmp_kwargs_value_107;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_340 = tmp_class_creation_43__metaclass;
        tmp_called_value_163 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_340, mod_consts[449]);
        if (tmp_called_value_163 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_tuple_element_212 = mod_consts[748];
        tmp_args_value_107 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_tuple_element_212 = tmp_class_creation_43__bases;
        PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_kwargs_value_107 = tmp_class_creation_43__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3203;
        tmp_assign_source_452 = CALL_FUNCTION(tstate, tmp_called_value_163, tmp_args_value_107, tmp_kwargs_value_107);
        Py_DECREF(tmp_called_value_163);
        Py_DECREF(tmp_args_value_107);
        if (tmp_assign_source_452 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_452;
    }
    {
        bool tmp_condition_result_240;
        PyObject *tmp_operand_value_54;
        PyObject *tmp_expression_value_341;
        CHECK_OBJECT(tmp_class_creation_43__prepared);
        tmp_expression_value_341 = tmp_class_creation_43__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_341, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_operand_value_54 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_240 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_240 != false) {
            goto branch_yes_163;
        } else {
            goto branch_no_163;
        }
    }
    branch_yes_163:;
    {
        PyObject *tmp_raise_type_54;
        PyObject *tmp_raise_value_54;
        PyObject *tmp_mod_expr_left_54;
        PyObject *tmp_mod_expr_right_54;
        PyObject *tmp_tuple_element_213;
        PyObject *tmp_expression_value_342;
        PyObject *tmp_name_value_87;
        PyObject *tmp_default_value_54;
        tmp_raise_type_54 = PyExc_TypeError;
        tmp_mod_expr_left_54 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_342 = tmp_class_creation_43__metaclass;
        tmp_name_value_87 = mod_consts[201];
        tmp_default_value_54 = mod_consts[453];
        tmp_tuple_element_213 = BUILTIN_GETATTR(tstate, tmp_expression_value_342, tmp_name_value_87, tmp_default_value_54);
        if (tmp_tuple_element_213 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        tmp_mod_expr_right_54 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_343;
            PyObject *tmp_type_arg_108;
            PyTuple_SET_ITEM(tmp_mod_expr_right_54, 0, tmp_tuple_element_213);
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_type_arg_108 = tmp_class_creation_43__prepared;
            tmp_expression_value_343 = BUILTIN_TYPE1(tmp_type_arg_108);
            assert(!(tmp_expression_value_343 == NULL));
            tmp_tuple_element_213 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_343, mod_consts[201]);
            Py_DECREF(tmp_expression_value_343);
            if (tmp_tuple_element_213 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3203;

                goto tuple_build_exception_68;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_54, 1, tmp_tuple_element_213);
        }
        goto tuple_build_noexception_68;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_68:;
        Py_DECREF(tmp_mod_expr_right_54);
        goto try_except_handler_160;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_68:;
        tmp_raise_value_54 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_54, tmp_mod_expr_right_54);
        Py_DECREF(tmp_mod_expr_right_54);
        if (tmp_raise_value_54 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_160;
        }
        exception_type = tmp_raise_type_54;
        Py_INCREF(tmp_raise_type_54);
        exception_value = tmp_raise_value_54;
        exception_lineno = 3203;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_160;
    }
    branch_no_163:;
    goto branch_end_162;
    branch_no_162:;
    {
        PyObject *tmp_assign_source_453;
        tmp_assign_source_453 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_453;
    }
    branch_end_162:;
    {
        PyObject *tmp_assign_source_454;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_set_locals_54 = tmp_class_creation_43__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[749];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[748];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_162;
        }
        frame_94afccca9abf825c4a97ad1a236cd068_51 = MAKE_CLASS_FRAME(tstate, codeobj_94afccca9abf825c4a97ad1a236cd068, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_94afccca9abf825c4a97ad1a236cd068_51);
        assert(Py_REFCNT(frame_94afccca9abf825c4a97ad1a236cd068_51) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[748];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3207;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_50;
        frame_exception_exit_51:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_94afccca9abf825c4a97ad1a236cd068_51, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_94afccca9abf825c4a97ad1a236cd068_51->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_94afccca9abf825c4a97ad1a236cd068_51, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_94afccca9abf825c4a97ad1a236cd068_51,
            type_description_2,
            outline_53_var___class__
        );



        assertFrameObject(frame_94afccca9abf825c4a97ad1a236cd068_51);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_50;
        frame_no_exception_50:;
        goto skip_nested_handling_50;
        nested_frame_exit_50:;

        goto try_except_handler_162;
        skip_nested_handling_50:;
        {
            nuitka_bool tmp_condition_result_241;
            PyObject *tmp_cmp_expr_left_54;
            PyObject *tmp_cmp_expr_right_54;
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_cmp_expr_left_54 = tmp_class_creation_43__bases;
            CHECK_OBJECT(tmp_class_creation_43__bases_orig);
            tmp_cmp_expr_right_54 = tmp_class_creation_43__bases_orig;
            tmp_condition_result_241 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_54, tmp_cmp_expr_right_54);
            if (tmp_condition_result_241 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3203;

                goto try_except_handler_162;
            }
            if (tmp_condition_result_241 == NUITKA_BOOL_TRUE) {
                goto branch_yes_164;
            } else {
                goto branch_no_164;
            }
        }
        branch_yes_164:;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dictset_value = tmp_class_creation_43__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3203;

            goto try_except_handler_162;
        }
        branch_no_164:;
        {
            PyObject *tmp_assign_source_455;
            PyObject *tmp_called_value_164;
            PyObject *tmp_args_value_108;
            PyObject *tmp_tuple_element_214;
            PyObject *tmp_kwargs_value_108;
            CHECK_OBJECT(tmp_class_creation_43__metaclass);
            tmp_called_value_164 = tmp_class_creation_43__metaclass;
            tmp_tuple_element_214 = mod_consts[748];
            tmp_args_value_108 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_108, 0, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_tuple_element_214 = tmp_class_creation_43__bases;
            PyTuple_SET_ITEM0(tmp_args_value_108, 1, tmp_tuple_element_214);
            tmp_tuple_element_214 = locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203;
            PyTuple_SET_ITEM0(tmp_args_value_108, 2, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
            tmp_kwargs_value_108 = tmp_class_creation_43__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3203;
            tmp_assign_source_455 = CALL_FUNCTION(tstate, tmp_called_value_164, tmp_args_value_108, tmp_kwargs_value_108);
            Py_DECREF(tmp_args_value_108);
            if (tmp_assign_source_455 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3203;

                goto try_except_handler_162;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_455;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_454 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_454);
        goto try_return_handler_162;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_162:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203);
        locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203 = NULL;
        goto try_return_handler_161;
        // Exception handler code:
        try_except_handler_162:;
        exception_keeper_type_160 = exception_type;
        exception_keeper_value_160 = exception_value;
        exception_keeper_tb_160 = exception_tb;
        exception_keeper_lineno_160 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203);
        locals_sqlalchemy$sql$sqltypes$$$class__54_NCHAR_3203 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;
        exception_lineno = exception_keeper_lineno_160;

        goto try_except_handler_161;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_161 = exception_type;
        exception_keeper_value_161 = exception_value;
        exception_keeper_tb_161 = exception_tb;
        exception_keeper_lineno_161 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_161;
        exception_value = exception_keeper_value_161;
        exception_tb = exception_keeper_tb_161;
        exception_lineno = exception_keeper_lineno_161;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 3203;
        goto try_except_handler_160;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[748], tmp_assign_source_454);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_160:;
    exception_keeper_type_162 = exception_type;
    exception_keeper_value_162 = exception_value;
    exception_keeper_tb_162 = exception_tb;
    exception_keeper_lineno_162 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    Py_XDECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_162;
    exception_value = exception_keeper_value_162;
    exception_tb = exception_keeper_tb_162;
    exception_lineno = exception_keeper_lineno_162;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_43__bases_orig);
    Py_DECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_43__bases);
    Py_DECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    Py_DECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_43__metaclass);
    Py_DECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_43__prepared);
    Py_DECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_456;
        PyObject *tmp_tuple_element_215;
        tmp_tuple_element_215 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[563]);

        if (unlikely(tmp_tuple_element_215 == NULL)) {
            tmp_tuple_element_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[563]);
        }

        if (tmp_tuple_element_215 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_assign_source_456 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_456, 0, tmp_tuple_element_215);
        assert(tmp_class_creation_44__bases_orig == NULL);
        tmp_class_creation_44__bases_orig = tmp_assign_source_456;
    }
    {
        PyObject *tmp_assign_source_457;
        PyObject *tmp_dircall_arg1_55;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dircall_arg1_55 = tmp_class_creation_44__bases_orig;
        Py_INCREF(tmp_dircall_arg1_55);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_55};
            tmp_assign_source_457 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_457 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_44__bases == NULL);
        tmp_class_creation_44__bases = tmp_assign_source_457;
    }
    {
        PyObject *tmp_assign_source_458;
        tmp_assign_source_458 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_44__class_decl_dict == NULL);
        tmp_class_creation_44__class_decl_dict = tmp_assign_source_458;
    }
    {
        PyObject *tmp_assign_source_459;
        PyObject *tmp_metaclass_value_55;
        nuitka_bool tmp_condition_result_242;
        int tmp_truth_name_57;
        PyObject *tmp_type_arg_109;
        PyObject *tmp_expression_value_344;
        PyObject *tmp_subscript_value_55;
        PyObject *tmp_bases_value_55;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_class_creation_44__bases);
        if (tmp_truth_name_57 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_condition_result_242 = tmp_truth_name_57 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_242 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_78;
        } else {
            goto condexpr_false_78;
        }
        condexpr_true_78:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_expression_value_344 = tmp_class_creation_44__bases;
        tmp_subscript_value_55 = mod_consts[52];
        tmp_type_arg_109 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_344, tmp_subscript_value_55, 0);
        if (tmp_type_arg_109 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_metaclass_value_55 = BUILTIN_TYPE1(tmp_type_arg_109);
        Py_DECREF(tmp_type_arg_109);
        if (tmp_metaclass_value_55 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        goto condexpr_end_78;
        condexpr_false_78:;
        tmp_metaclass_value_55 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_55);
        condexpr_end_78:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_bases_value_55 = tmp_class_creation_44__bases;
        tmp_assign_source_459 = SELECT_METACLASS(tstate, tmp_metaclass_value_55, tmp_bases_value_55);
        Py_DECREF(tmp_metaclass_value_55);
        if (tmp_assign_source_459 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_44__metaclass == NULL);
        tmp_class_creation_44__metaclass = tmp_assign_source_459;
    }
    {
        bool tmp_condition_result_243;
        PyObject *tmp_expression_value_345;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_345 = tmp_class_creation_44__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_345, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_condition_result_243 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_243 != false) {
            goto branch_yes_165;
        } else {
            goto branch_no_165;
        }
    }
    branch_yes_165:;
    {
        PyObject *tmp_assign_source_460;
        PyObject *tmp_called_value_165;
        PyObject *tmp_expression_value_346;
        PyObject *tmp_args_value_109;
        PyObject *tmp_tuple_element_216;
        PyObject *tmp_kwargs_value_109;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_346 = tmp_class_creation_44__metaclass;
        tmp_called_value_165 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_346, mod_consts[449]);
        if (tmp_called_value_165 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_tuple_element_216 = mod_consts[750];
        tmp_args_value_109 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_109, 0, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_tuple_element_216 = tmp_class_creation_44__bases;
        PyTuple_SET_ITEM0(tmp_args_value_109, 1, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_kwargs_value_109 = tmp_class_creation_44__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3210;
        tmp_assign_source_460 = CALL_FUNCTION(tstate, tmp_called_value_165, tmp_args_value_109, tmp_kwargs_value_109);
        Py_DECREF(tmp_called_value_165);
        Py_DECREF(tmp_args_value_109);
        if (tmp_assign_source_460 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_460;
    }
    {
        bool tmp_condition_result_244;
        PyObject *tmp_operand_value_55;
        PyObject *tmp_expression_value_347;
        CHECK_OBJECT(tmp_class_creation_44__prepared);
        tmp_expression_value_347 = tmp_class_creation_44__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_347, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_operand_value_55 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_244 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_244 != false) {
            goto branch_yes_166;
        } else {
            goto branch_no_166;
        }
    }
    branch_yes_166:;
    {
        PyObject *tmp_raise_type_55;
        PyObject *tmp_raise_value_55;
        PyObject *tmp_mod_expr_left_55;
        PyObject *tmp_mod_expr_right_55;
        PyObject *tmp_tuple_element_217;
        PyObject *tmp_expression_value_348;
        PyObject *tmp_name_value_88;
        PyObject *tmp_default_value_55;
        tmp_raise_type_55 = PyExc_TypeError;
        tmp_mod_expr_left_55 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_348 = tmp_class_creation_44__metaclass;
        tmp_name_value_88 = mod_consts[201];
        tmp_default_value_55 = mod_consts[453];
        tmp_tuple_element_217 = BUILTIN_GETATTR(tstate, tmp_expression_value_348, tmp_name_value_88, tmp_default_value_55);
        if (tmp_tuple_element_217 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        tmp_mod_expr_right_55 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_349;
            PyObject *tmp_type_arg_110;
            PyTuple_SET_ITEM(tmp_mod_expr_right_55, 0, tmp_tuple_element_217);
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_type_arg_110 = tmp_class_creation_44__prepared;
            tmp_expression_value_349 = BUILTIN_TYPE1(tmp_type_arg_110);
            assert(!(tmp_expression_value_349 == NULL));
            tmp_tuple_element_217 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_349, mod_consts[201]);
            Py_DECREF(tmp_expression_value_349);
            if (tmp_tuple_element_217 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3210;

                goto tuple_build_exception_69;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_55, 1, tmp_tuple_element_217);
        }
        goto tuple_build_noexception_69;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_69:;
        Py_DECREF(tmp_mod_expr_right_55);
        goto try_except_handler_163;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_69:;
        tmp_raise_value_55 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_55, tmp_mod_expr_right_55);
        Py_DECREF(tmp_mod_expr_right_55);
        if (tmp_raise_value_55 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_163;
        }
        exception_type = tmp_raise_type_55;
        Py_INCREF(tmp_raise_type_55);
        exception_value = tmp_raise_value_55;
        exception_lineno = 3210;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_163;
    }
    branch_no_166:;
    goto branch_end_165;
    branch_no_165:;
    {
        PyObject *tmp_assign_source_461;
        tmp_assign_source_461 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_461;
    }
    branch_end_165:;
    {
        PyObject *tmp_assign_source_462;
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_set_locals_55 = tmp_class_creation_44__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[751];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[750];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_165;
        }
        frame_00fd667e5f00277515915ec46fe4428c_52 = MAKE_CLASS_FRAME(tstate, codeobj_00fd667e5f00277515915ec46fe4428c, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_00fd667e5f00277515915ec46fe4428c_52);
        assert(Py_REFCNT(frame_00fd667e5f00277515915ec46fe4428c_52) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[750];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3214;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_51;
        frame_exception_exit_52:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_00fd667e5f00277515915ec46fe4428c_52, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_00fd667e5f00277515915ec46fe4428c_52->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_00fd667e5f00277515915ec46fe4428c_52, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_00fd667e5f00277515915ec46fe4428c_52,
            type_description_2,
            outline_54_var___class__
        );



        assertFrameObject(frame_00fd667e5f00277515915ec46fe4428c_52);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_51;
        frame_no_exception_51:;
        goto skip_nested_handling_51;
        nested_frame_exit_51:;

        goto try_except_handler_165;
        skip_nested_handling_51:;
        {
            nuitka_bool tmp_condition_result_245;
            PyObject *tmp_cmp_expr_left_55;
            PyObject *tmp_cmp_expr_right_55;
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_cmp_expr_left_55 = tmp_class_creation_44__bases;
            CHECK_OBJECT(tmp_class_creation_44__bases_orig);
            tmp_cmp_expr_right_55 = tmp_class_creation_44__bases_orig;
            tmp_condition_result_245 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_55, tmp_cmp_expr_right_55);
            if (tmp_condition_result_245 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3210;

                goto try_except_handler_165;
            }
            if (tmp_condition_result_245 == NUITKA_BOOL_TRUE) {
                goto branch_yes_167;
            } else {
                goto branch_no_167;
            }
        }
        branch_yes_167:;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dictset_value = tmp_class_creation_44__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3210;

            goto try_except_handler_165;
        }
        branch_no_167:;
        {
            PyObject *tmp_assign_source_463;
            PyObject *tmp_called_value_166;
            PyObject *tmp_args_value_110;
            PyObject *tmp_tuple_element_218;
            PyObject *tmp_kwargs_value_110;
            CHECK_OBJECT(tmp_class_creation_44__metaclass);
            tmp_called_value_166 = tmp_class_creation_44__metaclass;
            tmp_tuple_element_218 = mod_consts[750];
            tmp_args_value_110 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_110, 0, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_tuple_element_218 = tmp_class_creation_44__bases;
            PyTuple_SET_ITEM0(tmp_args_value_110, 1, tmp_tuple_element_218);
            tmp_tuple_element_218 = locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210;
            PyTuple_SET_ITEM0(tmp_args_value_110, 2, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
            tmp_kwargs_value_110 = tmp_class_creation_44__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3210;
            tmp_assign_source_463 = CALL_FUNCTION(tstate, tmp_called_value_166, tmp_args_value_110, tmp_kwargs_value_110);
            Py_DECREF(tmp_args_value_110);
            if (tmp_assign_source_463 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3210;

                goto try_except_handler_165;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_463;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_assign_source_462 = outline_54_var___class__;
        Py_INCREF(tmp_assign_source_462);
        goto try_return_handler_165;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_165:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210);
        locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210 = NULL;
        goto try_return_handler_164;
        // Exception handler code:
        try_except_handler_165:;
        exception_keeper_type_163 = exception_type;
        exception_keeper_value_163 = exception_value;
        exception_keeper_tb_163 = exception_tb;
        exception_keeper_lineno_163 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210);
        locals_sqlalchemy$sql$sqltypes$$$class__55_BLOB_3210 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;
        exception_lineno = exception_keeper_lineno_163;

        goto try_except_handler_164;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_164:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_164:;
        exception_keeper_type_164 = exception_type;
        exception_keeper_value_164 = exception_value;
        exception_keeper_tb_164 = exception_tb;
        exception_keeper_lineno_164 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_164;
        exception_value = exception_keeper_value_164;
        exception_tb = exception_keeper_tb_164;
        exception_lineno = exception_keeper_lineno_164;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 3210;
        goto try_except_handler_163;
        outline_result_55:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[750], tmp_assign_source_462);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_163:;
    exception_keeper_type_165 = exception_type;
    exception_keeper_value_165 = exception_value;
    exception_keeper_tb_165 = exception_tb;
    exception_keeper_lineno_165 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    Py_XDECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_165;
    exception_value = exception_keeper_value_165;
    exception_tb = exception_keeper_tb_165;
    exception_lineno = exception_keeper_lineno_165;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_44__bases_orig);
    Py_DECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_44__bases);
    Py_DECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    Py_DECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_44__metaclass);
    Py_DECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_44__prepared);
    Py_DECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_464;
        PyObject *tmp_tuple_element_219;
        tmp_tuple_element_219 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123]);

        if (unlikely(tmp_tuple_element_219 == NULL)) {
            tmp_tuple_element_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[123]);
        }

        if (tmp_tuple_element_219 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_assign_source_464 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_464, 0, tmp_tuple_element_219);
        assert(tmp_class_creation_45__bases_orig == NULL);
        tmp_class_creation_45__bases_orig = tmp_assign_source_464;
    }
    {
        PyObject *tmp_assign_source_465;
        PyObject *tmp_dircall_arg1_56;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dircall_arg1_56 = tmp_class_creation_45__bases_orig;
        Py_INCREF(tmp_dircall_arg1_56);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_56};
            tmp_assign_source_465 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_465 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_45__bases == NULL);
        tmp_class_creation_45__bases = tmp_assign_source_465;
    }
    {
        PyObject *tmp_assign_source_466;
        tmp_assign_source_466 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_45__class_decl_dict == NULL);
        tmp_class_creation_45__class_decl_dict = tmp_assign_source_466;
    }
    {
        PyObject *tmp_assign_source_467;
        PyObject *tmp_metaclass_value_56;
        nuitka_bool tmp_condition_result_246;
        int tmp_truth_name_58;
        PyObject *tmp_type_arg_111;
        PyObject *tmp_expression_value_350;
        PyObject *tmp_subscript_value_56;
        PyObject *tmp_bases_value_56;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_class_creation_45__bases);
        if (tmp_truth_name_58 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_condition_result_246 = tmp_truth_name_58 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_246 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_79;
        } else {
            goto condexpr_false_79;
        }
        condexpr_true_79:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_expression_value_350 = tmp_class_creation_45__bases;
        tmp_subscript_value_56 = mod_consts[52];
        tmp_type_arg_111 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_350, tmp_subscript_value_56, 0);
        if (tmp_type_arg_111 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_metaclass_value_56 = BUILTIN_TYPE1(tmp_type_arg_111);
        Py_DECREF(tmp_type_arg_111);
        if (tmp_metaclass_value_56 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        goto condexpr_end_79;
        condexpr_false_79:;
        tmp_metaclass_value_56 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_56);
        condexpr_end_79:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_bases_value_56 = tmp_class_creation_45__bases;
        tmp_assign_source_467 = SELECT_METACLASS(tstate, tmp_metaclass_value_56, tmp_bases_value_56);
        Py_DECREF(tmp_metaclass_value_56);
        if (tmp_assign_source_467 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_45__metaclass == NULL);
        tmp_class_creation_45__metaclass = tmp_assign_source_467;
    }
    {
        bool tmp_condition_result_247;
        PyObject *tmp_expression_value_351;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_351 = tmp_class_creation_45__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_351, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_condition_result_247 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_247 != false) {
            goto branch_yes_168;
        } else {
            goto branch_no_168;
        }
    }
    branch_yes_168:;
    {
        PyObject *tmp_assign_source_468;
        PyObject *tmp_called_value_167;
        PyObject *tmp_expression_value_352;
        PyObject *tmp_args_value_111;
        PyObject *tmp_tuple_element_220;
        PyObject *tmp_kwargs_value_111;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_352 = tmp_class_creation_45__metaclass;
        tmp_called_value_167 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_352, mod_consts[449]);
        if (tmp_called_value_167 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_tuple_element_220 = mod_consts[126];
        tmp_args_value_111 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_111, 0, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_tuple_element_220 = tmp_class_creation_45__bases;
        PyTuple_SET_ITEM0(tmp_args_value_111, 1, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_kwargs_value_111 = tmp_class_creation_45__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3217;
        tmp_assign_source_468 = CALL_FUNCTION(tstate, tmp_called_value_167, tmp_args_value_111, tmp_kwargs_value_111);
        Py_DECREF(tmp_called_value_167);
        Py_DECREF(tmp_args_value_111);
        if (tmp_assign_source_468 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_468;
    }
    {
        bool tmp_condition_result_248;
        PyObject *tmp_operand_value_56;
        PyObject *tmp_expression_value_353;
        CHECK_OBJECT(tmp_class_creation_45__prepared);
        tmp_expression_value_353 = tmp_class_creation_45__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_353, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_operand_value_56 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_56);
        assert(!(tmp_res == -1));
        tmp_condition_result_248 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_248 != false) {
            goto branch_yes_169;
        } else {
            goto branch_no_169;
        }
    }
    branch_yes_169:;
    {
        PyObject *tmp_raise_type_56;
        PyObject *tmp_raise_value_56;
        PyObject *tmp_mod_expr_left_56;
        PyObject *tmp_mod_expr_right_56;
        PyObject *tmp_tuple_element_221;
        PyObject *tmp_expression_value_354;
        PyObject *tmp_name_value_89;
        PyObject *tmp_default_value_56;
        tmp_raise_type_56 = PyExc_TypeError;
        tmp_mod_expr_left_56 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_354 = tmp_class_creation_45__metaclass;
        tmp_name_value_89 = mod_consts[201];
        tmp_default_value_56 = mod_consts[453];
        tmp_tuple_element_221 = BUILTIN_GETATTR(tstate, tmp_expression_value_354, tmp_name_value_89, tmp_default_value_56);
        if (tmp_tuple_element_221 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        tmp_mod_expr_right_56 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_355;
            PyObject *tmp_type_arg_112;
            PyTuple_SET_ITEM(tmp_mod_expr_right_56, 0, tmp_tuple_element_221);
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_type_arg_112 = tmp_class_creation_45__prepared;
            tmp_expression_value_355 = BUILTIN_TYPE1(tmp_type_arg_112);
            assert(!(tmp_expression_value_355 == NULL));
            tmp_tuple_element_221 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_355, mod_consts[201]);
            Py_DECREF(tmp_expression_value_355);
            if (tmp_tuple_element_221 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3217;

                goto tuple_build_exception_70;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_56, 1, tmp_tuple_element_221);
        }
        goto tuple_build_noexception_70;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_70:;
        Py_DECREF(tmp_mod_expr_right_56);
        goto try_except_handler_166;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_70:;
        tmp_raise_value_56 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_56, tmp_mod_expr_right_56);
        Py_DECREF(tmp_mod_expr_right_56);
        if (tmp_raise_value_56 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_166;
        }
        exception_type = tmp_raise_type_56;
        Py_INCREF(tmp_raise_type_56);
        exception_value = tmp_raise_value_56;
        exception_lineno = 3217;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_166;
    }
    branch_no_169:;
    goto branch_end_168;
    branch_no_168:;
    {
        PyObject *tmp_assign_source_469;
        tmp_assign_source_469 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_469;
    }
    branch_end_168:;
    {
        PyObject *tmp_assign_source_470;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_set_locals_56 = tmp_class_creation_45__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[752];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[126];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_168;
        }
        frame_ebb156a6494af1a2b90ffe41aca76ade_53 = MAKE_CLASS_FRAME(tstate, codeobj_ebb156a6494af1a2b90ffe41aca76ade, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_ebb156a6494af1a2b90ffe41aca76ade_53);
        assert(Py_REFCNT(frame_ebb156a6494af1a2b90ffe41aca76ade_53) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[126];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3221;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_52;
        frame_exception_exit_53:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ebb156a6494af1a2b90ffe41aca76ade_53, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ebb156a6494af1a2b90ffe41aca76ade_53->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ebb156a6494af1a2b90ffe41aca76ade_53, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ebb156a6494af1a2b90ffe41aca76ade_53,
            type_description_2,
            outline_55_var___class__
        );



        assertFrameObject(frame_ebb156a6494af1a2b90ffe41aca76ade_53);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_52;
        frame_no_exception_52:;
        goto skip_nested_handling_52;
        nested_frame_exit_52:;

        goto try_except_handler_168;
        skip_nested_handling_52:;
        {
            nuitka_bool tmp_condition_result_249;
            PyObject *tmp_cmp_expr_left_56;
            PyObject *tmp_cmp_expr_right_56;
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_cmp_expr_left_56 = tmp_class_creation_45__bases;
            CHECK_OBJECT(tmp_class_creation_45__bases_orig);
            tmp_cmp_expr_right_56 = tmp_class_creation_45__bases_orig;
            tmp_condition_result_249 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_56, tmp_cmp_expr_right_56);
            if (tmp_condition_result_249 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3217;

                goto try_except_handler_168;
            }
            if (tmp_condition_result_249 == NUITKA_BOOL_TRUE) {
                goto branch_yes_170;
            } else {
                goto branch_no_170;
            }
        }
        branch_yes_170:;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dictset_value = tmp_class_creation_45__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3217;

            goto try_except_handler_168;
        }
        branch_no_170:;
        {
            PyObject *tmp_assign_source_471;
            PyObject *tmp_called_value_168;
            PyObject *tmp_args_value_112;
            PyObject *tmp_tuple_element_222;
            PyObject *tmp_kwargs_value_112;
            CHECK_OBJECT(tmp_class_creation_45__metaclass);
            tmp_called_value_168 = tmp_class_creation_45__metaclass;
            tmp_tuple_element_222 = mod_consts[126];
            tmp_args_value_112 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_112, 0, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_tuple_element_222 = tmp_class_creation_45__bases;
            PyTuple_SET_ITEM0(tmp_args_value_112, 1, tmp_tuple_element_222);
            tmp_tuple_element_222 = locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217;
            PyTuple_SET_ITEM0(tmp_args_value_112, 2, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
            tmp_kwargs_value_112 = tmp_class_creation_45__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3217;
            tmp_assign_source_471 = CALL_FUNCTION(tstate, tmp_called_value_168, tmp_args_value_112, tmp_kwargs_value_112);
            Py_DECREF(tmp_args_value_112);
            if (tmp_assign_source_471 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3217;

                goto try_except_handler_168;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_471;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_470 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_470);
        goto try_return_handler_168;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_168:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217);
        locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217 = NULL;
        goto try_return_handler_167;
        // Exception handler code:
        try_except_handler_168:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217);
        locals_sqlalchemy$sql$sqltypes$$$class__56_BINARY_3217 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto try_except_handler_167;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_167:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_167 = exception_type;
        exception_keeper_value_167 = exception_value;
        exception_keeper_tb_167 = exception_tb;
        exception_keeper_lineno_167 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_167;
        exception_value = exception_keeper_value_167;
        exception_tb = exception_keeper_tb_167;
        exception_lineno = exception_keeper_lineno_167;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 3217;
        goto try_except_handler_166;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[126], tmp_assign_source_470);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_166:;
    exception_keeper_type_168 = exception_type;
    exception_keeper_value_168 = exception_value;
    exception_keeper_tb_168 = exception_tb;
    exception_keeper_lineno_168 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    Py_XDECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_168;
    exception_value = exception_keeper_value_168;
    exception_tb = exception_keeper_tb_168;
    exception_lineno = exception_keeper_lineno_168;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_45__bases_orig);
    Py_DECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_45__bases);
    Py_DECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    Py_DECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_45__metaclass);
    Py_DECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_45__prepared);
    Py_DECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_472;
        PyObject *tmp_tuple_element_223;
        tmp_tuple_element_223 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[123]);

        if (unlikely(tmp_tuple_element_223 == NULL)) {
            tmp_tuple_element_223 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[123]);
        }

        if (tmp_tuple_element_223 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_assign_source_472 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_472, 0, tmp_tuple_element_223);
        assert(tmp_class_creation_46__bases_orig == NULL);
        tmp_class_creation_46__bases_orig = tmp_assign_source_472;
    }
    {
        PyObject *tmp_assign_source_473;
        PyObject *tmp_dircall_arg1_57;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dircall_arg1_57 = tmp_class_creation_46__bases_orig;
        Py_INCREF(tmp_dircall_arg1_57);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_57};
            tmp_assign_source_473 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_473 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_46__bases == NULL);
        tmp_class_creation_46__bases = tmp_assign_source_473;
    }
    {
        PyObject *tmp_assign_source_474;
        tmp_assign_source_474 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_46__class_decl_dict == NULL);
        tmp_class_creation_46__class_decl_dict = tmp_assign_source_474;
    }
    {
        PyObject *tmp_assign_source_475;
        PyObject *tmp_metaclass_value_57;
        nuitka_bool tmp_condition_result_250;
        int tmp_truth_name_59;
        PyObject *tmp_type_arg_113;
        PyObject *tmp_expression_value_356;
        PyObject *tmp_subscript_value_57;
        PyObject *tmp_bases_value_57;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_truth_name_59 = CHECK_IF_TRUE(tmp_class_creation_46__bases);
        if (tmp_truth_name_59 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_condition_result_250 = tmp_truth_name_59 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_250 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_80;
        } else {
            goto condexpr_false_80;
        }
        condexpr_true_80:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_expression_value_356 = tmp_class_creation_46__bases;
        tmp_subscript_value_57 = mod_consts[52];
        tmp_type_arg_113 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_356, tmp_subscript_value_57, 0);
        if (tmp_type_arg_113 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_metaclass_value_57 = BUILTIN_TYPE1(tmp_type_arg_113);
        Py_DECREF(tmp_type_arg_113);
        if (tmp_metaclass_value_57 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        goto condexpr_end_80;
        condexpr_false_80:;
        tmp_metaclass_value_57 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_57);
        condexpr_end_80:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_bases_value_57 = tmp_class_creation_46__bases;
        tmp_assign_source_475 = SELECT_METACLASS(tstate, tmp_metaclass_value_57, tmp_bases_value_57);
        Py_DECREF(tmp_metaclass_value_57);
        if (tmp_assign_source_475 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_46__metaclass == NULL);
        tmp_class_creation_46__metaclass = tmp_assign_source_475;
    }
    {
        bool tmp_condition_result_251;
        PyObject *tmp_expression_value_357;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_357 = tmp_class_creation_46__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_357, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_condition_result_251 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_251 != false) {
            goto branch_yes_171;
        } else {
            goto branch_no_171;
        }
    }
    branch_yes_171:;
    {
        PyObject *tmp_assign_source_476;
        PyObject *tmp_called_value_169;
        PyObject *tmp_expression_value_358;
        PyObject *tmp_args_value_113;
        PyObject *tmp_tuple_element_224;
        PyObject *tmp_kwargs_value_113;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_358 = tmp_class_creation_46__metaclass;
        tmp_called_value_169 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_358, mod_consts[449]);
        if (tmp_called_value_169 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_tuple_element_224 = mod_consts[753];
        tmp_args_value_113 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_113, 0, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_tuple_element_224 = tmp_class_creation_46__bases;
        PyTuple_SET_ITEM0(tmp_args_value_113, 1, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_kwargs_value_113 = tmp_class_creation_46__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3224;
        tmp_assign_source_476 = CALL_FUNCTION(tstate, tmp_called_value_169, tmp_args_value_113, tmp_kwargs_value_113);
        Py_DECREF(tmp_called_value_169);
        Py_DECREF(tmp_args_value_113);
        if (tmp_assign_source_476 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_476;
    }
    {
        bool tmp_condition_result_252;
        PyObject *tmp_operand_value_57;
        PyObject *tmp_expression_value_359;
        CHECK_OBJECT(tmp_class_creation_46__prepared);
        tmp_expression_value_359 = tmp_class_creation_46__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_359, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_operand_value_57 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_252 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_252 != false) {
            goto branch_yes_172;
        } else {
            goto branch_no_172;
        }
    }
    branch_yes_172:;
    {
        PyObject *tmp_raise_type_57;
        PyObject *tmp_raise_value_57;
        PyObject *tmp_mod_expr_left_57;
        PyObject *tmp_mod_expr_right_57;
        PyObject *tmp_tuple_element_225;
        PyObject *tmp_expression_value_360;
        PyObject *tmp_name_value_90;
        PyObject *tmp_default_value_57;
        tmp_raise_type_57 = PyExc_TypeError;
        tmp_mod_expr_left_57 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_360 = tmp_class_creation_46__metaclass;
        tmp_name_value_90 = mod_consts[201];
        tmp_default_value_57 = mod_consts[453];
        tmp_tuple_element_225 = BUILTIN_GETATTR(tstate, tmp_expression_value_360, tmp_name_value_90, tmp_default_value_57);
        if (tmp_tuple_element_225 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        tmp_mod_expr_right_57 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_361;
            PyObject *tmp_type_arg_114;
            PyTuple_SET_ITEM(tmp_mod_expr_right_57, 0, tmp_tuple_element_225);
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_type_arg_114 = tmp_class_creation_46__prepared;
            tmp_expression_value_361 = BUILTIN_TYPE1(tmp_type_arg_114);
            assert(!(tmp_expression_value_361 == NULL));
            tmp_tuple_element_225 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_361, mod_consts[201]);
            Py_DECREF(tmp_expression_value_361);
            if (tmp_tuple_element_225 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3224;

                goto tuple_build_exception_71;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_57, 1, tmp_tuple_element_225);
        }
        goto tuple_build_noexception_71;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_71:;
        Py_DECREF(tmp_mod_expr_right_57);
        goto try_except_handler_169;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_71:;
        tmp_raise_value_57 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_57, tmp_mod_expr_right_57);
        Py_DECREF(tmp_mod_expr_right_57);
        if (tmp_raise_value_57 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_169;
        }
        exception_type = tmp_raise_type_57;
        Py_INCREF(tmp_raise_type_57);
        exception_value = tmp_raise_value_57;
        exception_lineno = 3224;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_169;
    }
    branch_no_172:;
    goto branch_end_171;
    branch_no_171:;
    {
        PyObject *tmp_assign_source_477;
        tmp_assign_source_477 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_477;
    }
    branch_end_171:;
    {
        PyObject *tmp_assign_source_478;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_set_locals_57 = tmp_class_creation_46__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[754];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[753];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_171;
        }
        frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54 = MAKE_CLASS_FRAME(tstate, codeobj_9a7cdf8be051611b6ce58ab21d3dd9a5, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54);
        assert(Py_REFCNT(frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[753];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3228;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_53;
        frame_exception_exit_54:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54,
            type_description_2,
            outline_56_var___class__
        );



        assertFrameObject(frame_9a7cdf8be051611b6ce58ab21d3dd9a5_54);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_53;
        frame_no_exception_53:;
        goto skip_nested_handling_53;
        nested_frame_exit_53:;

        goto try_except_handler_171;
        skip_nested_handling_53:;
        {
            nuitka_bool tmp_condition_result_253;
            PyObject *tmp_cmp_expr_left_57;
            PyObject *tmp_cmp_expr_right_57;
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_cmp_expr_left_57 = tmp_class_creation_46__bases;
            CHECK_OBJECT(tmp_class_creation_46__bases_orig);
            tmp_cmp_expr_right_57 = tmp_class_creation_46__bases_orig;
            tmp_condition_result_253 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_57, tmp_cmp_expr_right_57);
            if (tmp_condition_result_253 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3224;

                goto try_except_handler_171;
            }
            if (tmp_condition_result_253 == NUITKA_BOOL_TRUE) {
                goto branch_yes_173;
            } else {
                goto branch_no_173;
            }
        }
        branch_yes_173:;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dictset_value = tmp_class_creation_46__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3224;

            goto try_except_handler_171;
        }
        branch_no_173:;
        {
            PyObject *tmp_assign_source_479;
            PyObject *tmp_called_value_170;
            PyObject *tmp_args_value_114;
            PyObject *tmp_tuple_element_226;
            PyObject *tmp_kwargs_value_114;
            CHECK_OBJECT(tmp_class_creation_46__metaclass);
            tmp_called_value_170 = tmp_class_creation_46__metaclass;
            tmp_tuple_element_226 = mod_consts[753];
            tmp_args_value_114 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_114, 0, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_tuple_element_226 = tmp_class_creation_46__bases;
            PyTuple_SET_ITEM0(tmp_args_value_114, 1, tmp_tuple_element_226);
            tmp_tuple_element_226 = locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224;
            PyTuple_SET_ITEM0(tmp_args_value_114, 2, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
            tmp_kwargs_value_114 = tmp_class_creation_46__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3224;
            tmp_assign_source_479 = CALL_FUNCTION(tstate, tmp_called_value_170, tmp_args_value_114, tmp_kwargs_value_114);
            Py_DECREF(tmp_args_value_114);
            if (tmp_assign_source_479 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3224;

                goto try_except_handler_171;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_479;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_478 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_478);
        goto try_return_handler_171;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_171:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224);
        locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224 = NULL;
        goto try_return_handler_170;
        // Exception handler code:
        try_except_handler_171:;
        exception_keeper_type_169 = exception_type;
        exception_keeper_value_169 = exception_value;
        exception_keeper_tb_169 = exception_tb;
        exception_keeper_lineno_169 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224);
        locals_sqlalchemy$sql$sqltypes$$$class__57_VARBINARY_3224 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;
        exception_lineno = exception_keeper_lineno_169;

        goto try_except_handler_170;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_170:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_170:;
        exception_keeper_type_170 = exception_type;
        exception_keeper_value_170 = exception_value;
        exception_keeper_tb_170 = exception_tb;
        exception_keeper_lineno_170 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_170;
        exception_value = exception_keeper_value_170;
        exception_tb = exception_keeper_tb_170;
        exception_lineno = exception_keeper_lineno_170;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 3224;
        goto try_except_handler_169;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[753], tmp_assign_source_478);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_169:;
    exception_keeper_type_171 = exception_type;
    exception_keeper_value_171 = exception_value;
    exception_keeper_tb_171 = exception_tb;
    exception_keeper_lineno_171 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    Py_XDECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_171;
    exception_value = exception_keeper_value_171;
    exception_tb = exception_keeper_tb_171;
    exception_lineno = exception_keeper_lineno_171;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    CHECK_OBJECT(tmp_class_creation_46__bases_orig);
    Py_DECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_46__bases);
    Py_DECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    Py_DECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_46__metaclass);
    Py_DECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_46__prepared);
    Py_DECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_480;
        PyObject *tmp_tuple_element_227;
        tmp_tuple_element_227 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[322]);

        if (unlikely(tmp_tuple_element_227 == NULL)) {
            tmp_tuple_element_227 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[322]);
        }

        if (tmp_tuple_element_227 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_assign_source_480 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_480, 0, tmp_tuple_element_227);
        assert(tmp_class_creation_47__bases_orig == NULL);
        tmp_class_creation_47__bases_orig = tmp_assign_source_480;
    }
    {
        PyObject *tmp_assign_source_481;
        PyObject *tmp_dircall_arg1_58;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dircall_arg1_58 = tmp_class_creation_47__bases_orig;
        Py_INCREF(tmp_dircall_arg1_58);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_58};
            tmp_assign_source_481 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_481 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_47__bases == NULL);
        tmp_class_creation_47__bases = tmp_assign_source_481;
    }
    {
        PyObject *tmp_assign_source_482;
        tmp_assign_source_482 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_47__class_decl_dict == NULL);
        tmp_class_creation_47__class_decl_dict = tmp_assign_source_482;
    }
    {
        PyObject *tmp_assign_source_483;
        PyObject *tmp_metaclass_value_58;
        nuitka_bool tmp_condition_result_254;
        int tmp_truth_name_60;
        PyObject *tmp_type_arg_115;
        PyObject *tmp_expression_value_362;
        PyObject *tmp_subscript_value_58;
        PyObject *tmp_bases_value_58;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_truth_name_60 = CHECK_IF_TRUE(tmp_class_creation_47__bases);
        if (tmp_truth_name_60 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_condition_result_254 = tmp_truth_name_60 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_254 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_81;
        } else {
            goto condexpr_false_81;
        }
        condexpr_true_81:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_expression_value_362 = tmp_class_creation_47__bases;
        tmp_subscript_value_58 = mod_consts[52];
        tmp_type_arg_115 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_362, tmp_subscript_value_58, 0);
        if (tmp_type_arg_115 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_metaclass_value_58 = BUILTIN_TYPE1(tmp_type_arg_115);
        Py_DECREF(tmp_type_arg_115);
        if (tmp_metaclass_value_58 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        goto condexpr_end_81;
        condexpr_false_81:;
        tmp_metaclass_value_58 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_58);
        condexpr_end_81:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_bases_value_58 = tmp_class_creation_47__bases;
        tmp_assign_source_483 = SELECT_METACLASS(tstate, tmp_metaclass_value_58, tmp_bases_value_58);
        Py_DECREF(tmp_metaclass_value_58);
        if (tmp_assign_source_483 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_47__metaclass == NULL);
        tmp_class_creation_47__metaclass = tmp_assign_source_483;
    }
    {
        bool tmp_condition_result_255;
        PyObject *tmp_expression_value_363;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_363 = tmp_class_creation_47__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_363, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_condition_result_255 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_255 != false) {
            goto branch_yes_174;
        } else {
            goto branch_no_174;
        }
    }
    branch_yes_174:;
    {
        PyObject *tmp_assign_source_484;
        PyObject *tmp_called_value_171;
        PyObject *tmp_expression_value_364;
        PyObject *tmp_args_value_115;
        PyObject *tmp_tuple_element_228;
        PyObject *tmp_kwargs_value_115;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_364 = tmp_class_creation_47__metaclass;
        tmp_called_value_171 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_364, mod_consts[449]);
        if (tmp_called_value_171 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_tuple_element_228 = mod_consts[755];
        tmp_args_value_115 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_115, 0, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_tuple_element_228 = tmp_class_creation_47__bases;
        PyTuple_SET_ITEM0(tmp_args_value_115, 1, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_kwargs_value_115 = tmp_class_creation_47__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3231;
        tmp_assign_source_484 = CALL_FUNCTION(tstate, tmp_called_value_171, tmp_args_value_115, tmp_kwargs_value_115);
        Py_DECREF(tmp_called_value_171);
        Py_DECREF(tmp_args_value_115);
        if (tmp_assign_source_484 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_484;
    }
    {
        bool tmp_condition_result_256;
        PyObject *tmp_operand_value_58;
        PyObject *tmp_expression_value_365;
        CHECK_OBJECT(tmp_class_creation_47__prepared);
        tmp_expression_value_365 = tmp_class_creation_47__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_365, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_operand_value_58 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_256 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_256 != false) {
            goto branch_yes_175;
        } else {
            goto branch_no_175;
        }
    }
    branch_yes_175:;
    {
        PyObject *tmp_raise_type_58;
        PyObject *tmp_raise_value_58;
        PyObject *tmp_mod_expr_left_58;
        PyObject *tmp_mod_expr_right_58;
        PyObject *tmp_tuple_element_229;
        PyObject *tmp_expression_value_366;
        PyObject *tmp_name_value_91;
        PyObject *tmp_default_value_58;
        tmp_raise_type_58 = PyExc_TypeError;
        tmp_mod_expr_left_58 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_366 = tmp_class_creation_47__metaclass;
        tmp_name_value_91 = mod_consts[201];
        tmp_default_value_58 = mod_consts[453];
        tmp_tuple_element_229 = BUILTIN_GETATTR(tstate, tmp_expression_value_366, tmp_name_value_91, tmp_default_value_58);
        if (tmp_tuple_element_229 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        tmp_mod_expr_right_58 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_367;
            PyObject *tmp_type_arg_116;
            PyTuple_SET_ITEM(tmp_mod_expr_right_58, 0, tmp_tuple_element_229);
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_type_arg_116 = tmp_class_creation_47__prepared;
            tmp_expression_value_367 = BUILTIN_TYPE1(tmp_type_arg_116);
            assert(!(tmp_expression_value_367 == NULL));
            tmp_tuple_element_229 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_367, mod_consts[201]);
            Py_DECREF(tmp_expression_value_367);
            if (tmp_tuple_element_229 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3231;

                goto tuple_build_exception_72;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_58, 1, tmp_tuple_element_229);
        }
        goto tuple_build_noexception_72;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_72:;
        Py_DECREF(tmp_mod_expr_right_58);
        goto try_except_handler_172;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_72:;
        tmp_raise_value_58 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_58, tmp_mod_expr_right_58);
        Py_DECREF(tmp_mod_expr_right_58);
        if (tmp_raise_value_58 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_172;
        }
        exception_type = tmp_raise_type_58;
        Py_INCREF(tmp_raise_type_58);
        exception_value = tmp_raise_value_58;
        exception_lineno = 3231;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_172;
    }
    branch_no_175:;
    goto branch_end_174;
    branch_no_174:;
    {
        PyObject *tmp_assign_source_485;
        tmp_assign_source_485 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_485;
    }
    branch_end_174:;
    {
        PyObject *tmp_assign_source_486;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_set_locals_58 = tmp_class_creation_47__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_174;
        }
        tmp_dictset_value = mod_consts[756];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_174;
        }
        tmp_dictset_value = mod_consts[755];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_174;
        }
        frame_939d93e6e8558ba0251076c1f17301ee_55 = MAKE_CLASS_FRAME(tstate, codeobj_939d93e6e8558ba0251076c1f17301ee, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_939d93e6e8558ba0251076c1f17301ee_55);
        assert(Py_REFCNT(frame_939d93e6e8558ba0251076c1f17301ee_55) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[755];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3235;
            type_description_2 = "o";
            goto frame_exception_exit_55;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_54;
        frame_exception_exit_55:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_939d93e6e8558ba0251076c1f17301ee_55, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_939d93e6e8558ba0251076c1f17301ee_55->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_939d93e6e8558ba0251076c1f17301ee_55, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_939d93e6e8558ba0251076c1f17301ee_55,
            type_description_2,
            outline_57_var___class__
        );



        assertFrameObject(frame_939d93e6e8558ba0251076c1f17301ee_55);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_54;
        frame_no_exception_54:;
        goto skip_nested_handling_54;
        nested_frame_exit_54:;

        goto try_except_handler_174;
        skip_nested_handling_54:;
        {
            nuitka_bool tmp_condition_result_257;
            PyObject *tmp_cmp_expr_left_58;
            PyObject *tmp_cmp_expr_right_58;
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_cmp_expr_left_58 = tmp_class_creation_47__bases;
            CHECK_OBJECT(tmp_class_creation_47__bases_orig);
            tmp_cmp_expr_right_58 = tmp_class_creation_47__bases_orig;
            tmp_condition_result_257 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_58, tmp_cmp_expr_right_58);
            if (tmp_condition_result_257 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3231;

                goto try_except_handler_174;
            }
            if (tmp_condition_result_257 == NUITKA_BOOL_TRUE) {
                goto branch_yes_176;
            } else {
                goto branch_no_176;
            }
        }
        branch_yes_176:;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dictset_value = tmp_class_creation_47__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3231;

            goto try_except_handler_174;
        }
        branch_no_176:;
        {
            PyObject *tmp_assign_source_487;
            PyObject *tmp_called_value_172;
            PyObject *tmp_args_value_116;
            PyObject *tmp_tuple_element_230;
            PyObject *tmp_kwargs_value_116;
            CHECK_OBJECT(tmp_class_creation_47__metaclass);
            tmp_called_value_172 = tmp_class_creation_47__metaclass;
            tmp_tuple_element_230 = mod_consts[755];
            tmp_args_value_116 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_116, 0, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_tuple_element_230 = tmp_class_creation_47__bases;
            PyTuple_SET_ITEM0(tmp_args_value_116, 1, tmp_tuple_element_230);
            tmp_tuple_element_230 = locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231;
            PyTuple_SET_ITEM0(tmp_args_value_116, 2, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
            tmp_kwargs_value_116 = tmp_class_creation_47__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3231;
            tmp_assign_source_487 = CALL_FUNCTION(tstate, tmp_called_value_172, tmp_args_value_116, tmp_kwargs_value_116);
            Py_DECREF(tmp_args_value_116);
            if (tmp_assign_source_487 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3231;

                goto try_except_handler_174;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_487;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_assign_source_486 = outline_57_var___class__;
        Py_INCREF(tmp_assign_source_486);
        goto try_return_handler_174;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_174:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231);
        locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231 = NULL;
        goto try_return_handler_173;
        // Exception handler code:
        try_except_handler_174:;
        exception_keeper_type_172 = exception_type;
        exception_keeper_value_172 = exception_value;
        exception_keeper_tb_172 = exception_tb;
        exception_keeper_lineno_172 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231);
        locals_sqlalchemy$sql$sqltypes$$$class__58_BOOLEAN_3231 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;
        exception_lineno = exception_keeper_lineno_172;

        goto try_except_handler_173;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_173:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_173:;
        exception_keeper_type_173 = exception_type;
        exception_keeper_value_173 = exception_value;
        exception_keeper_tb_173 = exception_tb;
        exception_keeper_lineno_173 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_173;
        exception_value = exception_keeper_value_173;
        exception_tb = exception_keeper_tb_173;
        exception_lineno = exception_keeper_lineno_173;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 3231;
        goto try_except_handler_172;
        outline_result_58:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[755], tmp_assign_source_486);
    }
    goto try_end_58;
    // Exception handler code:
    try_except_handler_172:;
    exception_keeper_type_174 = exception_type;
    exception_keeper_value_174 = exception_value;
    exception_keeper_tb_174 = exception_tb;
    exception_keeper_lineno_174 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    Py_XDECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_174;
    exception_value = exception_keeper_value_174;
    exception_tb = exception_keeper_tb_174;
    exception_lineno = exception_keeper_lineno_174;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    CHECK_OBJECT(tmp_class_creation_47__bases_orig);
    Py_DECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_47__bases);
    Py_DECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    Py_DECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_47__metaclass);
    Py_DECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_47__prepared);
    Py_DECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_488;
        PyObject *tmp_tuple_element_231;
        tmp_tuple_element_231 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_231 == NULL)) {
            tmp_tuple_element_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_231 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_assign_source_488 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_488, 0, tmp_tuple_element_231);
        assert(tmp_class_creation_48__bases_orig == NULL);
        tmp_class_creation_48__bases_orig = tmp_assign_source_488;
    }
    {
        PyObject *tmp_assign_source_489;
        PyObject *tmp_dircall_arg1_59;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dircall_arg1_59 = tmp_class_creation_48__bases_orig;
        Py_INCREF(tmp_dircall_arg1_59);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_59};
            tmp_assign_source_489 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_489 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_48__bases == NULL);
        tmp_class_creation_48__bases = tmp_assign_source_489;
    }
    {
        PyObject *tmp_assign_source_490;
        tmp_assign_source_490 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_48__class_decl_dict == NULL);
        tmp_class_creation_48__class_decl_dict = tmp_assign_source_490;
    }
    {
        PyObject *tmp_assign_source_491;
        PyObject *tmp_metaclass_value_59;
        nuitka_bool tmp_condition_result_258;
        int tmp_truth_name_61;
        PyObject *tmp_type_arg_117;
        PyObject *tmp_expression_value_368;
        PyObject *tmp_subscript_value_59;
        PyObject *tmp_bases_value_59;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_truth_name_61 = CHECK_IF_TRUE(tmp_class_creation_48__bases);
        if (tmp_truth_name_61 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_condition_result_258 = tmp_truth_name_61 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_258 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_82;
        } else {
            goto condexpr_false_82;
        }
        condexpr_true_82:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_expression_value_368 = tmp_class_creation_48__bases;
        tmp_subscript_value_59 = mod_consts[52];
        tmp_type_arg_117 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_368, tmp_subscript_value_59, 0);
        if (tmp_type_arg_117 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_metaclass_value_59 = BUILTIN_TYPE1(tmp_type_arg_117);
        Py_DECREF(tmp_type_arg_117);
        if (tmp_metaclass_value_59 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        goto condexpr_end_82;
        condexpr_false_82:;
        tmp_metaclass_value_59 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_59);
        condexpr_end_82:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_bases_value_59 = tmp_class_creation_48__bases;
        tmp_assign_source_491 = SELECT_METACLASS(tstate, tmp_metaclass_value_59, tmp_bases_value_59);
        Py_DECREF(tmp_metaclass_value_59);
        if (tmp_assign_source_491 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_48__metaclass == NULL);
        tmp_class_creation_48__metaclass = tmp_assign_source_491;
    }
    {
        bool tmp_condition_result_259;
        PyObject *tmp_expression_value_369;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_369 = tmp_class_creation_48__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_369, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_condition_result_259 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_259 != false) {
            goto branch_yes_177;
        } else {
            goto branch_no_177;
        }
    }
    branch_yes_177:;
    {
        PyObject *tmp_assign_source_492;
        PyObject *tmp_called_value_173;
        PyObject *tmp_expression_value_370;
        PyObject *tmp_args_value_117;
        PyObject *tmp_tuple_element_232;
        PyObject *tmp_kwargs_value_117;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_370 = tmp_class_creation_48__metaclass;
        tmp_called_value_173 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_370, mod_consts[449]);
        if (tmp_called_value_173 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_tuple_element_232 = mod_consts[10];
        tmp_args_value_117 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_117, 0, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_tuple_element_232 = tmp_class_creation_48__bases;
        PyTuple_SET_ITEM0(tmp_args_value_117, 1, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_kwargs_value_117 = tmp_class_creation_48__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3238;
        tmp_assign_source_492 = CALL_FUNCTION(tstate, tmp_called_value_173, tmp_args_value_117, tmp_kwargs_value_117);
        Py_DECREF(tmp_called_value_173);
        Py_DECREF(tmp_args_value_117);
        if (tmp_assign_source_492 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_492;
    }
    {
        bool tmp_condition_result_260;
        PyObject *tmp_operand_value_59;
        PyObject *tmp_expression_value_371;
        CHECK_OBJECT(tmp_class_creation_48__prepared);
        tmp_expression_value_371 = tmp_class_creation_48__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_371, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_operand_value_59 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_59);
        assert(!(tmp_res == -1));
        tmp_condition_result_260 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_260 != false) {
            goto branch_yes_178;
        } else {
            goto branch_no_178;
        }
    }
    branch_yes_178:;
    {
        PyObject *tmp_raise_type_59;
        PyObject *tmp_raise_value_59;
        PyObject *tmp_mod_expr_left_59;
        PyObject *tmp_mod_expr_right_59;
        PyObject *tmp_tuple_element_233;
        PyObject *tmp_expression_value_372;
        PyObject *tmp_name_value_92;
        PyObject *tmp_default_value_59;
        tmp_raise_type_59 = PyExc_TypeError;
        tmp_mod_expr_left_59 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_372 = tmp_class_creation_48__metaclass;
        tmp_name_value_92 = mod_consts[201];
        tmp_default_value_59 = mod_consts[453];
        tmp_tuple_element_233 = BUILTIN_GETATTR(tstate, tmp_expression_value_372, tmp_name_value_92, tmp_default_value_59);
        if (tmp_tuple_element_233 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        tmp_mod_expr_right_59 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_373;
            PyObject *tmp_type_arg_118;
            PyTuple_SET_ITEM(tmp_mod_expr_right_59, 0, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_type_arg_118 = tmp_class_creation_48__prepared;
            tmp_expression_value_373 = BUILTIN_TYPE1(tmp_type_arg_118);
            assert(!(tmp_expression_value_373 == NULL));
            tmp_tuple_element_233 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_373, mod_consts[201]);
            Py_DECREF(tmp_expression_value_373);
            if (tmp_tuple_element_233 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3238;

                goto tuple_build_exception_73;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_59, 1, tmp_tuple_element_233);
        }
        goto tuple_build_noexception_73;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_73:;
        Py_DECREF(tmp_mod_expr_right_59);
        goto try_except_handler_175;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_73:;
        tmp_raise_value_59 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_59, tmp_mod_expr_right_59);
        Py_DECREF(tmp_mod_expr_right_59);
        if (tmp_raise_value_59 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_175;
        }
        exception_type = tmp_raise_type_59;
        Py_INCREF(tmp_raise_type_59);
        exception_value = tmp_raise_value_59;
        exception_lineno = 3238;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_175;
    }
    branch_no_178:;
    goto branch_end_177;
    branch_no_177:;
    {
        PyObject *tmp_assign_source_493;
        tmp_assign_source_493 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_493;
    }
    branch_end_177:;
    {
        PyObject *tmp_assign_source_494;
        {
            PyObject *tmp_set_locals_59;
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_set_locals_59 = tmp_class_creation_48__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238 = tmp_set_locals_59;
            Py_INCREF(tmp_set_locals_59);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[757];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[10];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_177;
        }
        frame_9da7d3048fabb152669b327b244fe974_56 = MAKE_CLASS_FRAME(tstate, codeobj_9da7d3048fabb152669b327b244fe974, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_9da7d3048fabb152669b327b244fe974_56);
        assert(Py_REFCNT(frame_9da7d3048fabb152669b327b244fe974_56) == 2);

        // Framed code:
        tmp_dictset_value = mod_consts[758];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[475], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3265;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[759], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3267;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__142_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[249], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3269;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_495;
            PyObject *tmp_tuple_element_234;
            PyObject *tmp_expression_value_374;
            tmp_expression_value_374 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[436]);

            if (tmp_expression_value_374 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                    tmp_expression_value_374 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

                    if (unlikely(tmp_expression_value_374 == NULL)) {
                        tmp_expression_value_374 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
                    }

                    if (tmp_expression_value_374 == NULL) {
                        assert(HAS_ERROR_OCCURRED(tstate));

                        FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3272;
                        type_description_2 = "o";
                        goto try_except_handler_178;
                    }
                    Py_INCREF(tmp_expression_value_374);
                } else {
                    goto try_except_handler_178;
                }
            }

            tmp_tuple_element_234 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_374, mod_consts[9]);
            Py_DECREF(tmp_expression_value_374);
            if (tmp_tuple_element_234 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_assign_source_495 = MAKE_TUPLE_EMPTY(1);
            PyTuple_SET_ITEM(tmp_assign_source_495, 0, tmp_tuple_element_234);
            assert(tmp_NullType$class_creation_1__bases_orig == NULL);
            tmp_NullType$class_creation_1__bases_orig = tmp_assign_source_495;
        }
        {
            PyObject *tmp_assign_source_496;
            PyObject *tmp_dircall_arg1_60;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
            tmp_dircall_arg1_60 = tmp_NullType$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_60);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_60};
                tmp_assign_source_496 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
            }
            if (tmp_assign_source_496 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            assert(tmp_NullType$class_creation_1__bases == NULL);
            tmp_NullType$class_creation_1__bases = tmp_assign_source_496;
        }
        {
            PyObject *tmp_assign_source_497;
            tmp_assign_source_497 = MAKE_DICT_EMPTY();
            assert(tmp_NullType$class_creation_1__class_decl_dict == NULL);
            tmp_NullType$class_creation_1__class_decl_dict = tmp_assign_source_497;
        }
        {
            PyObject *tmp_assign_source_498;
            PyObject *tmp_metaclass_value_60;
            nuitka_bool tmp_condition_result_261;
            int tmp_truth_name_62;
            PyObject *tmp_type_arg_119;
            PyObject *tmp_expression_value_375;
            PyObject *tmp_subscript_value_60;
            PyObject *tmp_bases_value_60;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_truth_name_62 = CHECK_IF_TRUE(tmp_NullType$class_creation_1__bases);
            if (tmp_truth_name_62 == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_condition_result_261 = tmp_truth_name_62 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_261 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_83;
            } else {
                goto condexpr_false_83;
            }
            condexpr_true_83:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_expression_value_375 = tmp_NullType$class_creation_1__bases;
            tmp_subscript_value_60 = mod_consts[52];
            tmp_type_arg_119 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_375, tmp_subscript_value_60, 0);
            if (tmp_type_arg_119 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_metaclass_value_60 = BUILTIN_TYPE1(tmp_type_arg_119);
            Py_DECREF(tmp_type_arg_119);
            if (tmp_metaclass_value_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            goto condexpr_end_83;
            condexpr_false_83:;
            tmp_metaclass_value_60 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_60);
            condexpr_end_83:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_bases_value_60 = tmp_NullType$class_creation_1__bases;
            tmp_assign_source_498 = SELECT_METACLASS(tstate, tmp_metaclass_value_60, tmp_bases_value_60);
            Py_DECREF(tmp_metaclass_value_60);
            if (tmp_assign_source_498 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            assert(tmp_NullType$class_creation_1__metaclass == NULL);
            tmp_NullType$class_creation_1__metaclass = tmp_assign_source_498;
        }
        {
            bool tmp_condition_result_262;
            PyObject *tmp_expression_value_376;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_expression_value_376 = tmp_NullType$class_creation_1__metaclass;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_376, mod_consts[449]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_condition_result_262 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_262 != false) {
                goto branch_yes_179;
            } else {
                goto branch_no_179;
            }
        }
        branch_yes_179:;
        {
            PyObject *tmp_assign_source_499;
            PyObject *tmp_called_value_174;
            PyObject *tmp_expression_value_377;
            PyObject *tmp_args_value_118;
            PyObject *tmp_tuple_element_235;
            PyObject *tmp_kwargs_value_118;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_expression_value_377 = tmp_NullType$class_creation_1__metaclass;
            tmp_called_value_174 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_377, mod_consts[449]);
            if (tmp_called_value_174 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_tuple_element_235 = mod_consts[9];
            tmp_args_value_118 = MAKE_TUPLE_EMPTY(2);
            PyTuple_SET_ITEM0(tmp_args_value_118, 0, tmp_tuple_element_235);
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_tuple_element_235 = tmp_NullType$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_118, 1, tmp_tuple_element_235);
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_kwargs_value_118 = tmp_NullType$class_creation_1__class_decl_dict;
            frame_9da7d3048fabb152669b327b244fe974_56->m_frame.f_lineno = 3272;
            tmp_assign_source_499 = CALL_FUNCTION(tstate, tmp_called_value_174, tmp_args_value_118, tmp_kwargs_value_118);
            Py_DECREF(tmp_called_value_174);
            Py_DECREF(tmp_args_value_118);
            if (tmp_assign_source_499 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            assert(tmp_NullType$class_creation_1__prepared == NULL);
            tmp_NullType$class_creation_1__prepared = tmp_assign_source_499;
        }
        {
            bool tmp_condition_result_263;
            PyObject *tmp_operand_value_60;
            PyObject *tmp_expression_value_378;
            CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
            tmp_expression_value_378 = tmp_NullType$class_creation_1__prepared;
            tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_378, mod_consts[451]);
            if (tmp_res == -1) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_operand_value_60 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_60);
            assert(!(tmp_res == -1));
            tmp_condition_result_263 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_263 != false) {
                goto branch_yes_180;
            } else {
                goto branch_no_180;
            }
        }
        branch_yes_180:;
        {
            PyObject *tmp_raise_type_60;
            PyObject *tmp_raise_value_60;
            PyObject *tmp_mod_expr_left_60;
            PyObject *tmp_mod_expr_right_60;
            PyObject *tmp_tuple_element_236;
            PyObject *tmp_expression_value_379;
            PyObject *tmp_name_value_93;
            PyObject *tmp_default_value_60;
            tmp_raise_type_60 = PyExc_TypeError;
            tmp_mod_expr_left_60 = mod_consts[452];
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_expression_value_379 = tmp_NullType$class_creation_1__metaclass;
            tmp_name_value_93 = mod_consts[201];
            tmp_default_value_60 = mod_consts[453];
            tmp_tuple_element_236 = BUILTIN_GETATTR(tstate, tmp_expression_value_379, tmp_name_value_93, tmp_default_value_60);
            if (tmp_tuple_element_236 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            tmp_mod_expr_right_60 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_380;
                PyObject *tmp_type_arg_120;
                PyTuple_SET_ITEM(tmp_mod_expr_right_60, 0, tmp_tuple_element_236);
                CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
                tmp_type_arg_120 = tmp_NullType$class_creation_1__prepared;
                tmp_expression_value_380 = BUILTIN_TYPE1(tmp_type_arg_120);
                assert(!(tmp_expression_value_380 == NULL));
                tmp_tuple_element_236 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_380, mod_consts[201]);
                Py_DECREF(tmp_expression_value_380);
                if (tmp_tuple_element_236 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3272;
                    type_description_2 = "o";
                    goto tuple_build_exception_74;
                }
                PyTuple_SET_ITEM(tmp_mod_expr_right_60, 1, tmp_tuple_element_236);
            }
            goto tuple_build_noexception_74;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_74:;
            Py_DECREF(tmp_mod_expr_right_60);
            goto try_except_handler_178;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_74:;
            tmp_raise_value_60 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_60, tmp_mod_expr_right_60);
            Py_DECREF(tmp_mod_expr_right_60);
            if (tmp_raise_value_60 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_178;
            }
            exception_type = tmp_raise_type_60;
            Py_INCREF(tmp_raise_type_60);
            exception_value = tmp_raise_value_60;
            exception_lineno = 3272;
            RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_178;
        }
        branch_no_180:;
        goto branch_end_179;
        branch_no_179:;
        {
            PyObject *tmp_assign_source_500;
            tmp_assign_source_500 = MAKE_DICT_EMPTY();
            assert(tmp_NullType$class_creation_1__prepared == NULL);
            tmp_NullType$class_creation_1__prepared = tmp_assign_source_500;
        }
        branch_end_179:;
        {
            PyObject *tmp_set_locals_60;
            CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
            tmp_set_locals_60 = tmp_NullType$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272 = tmp_set_locals_60;
            Py_INCREF(tmp_set_locals_60);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3272;
            type_description_2 = "o";
            goto try_except_handler_180;
        }
        tmp_dictset_value = mod_consts[761];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3272;
            type_description_2 = "o";
            goto try_except_handler_180;
        }
        frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57 = MAKE_CLASS_FRAME(tstate, codeobj_42fa80d98bcdd6e31d1d8dfb0e674a65, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57);
        assert(Py_REFCNT(frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57) == 2);

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__143__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3273;
            type_description_3 = "o";
            goto frame_exception_exit_57;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_55;
        frame_exception_exit_57:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57,
            type_description_3,
            outline_59_var___class__
        );



        assertFrameObject(frame_42fa80d98bcdd6e31d1d8dfb0e674a65_57);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_56;
        frame_no_exception_55:;
        goto skip_nested_handling_55;
        nested_frame_exit_56:;
        type_description_2 = "o";
        goto try_except_handler_180;
        skip_nested_handling_55:;
        {
            nuitka_bool tmp_condition_result_264;
            PyObject *tmp_cmp_expr_left_59;
            PyObject *tmp_cmp_expr_right_59;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_cmp_expr_left_59 = tmp_NullType$class_creation_1__bases;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
            tmp_cmp_expr_right_59 = tmp_NullType$class_creation_1__bases_orig;
            tmp_condition_result_264 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_59, tmp_cmp_expr_right_59);
            if (tmp_condition_result_264 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_180;
            }
            if (tmp_condition_result_264 == NUITKA_BOOL_TRUE) {
                goto branch_yes_181;
            } else {
                goto branch_no_181;
            }
        }
        branch_yes_181:;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_NullType$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3272;
            type_description_2 = "o";
            goto try_except_handler_180;
        }
        branch_no_181:;
        {
            PyObject *tmp_assign_source_501;
            PyObject *tmp_called_value_175;
            PyObject *tmp_args_value_119;
            PyObject *tmp_tuple_element_237;
            PyObject *tmp_kwargs_value_119;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_called_value_175 = tmp_NullType$class_creation_1__metaclass;
            tmp_tuple_element_237 = mod_consts[9];
            tmp_args_value_119 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_119, 0, tmp_tuple_element_237);
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_tuple_element_237 = tmp_NullType$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_119, 1, tmp_tuple_element_237);
            tmp_tuple_element_237 = locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272;
            PyTuple_SET_ITEM0(tmp_args_value_119, 2, tmp_tuple_element_237);
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_kwargs_value_119 = tmp_NullType$class_creation_1__class_decl_dict;
            frame_9da7d3048fabb152669b327b244fe974_56->m_frame.f_lineno = 3272;
            tmp_assign_source_501 = CALL_FUNCTION(tstate, tmp_called_value_175, tmp_args_value_119, tmp_kwargs_value_119);
            Py_DECREF(tmp_args_value_119);
            if (tmp_assign_source_501 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3272;
                type_description_2 = "o";
                goto try_except_handler_180;
            }
            assert(outline_59_var___class__ == NULL);
            outline_59_var___class__ = tmp_assign_source_501;
        }
        CHECK_OBJECT(outline_59_var___class__);
        tmp_dictset_value = outline_59_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_180;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_180:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272);
        locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272 = NULL;
        goto try_return_handler_179;
        // Exception handler code:
        try_except_handler_180:;
        exception_keeper_type_175 = exception_type;
        exception_keeper_value_175 = exception_value;
        exception_keeper_tb_175 = exception_tb;
        exception_keeper_lineno_175 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272);
        locals_sqlalchemy$sql$sqltypes$$$class__60_Comparator_3272 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;
        exception_lineno = exception_keeper_lineno_175;

        goto try_except_handler_179;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_179:;
        CHECK_OBJECT(outline_59_var___class__);
        Py_DECREF(outline_59_var___class__);
        outline_59_var___class__ = NULL;
        goto outline_result_60;
        // Exception handler code:
        try_except_handler_179:;
        exception_keeper_type_176 = exception_type;
        exception_keeper_value_176 = exception_value;
        exception_keeper_tb_176 = exception_tb;
        exception_keeper_lineno_176 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_176;
        exception_value = exception_keeper_value_176;
        exception_tb = exception_keeper_tb_176;
        exception_lineno = exception_keeper_lineno_176;

        goto outline_exception_60;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_60:;
        exception_lineno = 3272;
        goto try_except_handler_178;
        outline_result_60:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3272;
            type_description_2 = "o";
            goto try_except_handler_178;
        }
        goto try_end_59;
        // Exception handler code:
        try_except_handler_178:;
        exception_keeper_type_177 = exception_type;
        exception_keeper_value_177 = exception_value;
        exception_keeper_tb_177 = exception_tb;
        exception_keeper_lineno_177 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_NullType$class_creation_1__bases_orig);
        tmp_NullType$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__bases);
        tmp_NullType$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__class_decl_dict);
        tmp_NullType$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__metaclass);
        tmp_NullType$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__prepared);
        tmp_NullType$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_177;
        exception_value = exception_keeper_value_177;
        exception_tb = exception_keeper_tb_177;
        exception_lineno = exception_keeper_lineno_177;

        goto frame_exception_exit_56;
        // End of try:
        try_end_59:;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
        Py_DECREF(tmp_NullType$class_creation_1__bases_orig);
        tmp_NullType$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
        Py_DECREF(tmp_NullType$class_creation_1__bases);
        tmp_NullType$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_NullType$class_creation_1__class_decl_dict);
        tmp_NullType$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
        Py_DECREF(tmp_NullType$class_creation_1__metaclass);
        tmp_NullType$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
        Py_DECREF(tmp_NullType$class_creation_1__prepared);
        tmp_NullType$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate))) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(tstate, &exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(tstate, exception_value);

            exception_lineno = 3281;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }

        if (tmp_dictset_value == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3281;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[464], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3281;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_56;
        frame_exception_exit_56:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9da7d3048fabb152669b327b244fe974_56, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9da7d3048fabb152669b327b244fe974_56->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9da7d3048fabb152669b327b244fe974_56, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9da7d3048fabb152669b327b244fe974_56,
            type_description_2,
            outline_58_var___class__
        );



        assertFrameObject(frame_9da7d3048fabb152669b327b244fe974_56);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_55;
        frame_no_exception_56:;
        goto skip_nested_handling_56;
        nested_frame_exit_55:;

        goto try_except_handler_177;
        skip_nested_handling_56:;
        {
            nuitka_bool tmp_condition_result_265;
            PyObject *tmp_cmp_expr_left_60;
            PyObject *tmp_cmp_expr_right_60;
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_cmp_expr_left_60 = tmp_class_creation_48__bases;
            CHECK_OBJECT(tmp_class_creation_48__bases_orig);
            tmp_cmp_expr_right_60 = tmp_class_creation_48__bases_orig;
            tmp_condition_result_265 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_60, tmp_cmp_expr_right_60);
            if (tmp_condition_result_265 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3238;

                goto try_except_handler_177;
            }
            if (tmp_condition_result_265 == NUITKA_BOOL_TRUE) {
                goto branch_yes_182;
            } else {
                goto branch_no_182;
            }
        }
        branch_yes_182:;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dictset_value = tmp_class_creation_48__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3238;

            goto try_except_handler_177;
        }
        branch_no_182:;
        {
            PyObject *tmp_assign_source_502;
            PyObject *tmp_called_value_176;
            PyObject *tmp_args_value_120;
            PyObject *tmp_tuple_element_238;
            PyObject *tmp_kwargs_value_120;
            CHECK_OBJECT(tmp_class_creation_48__metaclass);
            tmp_called_value_176 = tmp_class_creation_48__metaclass;
            tmp_tuple_element_238 = mod_consts[10];
            tmp_args_value_120 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_120, 0, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_tuple_element_238 = tmp_class_creation_48__bases;
            PyTuple_SET_ITEM0(tmp_args_value_120, 1, tmp_tuple_element_238);
            tmp_tuple_element_238 = locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238;
            PyTuple_SET_ITEM0(tmp_args_value_120, 2, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
            tmp_kwargs_value_120 = tmp_class_creation_48__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3238;
            tmp_assign_source_502 = CALL_FUNCTION(tstate, tmp_called_value_176, tmp_args_value_120, tmp_kwargs_value_120);
            Py_DECREF(tmp_args_value_120);
            if (tmp_assign_source_502 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3238;

                goto try_except_handler_177;
            }
            assert(outline_58_var___class__ == NULL);
            outline_58_var___class__ = tmp_assign_source_502;
        }
        CHECK_OBJECT(outline_58_var___class__);
        tmp_assign_source_494 = outline_58_var___class__;
        Py_INCREF(tmp_assign_source_494);
        goto try_return_handler_177;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_177:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238);
        locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238 = NULL;
        goto try_return_handler_176;
        // Exception handler code:
        try_except_handler_177:;
        exception_keeper_type_178 = exception_type;
        exception_keeper_value_178 = exception_value;
        exception_keeper_tb_178 = exception_tb;
        exception_keeper_lineno_178 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238);
        locals_sqlalchemy$sql$sqltypes$$$class__59_NullType_3238 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_178;
        exception_value = exception_keeper_value_178;
        exception_tb = exception_keeper_tb_178;
        exception_lineno = exception_keeper_lineno_178;

        goto try_except_handler_176;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_176:;
        CHECK_OBJECT(outline_58_var___class__);
        Py_DECREF(outline_58_var___class__);
        outline_58_var___class__ = NULL;
        goto outline_result_59;
        // Exception handler code:
        try_except_handler_176:;
        exception_keeper_type_179 = exception_type;
        exception_keeper_value_179 = exception_value;
        exception_keeper_tb_179 = exception_tb;
        exception_keeper_lineno_179 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_179;
        exception_value = exception_keeper_value_179;
        exception_tb = exception_keeper_tb_179;
        exception_lineno = exception_keeper_lineno_179;

        goto outline_exception_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_59:;
        exception_lineno = 3238;
        goto try_except_handler_175;
        outline_result_59:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10], tmp_assign_source_494);
    }
    goto try_end_60;
    // Exception handler code:
    try_except_handler_175:;
    exception_keeper_type_180 = exception_type;
    exception_keeper_value_180 = exception_value;
    exception_keeper_tb_180 = exception_tb;
    exception_keeper_lineno_180 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    Py_XDECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_180;
    exception_value = exception_keeper_value_180;
    exception_tb = exception_keeper_tb_180;
    exception_lineno = exception_keeper_lineno_180;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    CHECK_OBJECT(tmp_class_creation_48__bases_orig);
    Py_DECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_48__bases);
    Py_DECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    Py_DECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_48__metaclass);
    Py_DECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_48__prepared);
    Py_DECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_503;
        PyObject *tmp_tuple_element_239;
        tmp_tuple_element_239 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[425]);

        if (unlikely(tmp_tuple_element_239 == NULL)) {
            tmp_tuple_element_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[425]);
        }

        if (tmp_tuple_element_239 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_assign_source_503 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_assign_source_503, 0, tmp_tuple_element_239);
        tmp_tuple_element_239 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_tuple_element_239 == NULL)) {
            tmp_tuple_element_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_tuple_element_239 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto tuple_build_exception_75;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_503, 1, tmp_tuple_element_239);
        goto tuple_build_noexception_75;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_75:;
        Py_DECREF(tmp_assign_source_503);
        goto try_except_handler_181;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_75:;
        assert(tmp_class_creation_49__bases_orig == NULL);
        tmp_class_creation_49__bases_orig = tmp_assign_source_503;
    }
    {
        PyObject *tmp_assign_source_504;
        PyObject *tmp_dircall_arg1_61;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dircall_arg1_61 = tmp_class_creation_49__bases_orig;
        Py_INCREF(tmp_dircall_arg1_61);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_61};
            tmp_assign_source_504 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_504 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_49__bases == NULL);
        tmp_class_creation_49__bases = tmp_assign_source_504;
    }
    {
        PyObject *tmp_assign_source_505;
        tmp_assign_source_505 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_49__class_decl_dict == NULL);
        tmp_class_creation_49__class_decl_dict = tmp_assign_source_505;
    }
    {
        PyObject *tmp_assign_source_506;
        PyObject *tmp_metaclass_value_61;
        nuitka_bool tmp_condition_result_266;
        int tmp_truth_name_63;
        PyObject *tmp_type_arg_121;
        PyObject *tmp_expression_value_381;
        PyObject *tmp_subscript_value_61;
        PyObject *tmp_bases_value_61;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_truth_name_63 = CHECK_IF_TRUE(tmp_class_creation_49__bases);
        if (tmp_truth_name_63 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_condition_result_266 = tmp_truth_name_63 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_266 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_84;
        } else {
            goto condexpr_false_84;
        }
        condexpr_true_84:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_expression_value_381 = tmp_class_creation_49__bases;
        tmp_subscript_value_61 = mod_consts[52];
        tmp_type_arg_121 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_381, tmp_subscript_value_61, 0);
        if (tmp_type_arg_121 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_metaclass_value_61 = BUILTIN_TYPE1(tmp_type_arg_121);
        Py_DECREF(tmp_type_arg_121);
        if (tmp_metaclass_value_61 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        goto condexpr_end_84;
        condexpr_false_84:;
        tmp_metaclass_value_61 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_61);
        condexpr_end_84:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_bases_value_61 = tmp_class_creation_49__bases;
        tmp_assign_source_506 = SELECT_METACLASS(tstate, tmp_metaclass_value_61, tmp_bases_value_61);
        Py_DECREF(tmp_metaclass_value_61);
        if (tmp_assign_source_506 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_49__metaclass == NULL);
        tmp_class_creation_49__metaclass = tmp_assign_source_506;
    }
    {
        bool tmp_condition_result_267;
        PyObject *tmp_expression_value_382;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_382 = tmp_class_creation_49__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_382, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_condition_result_267 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_267 != false) {
            goto branch_yes_183;
        } else {
            goto branch_no_183;
        }
    }
    branch_yes_183:;
    {
        PyObject *tmp_assign_source_507;
        PyObject *tmp_called_value_177;
        PyObject *tmp_expression_value_383;
        PyObject *tmp_args_value_121;
        PyObject *tmp_tuple_element_240;
        PyObject *tmp_kwargs_value_121;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_383 = tmp_class_creation_49__metaclass;
        tmp_called_value_177 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_383, mod_consts[449]);
        if (tmp_called_value_177 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_tuple_element_240 = mod_consts[763];
        tmp_args_value_121 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_121, 0, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_tuple_element_240 = tmp_class_creation_49__bases;
        PyTuple_SET_ITEM0(tmp_args_value_121, 1, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_kwargs_value_121 = tmp_class_creation_49__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3284;
        tmp_assign_source_507 = CALL_FUNCTION(tstate, tmp_called_value_177, tmp_args_value_121, tmp_kwargs_value_121);
        Py_DECREF(tmp_called_value_177);
        Py_DECREF(tmp_args_value_121);
        if (tmp_assign_source_507 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_507;
    }
    {
        bool tmp_condition_result_268;
        PyObject *tmp_operand_value_61;
        PyObject *tmp_expression_value_384;
        CHECK_OBJECT(tmp_class_creation_49__prepared);
        tmp_expression_value_384 = tmp_class_creation_49__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_384, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_operand_value_61 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_61);
        assert(!(tmp_res == -1));
        tmp_condition_result_268 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_268 != false) {
            goto branch_yes_184;
        } else {
            goto branch_no_184;
        }
    }
    branch_yes_184:;
    {
        PyObject *tmp_raise_type_61;
        PyObject *tmp_raise_value_61;
        PyObject *tmp_mod_expr_left_61;
        PyObject *tmp_mod_expr_right_61;
        PyObject *tmp_tuple_element_241;
        PyObject *tmp_expression_value_385;
        PyObject *tmp_name_value_94;
        PyObject *tmp_default_value_61;
        tmp_raise_type_61 = PyExc_TypeError;
        tmp_mod_expr_left_61 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_385 = tmp_class_creation_49__metaclass;
        tmp_name_value_94 = mod_consts[201];
        tmp_default_value_61 = mod_consts[453];
        tmp_tuple_element_241 = BUILTIN_GETATTR(tstate, tmp_expression_value_385, tmp_name_value_94, tmp_default_value_61);
        if (tmp_tuple_element_241 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        tmp_mod_expr_right_61 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_386;
            PyObject *tmp_type_arg_122;
            PyTuple_SET_ITEM(tmp_mod_expr_right_61, 0, tmp_tuple_element_241);
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_type_arg_122 = tmp_class_creation_49__prepared;
            tmp_expression_value_386 = BUILTIN_TYPE1(tmp_type_arg_122);
            assert(!(tmp_expression_value_386 == NULL));
            tmp_tuple_element_241 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_386, mod_consts[201]);
            Py_DECREF(tmp_expression_value_386);
            if (tmp_tuple_element_241 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3284;

                goto tuple_build_exception_76;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_61, 1, tmp_tuple_element_241);
        }
        goto tuple_build_noexception_76;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_76:;
        Py_DECREF(tmp_mod_expr_right_61);
        goto try_except_handler_181;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_76:;
        tmp_raise_value_61 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_61, tmp_mod_expr_right_61);
        Py_DECREF(tmp_mod_expr_right_61);
        if (tmp_raise_value_61 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_181;
        }
        exception_type = tmp_raise_type_61;
        Py_INCREF(tmp_raise_type_61);
        exception_value = tmp_raise_value_61;
        exception_lineno = 3284;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_181;
    }
    branch_no_184:;
    goto branch_end_183;
    branch_no_183:;
    {
        PyObject *tmp_assign_source_508;
        tmp_assign_source_508 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_508;
    }
    branch_end_183:;
    {
        PyObject *tmp_assign_source_509;
        {
            PyObject *tmp_set_locals_61;
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_set_locals_61 = tmp_class_creation_49__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284 = tmp_set_locals_61;
            Py_INCREF(tmp_set_locals_61);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_183;
        }
        tmp_dictset_value = mod_consts[764];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_183;
        }
        tmp_dictset_value = mod_consts[763];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_183;
        }
        frame_d446368a098e659ab1ad32b845c5299e_58 = MAKE_CLASS_FRAME(tstate, codeobj_d446368a098e659ab1ad32b845c5299e, module_sqlalchemy$sql$sqltypes, NULL, sizeof(void *));

        // Push the new frame as the currently active one, and we should be exclusively
        // owning it.
        pushFrameStackCompiledFrame(tstate, frame_d446368a098e659ab1ad32b845c5299e_58);
        assert(Py_REFCNT(frame_d446368a098e659ab1ad32b845c5299e_58) == 2);

        // Framed code:
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[765], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3287;
            type_description_2 = "o";
            goto frame_exception_exit_58;
        }
        {
            PyObject *tmp_list_element_1;
            PyObject *tmp_tuple_element_242;
            tmp_tuple_element_242 = mod_consts[393];
            tmp_list_element_1 = MAKE_TUPLE_EMPTY(2);
            {
                PyObject *tmp_expression_value_387;
                PyTuple_SET_ITEM0(tmp_list_element_1, 0, tmp_tuple_element_242);
                tmp_expression_value_387 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[427]);

                if (tmp_expression_value_387 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED(tstate)) {
                        tmp_expression_value_387 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[427]);

                        if (unlikely(tmp_expression_value_387 == NULL)) {
                            tmp_expression_value_387 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[427]);
                        }

                        if (tmp_expression_value_387 == NULL) {
                            assert(HAS_ERROR_OCCURRED(tstate));

                            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3290;
                            type_description_2 = "o";
                            goto tuple_build_exception_77;
                        }
                        Py_INCREF(tmp_expression_value_387);
                    } else {
                        goto tuple_build_exception_77;
                    }
                }

                tmp_tuple_element_242 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_387, mod_consts[766]);
                Py_DECREF(tmp_expression_value_387);
                if (tmp_tuple_element_242 == NULL) {
                    assert(HAS_ERROR_OCCURRED(tstate));

                    FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3290;
                    type_description_2 = "o";
                    goto tuple_build_exception_77;
                }
                PyTuple_SET_ITEM(tmp_list_element_1, 1, tmp_tuple_element_242);
            }
            goto tuple_build_noexception_77;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_77:;
            Py_DECREF(tmp_list_element_1);
            goto frame_exception_exit_58;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_77:;
            tmp_dictset_value = MAKE_LIST_EMPTY(1);
            PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_1);
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[767], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3289;
                type_description_2 = "o";
                goto frame_exception_exit_58;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__144___init__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[70], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3293;
            type_description_2 = "o";
            goto frame_exception_exit_58;
        }


        // Put the previous frame back on top.
        popFrameStack(tstate);

        goto frame_no_exception_57;
        frame_exception_exit_58:


        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d446368a098e659ab1ad32b845c5299e_58, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d446368a098e659ab1ad32b845c5299e_58->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d446368a098e659ab1ad32b845c5299e_58, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d446368a098e659ab1ad32b845c5299e_58,
            type_description_2,
            outline_60_var___class__
        );



        assertFrameObject(frame_d446368a098e659ab1ad32b845c5299e_58);

        // Put the previous frame back on top.
        popFrameStack(tstate);

        // Return the error.
        goto nested_frame_exit_57;
        frame_no_exception_57:;
        goto skip_nested_handling_57;
        nested_frame_exit_57:;

        goto try_except_handler_183;
        skip_nested_handling_57:;
        {
            nuitka_bool tmp_condition_result_269;
            PyObject *tmp_cmp_expr_left_61;
            PyObject *tmp_cmp_expr_right_61;
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_cmp_expr_left_61 = tmp_class_creation_49__bases;
            CHECK_OBJECT(tmp_class_creation_49__bases_orig);
            tmp_cmp_expr_right_61 = tmp_class_creation_49__bases_orig;
            tmp_condition_result_269 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_61, tmp_cmp_expr_right_61);
            if (tmp_condition_result_269 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3284;

                goto try_except_handler_183;
            }
            if (tmp_condition_result_269 == NUITKA_BOOL_TRUE) {
                goto branch_yes_185;
            } else {
                goto branch_no_185;
            }
        }
        branch_yes_185:;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dictset_value = tmp_class_creation_49__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3284;

            goto try_except_handler_183;
        }
        branch_no_185:;
        {
            PyObject *tmp_assign_source_510;
            PyObject *tmp_called_value_178;
            PyObject *tmp_args_value_122;
            PyObject *tmp_tuple_element_243;
            PyObject *tmp_kwargs_value_122;
            CHECK_OBJECT(tmp_class_creation_49__metaclass);
            tmp_called_value_178 = tmp_class_creation_49__metaclass;
            tmp_tuple_element_243 = mod_consts[763];
            tmp_args_value_122 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_122, 0, tmp_tuple_element_243);
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_tuple_element_243 = tmp_class_creation_49__bases;
            PyTuple_SET_ITEM0(tmp_args_value_122, 1, tmp_tuple_element_243);
            tmp_tuple_element_243 = locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284;
            PyTuple_SET_ITEM0(tmp_args_value_122, 2, tmp_tuple_element_243);
            CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
            tmp_kwargs_value_122 = tmp_class_creation_49__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3284;
            tmp_assign_source_510 = CALL_FUNCTION(tstate, tmp_called_value_178, tmp_args_value_122, tmp_kwargs_value_122);
            Py_DECREF(tmp_args_value_122);
            if (tmp_assign_source_510 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3284;

                goto try_except_handler_183;
            }
            assert(outline_60_var___class__ == NULL);
            outline_60_var___class__ = tmp_assign_source_510;
        }
        CHECK_OBJECT(outline_60_var___class__);
        tmp_assign_source_509 = outline_60_var___class__;
        Py_INCREF(tmp_assign_source_509);
        goto try_return_handler_183;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_183:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284);
        locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284 = NULL;
        goto try_return_handler_182;
        // Exception handler code:
        try_except_handler_183:;
        exception_keeper_type_181 = exception_type;
        exception_keeper_value_181 = exception_value;
        exception_keeper_tb_181 = exception_tb;
        exception_keeper_lineno_181 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284);
        locals_sqlalchemy$sql$sqltypes$$$class__61_TableValueType_3284 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_181;
        exception_value = exception_keeper_value_181;
        exception_tb = exception_keeper_tb_181;
        exception_lineno = exception_keeper_lineno_181;

        goto try_except_handler_182;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_182:;
        CHECK_OBJECT(outline_60_var___class__);
        Py_DECREF(outline_60_var___class__);
        outline_60_var___class__ = NULL;
        goto outline_result_61;
        // Exception handler code:
        try_except_handler_182:;
        exception_keeper_type_182 = exception_type;
        exception_keeper_value_182 = exception_value;
        exception_keeper_tb_182 = exception_tb;
        exception_keeper_lineno_182 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_182;
        exception_value = exception_keeper_value_182;
        exception_tb = exception_keeper_tb_182;
        exception_lineno = exception_keeper_lineno_182;

        goto outline_exception_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_61:;
        exception_lineno = 3284;
        goto try_except_handler_181;
        outline_result_61:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[763], tmp_assign_source_509);
    }
    goto try_end_61;
    // Exception handler code:
    try_except_handler_181:;
    exception_keeper_type_183 = exception_type;
    exception_keeper_value_183 = exception_value;
    exception_keeper_tb_183 = exception_tb;
    exception_keeper_lineno_183 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    Py_XDECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_183;
    exception_value = exception_keeper_value_183;
    exception_tb = exception_keeper_tb_183;
    exception_lineno = exception_keeper_lineno_183;

    goto frame_exception_exit_1;
    // End of try:
    try_end_61:;
    CHECK_OBJECT(tmp_class_creation_49__bases_orig);
    Py_DECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_49__bases);
    Py_DECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    Py_DECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_49__metaclass);
    Py_DECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_49__prepared);
    Py_DECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_511;
        PyObject *tmp_tuple_element_244;
        tmp_tuple_element_244 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[322]);

        if (unlikely(tmp_tuple_element_244 == NULL)) {
            tmp_tuple_element_244 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[322]);
        }

        if (tmp_tuple_element_244 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_assign_source_511 = MAKE_TUPLE_EMPTY(1);
        PyTuple_SET_ITEM0(tmp_assign_source_511, 0, tmp_tuple_element_244);
        assert(tmp_class_creation_50__bases_orig == NULL);
        tmp_class_creation_50__bases_orig = tmp_assign_source_511;
    }
    {
        PyObject *tmp_assign_source_512;
        PyObject *tmp_dircall_arg1_62;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dircall_arg1_62 = tmp_class_creation_50__bases_orig;
        Py_INCREF(tmp_dircall_arg1_62);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_62};
            tmp_assign_source_512 = impl___main__$$$function__1__mro_entries_conversion(tstate, dir_call_args);
        }
        if (tmp_assign_source_512 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_50__bases == NULL);
        tmp_class_creation_50__bases = tmp_assign_source_512;
    }
    {
        PyObject *tmp_assign_source_513;
        tmp_assign_source_513 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_50__class_decl_dict == NULL);
        tmp_class_creation_50__class_decl_dict = tmp_assign_source_513;
    }
    {
        PyObject *tmp_assign_source_514;
        PyObject *tmp_metaclass_value_62;
        nuitka_bool tmp_condition_result_270;
        int tmp_truth_name_64;
        PyObject *tmp_type_arg_123;
        PyObject *tmp_expression_value_388;
        PyObject *tmp_subscript_value_62;
        PyObject *tmp_bases_value_62;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_truth_name_64 = CHECK_IF_TRUE(tmp_class_creation_50__bases);
        if (tmp_truth_name_64 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_condition_result_270 = tmp_truth_name_64 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_270 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_85;
        } else {
            goto condexpr_false_85;
        }
        condexpr_true_85:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_expression_value_388 = tmp_class_creation_50__bases;
        tmp_subscript_value_62 = mod_consts[52];
        tmp_type_arg_123 = LOOKUP_SUBSCRIPT_CONST(tstate, tmp_expression_value_388, tmp_subscript_value_62, 0);
        if (tmp_type_arg_123 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_metaclass_value_62 = BUILTIN_TYPE1(tmp_type_arg_123);
        Py_DECREF(tmp_type_arg_123);
        if (tmp_metaclass_value_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        goto condexpr_end_85;
        condexpr_false_85:;
        tmp_metaclass_value_62 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_62);
        condexpr_end_85:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_bases_value_62 = tmp_class_creation_50__bases;
        tmp_assign_source_514 = SELECT_METACLASS(tstate, tmp_metaclass_value_62, tmp_bases_value_62);
        Py_DECREF(tmp_metaclass_value_62);
        if (tmp_assign_source_514 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_50__metaclass == NULL);
        tmp_class_creation_50__metaclass = tmp_assign_source_514;
    }
    {
        bool tmp_condition_result_271;
        PyObject *tmp_expression_value_389;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_389 = tmp_class_creation_50__metaclass;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_389, mod_consts[449]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_condition_result_271 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_271 != false) {
            goto branch_yes_186;
        } else {
            goto branch_no_186;
        }
    }
    branch_yes_186:;
    {
        PyObject *tmp_assign_source_515;
        PyObject *tmp_called_value_179;
        PyObject *tmp_expression_value_390;
        PyObject *tmp_args_value_123;
        PyObject *tmp_tuple_element_245;
        PyObject *tmp_kwargs_value_123;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_390 = tmp_class_creation_50__metaclass;
        tmp_called_value_179 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_390, mod_consts[449]);
        if (tmp_called_value_179 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_tuple_element_245 = mod_consts[769];
        tmp_args_value_123 = MAKE_TUPLE_EMPTY(2);
        PyTuple_SET_ITEM0(tmp_args_value_123, 0, tmp_tuple_element_245);
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_tuple_element_245 = tmp_class_creation_50__bases;
        PyTuple_SET_ITEM0(tmp_args_value_123, 1, tmp_tuple_element_245);
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_kwargs_value_123 = tmp_class_creation_50__class_decl_dict;
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3300;
        tmp_assign_source_515 = CALL_FUNCTION(tstate, tmp_called_value_179, tmp_args_value_123, tmp_kwargs_value_123);
        Py_DECREF(tmp_called_value_179);
        Py_DECREF(tmp_args_value_123);
        if (tmp_assign_source_515 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_515;
    }
    {
        bool tmp_condition_result_272;
        PyObject *tmp_operand_value_62;
        PyObject *tmp_expression_value_391;
        CHECK_OBJECT(tmp_class_creation_50__prepared);
        tmp_expression_value_391 = tmp_class_creation_50__prepared;
        tmp_res = HAS_ATTR_BOOL2(tstate, tmp_expression_value_391, mod_consts[451]);
        if (tmp_res == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_operand_value_62 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_62);
        assert(!(tmp_res == -1));
        tmp_condition_result_272 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_272 != false) {
            goto branch_yes_187;
        } else {
            goto branch_no_187;
        }
    }
    branch_yes_187:;
    {
        PyObject *tmp_raise_type_62;
        PyObject *tmp_raise_value_62;
        PyObject *tmp_mod_expr_left_62;
        PyObject *tmp_mod_expr_right_62;
        PyObject *tmp_tuple_element_246;
        PyObject *tmp_expression_value_392;
        PyObject *tmp_name_value_95;
        PyObject *tmp_default_value_62;
        tmp_raise_type_62 = PyExc_TypeError;
        tmp_mod_expr_left_62 = mod_consts[452];
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_392 = tmp_class_creation_50__metaclass;
        tmp_name_value_95 = mod_consts[201];
        tmp_default_value_62 = mod_consts[453];
        tmp_tuple_element_246 = BUILTIN_GETATTR(tstate, tmp_expression_value_392, tmp_name_value_95, tmp_default_value_62);
        if (tmp_tuple_element_246 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        tmp_mod_expr_right_62 = MAKE_TUPLE_EMPTY(2);
        {
            PyObject *tmp_expression_value_393;
            PyObject *tmp_type_arg_124;
            PyTuple_SET_ITEM(tmp_mod_expr_right_62, 0, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_type_arg_124 = tmp_class_creation_50__prepared;
            tmp_expression_value_393 = BUILTIN_TYPE1(tmp_type_arg_124);
            assert(!(tmp_expression_value_393 == NULL));
            tmp_tuple_element_246 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_393, mod_consts[201]);
            Py_DECREF(tmp_expression_value_393);
            if (tmp_tuple_element_246 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3300;

                goto tuple_build_exception_78;
            }
            PyTuple_SET_ITEM(tmp_mod_expr_right_62, 1, tmp_tuple_element_246);
        }
        goto tuple_build_noexception_78;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_78:;
        Py_DECREF(tmp_mod_expr_right_62);
        goto try_except_handler_184;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_78:;
        tmp_raise_value_62 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_mod_expr_left_62, tmp_mod_expr_right_62);
        Py_DECREF(tmp_mod_expr_right_62);
        if (tmp_raise_value_62 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_184;
        }
        exception_type = tmp_raise_type_62;
        Py_INCREF(tmp_raise_type_62);
        exception_value = tmp_raise_value_62;
        exception_lineno = 3300;
        RAISE_EXCEPTION_IMPLICIT(tstate, &exception_type, &exception_value, &exception_tb);

        goto try_except_handler_184;
    }
    branch_no_187:;
    goto branch_end_186;
    branch_no_186:;
    {
        PyObject *tmp_assign_source_516;
        tmp_assign_source_516 = MAKE_DICT_EMPTY();
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_516;
    }
    branch_end_186:;
    {
        PyObject *tmp_assign_source_517;
        {
            PyObject *tmp_set_locals_62;
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_set_locals_62 = tmp_class_creation_50__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300 = tmp_set_locals_62;
            Py_INCREF(tmp_set_locals_62);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300, mod_consts[455], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_186;
        }
        tmp_dictset_value = mod_consts[770];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300, mod_consts[401], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_186;
        }
        tmp_dictset_value = mod_consts[769];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300, mod_consts[457], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_186;
        }
        {
            nuitka_bool tmp_condition_result_273;
            PyObject *tmp_cmp_expr_left_62;
            PyObject *tmp_cmp_expr_right_62;
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_cmp_expr_left_62 = tmp_class_creation_50__bases;
            CHECK_OBJECT(tmp_class_creation_50__bases_orig);
            tmp_cmp_expr_right_62 = tmp_class_creation_50__bases_orig;
            tmp_condition_result_273 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_62, tmp_cmp_expr_right_62);
            if (tmp_condition_result_273 == NUITKA_BOOL_EXCEPTION) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3300;

                goto try_except_handler_186;
            }
            if (tmp_condition_result_273 == NUITKA_BOOL_TRUE) {
                goto branch_yes_188;
            } else {
                goto branch_no_188;
            }
        }
        branch_yes_188:;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dictset_value = tmp_class_creation_50__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300, mod_consts[463], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3300;

            goto try_except_handler_186;
        }
        branch_no_188:;
        {
            PyObject *tmp_assign_source_518;
            PyObject *tmp_called_value_180;
            PyObject *tmp_args_value_124;
            PyObject *tmp_tuple_element_247;
            PyObject *tmp_kwargs_value_124;
            CHECK_OBJECT(tmp_class_creation_50__metaclass);
            tmp_called_value_180 = tmp_class_creation_50__metaclass;
            tmp_tuple_element_247 = mod_consts[769];
            tmp_args_value_124 = MAKE_TUPLE_EMPTY(3);
            PyTuple_SET_ITEM0(tmp_args_value_124, 0, tmp_tuple_element_247);
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_tuple_element_247 = tmp_class_creation_50__bases;
            PyTuple_SET_ITEM0(tmp_args_value_124, 1, tmp_tuple_element_247);
            tmp_tuple_element_247 = locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300;
            PyTuple_SET_ITEM0(tmp_args_value_124, 2, tmp_tuple_element_247);
            CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
            tmp_kwargs_value_124 = tmp_class_creation_50__class_decl_dict;
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3300;
            tmp_assign_source_518 = CALL_FUNCTION(tstate, tmp_called_value_180, tmp_args_value_124, tmp_kwargs_value_124);
            Py_DECREF(tmp_args_value_124);
            if (tmp_assign_source_518 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3300;

                goto try_except_handler_186;
            }
            assert(outline_61_var___class__ == NULL);
            outline_61_var___class__ = tmp_assign_source_518;
        }
        CHECK_OBJECT(outline_61_var___class__);
        tmp_assign_source_517 = outline_61_var___class__;
        Py_INCREF(tmp_assign_source_517);
        goto try_return_handler_186;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_186:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300);
        locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300 = NULL;
        goto try_return_handler_185;
        // Exception handler code:
        try_except_handler_186:;
        exception_keeper_type_184 = exception_type;
        exception_keeper_value_184 = exception_value;
        exception_keeper_tb_184 = exception_tb;
        exception_keeper_lineno_184 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300);
        locals_sqlalchemy$sql$sqltypes$$$class__62_MatchType_3300 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_184;
        exception_value = exception_keeper_value_184;
        exception_tb = exception_keeper_tb_184;
        exception_lineno = exception_keeper_lineno_184;

        goto try_except_handler_185;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_185:;
        CHECK_OBJECT(outline_61_var___class__);
        Py_DECREF(outline_61_var___class__);
        outline_61_var___class__ = NULL;
        goto outline_result_62;
        // Exception handler code:
        try_except_handler_185:;
        exception_keeper_type_185 = exception_type;
        exception_keeper_value_185 = exception_value;
        exception_keeper_tb_185 = exception_tb;
        exception_keeper_lineno_185 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_185;
        exception_value = exception_keeper_value_185;
        exception_tb = exception_keeper_tb_185;
        exception_lineno = exception_keeper_lineno_185;

        goto outline_exception_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_62:;
        exception_lineno = 3300;
        goto try_except_handler_184;
        outline_result_62:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[769], tmp_assign_source_517);
    }
    goto try_end_62;
    // Exception handler code:
    try_except_handler_184:;
    exception_keeper_type_186 = exception_type;
    exception_keeper_value_186 = exception_value;
    exception_keeper_tb_186 = exception_tb;
    exception_keeper_lineno_186 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    Py_XDECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_186;
    exception_value = exception_keeper_value_186;
    exception_tb = exception_keeper_tb_186;
    exception_lineno = exception_keeper_lineno_186;

    goto frame_exception_exit_1;
    // End of try:
    try_end_62:;
    CHECK_OBJECT(tmp_class_creation_50__bases_orig);
    Py_DECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_50__bases);
    Py_DECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    Py_DECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_50__metaclass);
    Py_DECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_50__prepared);
    Py_DECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    {
        PyObject *tmp_assign_source_519;
        PyObject *tmp_called_value_181;
        tmp_called_value_181 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_called_value_181 == NULL)) {
            tmp_called_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[10]);
        }

        if (tmp_called_value_181 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3316;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3316;
        tmp_assign_source_519 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_181);
        if (tmp_assign_source_519 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3316;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381], tmp_assign_source_519);
    }
    {
        PyObject *tmp_assign_source_520;
        PyObject *tmp_called_value_182;
        tmp_called_value_182 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[322]);

        if (unlikely(tmp_called_value_182 == NULL)) {
            tmp_called_value_182 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[322]);
        }

        if (tmp_called_value_182 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3317;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3317;
        tmp_assign_source_520 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_182);
        if (tmp_assign_source_520 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3317;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[771], tmp_assign_source_520);
    }
    {
        PyObject *tmp_assign_source_521;
        PyObject *tmp_called_value_183;
        tmp_called_value_183 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_183 == NULL)) {
            tmp_called_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_183 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3318;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3318;
        tmp_assign_source_521 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_183);
        if (tmp_assign_source_521 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3318;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[772], tmp_assign_source_521);
    }
    {
        PyObject *tmp_assign_source_522;
        PyObject *tmp_called_value_184;
        tmp_called_value_184 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_called_value_184 == NULL)) {
            tmp_called_value_184 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_called_value_184 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3319;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3319;
        tmp_assign_source_522 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_184);
        if (tmp_assign_source_522 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3319;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[773], tmp_assign_source_522);
    }
    {
        PyObject *tmp_assign_source_523;
        PyObject *tmp_called_value_185;
        tmp_called_value_185 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_called_value_185 == NULL)) {
            tmp_called_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
        }

        if (tmp_called_value_185 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3320;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3320;
        tmp_assign_source_523 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_185);
        if (tmp_assign_source_523 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3320;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[774], tmp_assign_source_523);
    }
    {
        PyObject *tmp_assign_source_524;
        PyObject *tmp_called_value_186;
        tmp_called_value_186 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[769]);

        if (unlikely(tmp_called_value_186 == NULL)) {
            tmp_called_value_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[769]);
        }

        if (tmp_called_value_186 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3321;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3321;
        tmp_assign_source_524 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_186);
        if (tmp_assign_source_524 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3321;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[775], tmp_assign_source_524);
    }
    {
        PyObject *tmp_assign_source_525;
        PyObject *tmp_called_value_187;
        tmp_called_value_187 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[763]);

        if (unlikely(tmp_called_value_187 == NULL)) {
            tmp_called_value_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[763]);
        }

        if (tmp_called_value_187 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3322;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3322;
        tmp_assign_source_525 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_187);
        if (tmp_assign_source_525 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3322;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[776], tmp_assign_source_525);
    }
    {
        PyObject *tmp_assign_source_526;
        PyObject *tmp_called_value_188;
        tmp_called_value_188 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_called_value_188 == NULL)) {
            tmp_called_value_188 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
        }

        if (tmp_called_value_188 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3323;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3323;
        tmp_assign_source_526 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_188, &PyTuple_GET_ITEM(mod_consts[343], 0), mod_consts[388]);
        if (tmp_assign_source_526 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3323;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[106], tmp_assign_source_526);
    }
    {
        PyObject *tmp_assign_source_527;
        PyObject *tmp_called_value_189;
        tmp_called_value_189 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

        if (unlikely(tmp_called_value_189 == NULL)) {
            tmp_called_value_189 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
        }

        if (tmp_called_value_189 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3324;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3324;
        tmp_assign_source_527 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tstate, tmp_called_value_189, &PyTuple_GET_ITEM(mod_consts[343], 0), mod_consts[388]);
        if (tmp_assign_source_527 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3324;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[113], tmp_assign_source_527);
    }
    {
        PyObject *tmp_assign_source_528;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_called_value_190;
        tmp_dict_key_1 = (PyObject *)&PyLong_Type;
        tmp_called_value_190 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[77]);

        if (unlikely(tmp_called_value_190 == NULL)) {
            tmp_called_value_190 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[77]);
        }

        if (tmp_called_value_190 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3327;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3327;
        tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_190);
        if (tmp_dict_value_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3327;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_528 = _PyDict_NewPresized( 9 );
        {
            PyObject *tmp_called_value_191;
            PyObject *tmp_expression_value_394;
            PyObject *tmp_called_value_192;
            PyObject *tmp_expression_value_395;
            PyObject *tmp_called_value_193;
            PyObject *tmp_expression_value_396;
            PyObject *tmp_called_value_194;
            PyObject *tmp_expression_value_397;
            PyObject *tmp_called_value_195;
            PyObject *tmp_expression_value_398;
            PyObject *tmp_called_value_196;
            PyObject *tmp_expression_value_399;
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = (PyObject *)&PyFloat_Type;
            tmp_called_value_191 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[329]);

            if (unlikely(tmp_called_value_191 == NULL)) {
                tmp_called_value_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[329]);
            }

            if (tmp_called_value_191 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3328;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3328;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_191);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3328;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = (PyObject *)&PyBool_Type;
            tmp_dict_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[771]);

            if (unlikely(tmp_dict_value_1 == NULL)) {
                tmp_dict_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[771]);
            }

            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3329;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_expression_value_394 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[91]);

            if (unlikely(tmp_expression_value_394 == NULL)) {
                tmp_expression_value_394 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[91]);
            }

            if (tmp_expression_value_394 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3330;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_394, mod_consts[92]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3330;

                goto dict_build_exception_1;
            }
            tmp_called_value_192 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[78]);

            if (unlikely(tmp_called_value_192 == NULL)) {
                tmp_called_value_192 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[78]);
            }

            if (tmp_called_value_192 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3330;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3330;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_192);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3330;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3330;

                goto dict_build_exception_1;
            }
            tmp_expression_value_395 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

            if (unlikely(tmp_expression_value_395 == NULL)) {
                tmp_expression_value_395 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
            }

            if (tmp_expression_value_395 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3331;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_395, mod_consts[110]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3331;

                goto dict_build_exception_1;
            }
            tmp_called_value_193 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_called_value_193 == NULL)) {
                tmp_called_value_193 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[76]);
            }

            if (tmp_called_value_193 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3331;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3331;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_193);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3331;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3331;

                goto dict_build_exception_1;
            }
            tmp_expression_value_396 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

            if (unlikely(tmp_expression_value_396 == NULL)) {
                tmp_expression_value_396 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
            }

            if (tmp_expression_value_396 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3332;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_396, mod_consts[108]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3332;

                goto dict_build_exception_1;
            }
            tmp_called_value_194 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[109]);

            if (unlikely(tmp_called_value_194 == NULL)) {
                tmp_called_value_194 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[109]);
            }

            if (tmp_called_value_194 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3332;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3332;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_194);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3332;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3332;

                goto dict_build_exception_1;
            }
            tmp_expression_value_397 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

            if (unlikely(tmp_expression_value_397 == NULL)) {
                tmp_expression_value_397 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
            }

            if (tmp_expression_value_397 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3333;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_397, mod_consts[112]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3333;

                goto dict_build_exception_1;
            }
            tmp_called_value_195 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[111]);

            if (unlikely(tmp_called_value_195 == NULL)) {
                tmp_called_value_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[111]);
            }

            if (tmp_called_value_195 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3333;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3333;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_195);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3333;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3333;

                goto dict_build_exception_1;
            }
            tmp_expression_value_398 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[107]);

            if (unlikely(tmp_expression_value_398 == NULL)) {
                tmp_expression_value_398 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[107]);
            }

            if (tmp_expression_value_398 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3334;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_398, mod_consts[291]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3334;

                goto dict_build_exception_1;
            }
            tmp_called_value_196 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_called_value_196 == NULL)) {
                tmp_called_value_196 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[80]);
            }

            if (tmp_called_value_196 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3334;

                goto dict_build_exception_1;
            }
            frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3334;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_196);
            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3334;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3334;

                goto dict_build_exception_1;
            }
            tmp_expression_value_399 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

            if (unlikely(tmp_expression_value_399 == NULL)) {
                tmp_expression_value_399 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
            }

            if (tmp_expression_value_399 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3335;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_399, mod_consts[777]);
            if (tmp_dict_key_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3335;

                goto dict_build_exception_1;
            }
            tmp_dict_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381]);

            if (unlikely(tmp_dict_value_1 == NULL)) {
                tmp_dict_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[381]);
            }

            if (tmp_dict_value_1 == NULL) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3335;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_528, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(HAS_ERROR_OCCURRED(tstate));

                FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


                exception_lineno = 3335;

                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_assign_source_528);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778], tmp_assign_source_528);
    }
    {
        nuitka_bool tmp_condition_result_274;
        PyObject *tmp_expression_value_400;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_65;
        tmp_expression_value_400 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_400 == NULL)) {
            tmp_expression_value_400 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[43]);
        }

        if (tmp_expression_value_400 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3338;

            goto frame_exception_exit_1;
        }
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_400, mod_consts[779]);
        if (tmp_attribute_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3338;

            goto frame_exception_exit_1;
        }
        tmp_truth_name_65 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_65 == -1) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 3338;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_274 = tmp_truth_name_65 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        if (tmp_condition_result_274 == NUITKA_BOOL_TRUE) {
            goto branch_yes_189;
        } else {
            goto branch_no_189;
        }
    }
    branch_yes_189:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_value_197;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_called_value_197 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[563]);

        if (unlikely(tmp_called_value_197 == NULL)) {
            tmp_called_value_197 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[563]);
        }

        if (tmp_called_value_197 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3339;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3339;
        tmp_ass_subvalue_1 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_197);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3339;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778]);

        if (unlikely(tmp_ass_subscribed_1 == NULL)) {
            tmp_ass_subscribed_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[778]);
        }

        if (tmp_ass_subscribed_1 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 3339;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = (PyObject *)&PyBytes_Type;
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3339;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_called_value_198;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        tmp_called_value_198 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69]);

        if (unlikely(tmp_called_value_198 == NULL)) {
            tmp_called_value_198 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
        }

        if (tmp_called_value_198 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3340;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3340;
        tmp_ass_subvalue_2 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_198);
        if (tmp_ass_subvalue_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3340;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778]);

        if (unlikely(tmp_ass_subscribed_2 == NULL)) {
            tmp_ass_subscribed_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[778]);
        }

        if (tmp_ass_subscribed_2 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_2);

            exception_lineno = 3340;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = (PyObject *)&PyUnicode_Type;
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3340;

            goto frame_exception_exit_1;
        }
    }
    goto branch_end_189;
    branch_no_189:;
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_called_value_199;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        tmp_called_value_199 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[69]);

        if (unlikely(tmp_called_value_199 == NULL)) {
            tmp_called_value_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[69]);
        }

        if (tmp_called_value_199 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3342;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3342;
        tmp_ass_subvalue_3 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_199);
        if (tmp_ass_subvalue_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3342;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778]);

        if (unlikely(tmp_ass_subscribed_3 == NULL)) {
            tmp_ass_subscribed_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[778]);
        }

        if (tmp_ass_subscribed_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_3);

            exception_lineno = 3342;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[501]);

        if (unlikely(tmp_ass_subscript_3 == NULL)) {
            tmp_ass_subscript_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[501]);
        }

        if (tmp_ass_subscript_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_3);

            exception_lineno = 3342;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
        Py_DECREF(tmp_ass_subvalue_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3342;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_called_value_200;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        tmp_called_value_200 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[55]);

        if (unlikely(tmp_called_value_200 == NULL)) {
            tmp_called_value_200 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[55]);
        }

        if (tmp_called_value_200 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3343;

            goto frame_exception_exit_1;
        }
        frame_5a65c1f3cd718045aeca683403e1dc91->m_frame.f_lineno = 3343;
        tmp_ass_subvalue_4 = CALL_FUNCTION_NO_ARGS(tstate, tmp_called_value_200);
        if (tmp_ass_subvalue_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3343;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778]);

        if (unlikely(tmp_ass_subscribed_4 == NULL)) {
            tmp_ass_subscribed_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[778]);
        }

        if (tmp_ass_subscribed_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_4);

            exception_lineno = 3343;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_4 = (PyObject *)&PyUnicode_Type;
        tmp_result = SET_SUBSCRIPT(tstate, tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4);
        Py_DECREF(tmp_ass_subvalue_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3343;

            goto frame_exception_exit_1;
        }
    }
    branch_end_189:;
    {
        PyObject *tmp_assign_source_529;
        PyObject *tmp_expression_value_401;
        tmp_expression_value_401 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[778]);

        if (unlikely(tmp_expression_value_401 == NULL)) {
            tmp_expression_value_401 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[778]);
        }

        if (tmp_expression_value_401 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3346;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_529 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_401, mod_consts[3]);
        if (tmp_assign_source_529 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3346;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[394], tmp_assign_source_529);
    }
    {
        PyObject *tmp_assign_source_530;


        tmp_assign_source_530 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__145__resolve_value_to_type();

        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[385], tmp_assign_source_530);
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[771]);

        if (unlikely(tmp_assattr_value_3 == NULL)) {
            tmp_assattr_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[771]);
        }

        if (tmp_assattr_value_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3371;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_3 == NULL)) {
            tmp_assattr_target_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_3 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3371;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_3, mod_consts[771], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3371;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[772]);

        if (unlikely(tmp_assattr_value_4 == NULL)) {
            tmp_assattr_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[772]);
        }

        if (tmp_assattr_value_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3372;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_4 == NULL)) {
            tmp_assattr_target_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_4 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3372;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_4, mod_consts[772], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3372;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[773]);

        if (unlikely(tmp_assattr_value_5 == NULL)) {
            tmp_assattr_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[773]);
        }

        if (tmp_assattr_value_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3373;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_5 == NULL)) {
            tmp_assattr_target_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_5 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3373;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_5, mod_consts[773], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3373;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[381]);

        if (unlikely(tmp_assattr_value_6 == NULL)) {
            tmp_assattr_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[381]);
        }

        if (tmp_assattr_value_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3374;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_6 == NULL)) {
            tmp_assattr_target_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_6 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3374;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_6, mod_consts[381], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3374;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_7;
        PyObject *tmp_assattr_target_7;
        tmp_assattr_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[774]);

        if (unlikely(tmp_assattr_value_7 == NULL)) {
            tmp_assattr_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[774]);
        }

        if (tmp_assattr_value_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3375;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_7 == NULL)) {
            tmp_assattr_target_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_7 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3375;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_7, mod_consts[774], tmp_assattr_value_7);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3375;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[775]);

        if (unlikely(tmp_assattr_value_8 == NULL)) {
            tmp_assattr_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[775]);
        }

        if (tmp_assattr_value_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3376;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_8 == NULL)) {
            tmp_assattr_target_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_8 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3376;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_8, mod_consts[775], tmp_assattr_value_8);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3376;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[468]);

        if (unlikely(tmp_assattr_value_9 == NULL)) {
            tmp_assattr_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[468]);
        }

        if (tmp_assattr_value_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3377;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_9 == NULL)) {
            tmp_assattr_target_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_9 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3377;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_9, mod_consts[780], tmp_assattr_value_9);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3377;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_10;
        PyObject *tmp_assattr_target_10;
        tmp_assattr_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[776]);

        if (unlikely(tmp_assattr_value_10 == NULL)) {
            tmp_assattr_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[776]);
        }

        if (tmp_assattr_value_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3378;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_10 == NULL)) {
            tmp_assattr_target_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_10 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3378;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_10, mod_consts[776], tmp_assattr_value_10);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3378;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_11;
        PyObject *tmp_assattr_target_11;
        tmp_assattr_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[385]);

        if (unlikely(tmp_assattr_value_11 == NULL)) {
            tmp_assattr_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[385]);
        }

        if (tmp_assattr_value_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3379;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[413]);

        if (unlikely(tmp_assattr_target_11 == NULL)) {
            tmp_assattr_target_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[413]);
        }

        if (tmp_assattr_target_11 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3379;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_11, mod_consts[385], tmp_assattr_value_11);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3379;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_12;
        PyObject *tmp_assattr_target_12;
        PyObject *tmp_expression_value_402;
        tmp_assattr_value_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[771]);

        if (unlikely(tmp_assattr_value_12 == NULL)) {
            tmp_assattr_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[771]);
        }

        if (tmp_assattr_value_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3380;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_402 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[436]);

        if (unlikely(tmp_expression_value_402 == NULL)) {
            tmp_expression_value_402 = GET_MODULE_VARIABLE_VALUE_FALLBACK(tstate, mod_consts[436]);
        }

        if (tmp_expression_value_402 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3380;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_12 = LOOKUP_ATTRIBUTE(tstate, tmp_expression_value_402, mod_consts[9]);
        if (tmp_assattr_target_12 == NULL) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3380;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tstate, tmp_assattr_target_12, mod_consts[771], tmp_assattr_value_12);
        Py_DECREF(tmp_assattr_target_12);
        if (tmp_result == false) {
            assert(HAS_ERROR_OCCURRED(tstate));

            FETCH_ERROR_OCCURRED(tstate, &exception_type, &exception_value, &exception_tb);


            exception_lineno = 3380;

            goto frame_exception_exit_1;
        }
    }


    // Put the previous frame back on top.
    popFrameStack(tstate);

    goto frame_no_exception_58;
    frame_exception_exit_1:


    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5a65c1f3cd718045aeca683403e1dc91, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5a65c1f3cd718045aeca683403e1dc91->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5a65c1f3cd718045aeca683403e1dc91, exception_lineno);
    }



    assertFrameObject(frame_5a65c1f3cd718045aeca683403e1dc91);

    // Put the previous frame back on top.
    popFrameStack(tstate);

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_58:;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("sqlalchemy.sql.sqltypes", false);

    Py_INCREF(module_sqlalchemy$sql$sqltypes);
    return module_sqlalchemy$sql$sqltypes;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(tstate, module_name);
        }
    }
#endif
    PGO_onModuleExit("sqlalchemy$sql$sqltypes", false);

    RESTORE_ERROR_OCCURRED(tstate, exception_type, exception_value, exception_tb);
    return NULL;
}
